
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c48  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e60  08005e60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e68  08005e68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e6c  08005e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  08005e7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005e7c  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016dbd  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002db0  00000000  00000000  00036e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00039bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fcc  00000000  00000000  0003b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028458  00000000  00000000  0003c014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bde  00000000  00000000  0006446c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010efef  00000000  00000000  0007e04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005710  00000000  00000000  0018d03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0019274c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e08 	.word	0x08005e08

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005e08 	.word	0x08005e08

08000218 <__aeabi_d2uiz>:
 8000218:	004a      	lsls	r2, r1, #1
 800021a:	d211      	bcs.n	8000240 <__aeabi_d2uiz+0x28>
 800021c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000220:	d211      	bcs.n	8000246 <__aeabi_d2uiz+0x2e>
 8000222:	d50d      	bpl.n	8000240 <__aeabi_d2uiz+0x28>
 8000224:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000228:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800022c:	d40e      	bmi.n	800024c <__aeabi_d2uiz+0x34>
 800022e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000236:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800023a:	fa23 f002 	lsr.w	r0, r3, r2
 800023e:	4770      	bx	lr
 8000240:	f04f 0000 	mov.w	r0, #0
 8000244:	4770      	bx	lr
 8000246:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800024a:	d102      	bne.n	8000252 <__aeabi_d2uiz+0x3a>
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	4770      	bx	lr
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	4770      	bx	lr

08000258 <__aeabi_uldivmod>:
 8000258:	b953      	cbnz	r3, 8000270 <__aeabi_uldivmod+0x18>
 800025a:	b94a      	cbnz	r2, 8000270 <__aeabi_uldivmod+0x18>
 800025c:	2900      	cmp	r1, #0
 800025e:	bf08      	it	eq
 8000260:	2800      	cmpeq	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	f04f 31ff 	movne.w	r1, #4294967295
 8000268:	f04f 30ff 	movne.w	r0, #4294967295
 800026c:	f000 b970 	b.w	8000550 <__aeabi_idiv0>
 8000270:	f1ad 0c08 	sub.w	ip, sp, #8
 8000274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000284:	b004      	add	sp, #16
 8000286:	4770      	bx	lr

08000288 <__udivmoddi4>:
 8000288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800028c:	9e08      	ldr	r6, [sp, #32]
 800028e:	460d      	mov	r5, r1
 8000290:	4604      	mov	r4, r0
 8000292:	460f      	mov	r7, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14a      	bne.n	800032e <__udivmoddi4+0xa6>
 8000298:	428a      	cmp	r2, r1
 800029a:	4694      	mov	ip, r2
 800029c:	d965      	bls.n	800036a <__udivmoddi4+0xe2>
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	b143      	cbz	r3, 80002b6 <__udivmoddi4+0x2e>
 80002a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a8:	f1c3 0220 	rsb	r2, r3, #32
 80002ac:	409f      	lsls	r7, r3
 80002ae:	fa20 f202 	lsr.w	r2, r0, r2
 80002b2:	4317      	orrs	r7, r2
 80002b4:	409c      	lsls	r4, r3
 80002b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ba:	fa1f f58c 	uxth.w	r5, ip
 80002be:	fbb7 f1fe 	udiv	r1, r7, lr
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002cc:	fb01 f005 	mul.w	r0, r1, r5
 80002d0:	4290      	cmp	r0, r2
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x62>
 80002d4:	eb1c 0202 	adds.w	r2, ip, r2
 80002d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002dc:	f080 811c 	bcs.w	8000518 <__udivmoddi4+0x290>
 80002e0:	4290      	cmp	r0, r2
 80002e2:	f240 8119 	bls.w	8000518 <__udivmoddi4+0x290>
 80002e6:	3902      	subs	r1, #2
 80002e8:	4462      	add	r2, ip
 80002ea:	1a12      	subs	r2, r2, r0
 80002ec:	b2a4      	uxth	r4, r4
 80002ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fa:	fb00 f505 	mul.w	r5, r0, r5
 80002fe:	42a5      	cmp	r5, r4
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x90>
 8000302:	eb1c 0404 	adds.w	r4, ip, r4
 8000306:	f100 32ff 	add.w	r2, r0, #4294967295
 800030a:	f080 8107 	bcs.w	800051c <__udivmoddi4+0x294>
 800030e:	42a5      	cmp	r5, r4
 8000310:	f240 8104 	bls.w	800051c <__udivmoddi4+0x294>
 8000314:	4464      	add	r4, ip
 8000316:	3802      	subs	r0, #2
 8000318:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	2100      	movs	r1, #0
 8000320:	b11e      	cbz	r6, 800032a <__udivmoddi4+0xa2>
 8000322:	40dc      	lsrs	r4, r3
 8000324:	2300      	movs	r3, #0
 8000326:	e9c6 4300 	strd	r4, r3, [r6]
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	428b      	cmp	r3, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000332:	2e00      	cmp	r6, #0
 8000334:	f000 80ed 	beq.w	8000512 <__udivmoddi4+0x28a>
 8000338:	2100      	movs	r1, #0
 800033a:	e9c6 0500 	strd	r0, r5, [r6]
 800033e:	4608      	mov	r0, r1
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	fab3 f183 	clz	r1, r3
 8000348:	2900      	cmp	r1, #0
 800034a:	d149      	bne.n	80003e0 <__udivmoddi4+0x158>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d302      	bcc.n	8000356 <__udivmoddi4+0xce>
 8000350:	4282      	cmp	r2, r0
 8000352:	f200 80f8 	bhi.w	8000546 <__udivmoddi4+0x2be>
 8000356:	1a84      	subs	r4, r0, r2
 8000358:	eb65 0203 	sbc.w	r2, r5, r3
 800035c:	2001      	movs	r0, #1
 800035e:	4617      	mov	r7, r2
 8000360:	2e00      	cmp	r6, #0
 8000362:	d0e2      	beq.n	800032a <__udivmoddi4+0xa2>
 8000364:	e9c6 4700 	strd	r4, r7, [r6]
 8000368:	e7df      	b.n	800032a <__udivmoddi4+0xa2>
 800036a:	b902      	cbnz	r2, 800036e <__udivmoddi4+0xe6>
 800036c:	deff      	udf	#255	; 0xff
 800036e:	fab2 f382 	clz	r3, r2
 8000372:	2b00      	cmp	r3, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x210>
 8000378:	1a8a      	subs	r2, r1, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2101      	movs	r1, #1
 8000384:	fbb2 f5f7 	udiv	r5, r2, r7
 8000388:	fb07 2015 	mls	r0, r7, r5, r2
 800038c:	0c22      	lsrs	r2, r4, #16
 800038e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000392:	fb0e f005 	mul.w	r0, lr, r5
 8000396:	4290      	cmp	r0, r2
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x124>
 800039a:	eb1c 0202 	adds.w	r2, ip, r2
 800039e:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x122>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2b8>
 80003aa:	4645      	mov	r5, r8
 80003ac:	1a12      	subs	r2, r2, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b4:	fb07 2210 	mls	r2, r7, r0, r2
 80003b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x14e>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x14c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2c2>
 80003d4:	4610      	mov	r0, r2
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003de:	e79f      	b.n	8000320 <__udivmoddi4+0x98>
 80003e0:	f1c1 0720 	rsb	r7, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa05 f401 	lsl.w	r4, r5, r1
 80003f2:	fa20 f307 	lsr.w	r3, r0, r7
 80003f6:	40fd      	lsrs	r5, r7
 80003f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	fb09 5518 	mls	r5, r9, r8, r5
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000410:	fb08 f50e 	mul.w	r5, r8, lr
 8000414:	42a5      	cmp	r5, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	fa00 f001 	lsl.w	r0, r0, r1
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b0>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2b4>
 800042c:	42a5      	cmp	r5, r4
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2b4>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4464      	add	r4, ip
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	b29d      	uxth	r5, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000448:	fb03 fe0e 	mul.w	lr, r3, lr
 800044c:	45a6      	cmp	lr, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1da>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f103 35ff 	add.w	r5, r3, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2ac>
 800045a:	45a6      	cmp	lr, r4
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2ac>
 800045e:	3b02      	subs	r3, #2
 8000460:	4464      	add	r4, ip
 8000462:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000466:	fba3 9502 	umull	r9, r5, r3, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	42ac      	cmp	r4, r5
 8000470:	46c8      	mov	r8, r9
 8000472:	46ae      	mov	lr, r5
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x29c>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x298>
 8000478:	b156      	cbz	r6, 8000490 <__udivmoddi4+0x208>
 800047a:	ebb0 0208 	subs.w	r2, r0, r8
 800047e:	eb64 040e 	sbc.w	r4, r4, lr
 8000482:	fa04 f707 	lsl.w	r7, r4, r7
 8000486:	40ca      	lsrs	r2, r1
 8000488:	40cc      	lsrs	r4, r1
 800048a:	4317      	orrs	r7, r2
 800048c:	e9c6 7400 	strd	r7, r4, [r6]
 8000490:	4618      	mov	r0, r3
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	f1c3 0120 	rsb	r1, r3, #32
 800049c:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a0:	fa20 f201 	lsr.w	r2, r0, r1
 80004a4:	fa25 f101 	lsr.w	r1, r5, r1
 80004a8:	409d      	lsls	r5, r3
 80004aa:	432a      	orrs	r2, r5
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b8:	fb07 1510 	mls	r5, r7, r0, r1
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004c2:	fb00 f50e 	mul.w	r5, r0, lr
 80004c6:	428d      	cmp	r5, r1
 80004c8:	fa04 f403 	lsl.w	r4, r4, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x258>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b0>
 80004d8:	428d      	cmp	r5, r1
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b0>
 80004dc:	3802      	subs	r0, #2
 80004de:	4461      	add	r1, ip
 80004e0:	1b49      	subs	r1, r1, r5
 80004e2:	b292      	uxth	r2, r2
 80004e4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f0:	fb05 f10e 	mul.w	r1, r5, lr
 80004f4:	4291      	cmp	r1, r2
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x282>
 80004f8:	eb1c 0202 	adds.w	r2, ip, r2
 80004fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2a8>
 8000502:	4291      	cmp	r1, r2
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2a8>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	1a52      	subs	r2, r2, r1
 800050c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0xfc>
 8000512:	4631      	mov	r1, r6
 8000514:	4630      	mov	r0, r6
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xa2>
 8000518:	4639      	mov	r1, r7
 800051a:	e6e6      	b.n	80002ea <__udivmoddi4+0x62>
 800051c:	4610      	mov	r0, r2
 800051e:	e6fb      	b.n	8000318 <__udivmoddi4+0x90>
 8000520:	4548      	cmp	r0, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f0>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb65 0e0c 	sbc.w	lr, r5, ip
 800052c:	3b01      	subs	r3, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f0>
 8000530:	4645      	mov	r5, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x282>
 8000534:	462b      	mov	r3, r5
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1da>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x258>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b0>
 8000540:	3d02      	subs	r5, #2
 8000542:	4462      	add	r2, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x124>
 8000546:	4608      	mov	r0, r1
 8000548:	e70a      	b.n	8000360 <__udivmoddi4+0xd8>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x14e>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08c      	sub	sp, #48	; 0x30
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2220      	movs	r2, #32
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f005 fc1f 	bl	8005db0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000572:	4b32      	ldr	r3, [pc, #200]	; (800063c <MX_ADC1_Init+0xe8>)
 8000574:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <MX_ADC1_Init+0xe8>)
 800057c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000580:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000588:	4b2c      	ldr	r3, [pc, #176]	; (800063c <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_ADC1_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <MX_ADC1_Init+0xe8>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_ADC1_Init+0xe8>)
 800059c:	2204      	movs	r2, #4
 800059e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <MX_ADC1_Init+0xe8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_ADC1_Init+0xe8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_ADC1_Init+0xe8>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_ADC1_Init+0xe8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <MX_ADC1_Init+0xe8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_ADC1_Init+0xe8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0xe8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_ADC1_Init+0xe8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005dc:	4817      	ldr	r0, [pc, #92]	; (800063c <MX_ADC1_Init+0xe8>)
 80005de:	f001 f921 	bl	8001824 <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005e8:	f000 fbd9 	bl	8000d9e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f4:	4619      	mov	r1, r3
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <MX_ADC1_Init+0xe8>)
 80005f8:	f001 ff36 	bl	8002468 <HAL_ADCEx_MultiModeConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000602:	f000 fbcc 	bl	8000d9e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_ADC1_Init+0xec>)
 8000608:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060a:	2306      	movs	r3, #6
 800060c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_ADC1_Init+0xf0>)
 8000614:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000616:	2304      	movs	r3, #4
 8000618:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <MX_ADC1_Init+0xe8>)
 8000624:	f001 faba 	bl	8001b9c <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800062e:	f000 fbb6 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	3730      	adds	r7, #48	; 0x30
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028
 8000640:	04300002 	.word	0x04300002
 8000644:	407f0000 	.word	0x407f0000

08000648 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064e:	463b      	mov	r3, r7
 8000650:	2220      	movs	r2, #32
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f005 fbab 	bl	8005db0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <MX_ADC2_Init+0xc0>)
 800065c:	4a2b      	ldr	r2, [pc, #172]	; (800070c <MX_ADC2_Init+0xc4>)
 800065e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <MX_ADC2_Init+0xc0>)
 8000662:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000666:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <MX_ADC2_Init+0xc0>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b26      	ldr	r3, [pc, #152]	; (8000708 <MX_ADC2_Init+0xc0>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <MX_ADC2_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_ADC2_Init+0xc0>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_ADC2_Init+0xc0>)
 8000682:	2204      	movs	r2, #4
 8000684:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_ADC2_Init+0xc0>)
 8000688:	2200      	movs	r2, #0
 800068a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_ADC2_Init+0xc0>)
 800068e:	2200      	movs	r2, #0
 8000690:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_ADC2_Init+0xc0>)
 8000694:	2201      	movs	r2, #1
 8000696:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_ADC2_Init+0xc0>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_ADC2_Init+0xc0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_ADC2_Init+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_ADC2_Init+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_ADC2_Init+0xc0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_ADC2_Init+0xc0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_ADC2_Init+0xc0>)
 80006c4:	f001 f8ae 	bl	8001824 <HAL_ADC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80006ce:	f000 fb66 	bl	8000d9e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_ADC2_Init+0xc8>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d6:	2306      	movs	r3, #6
 80006d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_ADC2_Init+0xcc>)
 80006e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e2:	2304      	movs	r3, #4
 80006e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <MX_ADC2_Init+0xc0>)
 80006f0:	f001 fa54 	bl	8001b9c <HAL_ADC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006fa:	f000 fb50 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	3720      	adds	r7, #32
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000094 	.word	0x20000094
 800070c:	50000100 	.word	0x50000100
 8000710:	0c900008 	.word	0x0c900008
 8000714:	407f0000 	.word	0x407f0000

08000718 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2220      	movs	r2, #32
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f005 fb3d 	bl	8005db0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000738:	4a31      	ldr	r2, [pc, #196]	; (8000800 <MX_ADC3_Init+0xe8>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_ADC3_Init+0xe4>)
 800073e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000742:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_ADC3_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_ADC3_Init+0xe4>)
 800075e:	2204      	movs	r2, #4
 8000760:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000764:	2200      	movs	r2, #0
 8000766:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_ADC3_Init+0xe4>)
 800076a:	2200      	movs	r2, #0
 800076c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000770:	2201      	movs	r2, #1
 8000772:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC3_Init+0xe4>)
 800077e:	2200      	movs	r2, #0
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000784:	2200      	movs	r2, #0
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC3_Init+0xe4>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000792:	2200      	movs	r2, #0
 8000794:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC3_Init+0xe4>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800079e:	4817      	ldr	r0, [pc, #92]	; (80007fc <MX_ADC3_Init+0xe4>)
 80007a0:	f001 f840 	bl	8001824 <HAL_ADC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80007aa:	f000 faf8 	bl	8000d9e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <MX_ADC3_Init+0xe4>)
 80007ba:	f001 fe55 	bl	8002468 <HAL_ADCEx_MultiModeConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80007c4:	f000 faeb 	bl	8000d9e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_ADC3_Init+0xec>)
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007cc:	2306      	movs	r3, #6
 80007ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d4:	237f      	movs	r3, #127	; 0x7f
 80007d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d8:	2304      	movs	r3, #4
 80007da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_ADC3_Init+0xe4>)
 80007e6:	f001 f9d9 	bl	8001b9c <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80007f0:	f000 fad5 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000100 	.word	0x20000100
 8000800:	50000400 	.word	0x50000400
 8000804:	14f00020 	.word	0x14f00020

08000808 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0a2      	sub	sp, #136	; 0x88
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	2254      	movs	r2, #84	; 0x54
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f005 fac1 	bl	8005db0 <memset>
  if(adcHandle->Instance==ADC1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000836:	d13e      	bne.n	80008b6 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800083e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000842:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f002 ffc5 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000854:	f000 faa3 	bl	8000d9e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000858:	4b58      	ldr	r3, [pc, #352]	; (80009bc <HAL_ADC_MspInit+0x1b4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	4a57      	ldr	r2, [pc, #348]	; (80009bc <HAL_ADC_MspInit+0x1b4>)
 8000860:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000862:	4b56      	ldr	r3, [pc, #344]	; (80009bc <HAL_ADC_MspInit+0x1b4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d10b      	bne.n	8000882 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800086a:	4b55      	ldr	r3, [pc, #340]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a54      	ldr	r2, [pc, #336]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b52      	ldr	r3, [pc, #328]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b4f      	ldr	r3, [pc, #316]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a4e      	ldr	r2, [pc, #312]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b4c      	ldr	r3, [pc, #304]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin|DISTANCE_IR_FRONTAL_Pin;
 800089a:	2303      	movs	r3, #3
 800089c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089e:	2303      	movs	r3, #3
 80008a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f001 fff2 	bl	8002898 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80008b4:	e07d      	b.n	80009b2 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a42      	ldr	r2, [pc, #264]	; (80009c4 <HAL_ADC_MspInit+0x1bc>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d13e      	bne.n	800093e <HAL_ADC_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008ca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 ff81 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80008dc:	f000 fa5f 	bl	8000d9e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <HAL_ADC_MspInit+0x1b4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a35      	ldr	r2, [pc, #212]	; (80009bc <HAL_ADC_MspInit+0x1b4>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <HAL_ADC_MspInit+0x1b4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a32      	ldr	r2, [pc, #200]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a2c      	ldr	r2, [pc, #176]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000922:	23c0      	movs	r3, #192	; 0xc0
 8000924:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f001 ffae 	bl	8002898 <HAL_GPIO_Init>
}
 800093c:	e039      	b.n	80009b2 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC3)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <HAL_ADC_MspInit+0x1c0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d134      	bne.n	80009b2 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800094e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	4618      	mov	r0, r3
 800095a:	f002 ff3d 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8000964:	f000 fa1b 	bl	8000d9e <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 800096e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_ADC_MspInit+0x1b8>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099e:	2303      	movs	r3, #3
 80009a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <HAL_ADC_MspInit+0x1c4>)
 80009ae:	f001 ff73 	bl	8002898 <HAL_GPIO_Init>
}
 80009b2:	bf00      	nop
 80009b4:	3788      	adds	r7, #136	; 0x88
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000016c 	.word	0x2000016c
 80009c0:	40021000 	.word	0x40021000
 80009c4:	50000100 	.word	0x50000100
 80009c8:	50000400 	.word	0x50000400
 80009cc:	48000400 	.word	0x48000400

080009d0 <MX_GPIO_Init>:
     PC12   ------> SPI3_MOSI
     PB4   ------> S_TIM16_CH1
     PB5   ------> S_TIM17_CH1
*/
void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b96      	ldr	r3, [pc, #600]	; (8000c40 <MX_GPIO_Init+0x270>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a95      	ldr	r2, [pc, #596]	; (8000c40 <MX_GPIO_Init+0x270>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b93      	ldr	r3, [pc, #588]	; (8000c40 <MX_GPIO_Init+0x270>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	4b90      	ldr	r3, [pc, #576]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a8f      	ldr	r2, [pc, #572]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b8d      	ldr	r3, [pc, #564]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0320 	and.w	r3, r3, #32
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b8a      	ldr	r3, [pc, #552]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a89      	ldr	r2, [pc, #548]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b87      	ldr	r3, [pc, #540]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b84      	ldr	r3, [pc, #528]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a83      	ldr	r2, [pc, #524]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b81      	ldr	r3, [pc, #516]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b7e      	ldr	r3, [pc, #504]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a7d      	ldr	r2, [pc, #500]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b7b      	ldr	r3, [pc, #492]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f002 f898 	bl	8002b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8000a72:	4874      	ldr	r0, [pc, #464]	; (8000c44 <MX_GPIO_Init+0x274>)
 8000a74:	f002 f892 	bl	8002b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 8000a78:	f242 33a0 	movw	r3, #9120	; 0x23a0
 8000a7c:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	486e      	ldr	r0, [pc, #440]	; (8000c48 <MX_GPIO_Init+0x278>)
 8000a90:	f001 ff02 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8000a94:	2310      	movs	r3, #16
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f001 fef1 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8000ab6:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f001 fee1 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4854      	ldr	r0, [pc, #336]	; (8000c44 <MX_GPIO_Init+0x274>)
 8000af2:	f001 fed1 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8000af6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	484c      	ldr	r0, [pc, #304]	; (8000c44 <MX_GPIO_Init+0x274>)
 8000b14:	f001 fec0 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 8000b18:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4844      	ldr	r0, [pc, #272]	; (8000c44 <MX_GPIO_Init+0x274>)
 8000b32:	f001 feb1 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	483e      	ldr	r0, [pc, #248]	; (8000c44 <MX_GPIO_Init+0x274>)
 8000b4c:	f001 fea4 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f001 fe96 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8000b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f001 fe84 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_SPI_SCK_Pin|IMU_SPI_MISO_Pin|IMU_SPI_MOSI_Pin;
 8000b90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4826      	ldr	r0, [pc, #152]	; (8000c48 <MX_GPIO_Init+0x278>)
 8000bae:	f001 fe73 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4821      	ldr	r0, [pc, #132]	; (8000c4c <MX_GPIO_Init+0x27c>)
 8000bc8:	f001 fe66 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	; (8000c44 <MX_GPIO_Init+0x274>)
 8000be8:	f001 fe56 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8000bec:	2320      	movs	r3, #32
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	480f      	ldr	r0, [pc, #60]	; (8000c44 <MX_GPIO_Init+0x274>)
 8000c08:	f001 fe46 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8000c0c:	2340      	movs	r3, #64	; 0x40
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <MX_GPIO_Init+0x274>)
 8000c22:	f001 fe39 	bl	8002898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2028      	movs	r0, #40	; 0x28
 8000c2c:	f001 fdff 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c30:	2028      	movs	r0, #40	; 0x28
 8000c32:	f001 fe16 	bl	8002862 <HAL_NVIC_EnableIRQ>

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	48000c00 	.word	0x48000c00

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fb7d 	bl	8001352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f856 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f7ff feb8 	bl	80009d0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000c60:	f000 faac 	bl	80011bc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000c64:	f7ff fc76 	bl	8000554 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c68:	f7ff fcee 	bl	8000648 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000c6c:	f7ff fd54 	bl	8000718 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000c70:	f000 f990 	bl	8000f94 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  vPowerTrainSystemInit();
 8000c74:	f000 f898 	bl	8000da8 <vPowerTrainSystemInit>
	  HAL_Delay(3000);
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,1000);
	  HAL_Delay(3000);
	  */
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f8a6 	bl	8000dcc <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR, COUNTER_CLOCKWISE);
 8000c80:	2101      	movs	r1, #1
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 f8a2 	bl	8000dcc <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,1000);
 8000c88:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000cf0 <main+0xa0>
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f8f3 	bl	8000e78 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 500);
 8000c92:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000cf8 <main+0xa8>
 8000c96:	2001      	movs	r0, #1
 8000c98:	f000 f8ee 	bl	8000e78 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(3000);
 8000c9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ca0:	f000 fbc8 	bl	8001434 <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,0);
 8000ca4:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8000d00 <main+0xb0>
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f8e5 	bl	8000e78 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 8000cae:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000d00 <main+0xb0>
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 f8e0 	bl	8000e78 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(1000);
 8000cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cbc:	f000 fbba 	bl	8001434 <HAL_Delay>

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, COUNTER_CLOCKWISE);
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f882 	bl	8000dcc <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR, CLOCKWISE);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 f87e 	bl	8000dcc <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,1000);
 8000cd0:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8000cf0 <main+0xa0>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 f8cf 	bl	8000e78 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 500);
 8000cda:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8000cf8 <main+0xa8>
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 f8ca 	bl	8000e78 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(3000);
 8000ce4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ce8:	f000 fba4 	bl	8001434 <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8000cec:	e7c4      	b.n	8000c78 <main+0x28>
 8000cee:	bf00      	nop
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	408f4000 	.word	0x408f4000
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	407f4000 	.word	0x407f4000
	...

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	2238      	movs	r2, #56	; 0x38
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 f84a 	bl	8005db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f001 ff72 	bl	8002c14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d42:	2302      	movs	r3, #2
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d4a:	2355      	movs	r3, #85	; 0x55
 8000d4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f80c 	bl	8002d7c <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d6a:	f000 f818 	bl	8000d9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2303      	movs	r3, #3
 8000d74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2104      	movs	r1, #4
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fb0a 	bl	80033a0 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d92:	f000 f804 	bl	8000d9e <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3750      	adds	r7, #80	; 0x50
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da2:	b672      	cpsid	i
}
 8000da4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <Error_Handler+0x8>

08000da8 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <vPowerTrainSystemInit+0x20>)
 8000dae:	f002 ffb9 	bl	8003d24 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 8000db2:	2100      	movs	r1, #0
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <vPowerTrainSystemInit+0x20>)
 8000db6:	f003 f887 	bl	8003ec8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <vPowerTrainSystemInit+0x20>)
 8000dbe:	f003 f883 	bl	8003ec8 <HAL_TIM_PWM_Start>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000170 	.word	0x20000170

08000dcc <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <vPowerTrainSystemSetMotorDirection+0x1c>
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d01f      	beq.n	8000e26 <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000de6:	e040      	b.n	8000e6a <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10b      	bne.n	8000e06 <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df4:	481f      	ldr	r0, [pc, #124]	; (8000e74 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000df6:	f001 fed1 	bl	8002b9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e00:	481c      	ldr	r0, [pc, #112]	; (8000e74 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e02:	f001 fecb 	bl	8002b9c <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d12b      	bne.n	8000e64 <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e12:	4818      	ldr	r0, [pc, #96]	; (8000e74 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e14:	f001 fec2 	bl	8002b9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1e:	4815      	ldr	r0, [pc, #84]	; (8000e74 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e20:	f001 febc 	bl	8002b9c <HAL_GPIO_WritePin>
			} break;
 8000e24:	e01e      	b.n	8000e64 <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10b      	bne.n	8000e44 <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4810      	ldr	r0, [pc, #64]	; (8000e74 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e32:	f001 feb3 	bl	8002b9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f001 feac 	bl	8002b9c <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d10e      	bne.n	8000e68 <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e50:	f001 fea4 	bl	8002b9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f001 fe9d 	bl	8002b9c <HAL_GPIO_WritePin>
			} break;
 8000e62:	e001      	b.n	8000e68 <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000e68:	bf00      	nop
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	48000400 	.word	0x48000400

08000e78 <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	ed87 0b00 	vstr	d0, [r7]
 8000e84:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <vPowerTrainSystemSetMotorSpeed+0x1a>
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d009      	beq.n	8000ea4 <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 8000e90:	e011      	b.n	8000eb6 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000e94:	681c      	ldr	r4, [r3, #0]
 8000e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e9a:	f7ff f9bd 	bl	8000218 <__aeabi_d2uiz>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 8000ea2:	e008      	b.n	8000eb6 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000ea6:	681c      	ldr	r4, [r3, #0]
 8000ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eac:	f7ff f9b4 	bl	8000218 <__aeabi_d2uiz>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
 8000eb4:	bf00      	nop
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000170 	.word	0x20000170

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000efa:	f001 ff2f 	bl	8002d5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 fa4e 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f68:	f001 fe30 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09c      	sub	sp, #112	; 0x70
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2234      	movs	r2, #52	; 0x34
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 feee 	bl	8005db0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <MX_TIM1_Init+0x170>)
 8000fd6:	4a4c      	ldr	r2, [pc, #304]	; (8001108 <MX_TIM1_Init+0x174>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000fda:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <MX_TIM1_Init+0x170>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b48      	ldr	r3, [pc, #288]	; (8001104 <MX_TIM1_Init+0x170>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000fe6:	4b47      	ldr	r3, [pc, #284]	; (8001104 <MX_TIM1_Init+0x170>)
 8000fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b45      	ldr	r3, [pc, #276]	; (8001104 <MX_TIM1_Init+0x170>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff4:	4b43      	ldr	r3, [pc, #268]	; (8001104 <MX_TIM1_Init+0x170>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	; (8001104 <MX_TIM1_Init+0x170>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001000:	4840      	ldr	r0, [pc, #256]	; (8001104 <MX_TIM1_Init+0x170>)
 8001002:	f002 fe37 	bl	8003c74 <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800100c:	f7ff fec7 	bl	8000d9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001016:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800101a:	4619      	mov	r1, r3
 800101c:	4839      	ldr	r0, [pc, #228]	; (8001104 <MX_TIM1_Init+0x170>)
 800101e:	f003 f979 	bl	8004314 <HAL_TIM_ConfigClockSource>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001028:	f7ff feb9 	bl	8000d9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800102c:	4835      	ldr	r0, [pc, #212]	; (8001104 <MX_TIM1_Init+0x170>)
 800102e:	f002 fee9 	bl	8003e04 <HAL_TIM_PWM_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001038:	f7ff feb1 	bl	8000d9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001048:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800104c:	4619      	mov	r1, r3
 800104e:	482d      	ldr	r0, [pc, #180]	; (8001104 <MX_TIM1_Init+0x170>)
 8001050:	f003 ff16 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800105a:	f7ff fea0 	bl	8000d9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2360      	movs	r3, #96	; 0x60
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800107e:	2200      	movs	r2, #0
 8001080:	4619      	mov	r1, r3
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <MX_TIM1_Init+0x170>)
 8001084:	f003 f832 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800108e:	f7ff fe86 	bl	8000d9e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001096:	2204      	movs	r2, #4
 8001098:	4619      	mov	r1, r3
 800109a:	481a      	ldr	r0, [pc, #104]	; (8001104 <MX_TIM1_Init+0x170>)
 800109c:	f003 f826 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010a6:	f7ff fe7a 	bl	8000d9e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <MX_TIM1_Init+0x170>)
 80010e8:	f003 ff60 	bl	8004fac <HAL_TIMEx_ConfigBreakDeadTime>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80010f2:	f7ff fe54 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <MX_TIM1_Init+0x170>)
 80010f8:	f000 f828 	bl	800114c <HAL_TIM_MspPostInit>

}
 80010fc:	bf00      	nop
 80010fe:	3770      	adds	r7, #112	; 0x70
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000170 	.word	0x20000170
 8001108:	40012c00 	.word	0x40012c00

0800110c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_TIM_Base_MspInit+0x38>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10b      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_TIM_Base_MspInit+0x3c>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_TIM_Base_MspInit+0x3c>)
 8001124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001128:	6613      	str	r3, [r2, #96]	; 0x60
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_TIM_Base_MspInit+0x3c>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40012c00 	.word	0x40012c00
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_TIM_MspPostInit+0x64>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d11b      	bne.n	80011a6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_TIM_MspPostInit+0x68>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_TIM_MspPostInit+0x68>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_TIM_MspPostInit+0x68>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001186:	2303      	movs	r3, #3
 8001188:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001196:	2302      	movs	r3, #2
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_TIM_MspPostInit+0x6c>)
 80011a2:	f001 fb79 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40012c00 	.word	0x40012c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000800 	.word	0x48000800

080011bc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011c2:	4a22      	ldr	r2, [pc, #136]	; (800124c <MX_LPUART1_UART_Init+0x90>)
 80011c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011fe:	4812      	ldr	r0, [pc, #72]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 8001200:	f003 ff68 	bl	80050d4 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800120a:	f7ff fdc8 	bl	8000d9e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 8001212:	f004 fd03 	bl	8005c1c <HAL_UARTEx_SetTxFifoThreshold>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800121c:	f7ff fdbf 	bl	8000d9e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 8001224:	f004 fd38 	bl	8005c98 <HAL_UARTEx_SetRxFifoThreshold>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800122e:	f7ff fdb6 	bl	8000d9e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_LPUART1_UART_Init+0x8c>)
 8001234:	f004 fcb9 	bl	8005baa <HAL_UARTEx_DisableFifoMode>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800123e:	f7ff fdae 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200001bc 	.word	0x200001bc
 800124c:	40008000 	.word	0x40008000

08001250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b09e      	sub	sp, #120	; 0x78
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2254      	movs	r2, #84	; 0x54
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fd9d 	bl	8005db0 <memset>
  if(uartHandle->Instance==LPUART1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_UART_MspInit+0xa8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d136      	bne.n	80012ee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001280:	2320      	movs	r3, #32
 8001282:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4618      	mov	r0, r3
 800128e:	f002 faa3 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001298:	f7ff fd81 	bl	8000d9e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_MspInit+0xac>)
 800129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a0:	4a16      	ldr	r2, [pc, #88]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80012cc:	230c      	movs	r3, #12
 80012ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80012dc:	230c      	movs	r3, #12
 80012de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f001 fad5 	bl	8002898 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3778      	adds	r7, #120	; 0x78
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40008000 	.word	0x40008000
 80012fc:	40021000 	.word	0x40021000

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001302:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff fe34 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f004 fd47 	bl	8005dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff fc8d 	bl	8000c50 <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   r0, =_estack
 8001338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001344:	08005e70 	.word	0x08005e70
  ldr r2, =_sbss
 8001348:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800134c:	20000254 	.word	0x20000254

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>

08001352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f001 fa5b 	bl	8002818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f80e 	bl	8001384 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff fda6 	bl	8000ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]

}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_InitTick+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d022      	beq.n	80013de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_InitTick+0x6c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0x68>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fa66 	bl	800287e <HAL_SYSTICK_Config>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10f      	bne.n	80013d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d809      	bhi.n	80013d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013be:	2200      	movs	r2, #0
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	f001 fa32 	bl	800282e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_InitTick+0x70>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e004      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4413      	add	r3, r2
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x1c>)
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	20000250 	.word	0x20000250
 8001418:	20000008 	.word	0x20000008

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000250 	.word	0x20000250

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d004      	beq.n	8001458 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_Delay+0x40>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001458:	bf00      	nop
 800145a:	f7ff ffdf 	bl	800141c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	429a      	cmp	r2, r3
 8001468:	d8f7      	bhi.n	800145a <HAL_Delay+0x26>
  {
  }
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000008 	.word	0x20000008

08001478 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3360      	adds	r3, #96	; 0x60
 80014f2:	461a      	mov	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <LL_ADC_SetOffset+0x44>)
 8001502:	4013      	ands	r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	4313      	orrs	r3, r2
 8001510:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	03fff000 	.word	0x03fff000

08001528 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3360      	adds	r3, #96	; 0x60
 8001536:	461a      	mov	r2, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3360      	adds	r3, #96	; 0x60
 8001564:	461a      	mov	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800158a:	b480      	push	{r7}
 800158c:	b087      	sub	sp, #28
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3360      	adds	r3, #96	; 0x60
 800159a:	461a      	mov	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3360      	adds	r3, #96	; 0x60
 80015d0:	461a      	mov	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	615a      	str	r2, [r3, #20]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3330      	adds	r3, #48	; 0x30
 800162c:	461a      	mov	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	4413      	add	r3, r2
 800163a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	211f      	movs	r1, #31
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	401a      	ands	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	0e9b      	lsrs	r3, r3, #26
 8001654:	f003 011f 	and.w	r1, r3, #31
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	431a      	orrs	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001668:	bf00      	nop
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3314      	adds	r3, #20
 8001684:	461a      	mov	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	0e5b      	lsrs	r3, r3, #25
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0d1b      	lsrs	r3, r3, #20
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	2107      	movs	r1, #7
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	401a      	ands	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0d1b      	lsrs	r3, r3, #20
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0318 	and.w	r3, r3, #24
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016f0:	40d9      	lsrs	r1, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	400b      	ands	r3, r1
 80016f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fa:	431a      	orrs	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	0007ffff 	.word	0x0007ffff

08001714 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001724:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6093      	str	r3, [r2, #8]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800174c:	d101      	bne.n	8001752 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001774:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800179c:	d101      	bne.n	80017a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <LL_ADC_IsEnabled+0x18>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <LL_ADC_IsEnabled+0x1a>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d101      	bne.n	80017ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b08      	cmp	r3, #8
 800180e:	d101      	bne.n	8001814 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1a9      	b.n	8001b92 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7fe ffdb 	bl	8000808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff67 	bl	8001738 <LL_ADC_IsDeepPowerDownEnabled>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff4d 	bl	8001714 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff82 	bl	8001788 <LL_ADC_IsInternalRegulatorEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff66 	bl	8001760 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001894:	4b9c      	ldr	r3, [pc, #624]	; (8001b08 <HAL_ADC_Init+0x2e4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	4a9c      	ldr	r2, [pc, #624]	; (8001b0c <HAL_ADC_Init+0x2e8>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	3301      	adds	r3, #1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff64 	bl	8001788 <LL_ADC_IsInternalRegulatorEnabled>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	f043 0210 	orr.w	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff75 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 80018ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 8142 	bne.w	8001b80 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 813e 	bne.w	8001b80 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff49 	bl	80017b0 <LL_ADC_IsEnabled>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d141      	bne.n	80019a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800192c:	d004      	beq.n	8001938 <HAL_ADC_Init+0x114>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a77      	ldr	r2, [pc, #476]	; (8001b10 <HAL_ADC_Init+0x2ec>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d10f      	bne.n	8001958 <HAL_ADC_Init+0x134>
 8001938:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800193c:	f7ff ff38 	bl	80017b0 <LL_ADC_IsEnabled>
 8001940:	4604      	mov	r4, r0
 8001942:	4873      	ldr	r0, [pc, #460]	; (8001b10 <HAL_ADC_Init+0x2ec>)
 8001944:	f7ff ff34 	bl	80017b0 <LL_ADC_IsEnabled>
 8001948:	4603      	mov	r3, r0
 800194a:	4323      	orrs	r3, r4
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e012      	b.n	800197e <HAL_ADC_Init+0x15a>
 8001958:	486e      	ldr	r0, [pc, #440]	; (8001b14 <HAL_ADC_Init+0x2f0>)
 800195a:	f7ff ff29 	bl	80017b0 <LL_ADC_IsEnabled>
 800195e:	4604      	mov	r4, r0
 8001960:	486d      	ldr	r0, [pc, #436]	; (8001b18 <HAL_ADC_Init+0x2f4>)
 8001962:	f7ff ff25 	bl	80017b0 <LL_ADC_IsEnabled>
 8001966:	4603      	mov	r3, r0
 8001968:	431c      	orrs	r4, r3
 800196a:	486c      	ldr	r0, [pc, #432]	; (8001b1c <HAL_ADC_Init+0x2f8>)
 800196c:	f7ff ff20 	bl	80017b0 <LL_ADC_IsEnabled>
 8001970:	4603      	mov	r3, r0
 8001972:	4323      	orrs	r3, r4
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d012      	beq.n	80019a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800198a:	d004      	beq.n	8001996 <HAL_ADC_Init+0x172>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a5f      	ldr	r2, [pc, #380]	; (8001b10 <HAL_ADC_Init+0x2ec>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_ADC_Init+0x176>
 8001996:	4a62      	ldr	r2, [pc, #392]	; (8001b20 <HAL_ADC_Init+0x2fc>)
 8001998:	e000      	b.n	800199c <HAL_ADC_Init+0x178>
 800199a:	4a62      	ldr	r2, [pc, #392]	; (8001b24 <HAL_ADC_Init+0x300>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f7ff fd68 	bl	8001478 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7f5b      	ldrb	r3, [r3, #29]
 80019ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d106      	bne.n	80019e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	3b01      	subs	r3, #1
 80019dc:	045b      	lsls	r3, r3, #17
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d009      	beq.n	8001a00 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <HAL_ADC_Init+0x304>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fee4 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 8001a34:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d17f      	bne.n	8001b3c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d17c      	bne.n	8001b3c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a46:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a5e:	f023 0302 	bic.w	r3, r3, #2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	69b9      	ldr	r1, [r7, #24]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d017      	beq.n	8001aa4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6911      	ldr	r1, [r2, #16]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001aa2:	e013      	b.n	8001acc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ab2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d12a      	bne.n	8001b2c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001af2:	4311      	orrs	r1, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001af8:	430a      	orrs	r2, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	e019      	b.n	8001b3c <HAL_ADC_Init+0x318>
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	053e2d63 	.word	0x053e2d63
 8001b10:	50000100 	.word	0x50000100
 8001b14:	50000400 	.word	0x50000400
 8001b18:	50000500 	.word	0x50000500
 8001b1c:	50000600 	.word	0x50000600
 8001b20:	50000300 	.word	0x50000300
 8001b24:	50000700 	.word	0x50000700
 8001b28:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10c      	bne.n	8001b5e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f023 010f 	bic.w	r1, r3, #15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	1e5a      	subs	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5c:	e007      	b.n	8001b6e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 020f 	bic.w	r2, r2, #15
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b7e:	e007      	b.n	8001b90 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	f043 0210 	orr.w	r2, r3, #16
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}
 8001b9a:	bf00      	nop

08001b9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0b6      	sub	sp, #216	; 0xd8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x24>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f000 bc13 	b.w	80023e6 <HAL_ADC_ConfigChannel+0x84a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe02 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 83f3 	bne.w	80023c0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6859      	ldr	r1, [r3, #4]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	f7ff fd18 	bl	800161c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fdf0 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001bf6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fdfc 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 8001c04:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f040 81d9 	bne.w	8001fc4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 81d4 	bne.w	8001fc4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c24:	d10f      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7ff fd1f 	bl	8001674 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fcd9 	bl	80015f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c44:	e00e      	b.n	8001c64 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f7ff fd0e 	bl	8001674 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fcc9 	bl	80015f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	08db      	lsrs	r3, r3, #3
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d022      	beq.n	8001ccc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6919      	ldr	r1, [r3, #16]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c96:	f7ff fc23 	bl	80014e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6919      	ldr	r1, [r3, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f7ff fc6f 	bl	800158a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d102      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x126>
 8001cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc0:	e000      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x128>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f7ff fc7b 	bl	80015c0 <LL_ADC_SetOffsetSaturation>
 8001cca:	e17b      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fc28 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x15c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fc1d 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	f003 021f 	and.w	r2, r3, #31
 8001cf6:	e01e      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x19a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fc12 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e004      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x1b2>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	e018      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x1e4>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e004      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d106      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fbe1 	bl	8001554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2101      	movs	r1, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fbc5 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x222>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fbba 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	0e9b      	lsrs	r3, r3, #26
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	e01e      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x260>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fbaf 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ddc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e004      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001df0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x278>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	e018      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x2aa>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e004      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d106      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2101      	movs	r1, #1
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fb7e 	bl	8001554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fb62 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10a      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x2e8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2102      	movs	r1, #2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fb57 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	f003 021f 	and.w	r2, r3, #31
 8001e82:	e01e      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x326>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2102      	movs	r1, #2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fb4c 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e004      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x33e>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0e9b      	lsrs	r3, r3, #26
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	e016      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x36c>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001eec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001efa:	2320      	movs	r3, #32
 8001efc:	e004      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2102      	movs	r1, #2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fb1d 	bl	8001554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2103      	movs	r1, #3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fb01 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x3aa>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2103      	movs	r1, #3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff faf6 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	e017      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x3da>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff faeb 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f60:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e003      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d105      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x3f2>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0e9b      	lsrs	r3, r3, #26
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	e011      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x416>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	e003      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d106      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2103      	movs	r1, #3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fac8 	bl	8001554 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fbf1 	bl	80017b0 <LL_ADC_IsEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f040 813d 	bne.w	8002250 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f7ff fb72 	bl	80016cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4aa2      	ldr	r2, [pc, #648]	; (8002278 <HAL_ADC_ConfigChannel+0x6dc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	f040 812e 	bne.w	8002250 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <HAL_ADC_ConfigChannel+0x480>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0e9b      	lsrs	r3, r3, #26
 800200a:	3301      	adds	r3, #1
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2b09      	cmp	r3, #9
 8002012:	bf94      	ite	ls
 8002014:	2301      	movls	r3, #1
 8002016:	2300      	movhi	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e019      	b.n	8002050 <HAL_ADC_ConfigChannel+0x4b4>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800202a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800202c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800202e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e003      	b.n	8002040 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2b09      	cmp	r3, #9
 8002048:	bf94      	ite	ls
 800204a:	2301      	movls	r3, #1
 800204c:	2300      	movhi	r3, #0
 800204e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002050:	2b00      	cmp	r3, #0
 8002052:	d079      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205c:	2b00      	cmp	r3, #0
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x4d4>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	3301      	adds	r3, #1
 8002068:	069b      	lsls	r3, r3, #26
 800206a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800206e:	e015      	b.n	800209c <HAL_ADC_ConfigChannel+0x500>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800207e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002080:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e003      	b.n	8002094 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800208c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	069b      	lsls	r3, r3, #26
 8002098:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x520>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	3301      	adds	r3, #1
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	e017      	b.n	80020ec <HAL_ADC_ConfigChannel+0x550>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80020ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80020ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	e003      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80020d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	ea42 0103 	orr.w	r1, r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x576>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	051b      	lsls	r3, r3, #20
 8002110:	e018      	b.n	8002144 <HAL_ADC_ConfigChannel+0x5a8>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e003      	b.n	8002136 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800212e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002144:	430b      	orrs	r3, r1
 8002146:	e07e      	b.n	8002246 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x5c8>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	3301      	adds	r3, #1
 800215c:	069b      	lsls	r3, r3, #26
 800215e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002162:	e015      	b.n	8002190 <HAL_ADC_ConfigChannel+0x5f4>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800217c:	2320      	movs	r3, #32
 800217e:	e003      	b.n	8002188 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3301      	adds	r3, #1
 800218a:	069b      	lsls	r3, r3, #26
 800218c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x614>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	e017      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x644>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	61fb      	str	r3, [r7, #28]
  return result;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e003      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	ea42 0103 	orr.w	r1, r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10d      	bne.n	800220c <HAL_ADC_ConfigChannel+0x670>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	3b1e      	subs	r3, #30
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800220a:	e01b      	b.n	8002244 <HAL_ADC_ConfigChannel+0x6a8>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	613b      	str	r3, [r7, #16]
  return result;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f003 021f 	and.w	r2, r3, #31
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3b1e      	subs	r3, #30
 800223e:	051b      	lsls	r3, r3, #20
 8002240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002244:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800224a:	4619      	mov	r1, r3
 800224c:	f7ff fa12 	bl	8001674 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_ADC_ConfigChannel+0x6e0>)
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80be 	beq.w	80023da <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002266:	d004      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x6d6>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_ADC_ConfigChannel+0x6e4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10a      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x6ec>
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <HAL_ADC_ConfigChannel+0x6e8>)
 8002274:	e009      	b.n	800228a <HAL_ADC_ConfigChannel+0x6ee>
 8002276:	bf00      	nop
 8002278:	407f0000 	.word	0x407f0000
 800227c:	80080000 	.word	0x80080000
 8002280:	50000100 	.word	0x50000100
 8002284:	50000300 	.word	0x50000300
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <HAL_ADC_ConfigChannel+0x854>)
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f91a 	bl	80014c4 <LL_ADC_GetCommonPathInternalCh>
 8002290:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_ADC_ConfigChannel+0x858>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0x70c>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a55      	ldr	r2, [pc, #340]	; (80023f8 <HAL_ADC_ConfigChannel+0x85c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d13a      	bne.n	800231e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d134      	bne.n	800231e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022bc:	d005      	beq.n	80022ca <HAL_ADC_ConfigChannel+0x72e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a4e      	ldr	r2, [pc, #312]	; (80023fc <HAL_ADC_ConfigChannel+0x860>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f040 8085 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d2:	d004      	beq.n	80022de <HAL_ADC_ConfigChannel+0x742>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a49      	ldr	r2, [pc, #292]	; (8002400 <HAL_ADC_ConfigChannel+0x864>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x746>
 80022de:	4a49      	ldr	r2, [pc, #292]	; (8002404 <HAL_ADC_ConfigChannel+0x868>)
 80022e0:	e000      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x748>
 80022e2:	4a43      	ldr	r2, [pc, #268]	; (80023f0 <HAL_ADC_ConfigChannel+0x854>)
 80022e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7ff f8d5 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f4:	4b44      	ldr	r3, [pc, #272]	; (8002408 <HAL_ADC_ConfigChannel+0x86c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	099b      	lsrs	r3, r3, #6
 80022fa:	4a44      	ldr	r2, [pc, #272]	; (800240c <HAL_ADC_ConfigChannel+0x870>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800230e:	e002      	b.n	8002316 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3b01      	subs	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800231c:	e05a      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a3b      	ldr	r2, [pc, #236]	; (8002410 <HAL_ADC_ConfigChannel+0x874>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d125      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800232c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11f      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a31      	ldr	r2, [pc, #196]	; (8002400 <HAL_ADC_ConfigChannel+0x864>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d104      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x7ac>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a34      	ldr	r2, [pc, #208]	; (8002414 <HAL_ADC_ConfigChannel+0x878>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d047      	beq.n	80023d8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002350:	d004      	beq.n	800235c <HAL_ADC_ConfigChannel+0x7c0>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_ADC_ConfigChannel+0x864>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x7c4>
 800235c:	4a29      	ldr	r2, [pc, #164]	; (8002404 <HAL_ADC_ConfigChannel+0x868>)
 800235e:	e000      	b.n	8002362 <HAL_ADC_ConfigChannel+0x7c6>
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_ADC_ConfigChannel+0x854>)
 8002362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f7ff f896 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002372:	e031      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_ADC_ConfigChannel+0x87c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12d      	bne.n	80023da <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800237e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d127      	bne.n	80023da <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <HAL_ADC_ConfigChannel+0x864>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d022      	beq.n	80023da <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800239c:	d004      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x80c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_ADC_ConfigChannel+0x864>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x810>
 80023a8:	4a16      	ldr	r2, [pc, #88]	; (8002404 <HAL_ADC_ConfigChannel+0x868>)
 80023aa:	e000      	b.n	80023ae <HAL_ADC_ConfigChannel+0x812>
 80023ac:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_ADC_ConfigChannel+0x854>)
 80023ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff f870 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
 80023be:	e00c      	b.n	80023da <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80023d2:	e002      	b.n	80023da <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023d4:	bf00      	nop
 80023d6:	e000      	b.n	80023da <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	37d8      	adds	r7, #216	; 0xd8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	50000700 	.word	0x50000700
 80023f4:	c3210000 	.word	0xc3210000
 80023f8:	90c00010 	.word	0x90c00010
 80023fc:	50000600 	.word	0x50000600
 8002400:	50000100 	.word	0x50000100
 8002404:	50000300 	.word	0x50000300
 8002408:	20000000 	.word	0x20000000
 800240c:	053e2d63 	.word	0x053e2d63
 8002410:	c7520000 	.word	0xc7520000
 8002414:	50000500 	.word	0x50000500
 8002418:	cb840000 	.word	0xcb840000

0800241c <LL_ADC_IsEnabled>:
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <LL_ADC_IsEnabled+0x18>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <LL_ADC_IsEnabled+0x1a>
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_ADC_REG_IsConversionOngoing>:
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d101      	bne.n	800245a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b0a1      	sub	sp, #132	; 0x84
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002482:	2302      	movs	r3, #2
 8002484:	e0e7      	b.n	8002656 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800248e:	2300      	movs	r3, #0
 8002490:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002492:	2300      	movs	r3, #0
 8002494:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800249e:	d102      	bne.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	e009      	b.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6e      	ldr	r2, [pc, #440]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d102      	bne.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80024b0:	4b6d      	ldr	r3, [pc, #436]	; (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	e001      	b.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0be      	b.n	8002656 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ffb1 	bl	8002442 <LL_ADC_REG_IsConversionOngoing>
 80024e0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ffab 	bl	8002442 <LL_ADC_REG_IsConversionOngoing>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 80a0 	bne.w	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80024f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 809c 	bne.w	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002504:	d004      	beq.n	8002510 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a55      	ldr	r2, [pc, #340]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002510:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002512:	e000      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002514:	4b56      	ldr	r3, [pc, #344]	; (8002670 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002516:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d04b      	beq.n	80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002532:	035b      	lsls	r3, r3, #13
 8002534:	430b      	orrs	r3, r1
 8002536:	431a      	orrs	r2, r3
 8002538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002544:	d004      	beq.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a45      	ldr	r2, [pc, #276]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d10f      	bne.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002550:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002554:	f7ff ff62 	bl	800241c <LL_ADC_IsEnabled>
 8002558:	4604      	mov	r4, r0
 800255a:	4841      	ldr	r0, [pc, #260]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800255c:	f7ff ff5e 	bl	800241c <LL_ADC_IsEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	4323      	orrs	r3, r4
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e012      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002570:	483c      	ldr	r0, [pc, #240]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002572:	f7ff ff53 	bl	800241c <LL_ADC_IsEnabled>
 8002576:	4604      	mov	r4, r0
 8002578:	483b      	ldr	r0, [pc, #236]	; (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800257a:	f7ff ff4f 	bl	800241c <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	431c      	orrs	r4, r3
 8002582:	483c      	ldr	r0, [pc, #240]	; (8002674 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002584:	f7ff ff4a 	bl	800241c <LL_ADC_IsEnabled>
 8002588:	4603      	mov	r3, r0
 800258a:	4323      	orrs	r3, r4
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d056      	beq.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800259a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025a2:	f023 030f 	bic.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	6811      	ldr	r1, [r2, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	6892      	ldr	r2, [r2, #8]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025b6:	e047      	b.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025cc:	d004      	beq.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a23      	ldr	r2, [pc, #140]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10f      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80025d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025dc:	f7ff ff1e 	bl	800241c <LL_ADC_IsEnabled>
 80025e0:	4604      	mov	r4, r0
 80025e2:	481f      	ldr	r0, [pc, #124]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025e4:	f7ff ff1a 	bl	800241c <LL_ADC_IsEnabled>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4323      	orrs	r3, r4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e012      	b.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80025f8:	481a      	ldr	r0, [pc, #104]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025fa:	f7ff ff0f 	bl	800241c <LL_ADC_IsEnabled>
 80025fe:	4604      	mov	r4, r0
 8002600:	4819      	ldr	r0, [pc, #100]	; (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002602:	f7ff ff0b 	bl	800241c <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	431c      	orrs	r4, r3
 800260a:	481a      	ldr	r0, [pc, #104]	; (8002674 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800260c:	f7ff ff06 	bl	800241c <LL_ADC_IsEnabled>
 8002610:	4603      	mov	r3, r0
 8002612:	4323      	orrs	r3, r4
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d012      	beq.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800262a:	f023 030f 	bic.w	r3, r3, #15
 800262e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002630:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002632:	e009      	b.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002646:	e000      	b.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002648:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002652:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002656:	4618      	mov	r0, r3
 8002658:	3784      	adds	r7, #132	; 0x84
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	bf00      	nop
 8002660:	50000100 	.word	0x50000100
 8002664:	50000400 	.word	0x50000400
 8002668:	50000500 	.word	0x50000500
 800266c:	50000300 	.word	0x50000300
 8002670:	50000700 	.word	0x50000700
 8002674:	50000600 	.word	0x50000600

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e4:	d301      	bcc.n	80027ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <SysTick_Config+0x40>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f2:	210f      	movs	r1, #15
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f7ff ff8e 	bl	8002718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SysTick_Config+0x40>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <SysTick_Config+0x40>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff29 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800283c:	f7ff ff40 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 8002840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	6978      	ldr	r0, [r7, #20]
 8002848:	f7ff ff90 	bl	800276c <NVIC_EncodePriority>
 800284c:	4602      	mov	r2, r0
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff5f 	bl	8002718 <__NVIC_SetPriority>
}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff33 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffa4 	bl	80027d4 <SysTick_Config>
 800288c:	4603      	mov	r3, r0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028a6:	e15a      	b.n	8002b5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 814c 	beq.w	8002b58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d005      	beq.n	80028d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d130      	bne.n	800293a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800290e:	2201      	movs	r2, #1
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 0201 	and.w	r2, r3, #1
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b03      	cmp	r3, #3
 8002944:	d017      	beq.n	8002976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d123      	bne.n	80029ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	08da      	lsrs	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3208      	adds	r2, #8
 800298a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	220f      	movs	r2, #15
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	08da      	lsrs	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3208      	adds	r2, #8
 80029c4:	6939      	ldr	r1, [r7, #16]
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0203 	and.w	r2, r3, #3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80a6 	beq.w	8002b58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0c:	4b5b      	ldr	r3, [pc, #364]	; (8002b7c <HAL_GPIO_Init+0x2e4>)
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <HAL_GPIO_Init+0x2e4>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6613      	str	r3, [r2, #96]	; 0x60
 8002a18:	4b58      	ldr	r3, [pc, #352]	; (8002b7c <HAL_GPIO_Init+0x2e4>)
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a24:	4a56      	ldr	r2, [pc, #344]	; (8002b80 <HAL_GPIO_Init+0x2e8>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a4e:	d01f      	beq.n	8002a90 <HAL_GPIO_Init+0x1f8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a4c      	ldr	r2, [pc, #304]	; (8002b84 <HAL_GPIO_Init+0x2ec>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d019      	beq.n	8002a8c <HAL_GPIO_Init+0x1f4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <HAL_GPIO_Init+0x2f0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <HAL_GPIO_Init+0x1f0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a4a      	ldr	r2, [pc, #296]	; (8002b8c <HAL_GPIO_Init+0x2f4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00d      	beq.n	8002a84 <HAL_GPIO_Init+0x1ec>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a49      	ldr	r2, [pc, #292]	; (8002b90 <HAL_GPIO_Init+0x2f8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <HAL_GPIO_Init+0x1e8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a48      	ldr	r2, [pc, #288]	; (8002b94 <HAL_GPIO_Init+0x2fc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d101      	bne.n	8002a7c <HAL_GPIO_Init+0x1e4>
 8002a78:	2305      	movs	r3, #5
 8002a7a:	e00a      	b.n	8002a92 <HAL_GPIO_Init+0x1fa>
 8002a7c:	2306      	movs	r3, #6
 8002a7e:	e008      	b.n	8002a92 <HAL_GPIO_Init+0x1fa>
 8002a80:	2304      	movs	r3, #4
 8002a82:	e006      	b.n	8002a92 <HAL_GPIO_Init+0x1fa>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e004      	b.n	8002a92 <HAL_GPIO_Init+0x1fa>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e002      	b.n	8002a92 <HAL_GPIO_Init+0x1fa>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_GPIO_Init+0x1fa>
 8002a90:	2300      	movs	r3, #0
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	f002 0203 	and.w	r2, r2, #3
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	4093      	lsls	r3, r2
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa2:	4937      	ldr	r1, [pc, #220]	; (8002b80 <HAL_GPIO_Init+0x2e8>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ab0:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ad4:	4a30      	ldr	r2, [pc, #192]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ada:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002afe:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b52:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f47f ae9d 	bne.w	80028a8 <HAL_GPIO_Init+0x10>
  }
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010000 	.word	0x40010000
 8002b84:	48000400 	.word	0x48000400
 8002b88:	48000800 	.word	0x48000800
 8002b8c:	48000c00 	.word	0x48000c00
 8002b90:	48001000 	.word	0x48001000
 8002b94:	48001400 	.word	0x48001400
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bac:	787b      	ldrb	r3, [r7, #1]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f806 	bl	8002bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40010400 	.word	0x40010400

08002bfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d141      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2e:	d131      	bne.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c30:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c36:	4a46      	ldr	r2, [pc, #280]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c40:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c48:	4a41      	ldr	r2, [pc, #260]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c50:	4b40      	ldr	r3, [pc, #256]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2232      	movs	r2, #50	; 0x32
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	0c9b      	lsrs	r3, r3, #18
 8002c62:	3301      	adds	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c66:	e002      	b.n	8002c6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d102      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f2      	bne.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c82:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d158      	bne.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e057      	b.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c94:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ca4:	e04d      	b.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cac:	d141      	bne.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cba:	d131      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cbc:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc2:	4a23      	ldr	r2, [pc, #140]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ccc:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2232      	movs	r2, #50	; 0x32
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0c9b      	lsrs	r3, r3, #18
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf2:	e002      	b.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d06:	d102      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f2      	bne.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d112      	bne.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e011      	b.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d30:	e007      	b.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40007000 	.word	0x40007000
 8002d54:	20000000 	.word	0x20000000
 8002d58:	431bde83 	.word	0x431bde83

08002d5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d6a:	6093      	str	r3, [r2, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40007000 	.word	0x40007000

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e2fe      	b.n	800338c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d075      	beq.n	8002e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9a:	4b97      	ldr	r3, [pc, #604]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da4:	4b94      	ldr	r3, [pc, #592]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d102      	bne.n	8002dba <HAL_RCC_OscConfig+0x3e>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d002      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x44>
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc0:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d05b      	beq.n	8002e84 <HAL_RCC_OscConfig+0x108>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d157      	bne.n	8002e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e2d9      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d106      	bne.n	8002df0 <HAL_RCC_OscConfig+0x74>
 8002de2:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a84      	ldr	r2, [pc, #528]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e01d      	b.n	8002e2c <HAL_RCC_OscConfig+0xb0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x98>
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b7c      	ldr	r3, [pc, #496]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7b      	ldr	r2, [pc, #492]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0xb0>
 8002e14:	4b78      	ldr	r3, [pc, #480]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a77      	ldr	r2, [pc, #476]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b75      	ldr	r3, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a74      	ldr	r2, [pc, #464]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe faf2 	bl	800141c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe faee 	bl	800141c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e29e      	b.n	800338c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0xc0>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fade 	bl	800141c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fada 	bl	800141c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e28a      	b.n	800338c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	4b60      	ldr	r3, [pc, #384]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0xe8>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d075      	beq.n	8002f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e92:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9c:	4b56      	ldr	r3, [pc, #344]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x136>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d002      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x13c>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d11f      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x154>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e25d      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b49      	ldr	r3, [pc, #292]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4946      	ldr	r1, [pc, #280]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ee4:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <HAL_RCC_OscConfig+0x280>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fa4b 	bl	8001384 <HAL_InitTick>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d043      	beq.n	8002f7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e249      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d023      	beq.n	8002f48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f00:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fa86 	bl	800141c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f14:	f7fe fa82 	bl	800141c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e232      	b.n	800338c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f26:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	492d      	ldr	r1, [pc, #180]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
 8002f46:	e01a      	b.n	8002f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe fa62 	bl	800141c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fa5e 	bl	800141c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e20e      	b.n	800338c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x1e0>
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d041      	beq.n	800300e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f98:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fa3b 	bl	800141c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe fa37 	bl	800141c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e1e7      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ef      	beq.n	8002faa <HAL_RCC_OscConfig+0x22e>
 8002fca:	e020      	b.n	800300e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_OscConfig+0x27c>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fa1e 	bl	800141c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe2:	e00d      	b.n	8003000 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fa1a 	bl	800141c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d906      	bls.n	8003000 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1ca      	b.n	800338c <HAL_RCC_OscConfig+0x610>
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003000:	4b8c      	ldr	r3, [pc, #560]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 8003002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ea      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80a6 	beq.w	8003168 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301c:	2300      	movs	r3, #0
 800301e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003020:	4b84      	ldr	r3, [pc, #528]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_OscConfig+0x2b4>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x2b6>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	4b7f      	ldr	r3, [pc, #508]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	4a7e      	ldr	r2, [pc, #504]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6593      	str	r3, [r2, #88]	; 0x58
 8003042:	4b7c      	ldr	r3, [pc, #496]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800304e:	2301      	movs	r3, #1
 8003050:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003052:	4b79      	ldr	r3, [pc, #484]	; (8003238 <HAL_RCC_OscConfig+0x4bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x4bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a75      	ldr	r2, [pc, #468]	; (8003238 <HAL_RCC_OscConfig+0x4bc>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306a:	f7fe f9d7 	bl	800141c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003072:	f7fe f9d3 	bl	800141c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e183      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003084:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x4bc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d108      	bne.n	80030aa <HAL_RCC_OscConfig+0x32e>
 8003098:	4b66      	ldr	r3, [pc, #408]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	e024      	b.n	80030f4 <HAL_RCC_OscConfig+0x378>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d110      	bne.n	80030d4 <HAL_RCC_OscConfig+0x358>
 80030b2:	4b60      	ldr	r3, [pc, #384]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	4a5e      	ldr	r2, [pc, #376]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c2:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	4a5a      	ldr	r2, [pc, #360]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d2:	e00f      	b.n	80030f4 <HAL_RCC_OscConfig+0x378>
 80030d4:	4b57      	ldr	r3, [pc, #348]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	4a56      	ldr	r2, [pc, #344]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d016      	beq.n	800312a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe f98e 	bl	800141c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe f98a 	bl	800141c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e138      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311a:	4b46      	ldr	r3, [pc, #280]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ed      	beq.n	8003104 <HAL_RCC_OscConfig+0x388>
 8003128:	e015      	b.n	8003156 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fe f977 	bl	800141c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe f973 	bl	800141c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e121      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003148:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1ed      	bne.n	8003132 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315c:	4b35      	ldr	r3, [pc, #212]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	4a34      	ldr	r2, [pc, #208]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 8003162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003166:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d03c      	beq.n	80031ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01c      	beq.n	80031b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 800317e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003182:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe f946 	bl	800141c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003194:	f7fe f942 	bl	800141c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0f2      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031a6:	4b23      	ldr	r3, [pc, #140]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80031a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ef      	beq.n	8003194 <HAL_RCC_OscConfig+0x418>
 80031b4:	e01b      	b.n	80031ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031b6:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80031b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c6:	f7fe f929 	bl	800141c <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ce:	f7fe f925 	bl	800141c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0d5      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031e0:	4b14      	ldr	r3, [pc, #80]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80031e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ef      	bne.n	80031ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80c9 	beq.w	800338a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b0c      	cmp	r3, #12
 8003202:	f000 8083 	beq.w	800330c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d15e      	bne.n	80032cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a08      	ldr	r2, [pc, #32]	; (8003234 <HAL_RCC_OscConfig+0x4b8>)
 8003214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe f8ff 	bl	800141c <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003220:	e00c      	b.n	800323c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe f8fb 	bl	800141c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d905      	bls.n	800323c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e0ab      	b.n	800338c <HAL_RCC_OscConfig+0x610>
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323c:	4b55      	ldr	r3, [pc, #340]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ec      	bne.n	8003222 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003248:	4b52      	ldr	r3, [pc, #328]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	4b52      	ldr	r3, [pc, #328]	; (8003398 <HAL_RCC_OscConfig+0x61c>)
 800324e:	4013      	ands	r3, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6a11      	ldr	r1, [r2, #32]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003258:	3a01      	subs	r2, #1
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003262:	0212      	lsls	r2, r2, #8
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800326a:	0852      	lsrs	r2, r2, #1
 800326c:	3a01      	subs	r2, #1
 800326e:	0552      	lsls	r2, r2, #21
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003276:	0852      	lsrs	r2, r2, #1
 8003278:	3a01      	subs	r2, #1
 800327a:	0652      	lsls	r2, r2, #25
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003282:	06d2      	lsls	r2, r2, #27
 8003284:	430a      	orrs	r2, r1
 8003286:	4943      	ldr	r1, [pc, #268]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 8003288:	4313      	orrs	r3, r2
 800328a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800328c:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a40      	ldr	r2, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 8003292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003296:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003298:	4b3e      	ldr	r3, [pc, #248]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 800329e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe f8ba 	bl	800141c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe f8b6 	bl	800141c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e066      	b.n	800338c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x530>
 80032ca:	e05e      	b.n	800338a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a30      	ldr	r2, [pc, #192]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 80032d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe f8a0 	bl	800141c <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe f89c 	bl	800141c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e04c      	b.n	800338c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032fe:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	4924      	ldr	r1, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_RCC_OscConfig+0x620>)
 8003306:	4013      	ands	r3, r2
 8003308:	60cb      	str	r3, [r1, #12]
 800330a:	e03e      	b.n	800338a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e039      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003318:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <HAL_RCC_OscConfig+0x618>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0203 	and.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	429a      	cmp	r2, r3
 800332a:	d12c      	bne.n	8003386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	3b01      	subs	r3, #1
 8003338:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d123      	bne.n	8003386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d11b      	bne.n	8003386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d113      	bne.n	8003386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	3b01      	subs	r3, #1
 800336c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d109      	bne.n	8003386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	3b01      	subs	r3, #1
 8003380:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d001      	beq.n	800338a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	019f800c 	.word	0x019f800c
 800339c:	feeefffc 	.word	0xfeeefffc

080033a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e11e      	b.n	80035f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b91      	ldr	r3, [pc, #580]	; (8003600 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d910      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_RCC_ClockConfig+0x260>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 020f 	bic.w	r2, r3, #15
 80033ce:	498c      	ldr	r1, [pc, #560]	; (8003600 <HAL_RCC_ClockConfig+0x260>)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b8a      	ldr	r3, [pc, #552]	; (8003600 <HAL_RCC_ClockConfig+0x260>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e106      	b.n	80035f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d073      	beq.n	80034dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d129      	bne.n	8003450 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fc:	4b81      	ldr	r3, [pc, #516]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0f4      	b.n	80035f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800340c:	f000 f99e 	bl	800374c <RCC_GetSysClockFreqFromPLLSource>
 8003410:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4a7c      	ldr	r2, [pc, #496]	; (8003608 <HAL_RCC_ClockConfig+0x268>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d93f      	bls.n	800349a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800341a:	4b7a      	ldr	r3, [pc, #488]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800342e:	2b00      	cmp	r3, #0
 8003430:	d033      	beq.n	800349a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d12f      	bne.n	800349a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003442:	4a70      	ldr	r2, [pc, #448]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 8003444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003448:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e024      	b.n	800349a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d107      	bne.n	8003468 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003458:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0c6      	b.n	80035f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0be      	b.n	80035f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003478:	f000 f8ce 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 800347c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4a61      	ldr	r2, [pc, #388]	; (8003608 <HAL_RCC_ClockConfig+0x268>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d909      	bls.n	800349a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003486:	4b5f      	ldr	r3, [pc, #380]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800348e:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 8003490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003494:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4957      	ldr	r1, [pc, #348]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fd ffb6 	bl	800141c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fd ffb2 	bl	800141c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e095      	b.n	80035f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d023      	beq.n	8003530 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f4:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a42      	ldr	r2, [pc, #264]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800350c:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003514:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 8003516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800351a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4936      	ldr	r1, [pc, #216]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
 800352e:	e008      	b.n	8003542 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d105      	bne.n	8003542 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4a32      	ldr	r2, [pc, #200]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800353c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003540:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003542:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <HAL_RCC_ClockConfig+0x260>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d21d      	bcs.n	800358c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_ClockConfig+0x260>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 020f 	bic.w	r2, r3, #15
 8003558:	4929      	ldr	r1, [pc, #164]	; (8003600 <HAL_RCC_ClockConfig+0x260>)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003560:	f7fd ff5c 	bl	800141c <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	e00a      	b.n	800357e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003568:	f7fd ff58 	bl	800141c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e03b      	b.n	80035f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x260>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d1ed      	bne.n	8003568 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4917      	ldr	r1, [pc, #92]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	490f      	ldr	r1, [pc, #60]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ca:	f000 f825 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80035ce:	4602      	mov	r2, r0
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_RCC_ClockConfig+0x264>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	490c      	ldr	r1, [pc, #48]	; (800360c <HAL_RCC_ClockConfig+0x26c>)
 80035dc:	5ccb      	ldrb	r3, [r1, r3]
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x270>)
 80035e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_RCC_ClockConfig+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fec8 	bl	8001384 <HAL_InitTick>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40022000 	.word	0x40022000
 8003604:	40021000 	.word	0x40021000
 8003608:	04c4b400 	.word	0x04c4b400
 800360c:	08005e20 	.word	0x08005e20
 8003610:	20000000 	.word	0x20000000
 8003614:	20000004 	.word	0x20000004

08003618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800361e:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b04      	cmp	r3, #4
 8003628:	d102      	bne.n	8003630 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800362a:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e047      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b08      	cmp	r3, #8
 800363a:	d102      	bne.n	8003642 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800363c:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e03e      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d136      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	3301      	adds	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d10c      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800366c:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003676:	68d2      	ldr	r2, [r2, #12]
 8003678:	0a12      	lsrs	r2, r2, #8
 800367a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	617b      	str	r3, [r7, #20]
      break;
 8003684:	e00c      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003686:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4a10      	ldr	r2, [pc, #64]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	0a12      	lsrs	r2, r2, #8
 8003694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	617b      	str	r3, [r7, #20]
      break;
 800369e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	0e5b      	lsrs	r3, r3, #25
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	3301      	adds	r3, #1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	e001      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036c0:	693b      	ldr	r3, [r7, #16]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	00f42400 	.word	0x00f42400
 80036d8:	016e3600 	.word	0x016e3600

080036dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000000 	.word	0x20000000

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036f8:	f7ff fff0 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4904      	ldr	r1, [pc, #16]	; (800371c <HAL_RCC_GetPCLK1Freq+0x28>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000
 800371c:	08005e30 	.word	0x08005e30

08003720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003724:	f7ff ffda 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0adb      	lsrs	r3, r3, #11
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	08005e30 	.word	0x08005e30

0800374c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3301      	adds	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d10c      	bne.n	800378a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800377a:	68d2      	ldr	r2, [r2, #12]
 800377c:	0a12      	lsrs	r2, r2, #8
 800377e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	617b      	str	r3, [r7, #20]
    break;
 8003788:	e00c      	b.n	80037a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	0a12      	lsrs	r2, r2, #8
 8003798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
    break;
 80037a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0e5b      	lsrs	r3, r3, #25
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037be:	687b      	ldr	r3, [r7, #4]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40021000 	.word	0x40021000
 80037d0:	016e3600 	.word	0x016e3600
 80037d4:	00f42400 	.word	0x00f42400

080037d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037e0:	2300      	movs	r3, #0
 80037e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037e4:	2300      	movs	r3, #0
 80037e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8098 	beq.w	8003926 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f6:	2300      	movs	r3, #0
 80037f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037fa:	4b43      	ldr	r3, [pc, #268]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	4b40      	ldr	r3, [pc, #256]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	4a3f      	ldr	r2, [pc, #252]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6593      	str	r3, [r2, #88]	; 0x58
 8003812:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381e:	2301      	movs	r3, #1
 8003820:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003822:	4b3a      	ldr	r3, [pc, #232]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a39      	ldr	r2, [pc, #228]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800382e:	f7fd fdf5 	bl	800141c <HAL_GetTick>
 8003832:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003834:	e009      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fd fdf1 	bl	800141c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d902      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	74fb      	strb	r3, [r7, #19]
        break;
 8003848:	e005      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384a:	4b30      	ldr	r3, [pc, #192]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ef      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d159      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800385c:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01e      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d019      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003878:	4b23      	ldr	r3, [pc, #140]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003884:	4b20      	ldr	r3, [pc, #128]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fd fdb1 	bl	800141c <HAL_GetTick>
 80038ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038bc:	e00b      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd fdad 	bl	800141c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	74fb      	strb	r3, [r7, #19]
            break;
 80038d4:	e006      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ec      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003900:	e008      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	74bb      	strb	r3, [r7, #18]
 8003906:	e005      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003914:	7c7b      	ldrb	r3, [r7, #17]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4ba7      	ldr	r3, [pc, #668]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4aa6      	ldr	r2, [pc, #664]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003932:	4ba1      	ldr	r3, [pc, #644]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f023 0203 	bic.w	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	499d      	ldr	r1, [pc, #628]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003954:	4b98      	ldr	r3, [pc, #608]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 020c 	bic.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	4995      	ldr	r1, [pc, #596]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003976:	4b90      	ldr	r3, [pc, #576]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	498c      	ldr	r1, [pc, #560]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003998:	4b87      	ldr	r3, [pc, #540]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	4984      	ldr	r1, [pc, #528]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ba:	4b7f      	ldr	r3, [pc, #508]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	497b      	ldr	r1, [pc, #492]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039dc:	4b76      	ldr	r3, [pc, #472]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	4973      	ldr	r1, [pc, #460]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039fe:	4b6e      	ldr	r3, [pc, #440]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	496a      	ldr	r1, [pc, #424]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a20:	4b65      	ldr	r3, [pc, #404]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4962      	ldr	r1, [pc, #392]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a42:	4b5d      	ldr	r3, [pc, #372]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	4959      	ldr	r1, [pc, #356]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a64:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	4951      	ldr	r1, [pc, #324]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a86:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	4948      	ldr	r1, [pc, #288]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d015      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa8:	4b43      	ldr	r3, [pc, #268]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4940      	ldr	r1, [pc, #256]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a3a      	ldr	r2, [pc, #232]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d015      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aee:	4932      	ldr	r1, [pc, #200]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afe:	d105      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b00:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4a2c      	ldr	r2, [pc, #176]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	4924      	ldr	r1, [pc, #144]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b36:	d105      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b38:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	4916      	ldr	r1, [pc, #88]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d019      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a02      	ldr	r2, [pc, #8]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bb2:	60d3      	str	r3, [r2, #12]
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d015      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	4926      	ldr	r1, [pc, #152]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d015      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0e:	4918      	ldr	r1, [pc, #96]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1e:	d105      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d015      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	490a      	ldr	r1, [pc, #40]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c56:	d105      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000

08003c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e049      	b.n	8003d1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd fa36 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	f000 fc44 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d001      	beq.n	8003d3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e04c      	b.n	8003dd6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <HAL_TIM_Base_Start+0xc0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d022      	beq.n	8003d94 <HAL_TIM_Base_Start+0x70>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d56:	d01d      	beq.n	8003d94 <HAL_TIM_Base_Start+0x70>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <HAL_TIM_Base_Start+0xc4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d018      	beq.n	8003d94 <HAL_TIM_Base_Start+0x70>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a21      	ldr	r2, [pc, #132]	; (8003dec <HAL_TIM_Base_Start+0xc8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_TIM_Base_Start+0x70>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <HAL_TIM_Base_Start+0xcc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_TIM_Base_Start+0x70>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_TIM_Base_Start+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_TIM_Base_Start+0x70>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_TIM_Base_Start+0xd4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_TIM_Base_Start+0x70>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_TIM_Base_Start+0xd8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d115      	bne.n	8003dc0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <HAL_TIM_Base_Start+0xdc>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d015      	beq.n	8003dd2 <HAL_TIM_Base_Start+0xae>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d011      	beq.n	8003dd2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	e008      	b.n	8003dd2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e000      	b.n	8003dd4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40013400 	.word	0x40013400
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40015000 	.word	0x40015000
 8003e00:	00010007 	.word	0x00010007

08003e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e049      	b.n	8003eaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f841 	bl	8003eb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 fb7c 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_TIM_PWM_Start+0x24>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e03c      	b.n	8003f66 <HAL_TIM_PWM_Start+0x9e>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d109      	bne.n	8003f06 <HAL_TIM_PWM_Start+0x3e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	bf14      	ite	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	2300      	moveq	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	e02f      	b.n	8003f66 <HAL_TIM_PWM_Start+0x9e>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d109      	bne.n	8003f20 <HAL_TIM_PWM_Start+0x58>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e022      	b.n	8003f66 <HAL_TIM_PWM_Start+0x9e>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b0c      	cmp	r3, #12
 8003f24:	d109      	bne.n	8003f3a <HAL_TIM_PWM_Start+0x72>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e015      	b.n	8003f66 <HAL_TIM_PWM_Start+0x9e>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d109      	bne.n	8003f54 <HAL_TIM_PWM_Start+0x8c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e008      	b.n	8003f66 <HAL_TIM_PWM_Start+0x9e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0a6      	b.n	80040bc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_PWM_Start+0xb6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	e023      	b.n	8003fc6 <HAL_TIM_PWM_Start+0xfe>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_PWM_Start+0xc6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f8c:	e01b      	b.n	8003fc6 <HAL_TIM_PWM_Start+0xfe>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_PWM_Start+0xd6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f9c:	e013      	b.n	8003fc6 <HAL_TIM_PWM_Start+0xfe>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	d104      	bne.n	8003fae <HAL_TIM_PWM_Start+0xe6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fac:	e00b      	b.n	8003fc6 <HAL_TIM_PWM_Start+0xfe>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d104      	bne.n	8003fbe <HAL_TIM_PWM_Start+0xf6>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fbc:	e003      	b.n	8003fc6 <HAL_TIM_PWM_Start+0xfe>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 ff30 	bl	8004e34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a3a      	ldr	r2, [pc, #232]	; (80040c4 <HAL_TIM_PWM_Start+0x1fc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_TIM_PWM_Start+0x148>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a39      	ldr	r2, [pc, #228]	; (80040c8 <HAL_TIM_PWM_Start+0x200>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_TIM_PWM_Start+0x148>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a37      	ldr	r2, [pc, #220]	; (80040cc <HAL_TIM_PWM_Start+0x204>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_TIM_PWM_Start+0x148>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a36      	ldr	r2, [pc, #216]	; (80040d0 <HAL_TIM_PWM_Start+0x208>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_TIM_PWM_Start+0x148>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_TIM_PWM_Start+0x20c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_TIM_PWM_Start+0x148>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a33      	ldr	r2, [pc, #204]	; (80040d8 <HAL_TIM_PWM_Start+0x210>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_TIM_PWM_Start+0x14c>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_TIM_PWM_Start+0x14e>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004028:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <HAL_TIM_PWM_Start+0x1fc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_TIM_PWM_Start+0x1b2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d01d      	beq.n	800407a <HAL_TIM_PWM_Start+0x1b2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a26      	ldr	r2, [pc, #152]	; (80040dc <HAL_TIM_PWM_Start+0x214>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_TIM_PWM_Start+0x1b2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <HAL_TIM_PWM_Start+0x218>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_TIM_PWM_Start+0x1b2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a23      	ldr	r2, [pc, #140]	; (80040e4 <HAL_TIM_PWM_Start+0x21c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_TIM_PWM_Start+0x1b2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <HAL_TIM_PWM_Start+0x200>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_TIM_PWM_Start+0x1b2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a18      	ldr	r2, [pc, #96]	; (80040cc <HAL_TIM_PWM_Start+0x204>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_TIM_PWM_Start+0x1b2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_TIM_PWM_Start+0x210>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d115      	bne.n	80040a6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_TIM_PWM_Start+0x220>)
 8004082:	4013      	ands	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b06      	cmp	r3, #6
 800408a:	d015      	beq.n	80040b8 <HAL_TIM_PWM_Start+0x1f0>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004092:	d011      	beq.n	80040b8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a4:	e008      	b.n	80040b8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e000      	b.n	80040ba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40013400 	.word	0x40013400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800
 80040d8:	40015000 	.word	0x40015000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	00010007 	.word	0x00010007

080040ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004106:	2302      	movs	r3, #2
 8004108:	e0ff      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b14      	cmp	r3, #20
 8004116:	f200 80f0 	bhi.w	80042fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004175 	.word	0x08004175
 8004124:	080042fb 	.word	0x080042fb
 8004128:	080042fb 	.word	0x080042fb
 800412c:	080042fb 	.word	0x080042fb
 8004130:	080041b5 	.word	0x080041b5
 8004134:	080042fb 	.word	0x080042fb
 8004138:	080042fb 	.word	0x080042fb
 800413c:	080042fb 	.word	0x080042fb
 8004140:	080041f7 	.word	0x080041f7
 8004144:	080042fb 	.word	0x080042fb
 8004148:	080042fb 	.word	0x080042fb
 800414c:	080042fb 	.word	0x080042fb
 8004150:	08004237 	.word	0x08004237
 8004154:	080042fb 	.word	0x080042fb
 8004158:	080042fb 	.word	0x080042fb
 800415c:	080042fb 	.word	0x080042fb
 8004160:	08004279 	.word	0x08004279
 8004164:	080042fb 	.word	0x080042fb
 8004168:	080042fb 	.word	0x080042fb
 800416c:	080042fb 	.word	0x080042fb
 8004170:	080042b9 	.word	0x080042b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fa94 	bl	80046a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0208 	orr.w	r2, r2, #8
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0204 	bic.w	r2, r2, #4
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	619a      	str	r2, [r3, #24]
      break;
 80041b2:	e0a5      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fb0e 	bl	80047dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6999      	ldr	r1, [r3, #24]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	021a      	lsls	r2, r3, #8
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	619a      	str	r2, [r3, #24]
      break;
 80041f4:	e084      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fb81 	bl	8004904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0208 	orr.w	r2, r2, #8
 8004210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0204 	bic.w	r2, r2, #4
 8004220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	61da      	str	r2, [r3, #28]
      break;
 8004234:	e064      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fbf3 	bl	8004a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69d9      	ldr	r1, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	021a      	lsls	r2, r3, #8
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	61da      	str	r2, [r3, #28]
      break;
 8004276:	e043      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fc66 	bl	8004b50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0208 	orr.w	r2, r2, #8
 8004292:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0204 	bic.w	r2, r2, #4
 80042a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80042b6:	e023      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fcb0 	bl	8004c24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	021a      	lsls	r2, r3, #8
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80042f8:	e002      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
      break;
 80042fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004308:	7dfb      	ldrb	r3, [r7, #23]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop

08004314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_TIM_ConfigClockSource+0x1c>
 800432c:	2302      	movs	r3, #2
 800432e:	e0f6      	b.n	800451e <HAL_TIM_ConfigClockSource+0x20a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800434e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800435a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6f      	ldr	r2, [pc, #444]	; (8004528 <HAL_TIM_ConfigClockSource+0x214>)
 800436a:	4293      	cmp	r3, r2
 800436c:	f000 80c1 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 8004370:	4a6d      	ldr	r2, [pc, #436]	; (8004528 <HAL_TIM_ConfigClockSource+0x214>)
 8004372:	4293      	cmp	r3, r2
 8004374:	f200 80c6 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 8004378:	4a6c      	ldr	r2, [pc, #432]	; (800452c <HAL_TIM_ConfigClockSource+0x218>)
 800437a:	4293      	cmp	r3, r2
 800437c:	f000 80b9 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 8004380:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_TIM_ConfigClockSource+0x218>)
 8004382:	4293      	cmp	r3, r2
 8004384:	f200 80be 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 8004388:	4a69      	ldr	r2, [pc, #420]	; (8004530 <HAL_TIM_ConfigClockSource+0x21c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	f000 80b1 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 8004390:	4a67      	ldr	r2, [pc, #412]	; (8004530 <HAL_TIM_ConfigClockSource+0x21c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	f200 80b6 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 8004398:	4a66      	ldr	r2, [pc, #408]	; (8004534 <HAL_TIM_ConfigClockSource+0x220>)
 800439a:	4293      	cmp	r3, r2
 800439c:	f000 80a9 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043a0:	4a64      	ldr	r2, [pc, #400]	; (8004534 <HAL_TIM_ConfigClockSource+0x220>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	f200 80ae 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 80043a8:	4a63      	ldr	r2, [pc, #396]	; (8004538 <HAL_TIM_ConfigClockSource+0x224>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	f000 80a1 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043b0:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_TIM_ConfigClockSource+0x224>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	f200 80a6 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 80043b8:	4a60      	ldr	r2, [pc, #384]	; (800453c <HAL_TIM_ConfigClockSource+0x228>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f000 8099 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043c0:	4a5e      	ldr	r2, [pc, #376]	; (800453c <HAL_TIM_ConfigClockSource+0x228>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	f200 809e 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 80043c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80043cc:	f000 8091 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80043d4:	f200 8096 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 80043d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043dc:	f000 8089 	beq.w	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e4:	f200 808e 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 80043e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ec:	d03e      	beq.n	800446c <HAL_TIM_ConfigClockSource+0x158>
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f2:	f200 8087 	bhi.w	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fa:	f000 8086 	beq.w	800450a <HAL_TIM_ConfigClockSource+0x1f6>
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004402:	d87f      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 8004404:	2b70      	cmp	r3, #112	; 0x70
 8004406:	d01a      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x12a>
 8004408:	2b70      	cmp	r3, #112	; 0x70
 800440a:	d87b      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 800440c:	2b60      	cmp	r3, #96	; 0x60
 800440e:	d050      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x19e>
 8004410:	2b60      	cmp	r3, #96	; 0x60
 8004412:	d877      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 8004414:	2b50      	cmp	r3, #80	; 0x50
 8004416:	d03c      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x17e>
 8004418:	2b50      	cmp	r3, #80	; 0x50
 800441a:	d873      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d058      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0x1be>
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d86f      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 8004424:	2b30      	cmp	r3, #48	; 0x30
 8004426:	d064      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 8004428:	2b30      	cmp	r3, #48	; 0x30
 800442a:	d86b      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 800442c:	2b20      	cmp	r3, #32
 800442e:	d060      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 8004430:	2b20      	cmp	r3, #32
 8004432:	d867      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d05c      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 8004438:	2b10      	cmp	r3, #16
 800443a:	d05a      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x1de>
 800443c:	e062      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800444e:	f000 fcd1 	bl	8004df4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	609a      	str	r2, [r3, #8]
      break;
 800446a:	e04f      	b.n	800450c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800447c:	f000 fcba 	bl	8004df4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448e:	609a      	str	r2, [r3, #8]
      break;
 8004490:	e03c      	b.n	800450c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	461a      	mov	r2, r3
 80044a0:	f000 fc2c 	bl	8004cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2150      	movs	r1, #80	; 0x50
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fc85 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 80044b0:	e02c      	b.n	800450c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044be:	461a      	mov	r2, r3
 80044c0:	f000 fc4b 	bl	8004d5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2160      	movs	r1, #96	; 0x60
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fc75 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 80044d0:	e01c      	b.n	800450c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044de:	461a      	mov	r2, r3
 80044e0:	f000 fc0c 	bl	8004cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2140      	movs	r1, #64	; 0x40
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fc65 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 80044f0:	e00c      	b.n	800450c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f000 fc5c 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 8004502:	e003      	b.n	800450c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      break;
 8004508:	e000      	b.n	800450c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800450a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	00100070 	.word	0x00100070
 800452c:	00100060 	.word	0x00100060
 8004530:	00100050 	.word	0x00100050
 8004534:	00100040 	.word	0x00100040
 8004538:	00100030 	.word	0x00100030
 800453c:	00100020 	.word	0x00100020

08004540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a4c      	ldr	r2, [pc, #304]	; (8004684 <TIM_Base_SetConfig+0x144>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d017      	beq.n	8004588 <TIM_Base_SetConfig+0x48>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d013      	beq.n	8004588 <TIM_Base_SetConfig+0x48>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a49      	ldr	r2, [pc, #292]	; (8004688 <TIM_Base_SetConfig+0x148>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00f      	beq.n	8004588 <TIM_Base_SetConfig+0x48>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a48      	ldr	r2, [pc, #288]	; (800468c <TIM_Base_SetConfig+0x14c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00b      	beq.n	8004588 <TIM_Base_SetConfig+0x48>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a47      	ldr	r2, [pc, #284]	; (8004690 <TIM_Base_SetConfig+0x150>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d007      	beq.n	8004588 <TIM_Base_SetConfig+0x48>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a46      	ldr	r2, [pc, #280]	; (8004694 <TIM_Base_SetConfig+0x154>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_Base_SetConfig+0x48>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a45      	ldr	r2, [pc, #276]	; (8004698 <TIM_Base_SetConfig+0x158>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d108      	bne.n	800459a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a39      	ldr	r2, [pc, #228]	; (8004684 <TIM_Base_SetConfig+0x144>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d023      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a8:	d01f      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a36      	ldr	r2, [pc, #216]	; (8004688 <TIM_Base_SetConfig+0x148>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01b      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a35      	ldr	r2, [pc, #212]	; (800468c <TIM_Base_SetConfig+0x14c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d017      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a34      	ldr	r2, [pc, #208]	; (8004690 <TIM_Base_SetConfig+0x150>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a33      	ldr	r2, [pc, #204]	; (8004694 <TIM_Base_SetConfig+0x154>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00f      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a33      	ldr	r2, [pc, #204]	; (800469c <TIM_Base_SetConfig+0x15c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a32      	ldr	r2, [pc, #200]	; (80046a0 <TIM_Base_SetConfig+0x160>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a31      	ldr	r2, [pc, #196]	; (80046a4 <TIM_Base_SetConfig+0x164>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_Base_SetConfig+0xaa>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <TIM_Base_SetConfig+0x158>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a18      	ldr	r2, [pc, #96]	; (8004684 <TIM_Base_SetConfig+0x144>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <TIM_Base_SetConfig+0x110>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a1a      	ldr	r2, [pc, #104]	; (8004694 <TIM_Base_SetConfig+0x154>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00f      	beq.n	8004650 <TIM_Base_SetConfig+0x110>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1a      	ldr	r2, [pc, #104]	; (800469c <TIM_Base_SetConfig+0x15c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <TIM_Base_SetConfig+0x110>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <TIM_Base_SetConfig+0x160>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_Base_SetConfig+0x110>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <TIM_Base_SetConfig+0x164>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0x110>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a13      	ldr	r2, [pc, #76]	; (8004698 <TIM_Base_SetConfig+0x158>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d103      	bne.n	8004658 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d105      	bne.n	8004676 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f023 0201 	bic.w	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	611a      	str	r2, [r3, #16]
  }
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40013400 	.word	0x40013400
 8004698:	40015000 	.word	0x40015000
 800469c:	40014000 	.word	0x40014000
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800

080046a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f023 0201 	bic.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 0302 	bic.w	r3, r3, #2
 80046f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a30      	ldr	r2, [pc, #192]	; (80047c4 <TIM_OC1_SetConfig+0x11c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a2f      	ldr	r2, [pc, #188]	; (80047c8 <TIM_OC1_SetConfig+0x120>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00f      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a2e      	ldr	r2, [pc, #184]	; (80047cc <TIM_OC1_SetConfig+0x124>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00b      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <TIM_OC1_SetConfig+0x128>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <TIM_OC1_SetConfig+0x12c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a2b      	ldr	r2, [pc, #172]	; (80047d8 <TIM_OC1_SetConfig+0x130>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d10c      	bne.n	800474a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 0308 	bic.w	r3, r3, #8
 8004736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 0304 	bic.w	r3, r3, #4
 8004748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <TIM_OC1_SetConfig+0x11c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <TIM_OC1_SetConfig+0x120>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <TIM_OC1_SetConfig+0x124>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <TIM_OC1_SetConfig+0x128>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <TIM_OC1_SetConfig+0x12c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <TIM_OC1_SetConfig+0x130>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d111      	bne.n	800479e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40013400 	.word	0x40013400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800
 80047d8:	40015000 	.word	0x40015000

080047dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f023 0210 	bic.w	r2, r3, #16
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0320 	bic.w	r3, r3, #32
 800482a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a2c      	ldr	r2, [pc, #176]	; (80048ec <TIM_OC2_SetConfig+0x110>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_OC2_SetConfig+0x74>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a2b      	ldr	r2, [pc, #172]	; (80048f0 <TIM_OC2_SetConfig+0x114>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_OC2_SetConfig+0x74>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <TIM_OC2_SetConfig+0x118>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10d      	bne.n	800486c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <TIM_OC2_SetConfig+0x110>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <TIM_OC2_SetConfig+0x114>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00f      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <TIM_OC2_SetConfig+0x11c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <TIM_OC2_SetConfig+0x120>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <TIM_OC2_SetConfig+0x124>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <TIM_OC2_SetConfig+0x118>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d113      	bne.n	80048c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40013400 	.word	0x40013400
 80048f4:	40015000 	.word	0x40015000
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <TIM_OC3_SetConfig+0x10c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_OC3_SetConfig+0x72>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <TIM_OC3_SetConfig+0x110>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_OC3_SetConfig+0x72>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a29      	ldr	r2, [pc, #164]	; (8004a18 <TIM_OC3_SetConfig+0x114>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10d      	bne.n	8004992 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800497c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <TIM_OC3_SetConfig+0x10c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <TIM_OC3_SetConfig+0x110>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00f      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <TIM_OC3_SetConfig+0x118>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <TIM_OC3_SetConfig+0x11c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <TIM_OC3_SetConfig+0x120>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d003      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <TIM_OC3_SetConfig+0x114>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d113      	bne.n	80049ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	621a      	str	r2, [r3, #32]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40013400 	.word	0x40013400
 8004a18:	40015000 	.word	0x40015000
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800

08004a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <TIM_OC4_SetConfig+0x110>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_OC4_SetConfig+0x74>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a2b      	ldr	r2, [pc, #172]	; (8004b3c <TIM_OC4_SetConfig+0x114>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_OC4_SetConfig+0x74>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a2a      	ldr	r2, [pc, #168]	; (8004b40 <TIM_OC4_SetConfig+0x118>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d10d      	bne.n	8004ab8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	031b      	lsls	r3, r3, #12
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <TIM_OC4_SetConfig+0x110>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <TIM_OC4_SetConfig+0xc0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <TIM_OC4_SetConfig+0x114>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00f      	beq.n	8004ae8 <TIM_OC4_SetConfig+0xc0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <TIM_OC4_SetConfig+0x11c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <TIM_OC4_SetConfig+0xc0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <TIM_OC4_SetConfig+0x120>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d007      	beq.n	8004ae8 <TIM_OC4_SetConfig+0xc0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <TIM_OC4_SetConfig+0x124>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_OC4_SetConfig+0xc0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <TIM_OC4_SetConfig+0x118>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d113      	bne.n	8004b10 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004af6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	019b      	lsls	r3, r3, #6
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40013400 	.word	0x40013400
 8004b40:	40015000 	.word	0x40015000
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800

08004b50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <TIM_OC5_SetConfig+0xbc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <TIM_OC5_SetConfig+0xc0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00f      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <TIM_OC5_SetConfig+0xc4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <TIM_OC5_SetConfig+0xc8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <TIM_OC5_SetConfig+0xcc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_OC5_SetConfig+0x82>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <TIM_OC5_SetConfig+0xd0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d109      	bne.n	8004be6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	621a      	str	r2, [r3, #32]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800
 8004c20:	40015000 	.word	0x40015000

08004c24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	051b      	lsls	r3, r3, #20
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <TIM_OC6_SetConfig+0xc0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <TIM_OC6_SetConfig+0xc4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00f      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <TIM_OC6_SetConfig+0xc8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <TIM_OC6_SetConfig+0xcc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <TIM_OC6_SetConfig+0xd0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x84>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <TIM_OC6_SetConfig+0xd4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d109      	bne.n	8004cbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800
 8004cf8:	40015000 	.word	0x40015000

08004cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f023 0201 	bic.w	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 030a 	bic.w	r3, r3, #10
 8004d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b087      	sub	sp, #28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f023 0210 	bic.w	r2, r3, #16
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f043 0307 	orr.w	r3, r3, #7
 8004de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	021a      	lsls	r2, r3, #8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	609a      	str	r2, [r3, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	2201      	movs	r2, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1a      	ldr	r2, [r3, #32]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	401a      	ands	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e074      	b.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a34      	ldr	r2, [pc, #208]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a31      	ldr	r2, [pc, #196]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d108      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004edc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d022      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d01d      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1f      	ldr	r2, [pc, #124]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10c      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40015000 	.word	0x40015000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40014000 	.word	0x40014000

08004fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e078      	b.n	80050ba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d009      	beq.n	800506e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a19      	ldr	r2, [pc, #100]	; (80050d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d11c      	bne.n	80050a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	051b      	lsls	r3, r3, #20
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40013400 	.word	0x40013400
 80050d0:	40015000 	.word	0x40015000

080050d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e042      	b.n	800516c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7fc f8a9 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2224      	movs	r2, #36	; 0x24
 8005102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fb24 	bl	800576c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f825 	bl	8005174 <UART_SetConfig>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e01b      	b.n	800516c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fba3 	bl	80058b0 <UART_CheckIdleState>
 800516a:	4603      	mov	r3, r0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005178:	b08c      	sub	sp, #48	; 0x30
 800517a:	af00      	add	r7, sp, #0
 800517c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	431a      	orrs	r2, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4baa      	ldr	r3, [pc, #680]	; (800544c <UART_SetConfig+0x2d8>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a9f      	ldr	r2, [pc, #636]	; (8005450 <UART_SetConfig+0x2dc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051dc:	4313      	orrs	r3, r2
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f023 010f 	bic.w	r1, r3, #15
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a90      	ldr	r2, [pc, #576]	; (8005454 <UART_SetConfig+0x2e0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d125      	bne.n	8005264 <UART_SetConfig+0xf0>
 8005218:	4b8f      	ldr	r3, [pc, #572]	; (8005458 <UART_SetConfig+0x2e4>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b03      	cmp	r3, #3
 8005224:	d81a      	bhi.n	800525c <UART_SetConfig+0xe8>
 8005226:	a201      	add	r2, pc, #4	; (adr r2, 800522c <UART_SetConfig+0xb8>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	0800523d 	.word	0x0800523d
 8005230:	0800524d 	.word	0x0800524d
 8005234:	08005245 	.word	0x08005245
 8005238:	08005255 	.word	0x08005255
 800523c:	2301      	movs	r3, #1
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005242:	e116      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005244:	2302      	movs	r3, #2
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524a:	e112      	b.n	8005472 <UART_SetConfig+0x2fe>
 800524c:	2304      	movs	r3, #4
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005252:	e10e      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005254:	2308      	movs	r3, #8
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e10a      	b.n	8005472 <UART_SetConfig+0x2fe>
 800525c:	2310      	movs	r3, #16
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005262:	e106      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a7c      	ldr	r2, [pc, #496]	; (800545c <UART_SetConfig+0x2e8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d138      	bne.n	80052e0 <UART_SetConfig+0x16c>
 800526e:	4b7a      	ldr	r3, [pc, #488]	; (8005458 <UART_SetConfig+0x2e4>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d82d      	bhi.n	80052d8 <UART_SetConfig+0x164>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x110>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052d9 	.word	0x080052d9
 800528c:	080052d9 	.word	0x080052d9
 8005290:	080052d9 	.word	0x080052d9
 8005294:	080052c9 	.word	0x080052c9
 8005298:	080052d9 	.word	0x080052d9
 800529c:	080052d9 	.word	0x080052d9
 80052a0:	080052d9 	.word	0x080052d9
 80052a4:	080052c1 	.word	0x080052c1
 80052a8:	080052d9 	.word	0x080052d9
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052d1 	.word	0x080052d1
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052be:	e0d8      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052c0:	2302      	movs	r3, #2
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e0d4      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052c8:	2304      	movs	r3, #4
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e0d0      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052d0:	2308      	movs	r3, #8
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d6:	e0cc      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052d8:	2310      	movs	r3, #16
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052de:	e0c8      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5e      	ldr	r2, [pc, #376]	; (8005460 <UART_SetConfig+0x2ec>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d125      	bne.n	8005336 <UART_SetConfig+0x1c2>
 80052ea:	4b5b      	ldr	r3, [pc, #364]	; (8005458 <UART_SetConfig+0x2e4>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052f4:	2b30      	cmp	r3, #48	; 0x30
 80052f6:	d016      	beq.n	8005326 <UART_SetConfig+0x1b2>
 80052f8:	2b30      	cmp	r3, #48	; 0x30
 80052fa:	d818      	bhi.n	800532e <UART_SetConfig+0x1ba>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d00a      	beq.n	8005316 <UART_SetConfig+0x1a2>
 8005300:	2b20      	cmp	r3, #32
 8005302:	d814      	bhi.n	800532e <UART_SetConfig+0x1ba>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <UART_SetConfig+0x19a>
 8005308:	2b10      	cmp	r3, #16
 800530a:	d008      	beq.n	800531e <UART_SetConfig+0x1aa>
 800530c:	e00f      	b.n	800532e <UART_SetConfig+0x1ba>
 800530e:	2300      	movs	r3, #0
 8005310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005314:	e0ad      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005316:	2302      	movs	r3, #2
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531c:	e0a9      	b.n	8005472 <UART_SetConfig+0x2fe>
 800531e:	2304      	movs	r3, #4
 8005320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005324:	e0a5      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005326:	2308      	movs	r3, #8
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532c:	e0a1      	b.n	8005472 <UART_SetConfig+0x2fe>
 800532e:	2310      	movs	r3, #16
 8005330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005334:	e09d      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a4a      	ldr	r2, [pc, #296]	; (8005464 <UART_SetConfig+0x2f0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d125      	bne.n	800538c <UART_SetConfig+0x218>
 8005340:	4b45      	ldr	r3, [pc, #276]	; (8005458 <UART_SetConfig+0x2e4>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800534a:	2bc0      	cmp	r3, #192	; 0xc0
 800534c:	d016      	beq.n	800537c <UART_SetConfig+0x208>
 800534e:	2bc0      	cmp	r3, #192	; 0xc0
 8005350:	d818      	bhi.n	8005384 <UART_SetConfig+0x210>
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d00a      	beq.n	800536c <UART_SetConfig+0x1f8>
 8005356:	2b80      	cmp	r3, #128	; 0x80
 8005358:	d814      	bhi.n	8005384 <UART_SetConfig+0x210>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <UART_SetConfig+0x1f0>
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d008      	beq.n	8005374 <UART_SetConfig+0x200>
 8005362:	e00f      	b.n	8005384 <UART_SetConfig+0x210>
 8005364:	2300      	movs	r3, #0
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536a:	e082      	b.n	8005472 <UART_SetConfig+0x2fe>
 800536c:	2302      	movs	r3, #2
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005372:	e07e      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537a:	e07a      	b.n	8005472 <UART_SetConfig+0x2fe>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005382:	e076      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538a:	e072      	b.n	8005472 <UART_SetConfig+0x2fe>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a35      	ldr	r2, [pc, #212]	; (8005468 <UART_SetConfig+0x2f4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d12a      	bne.n	80053ec <UART_SetConfig+0x278>
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <UART_SetConfig+0x2e4>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a4:	d01a      	beq.n	80053dc <UART_SetConfig+0x268>
 80053a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053aa:	d81b      	bhi.n	80053e4 <UART_SetConfig+0x270>
 80053ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b0:	d00c      	beq.n	80053cc <UART_SetConfig+0x258>
 80053b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b6:	d815      	bhi.n	80053e4 <UART_SetConfig+0x270>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <UART_SetConfig+0x250>
 80053bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c0:	d008      	beq.n	80053d4 <UART_SetConfig+0x260>
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x270>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ca:	e052      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d2:	e04e      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053da:	e04a      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e2:	e046      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ea:	e042      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a17      	ldr	r2, [pc, #92]	; (8005450 <UART_SetConfig+0x2dc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d13a      	bne.n	800546c <UART_SetConfig+0x2f8>
 80053f6:	4b18      	ldr	r3, [pc, #96]	; (8005458 <UART_SetConfig+0x2e4>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005404:	d01a      	beq.n	800543c <UART_SetConfig+0x2c8>
 8005406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800540a:	d81b      	bhi.n	8005444 <UART_SetConfig+0x2d0>
 800540c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005410:	d00c      	beq.n	800542c <UART_SetConfig+0x2b8>
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005416:	d815      	bhi.n	8005444 <UART_SetConfig+0x2d0>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <UART_SetConfig+0x2b0>
 800541c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005420:	d008      	beq.n	8005434 <UART_SetConfig+0x2c0>
 8005422:	e00f      	b.n	8005444 <UART_SetConfig+0x2d0>
 8005424:	2300      	movs	r3, #0
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800542a:	e022      	b.n	8005472 <UART_SetConfig+0x2fe>
 800542c:	2302      	movs	r3, #2
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005432:	e01e      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005434:	2304      	movs	r3, #4
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543a:	e01a      	b.n	8005472 <UART_SetConfig+0x2fe>
 800543c:	2308      	movs	r3, #8
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005442:	e016      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005444:	2310      	movs	r3, #16
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544a:	e012      	b.n	8005472 <UART_SetConfig+0x2fe>
 800544c:	cfff69f3 	.word	0xcfff69f3
 8005450:	40008000 	.word	0x40008000
 8005454:	40013800 	.word	0x40013800
 8005458:	40021000 	.word	0x40021000
 800545c:	40004400 	.word	0x40004400
 8005460:	40004800 	.word	0x40004800
 8005464:	40004c00 	.word	0x40004c00
 8005468:	40005000 	.word	0x40005000
 800546c:	2310      	movs	r3, #16
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4aae      	ldr	r2, [pc, #696]	; (8005730 <UART_SetConfig+0x5bc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	f040 8097 	bne.w	80055ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800547e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005482:	2b08      	cmp	r3, #8
 8005484:	d823      	bhi.n	80054ce <UART_SetConfig+0x35a>
 8005486:	a201      	add	r2, pc, #4	; (adr r2, 800548c <UART_SetConfig+0x318>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054cf 	.word	0x080054cf
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054cf 	.word	0x080054cf
 800549c:	080054bf 	.word	0x080054bf
 80054a0:	080054cf 	.word	0x080054cf
 80054a4:	080054cf 	.word	0x080054cf
 80054a8:	080054cf 	.word	0x080054cf
 80054ac:	080054c7 	.word	0x080054c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fe f920 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 80054b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054b6:	e010      	b.n	80054da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b8:	4b9e      	ldr	r3, [pc, #632]	; (8005734 <UART_SetConfig+0x5c0>)
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054bc:	e00d      	b.n	80054da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054be:	f7fe f8ab 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80054c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054c4:	e009      	b.n	80054da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054cc:	e005      	b.n	80054da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8130 	beq.w	8005742 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	4a94      	ldr	r2, [pc, #592]	; (8005738 <UART_SetConfig+0x5c4>)
 80054e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ec:	461a      	mov	r2, r3
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	429a      	cmp	r2, r3
 8005504:	d305      	bcc.n	8005512 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	429a      	cmp	r2, r3
 8005510:	d903      	bls.n	800551a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005518:	e113      	b.n	8005742 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2200      	movs	r2, #0
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	60fa      	str	r2, [r7, #12]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	4a84      	ldr	r2, [pc, #528]	; (8005738 <UART_SetConfig+0x5c4>)
 8005528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800552c:	b29b      	uxth	r3, r3
 800552e:	2200      	movs	r2, #0
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005538:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800553c:	f7fa fe8c 	bl	8000258 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	020b      	lsls	r3, r1, #8
 8005552:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005556:	0202      	lsls	r2, r0, #8
 8005558:	6979      	ldr	r1, [r7, #20]
 800555a:	6849      	ldr	r1, [r1, #4]
 800555c:	0849      	lsrs	r1, r1, #1
 800555e:	2000      	movs	r0, #0
 8005560:	460c      	mov	r4, r1
 8005562:	4605      	mov	r5, r0
 8005564:	eb12 0804 	adds.w	r8, r2, r4
 8005568:	eb43 0905 	adc.w	r9, r3, r5
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	469a      	mov	sl, r3
 8005574:	4693      	mov	fp, r2
 8005576:	4652      	mov	r2, sl
 8005578:	465b      	mov	r3, fp
 800557a:	4640      	mov	r0, r8
 800557c:	4649      	mov	r1, r9
 800557e:	f7fa fe6b 	bl	8000258 <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4613      	mov	r3, r2
 8005588:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005590:	d308      	bcc.n	80055a4 <UART_SetConfig+0x430>
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005598:	d204      	bcs.n	80055a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	e0ce      	b.n	8005742 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055aa:	e0ca      	b.n	8005742 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b4:	d166      	bne.n	8005684 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d827      	bhi.n	800560e <UART_SetConfig+0x49a>
 80055be:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0x450>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	0800560f 	.word	0x0800560f
 80055d4:	080055ff 	.word	0x080055ff
 80055d8:	0800560f 	.word	0x0800560f
 80055dc:	0800560f 	.word	0x0800560f
 80055e0:	0800560f 	.word	0x0800560f
 80055e4:	08005607 	.word	0x08005607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e8:	f7fe f884 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 80055ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055ee:	e014      	b.n	800561a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f0:	f7fe f896 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055f6:	e010      	b.n	800561a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f8:	4b4e      	ldr	r3, [pc, #312]	; (8005734 <UART_SetConfig+0x5c0>)
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055fc:	e00d      	b.n	800561a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fe:	f7fe f80b 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8005602:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005604:	e009      	b.n	800561a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800560c:	e005      	b.n	800561a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8090 	beq.w	8005742 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	4a44      	ldr	r2, [pc, #272]	; (8005738 <UART_SetConfig+0x5c4>)
 8005628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562c:	461a      	mov	r2, r3
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	fbb3 f3f2 	udiv	r3, r3, r2
 8005634:	005a      	lsls	r2, r3, #1
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	441a      	add	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d916      	bls.n	800567c <UART_SetConfig+0x508>
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005654:	d212      	bcs.n	800567c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f023 030f 	bic.w	r3, r3, #15
 800565e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	b29b      	uxth	r3, r3
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	b29a      	uxth	r2, r3
 800566c:	8bfb      	ldrh	r3, [r7, #30]
 800566e:	4313      	orrs	r3, r2
 8005670:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	8bfa      	ldrh	r2, [r7, #30]
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	e062      	b.n	8005742 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005682:	e05e      	b.n	8005742 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005688:	2b08      	cmp	r3, #8
 800568a:	d828      	bhi.n	80056de <UART_SetConfig+0x56a>
 800568c:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0x520>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	080056df 	.word	0x080056df
 80056a4:	080056cf 	.word	0x080056cf
 80056a8:	080056df 	.word	0x080056df
 80056ac:	080056df 	.word	0x080056df
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fe f81c 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 80056bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056be:	e014      	b.n	80056ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7fe f82e 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 80056c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056c6:	e010      	b.n	80056ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b1a      	ldr	r3, [pc, #104]	; (8005734 <UART_SetConfig+0x5c0>)
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056cc:	e00d      	b.n	80056ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fd ffa3 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80056d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056d4:	e009      	b.n	80056ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056dc:	e005      	b.n	80056ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056e8:	bf00      	nop
    }

    if (pclk != 0U)
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d028      	beq.n	8005742 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	4a10      	ldr	r2, [pc, #64]	; (8005738 <UART_SetConfig+0x5c4>)
 80056f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056fa:	461a      	mov	r2, r3
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	441a      	add	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d910      	bls.n	800573c <UART_SetConfig+0x5c8>
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005720:	d20c      	bcs.n	800573c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	b29a      	uxth	r2, r3
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60da      	str	r2, [r3, #12]
 800572c:	e009      	b.n	8005742 <UART_SetConfig+0x5ce>
 800572e:	bf00      	nop
 8005730:	40008000 	.word	0x40008000
 8005734:	00f42400 	.word	0x00f42400
 8005738:	08005e38 	.word	0x08005e38
      }
      else
      {
        ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2201      	movs	r2, #1
 8005746:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2201      	movs	r2, #1
 800574e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2200      	movs	r2, #0
 800575c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800575e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005762:	4618      	mov	r0, r3
 8005764:	3730      	adds	r7, #48	; 0x30
 8005766:	46bd      	mov	sp, r7
 8005768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800576c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01a      	beq.n	8005882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800586a:	d10a      	bne.n	8005882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b098      	sub	sp, #96	; 0x60
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c0:	f7fb fdac 	bl	800141c <HAL_GetTick>
 80058c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d12f      	bne.n	8005934 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058dc:	2200      	movs	r2, #0
 80058de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f88e 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d022      	beq.n	8005934 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005902:	653b      	str	r3, [r7, #80]	; 0x50
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590c:	647b      	str	r3, [r7, #68]	; 0x44
 800590e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800591a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e6      	bne.n	80058ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e063      	b.n	80059fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b04      	cmp	r3, #4
 8005940:	d149      	bne.n	80059d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005942:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594a:	2200      	movs	r2, #0
 800594c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f857 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d03c      	beq.n	80059d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	623b      	str	r3, [r7, #32]
   return(result);
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
 800597c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e6      	bne.n	800595c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	60fb      	str	r3, [r7, #12]
   return(result);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3308      	adds	r3, #8
 80059ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ae:	61fa      	str	r2, [r7, #28]
 80059b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	69b9      	ldr	r1, [r7, #24]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	617b      	str	r3, [r7, #20]
   return(result);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e5      	bne.n	800598e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e012      	b.n	80059fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3758      	adds	r7, #88	; 0x58
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a14:	e04f      	b.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d04b      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1e:	f7fb fcfd 	bl	800141c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d302      	bcc.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e04e      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d037      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d034      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d031      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d110      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2208      	movs	r2, #8
 8005a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f838 	bl	8005ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2208      	movs	r2, #8
 8005a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e029      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a90:	d111      	bne.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f81e 	bl	8005ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e00f      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	bf0c      	ite	eq
 8005ac6:	2301      	moveq	r3, #1
 8005ac8:	2300      	movne	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d0a0      	beq.n	8005a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b095      	sub	sp, #84	; 0x54
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b04:	643b      	str	r3, [r7, #64]	; 0x40
 8005b06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e6      	bne.n	8005ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e3      	bne.n	8005b18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d118      	bne.n	8005b8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6979      	ldr	r1, [r7, #20]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	613b      	str	r3, [r7, #16]
   return(result);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e6      	bne.n	8005b58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005b9e:	bf00      	nop
 8005ba0:	3754      	adds	r7, #84	; 0x54
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e027      	b.n	8005c10 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2224      	movs	r2, #36	; 0x24
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e02d      	b.n	8005c90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f84f 	bl	8005d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e02d      	b.n	8005d0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	; 0x24
 8005cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0201 	bic.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f811 	bl	8005d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d34:	e031      	b.n	8005d9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d36:	2308      	movs	r3, #8
 8005d38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	0e5b      	lsrs	r3, r3, #25
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	0f5b      	lsrs	r3, r3, #29
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	7b3a      	ldrb	r2, [r7, #12]
 8005d62:	4911      	ldr	r1, [pc, #68]	; (8005da8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d64:	5c8a      	ldrb	r2, [r1, r2]
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d6a:	7b3a      	ldrb	r2, [r7, #12]
 8005d6c:	490f      	ldr	r1, [pc, #60]	; (8005dac <UARTEx_SetNbDataToProcess+0x98>)
 8005d6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	7b7a      	ldrb	r2, [r7, #13]
 8005d80:	4909      	ldr	r1, [pc, #36]	; (8005da8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d82:	5c8a      	ldrb	r2, [r1, r2]
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d88:	7b7a      	ldrb	r2, [r7, #13]
 8005d8a:	4908      	ldr	r1, [pc, #32]	; (8005dac <UARTEx_SetNbDataToProcess+0x98>)
 8005d8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	08005e50 	.word	0x08005e50
 8005dac:	08005e58 	.word	0x08005e58

08005db0 <memset>:
 8005db0:	4402      	add	r2, r0
 8005db2:	4603      	mov	r3, r0
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d100      	bne.n	8005dba <memset+0xa>
 8005db8:	4770      	bx	lr
 8005dba:	f803 1b01 	strb.w	r1, [r3], #1
 8005dbe:	e7f9      	b.n	8005db4 <memset+0x4>

08005dc0 <__libc_init_array>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	4d0d      	ldr	r5, [pc, #52]	; (8005df8 <__libc_init_array+0x38>)
 8005dc4:	4c0d      	ldr	r4, [pc, #52]	; (8005dfc <__libc_init_array+0x3c>)
 8005dc6:	1b64      	subs	r4, r4, r5
 8005dc8:	10a4      	asrs	r4, r4, #2
 8005dca:	2600      	movs	r6, #0
 8005dcc:	42a6      	cmp	r6, r4
 8005dce:	d109      	bne.n	8005de4 <__libc_init_array+0x24>
 8005dd0:	4d0b      	ldr	r5, [pc, #44]	; (8005e00 <__libc_init_array+0x40>)
 8005dd2:	4c0c      	ldr	r4, [pc, #48]	; (8005e04 <__libc_init_array+0x44>)
 8005dd4:	f000 f818 	bl	8005e08 <_init>
 8005dd8:	1b64      	subs	r4, r4, r5
 8005dda:	10a4      	asrs	r4, r4, #2
 8005ddc:	2600      	movs	r6, #0
 8005dde:	42a6      	cmp	r6, r4
 8005de0:	d105      	bne.n	8005dee <__libc_init_array+0x2e>
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de8:	4798      	blx	r3
 8005dea:	3601      	adds	r6, #1
 8005dec:	e7ee      	b.n	8005dcc <__libc_init_array+0xc>
 8005dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df2:	4798      	blx	r3
 8005df4:	3601      	adds	r6, #1
 8005df6:	e7f2      	b.n	8005dde <__libc_init_array+0x1e>
 8005df8:	08005e68 	.word	0x08005e68
 8005dfc:	08005e68 	.word	0x08005e68
 8005e00:	08005e68 	.word	0x08005e68
 8005e04:	08005e6c 	.word	0x08005e6c

08005e08 <_init>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr

08005e14 <_fini>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	bf00      	nop
 8005e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1a:	bc08      	pop	{r3}
 8005e1c:	469e      	mov	lr, r3
 8005e1e:	4770      	bx	lr
