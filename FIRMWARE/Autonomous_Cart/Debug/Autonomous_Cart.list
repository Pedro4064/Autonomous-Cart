
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007c78  08007c78  00017c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc0  08007cc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  20000010  08007cd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  08007cd8  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d601  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b52  00000000  00000000  0003d684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  000411d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001369  00000000  00000000  00042ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ac4  00000000  00000000  00043e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000215cb  00000000  00000000  000478ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112429  00000000  00000000  00068eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a0c  00000000  00000000  0017b2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00181cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007c60 	.word	0x08007c60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007c60 	.word	0x08007c60

08000218 <__aeabi_d2uiz>:
 8000218:	004a      	lsls	r2, r1, #1
 800021a:	d211      	bcs.n	8000240 <__aeabi_d2uiz+0x28>
 800021c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000220:	d211      	bcs.n	8000246 <__aeabi_d2uiz+0x2e>
 8000222:	d50d      	bpl.n	8000240 <__aeabi_d2uiz+0x28>
 8000224:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000228:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800022c:	d40e      	bmi.n	800024c <__aeabi_d2uiz+0x34>
 800022e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000236:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800023a:	fa23 f002 	lsr.w	r0, r3, r2
 800023e:	4770      	bx	lr
 8000240:	f04f 0000 	mov.w	r0, #0
 8000244:	4770      	bx	lr
 8000246:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800024a:	d102      	bne.n	8000252 <__aeabi_d2uiz+0x3a>
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	4770      	bx	lr
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	4770      	bx	lr

08000258 <__aeabi_uldivmod>:
 8000258:	b953      	cbnz	r3, 8000270 <__aeabi_uldivmod+0x18>
 800025a:	b94a      	cbnz	r2, 8000270 <__aeabi_uldivmod+0x18>
 800025c:	2900      	cmp	r1, #0
 800025e:	bf08      	it	eq
 8000260:	2800      	cmpeq	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	f04f 31ff 	movne.w	r1, #4294967295
 8000268:	f04f 30ff 	movne.w	r0, #4294967295
 800026c:	f000 b970 	b.w	8000550 <__aeabi_idiv0>
 8000270:	f1ad 0c08 	sub.w	ip, sp, #8
 8000274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000284:	b004      	add	sp, #16
 8000286:	4770      	bx	lr

08000288 <__udivmoddi4>:
 8000288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800028c:	9e08      	ldr	r6, [sp, #32]
 800028e:	460d      	mov	r5, r1
 8000290:	4604      	mov	r4, r0
 8000292:	460f      	mov	r7, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14a      	bne.n	800032e <__udivmoddi4+0xa6>
 8000298:	428a      	cmp	r2, r1
 800029a:	4694      	mov	ip, r2
 800029c:	d965      	bls.n	800036a <__udivmoddi4+0xe2>
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	b143      	cbz	r3, 80002b6 <__udivmoddi4+0x2e>
 80002a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a8:	f1c3 0220 	rsb	r2, r3, #32
 80002ac:	409f      	lsls	r7, r3
 80002ae:	fa20 f202 	lsr.w	r2, r0, r2
 80002b2:	4317      	orrs	r7, r2
 80002b4:	409c      	lsls	r4, r3
 80002b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ba:	fa1f f58c 	uxth.w	r5, ip
 80002be:	fbb7 f1fe 	udiv	r1, r7, lr
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002cc:	fb01 f005 	mul.w	r0, r1, r5
 80002d0:	4290      	cmp	r0, r2
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x62>
 80002d4:	eb1c 0202 	adds.w	r2, ip, r2
 80002d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002dc:	f080 811c 	bcs.w	8000518 <__udivmoddi4+0x290>
 80002e0:	4290      	cmp	r0, r2
 80002e2:	f240 8119 	bls.w	8000518 <__udivmoddi4+0x290>
 80002e6:	3902      	subs	r1, #2
 80002e8:	4462      	add	r2, ip
 80002ea:	1a12      	subs	r2, r2, r0
 80002ec:	b2a4      	uxth	r4, r4
 80002ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fa:	fb00 f505 	mul.w	r5, r0, r5
 80002fe:	42a5      	cmp	r5, r4
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x90>
 8000302:	eb1c 0404 	adds.w	r4, ip, r4
 8000306:	f100 32ff 	add.w	r2, r0, #4294967295
 800030a:	f080 8107 	bcs.w	800051c <__udivmoddi4+0x294>
 800030e:	42a5      	cmp	r5, r4
 8000310:	f240 8104 	bls.w	800051c <__udivmoddi4+0x294>
 8000314:	4464      	add	r4, ip
 8000316:	3802      	subs	r0, #2
 8000318:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	2100      	movs	r1, #0
 8000320:	b11e      	cbz	r6, 800032a <__udivmoddi4+0xa2>
 8000322:	40dc      	lsrs	r4, r3
 8000324:	2300      	movs	r3, #0
 8000326:	e9c6 4300 	strd	r4, r3, [r6]
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	428b      	cmp	r3, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000332:	2e00      	cmp	r6, #0
 8000334:	f000 80ed 	beq.w	8000512 <__udivmoddi4+0x28a>
 8000338:	2100      	movs	r1, #0
 800033a:	e9c6 0500 	strd	r0, r5, [r6]
 800033e:	4608      	mov	r0, r1
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	fab3 f183 	clz	r1, r3
 8000348:	2900      	cmp	r1, #0
 800034a:	d149      	bne.n	80003e0 <__udivmoddi4+0x158>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d302      	bcc.n	8000356 <__udivmoddi4+0xce>
 8000350:	4282      	cmp	r2, r0
 8000352:	f200 80f8 	bhi.w	8000546 <__udivmoddi4+0x2be>
 8000356:	1a84      	subs	r4, r0, r2
 8000358:	eb65 0203 	sbc.w	r2, r5, r3
 800035c:	2001      	movs	r0, #1
 800035e:	4617      	mov	r7, r2
 8000360:	2e00      	cmp	r6, #0
 8000362:	d0e2      	beq.n	800032a <__udivmoddi4+0xa2>
 8000364:	e9c6 4700 	strd	r4, r7, [r6]
 8000368:	e7df      	b.n	800032a <__udivmoddi4+0xa2>
 800036a:	b902      	cbnz	r2, 800036e <__udivmoddi4+0xe6>
 800036c:	deff      	udf	#255	; 0xff
 800036e:	fab2 f382 	clz	r3, r2
 8000372:	2b00      	cmp	r3, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x210>
 8000378:	1a8a      	subs	r2, r1, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2101      	movs	r1, #1
 8000384:	fbb2 f5f7 	udiv	r5, r2, r7
 8000388:	fb07 2015 	mls	r0, r7, r5, r2
 800038c:	0c22      	lsrs	r2, r4, #16
 800038e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000392:	fb0e f005 	mul.w	r0, lr, r5
 8000396:	4290      	cmp	r0, r2
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x124>
 800039a:	eb1c 0202 	adds.w	r2, ip, r2
 800039e:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x122>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2b8>
 80003aa:	4645      	mov	r5, r8
 80003ac:	1a12      	subs	r2, r2, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b4:	fb07 2210 	mls	r2, r7, r0, r2
 80003b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x14e>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x14c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2c2>
 80003d4:	4610      	mov	r0, r2
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003de:	e79f      	b.n	8000320 <__udivmoddi4+0x98>
 80003e0:	f1c1 0720 	rsb	r7, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa05 f401 	lsl.w	r4, r5, r1
 80003f2:	fa20 f307 	lsr.w	r3, r0, r7
 80003f6:	40fd      	lsrs	r5, r7
 80003f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	fb09 5518 	mls	r5, r9, r8, r5
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000410:	fb08 f50e 	mul.w	r5, r8, lr
 8000414:	42a5      	cmp	r5, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	fa00 f001 	lsl.w	r0, r0, r1
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b0>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2b4>
 800042c:	42a5      	cmp	r5, r4
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2b4>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4464      	add	r4, ip
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	b29d      	uxth	r5, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000448:	fb03 fe0e 	mul.w	lr, r3, lr
 800044c:	45a6      	cmp	lr, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1da>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f103 35ff 	add.w	r5, r3, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2ac>
 800045a:	45a6      	cmp	lr, r4
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2ac>
 800045e:	3b02      	subs	r3, #2
 8000460:	4464      	add	r4, ip
 8000462:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000466:	fba3 9502 	umull	r9, r5, r3, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	42ac      	cmp	r4, r5
 8000470:	46c8      	mov	r8, r9
 8000472:	46ae      	mov	lr, r5
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x29c>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x298>
 8000478:	b156      	cbz	r6, 8000490 <__udivmoddi4+0x208>
 800047a:	ebb0 0208 	subs.w	r2, r0, r8
 800047e:	eb64 040e 	sbc.w	r4, r4, lr
 8000482:	fa04 f707 	lsl.w	r7, r4, r7
 8000486:	40ca      	lsrs	r2, r1
 8000488:	40cc      	lsrs	r4, r1
 800048a:	4317      	orrs	r7, r2
 800048c:	e9c6 7400 	strd	r7, r4, [r6]
 8000490:	4618      	mov	r0, r3
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	f1c3 0120 	rsb	r1, r3, #32
 800049c:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a0:	fa20 f201 	lsr.w	r2, r0, r1
 80004a4:	fa25 f101 	lsr.w	r1, r5, r1
 80004a8:	409d      	lsls	r5, r3
 80004aa:	432a      	orrs	r2, r5
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b8:	fb07 1510 	mls	r5, r7, r0, r1
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004c2:	fb00 f50e 	mul.w	r5, r0, lr
 80004c6:	428d      	cmp	r5, r1
 80004c8:	fa04 f403 	lsl.w	r4, r4, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x258>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b0>
 80004d8:	428d      	cmp	r5, r1
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b0>
 80004dc:	3802      	subs	r0, #2
 80004de:	4461      	add	r1, ip
 80004e0:	1b49      	subs	r1, r1, r5
 80004e2:	b292      	uxth	r2, r2
 80004e4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f0:	fb05 f10e 	mul.w	r1, r5, lr
 80004f4:	4291      	cmp	r1, r2
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x282>
 80004f8:	eb1c 0202 	adds.w	r2, ip, r2
 80004fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2a8>
 8000502:	4291      	cmp	r1, r2
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2a8>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	1a52      	subs	r2, r2, r1
 800050c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0xfc>
 8000512:	4631      	mov	r1, r6
 8000514:	4630      	mov	r0, r6
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xa2>
 8000518:	4639      	mov	r1, r7
 800051a:	e6e6      	b.n	80002ea <__udivmoddi4+0x62>
 800051c:	4610      	mov	r0, r2
 800051e:	e6fb      	b.n	8000318 <__udivmoddi4+0x90>
 8000520:	4548      	cmp	r0, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f0>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb65 0e0c 	sbc.w	lr, r5, ip
 800052c:	3b01      	subs	r3, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f0>
 8000530:	4645      	mov	r5, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x282>
 8000534:	462b      	mov	r3, r5
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1da>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x258>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b0>
 8000540:	3d02      	subs	r5, #2
 8000542:	4462      	add	r2, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x124>
 8000546:	4608      	mov	r0, r1
 8000548:	e70a      	b.n	8000360 <__udivmoddi4+0xd8>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x14e>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <vPowerTrainSystemInit+0x20>)
 800055a:	f004 fd75 	bl	8005048 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 800055e:	2100      	movs	r1, #0
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <vPowerTrainSystemInit+0x20>)
 8000562:	f004 feb1 	bl	80052c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 8000566:	2104      	movs	r1, #4
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <vPowerTrainSystemInit+0x20>)
 800056a:	f004 fead 	bl	80052c8 <HAL_TIM_PWM_Start>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000048c 	.word	0x2000048c

08000578 <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <vPowerTrainSystemSetMotorDirection+0x1c>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d01f      	beq.n	80005d2 <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000592:	e040      	b.n	8000616 <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10b      	bne.n	80005b2 <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005a2:	f003 fb5b 	bl	8003c5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005ae:	f003 fb55 	bl	8003c5c <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d12b      	bne.n	8000610 <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4818      	ldr	r0, [pc, #96]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005c0:	f003 fb4c 	bl	8003c5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005cc:	f003 fb46 	bl	8003c5c <HAL_GPIO_WritePin>
			} break;
 80005d0:	e01e      	b.n	8000610 <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10b      	bne.n	80005f0 <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005de:	f003 fb3d 	bl	8003c5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f003 fb36 	bl	8003c5c <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10e      	bne.n	8000614 <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005fc:	f003 fb2e 	bl	8003c5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f003 fb27 	bl	8003c5c <HAL_GPIO_WritePin>
			} break;
 800060e:	e001      	b.n	8000614 <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000614:	bf00      	nop
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	48000400 	.word	0x48000400

08000624 <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	ed87 0b00 	vstr	d0, [r7]
 8000630:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <vPowerTrainSystemSetMotorSpeed+0x1a>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d009      	beq.n	8000650 <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 800063c:	e011      	b.n	8000662 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000640:	681c      	ldr	r4, [r3, #0]
 8000642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000646:	f7ff fde7 	bl	8000218 <__aeabi_d2uiz>
 800064a:	4603      	mov	r3, r0
 800064c:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 800064e:	e008      	b.n	8000662 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000652:	681c      	ldr	r4, [r3, #0]
 8000654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000658:	f7ff fdde 	bl	8000218 <__aeabi_d2uiz>
 800065c:	4603      	mov	r3, r0
 800065e:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
 8000660:	bf00      	nop
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	2000048c 	.word	0x2000048c

08000670 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2220      	movs	r2, #32
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f007 fabd 	bl	8007c08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000694:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800069c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006fa:	f001 ff39 	bl	8002570 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000704:	f000 ff54 	bl	80015b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4619      	mov	r1, r3
 8000712:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000714:	f002 fd4e 	bl	80031b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 ff47 	bl	80015b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_ADC1_Init+0xec>)
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000726:	2306      	movs	r3, #6
 8000728:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072e:	237f      	movs	r3, #127	; 0x7f
 8000730:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000732:	2304      	movs	r3, #4
 8000734:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000740:	f002 f8d2 	bl	80028e8 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800074a:	f000 ff31 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3730      	adds	r7, #48	; 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000002c 	.word	0x2000002c
 800075c:	04300002 	.word	0x04300002

08000760 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fa4b 	bl	8007c08 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_ADC2_Init+0xdc>)
 8000774:	4a32      	ldr	r2, [pc, #200]	; (8000840 <MX_ADC2_Init+0xe0>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <MX_ADC2_Init+0xdc>)
 800077a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800077e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_ADC2_Init+0xdc>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_ADC2_Init+0xdc>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_ADC2_Init+0xdc>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_ADC2_Init+0xdc>)
 8000794:	2201      	movs	r2, #1
 8000796:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_ADC2_Init+0xdc>)
 800079a:	2204      	movs	r2, #4
 800079c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC2_Init+0xdc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_ADC2_Init+0xdc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_ADC2_Init+0xdc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ADC2_Init+0xdc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC2_Init+0xdc>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC2_Init+0xdc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_ADC2_Init+0xdc>)
 80007dc:	f001 fec8 	bl	8002570 <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007e6:	f000 fee3 	bl	80015b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ADC2_Init+0xe4>)
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ee:	2306      	movs	r3, #6
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	237f      	movs	r3, #127	; 0x7f
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fa:	2304      	movs	r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_ADC2_Init+0xdc>)
 8000808:	f002 f86e 	bl	80028e8 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 fecd 	bl	80015b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_ADC2_Init+0xe8>)
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800081a:	230c      	movs	r3, #12
 800081c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_ADC2_Init+0xdc>)
 8000824:	f002 f860 	bl	80028e8 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800082e:	f000 febf 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000098 	.word	0x20000098
 8000840:	50000100 	.word	0x50000100
 8000844:	0c900008 	.word	0x0c900008
 8000848:	10c00010 	.word	0x10c00010

0800084c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2220      	movs	r2, #32
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f007 f9cf 	bl	8007c08 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_ADC3_Init+0xe4>)
 800086c:	4a31      	ldr	r2, [pc, #196]	; (8000934 <MX_ADC3_Init+0xe8>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000872:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000876:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000878:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_ADC3_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC3_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000892:	2204      	movs	r2, #4
 8000894:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_ADC3_Init+0xe4>)
 800089e:	2201      	movs	r2, #1
 80008a0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008d4:	f001 fe4c 	bl	8002570 <HAL_ADC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 fe67 	bl	80015b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008ee:	f002 fc61 	bl	80031b4 <HAL_ADCEx_MultiModeConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008f8:	f000 fe5a 	bl	80015b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ADC3_Init+0xec>)
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000900:	2306      	movs	r3, #6
 8000902:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000904:	2302      	movs	r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000908:	237f      	movs	r3, #127	; 0x7f
 800090a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC3_Init+0xe4>)
 800091a:	f001 ffe5 	bl	80028e8 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000924:	f000 fe44 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000104 	.word	0x20000104
 8000934:	50000400 	.word	0x50000400
 8000938:	14f00020 	.word	0x14f00020

0800093c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2220      	movs	r2, #32
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f007 f95d 	bl	8007c08 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <MX_ADC4_Init+0xc4>)
 8000952:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000956:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800095a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_ADC4_Init+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC4_Init+0xc0>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000976:	2204      	movs	r2, #4
 8000978:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC4_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000982:	2201      	movs	r2, #1
 8000984:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000988:	2201      	movs	r2, #1
 800098a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_ADC4_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_ADC4_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009b8:	f001 fdda 	bl	8002570 <HAL_ADC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80009c2:	f000 fdf5 	bl	80015b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_ADC4_Init+0xc8>)
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ca:	2306      	movs	r3, #6
 80009cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d2:	237f      	movs	r3, #127	; 0x7f
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d6:	2304      	movs	r3, #4
 80009d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009e4:	f001 ff80 	bl	80028e8 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80009ee:	f000 fddf 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000170 	.word	0x20000170
 8000a00:	50000500 	.word	0x50000500
 8000a04:	14f00020 	.word	0x14f00020

08000a08 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f007 f8f7 	bl	8007c08 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <MX_ADC5_Init+0xc4>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a84:	f001 fd74 	bl	8002570 <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000a8e:	f000 fd8f 	bl	80015b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_ADC5_Init+0xc8>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9e:	237f      	movs	r3, #127	; 0x7f
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000ab0:	f001 ff1a 	bl	80028e8 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000aba:	f000 fd79 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200001dc 	.word	0x200001dc
 8000acc:	50000600 	.word	0x50000600
 8000ad0:	08600004 	.word	0x08600004

08000ad4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0a6      	sub	sp, #152	; 0x98
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af0:	2254      	movs	r2, #84	; 0x54
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 f887 	bl	8007c08 <memset>
  if(adcHandle->Instance==ADC1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b02:	d16c      	bne.n	8000bde <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fff1 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b20:	f000 fd46 	bl	80015b0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b24:	4ba0      	ldr	r3, [pc, #640]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a9f      	ldr	r2, [pc, #636]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b2e:	4b9e      	ldr	r3, [pc, #632]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d10b      	bne.n	8000b4e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b36:	4b9d      	ldr	r3, [pc, #628]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a9c      	ldr	r2, [pc, #624]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b9a      	ldr	r3, [pc, #616]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b97      	ldr	r3, [pc, #604]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a96      	ldr	r2, [pc, #600]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b94      	ldr	r3, [pc, #592]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f002 fee9 	bl	8003958 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b86:	4b8a      	ldr	r3, [pc, #552]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b88:	4a8a      	ldr	r2, [pc, #552]	; (8000db4 <HAL_ADC_MspInit+0x2e0>)
 8000b8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b8c:	4b88      	ldr	r3, [pc, #544]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b8e:	2205      	movs	r2, #5
 8000b90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b92:	4b87      	ldr	r3, [pc, #540]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b85      	ldr	r3, [pc, #532]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba4:	4b82      	ldr	r3, [pc, #520]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000baa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bac:	4b80      	ldr	r3, [pc, #512]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bb4:	4b7e      	ldr	r3, [pc, #504]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b7d      	ldr	r3, [pc, #500]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bc0:	487b      	ldr	r0, [pc, #492]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bc2:	f002 fd0f 	bl	80035e4 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000bcc:	f000 fcf0 	bl	80015b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a77      	ldr	r2, [pc, #476]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bd4:	655a      	str	r2, [r3, #84]	; 0x54
 8000bd6:	4a76      	ldr	r2, [pc, #472]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000bdc:	e1e0      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a75      	ldr	r2, [pc, #468]	; (8000db8 <HAL_ADC_MspInit+0x2e4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d16c      	bne.n	8000cc2 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bf2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 ff7f 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000c04:	f000 fcd4 	bl	80015b0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c08:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a66      	ldr	r2, [pc, #408]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c12:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10b      	bne.n	8000c32 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c1a:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a63      	ldr	r2, [pc, #396]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b61      	ldr	r3, [pc, #388]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a5d      	ldr	r2, [pc, #372]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000c4a:	23c0      	movs	r3, #192	; 0xc0
 8000c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c50:	2303      	movs	r3, #3
 8000c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f002 fe77 	bl	8003958 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000c6a:	4b54      	ldr	r3, [pc, #336]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c6c:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <HAL_ADC_MspInit+0x2ec>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c72:	2224      	movs	r2, #36	; 0x24
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c76:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c96:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ca4:	4845      	ldr	r0, [pc, #276]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000ca6:	f002 fc9d 	bl	80035e4 <HAL_DMA_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000cb0:	f000 fc7e 	bl	80015b0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000cb8:	655a      	str	r2, [r3, #84]	; 0x54
 8000cba:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000cc0:	e16e      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a3f      	ldr	r2, [pc, #252]	; (8000dc4 <HAL_ADC_MspInit+0x2f0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	f040 8085 	bne.w	8000dd8 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000cd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000cd8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 ff0c 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000cea:	f000 fc61 	bl	80015b0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a34      	ldr	r2, [pc, #208]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a29      	ldr	r2, [pc, #164]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a23      	ldr	r2, [pc, #140]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <HAL_ADC_MspInit+0x2f8>)
 8000d4c:	f002 fe04 	bl	8003958 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_ADC_MspInit+0x300>)
 8000d54:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d58:	2225      	movs	r2, #37	; 0x25
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d8c:	f002 fc2a 	bl	80035e4 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000d96:	f000 fc0b 	bl	80015b0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d9e:	655a      	str	r2, [r3, #84]	; 0x54
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000da6:	e0fb      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
 8000da8:	20000428 	.word	0x20000428
 8000dac:	40021000 	.word	0x40021000
 8000db0:	20000248 	.word	0x20000248
 8000db4:	40020008 	.word	0x40020008
 8000db8:	50000100 	.word	0x50000100
 8000dbc:	200002a8 	.word	0x200002a8
 8000dc0:	4002001c 	.word	0x4002001c
 8000dc4:	50000400 	.word	0x50000400
 8000dc8:	2000042c 	.word	0x2000042c
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	20000308 	.word	0x20000308
 8000dd4:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a72      	ldr	r2, [pc, #456]	; (8000fa8 <HAL_ADC_MspInit+0x4d4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d16c      	bne.n	8000ebc <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000de8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000dec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fe82 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000dfe:	f000 fbd7 	bl	80015b0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e02:	4b6a      	ldr	r3, [pc, #424]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	4a68      	ldr	r2, [pc, #416]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e0c:	4b67      	ldr	r3, [pc, #412]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10b      	bne.n	8000e2c <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000e14:	4b66      	ldr	r3, [pc, #408]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a65      	ldr	r2, [pc, #404]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4855      	ldr	r0, [pc, #340]	; (8000fb4 <HAL_ADC_MspInit+0x4e0>)
 8000e60:	f002 fd7a 	bl	8003958 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e66:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <HAL_ADC_MspInit+0x4e8>)
 8000e68:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e6c:	2226      	movs	r2, #38	; 0x26
 8000e6e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e76:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e8a:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000e92:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e94:	2220      	movs	r2, #32
 8000e96:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000e9e:	4846      	ldr	r0, [pc, #280]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000ea0:	f002 fba0 	bl	80035e4 <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000eaa:	f000 fb81 	bl	80015b0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a41      	ldr	r2, [pc, #260]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000eba:	e071      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <HAL_ADC_MspInit+0x4ec>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d16c      	bne.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ed0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fe10 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000ee2:	f000 fb65 	bl	80015b0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000eee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10b      	bne.n	8000f10 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f002 fd07 	bl	8003958 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_ADC_MspInit+0x4f4>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f52:	2227      	movs	r2, #39	; 0x27
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f86:	f002 fb2d 	bl	80035e4 <HAL_DMA_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000f90:	f000 fb0e 	bl	80015b0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	3798      	adds	r7, #152	; 0x98
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	50000500 	.word	0x50000500
 8000fac:	2000042c 	.word	0x2000042c
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	20000368 	.word	0x20000368
 8000fbc:	40020044 	.word	0x40020044
 8000fc0:	50000600 	.word	0x50000600
 8000fc4:	200003c8 	.word	0x200003c8
 8000fc8:	40020058 	.word	0x40020058

08000fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_DMA_Init+0xb0>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <MX_DMA_Init+0xb0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6493      	str	r3, [r2, #72]	; 0x48
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_DMA_Init+0xb0>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_DMA_Init+0xb0>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_DMA_Init+0xb0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_DMA_Init+0xb0>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	200b      	movs	r0, #11
 8001008:	f002 fab7 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800100c:	200b      	movs	r0, #11
 800100e:	f002 face 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200c      	movs	r0, #12
 8001018:	f002 faaf 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800101c:	200c      	movs	r0, #12
 800101e:	f002 fac6 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200d      	movs	r0, #13
 8001028:	f002 faa7 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800102c:	200d      	movs	r0, #13
 800102e:	f002 fabe 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	200e      	movs	r0, #14
 8001038:	f002 fa9f 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800103c:	200e      	movs	r0, #14
 800103e:	f002 fab6 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200f      	movs	r0, #15
 8001048:	f002 fa97 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800104c:	200f      	movs	r0, #15
 800104e:	f002 faae 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2010      	movs	r0, #16
 8001058:	f002 fa8f 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800105c:	2010      	movs	r0, #16
 800105e:	f002 faa6 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2011      	movs	r0, #17
 8001068:	f002 fa87 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800106c:	2011      	movs	r0, #17
 800106e:	f002 fa9e 	bl	80035ae <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <vEncoderSystemInit>:
extern contador_encoder;

static int* pLeftMotorCoun, pRightMotorCount;

//void vEncoderSystemInit(int pLeftMotorCount, int pRightMotorCount) {
void vEncoderSystemInit(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&LEFT_ENCODER_TIM, ENCODER_CHANNEL);
 8001084:	2100      	movs	r1, #0
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <vEncoderSystemInit+0x18>)
 8001088:	f004 fa92 	bl	80055b0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&RIGHT_ENCODER_TIM, ENCODER_CHANNEL);
 800108c:	2100      	movs	r1, #0
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <vEncoderSystemInit+0x1c>)
 8001090:	f004 fa8e 	bl	80055b0 <HAL_TIM_IC_Start_IT>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000570 	.word	0x20000570
 800109c:	200005bc 	.word	0x200005bc

080010a0 <vEncoderSystemExecuteMeasurement>:
void vEncoderSystemExecuteMeasurement(){
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	   // Tempo de amostragem em segundos
	    //float tempo_amostragem_s = tempo_amostragem_ms / 1000.0;

	    // Calcula o RPM
	    //motor 80:1 e sao duas pas logo para uma rotacao temos 160 do encoder
	    rpm = (contador_encoder * 60) / (160 * tempo_amostragem_s);
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <vEncoderSystemExecuteMeasurement+0x38>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4619      	mov	r1, r3
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <vEncoderSystemExecuteMeasurement+0x3c>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	015b      	lsls	r3, r3, #5
 80010be:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <vEncoderSystemExecuteMeasurement+0x40>)
 80010c4:	6013      	str	r3, [r2, #0]

	    // Resetar o contador para a próxima amostragem
	    contador_encoder = 0;
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <vEncoderSystemExecuteMeasurement+0x38>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000488 	.word	0x20000488
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000430 	.word	0x20000430

080010e4 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <MX_GPIO_Init+0x1b0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a65      	ldr	r2, [pc, #404]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001112:	4b60      	ldr	r3, [pc, #384]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a5f      	ldr	r2, [pc, #380]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001118:	f043 0320 	orr.w	r3, r3, #32
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b5a      	ldr	r3, [pc, #360]	; (8001294 <MX_GPIO_Init+0x1b0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a59      	ldr	r2, [pc, #356]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b57      	ldr	r3, [pc, #348]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b54      	ldr	r3, [pc, #336]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a53      	ldr	r2, [pc, #332]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b51      	ldr	r3, [pc, #324]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <MX_GPIO_Init+0x1b0>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <MX_GPIO_Init+0x1b0>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f002 fd6e 	bl	8003c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8001186:	4844      	ldr	r0, [pc, #272]	; (8001298 <MX_GPIO_Init+0x1b4>)
 8001188:	f002 fd68 	bl	8003c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 800118c:	f242 33a0 	movw	r3, #9120	; 0x23a0
 8001190:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	483e      	ldr	r0, [pc, #248]	; (800129c <MX_GPIO_Init+0x1b8>)
 80011a4:	f002 fbd8 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 80011a8:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f002 fbc8 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 80011c8:	2304      	movs	r3, #4
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80011d8:	2303      	movs	r3, #3
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	482d      	ldr	r0, [pc, #180]	; (8001298 <MX_GPIO_Init+0x1b4>)
 80011e4:	f002 fbb8 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 80011e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011fa:	2307      	movs	r3, #7
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4824      	ldr	r0, [pc, #144]	; (8001298 <MX_GPIO_Init+0x1b4>)
 8001206:	f002 fba7 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 800120a:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	481d      	ldr	r0, [pc, #116]	; (8001298 <MX_GPIO_Init+0x1b4>)
 8001224:	f002 fb98 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001238:	2302      	movs	r3, #2
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <MX_GPIO_Init+0x1b8>)
 8001244:	f002 fb88 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8001248:	2304      	movs	r3, #4
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4810      	ldr	r0, [pc, #64]	; (80012a0 <MX_GPIO_Init+0x1bc>)
 800125e:	f002 fb7b 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8001262:	2340      	movs	r3, #64	; 0x40
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001266:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4808      	ldr	r0, [pc, #32]	; (8001298 <MX_GPIO_Init+0x1b4>)
 8001278:	f002 fb6e 	bl	8003958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2028      	movs	r0, #40	; 0x28
 8001282:	f002 f97a 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001286:	2028      	movs	r0, #40	; 0x28
 8001288:	f002 f991 	bl	80035ae <HAL_NVIC_EnableIRQ>

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00

080012a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_I2C2_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_I2C2_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_I2C2_Init+0x74>)
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <MX_I2C2_Init+0x7c>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_I2C2_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_I2C2_Init+0x74>)
 80012bc:	2201      	movs	r2, #1
 80012be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_I2C2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_I2C2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C2_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C2_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C2_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <MX_I2C2_Init+0x74>)
 80012e0:	f002 fcf7 	bl	8003cd2 <HAL_I2C_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012ea:	f000 f961 	bl	80015b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_I2C2_Init+0x74>)
 80012f2:	f002 fd89 	bl	8003e08 <HAL_I2CEx_ConfigAnalogFilter>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012fc:	f000 f958 	bl	80015b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_I2C2_Init+0x74>)
 8001304:	f002 fdcb 	bl	8003e9e <HAL_I2CEx_ConfigDigitalFilter>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800130e:	f000 f94f 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000434 	.word	0x20000434
 800131c:	40005800 	.word	0x40005800
 8001320:	30a0a7fb 	.word	0x30a0a7fb

08001324 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0a0      	sub	sp, #128	; 0x80
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	2254      	movs	r2, #84	; 0x54
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f006 fc5f 	bl	8007c08 <memset>
  if(i2cHandle->Instance==I2C2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <HAL_I2C_MspInit+0xe0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d153      	bne.n	80013fc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001358:	2300      	movs	r3, #0
 800135a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	4618      	mov	r0, r3
 8001362:	f003 fbcb 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800136c:	f000 f920 	bl	80015b0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 80013a0:	2310      	movs	r3, #16
 80013a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a4:	2312      	movs	r3, #18
 80013a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013b0:	2304      	movs	r3, #4
 80013b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013b8:	4619      	mov	r1, r3
 80013ba:	4814      	ldr	r0, [pc, #80]	; (800140c <HAL_I2C_MspInit+0xe8>)
 80013bc:	f002 facc 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 80013c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c6:	2312      	movs	r3, #18
 80013c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013d2:	2304      	movs	r3, #4
 80013d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f002 faba 	bl	8003958 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 80013ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ee:	6593      	str	r3, [r2, #88]	; 0x58
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_I2C_MspInit+0xe4>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013fc:	bf00      	nop
 80013fe:	3780      	adds	r7, #128	; 0x80
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40005800 	.word	0x40005800
 8001408:	40021000 	.word	0x40021000
 800140c:	48000800 	.word	0x48000800

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f000 fe43 	bl	800209e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001418:	f000 f854 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f7ff fe62 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001420:	f7ff fdd4 	bl	8000fcc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001424:	f000 fd14 	bl	8001e50 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001428:	f7ff f922 	bl	8000670 <MX_ADC1_Init>
  MX_ADC2_Init();
 800142c:	f7ff f998 	bl	8000760 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001430:	f7ff fa0c 	bl	800084c <MX_ADC3_Init>
  MX_TIM1_Init();
 8001434:	f000 f996 	bl	8001764 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001438:	f000 fb34 	bl	8001aa4 <MX_TIM16_Init>
  MX_TIM4_Init();
 800143c:	f000 fa4e 	bl	80018dc <MX_TIM4_Init>
  MX_ADC4_Init();
 8001440:	f7ff fa7c 	bl	800093c <MX_ADC4_Init>
  MX_ADC5_Init();
 8001444:	f7ff fae0 	bl	8000a08 <MX_ADC5_Init>
  MX_I2C2_Init();
 8001448:	f7ff ff2c 	bl	80012a4 <MX_I2C2_Init>
  MX_TIM8_Init();
 800144c:	f000 fa96 	bl	800197c <MX_TIM8_Init>
  MX_TIM17_Init();
 8001450:	f000 fb72 	bl	8001b38 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERNAL_CLOCK);
 8001454:	481a      	ldr	r0, [pc, #104]	; (80014c0 <main+0xb0>)
 8001456:	f003 fe67 	bl	8005128 <HAL_TIM_Base_Start_IT>
  vPowerTrainSystemInit();
 800145a:	f7ff f87b 	bl	8000554 <vPowerTrainSystemInit>
  vEncoderSystemInit();
 800145e:	f7ff fe0f 	bl	8001080 <vEncoderSystemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001462:	2100      	movs	r1, #0
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff f887 	bl	8000578 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR,CLOCKWISE);
 800146a:	2100      	movs	r1, #0
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff f883 	bl	8000578 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 1000);
 8001472:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80014b0 <main+0xa0>
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff f8d4 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR, 1000);
 800147c:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80014b0 <main+0xa0>
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff f8cf 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(60000);
 8001486:	f64e 2060 	movw	r0, #60000	; 0xea60
 800148a:	f000 fe79 	bl	8002180 <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 0);
 800148e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80014b8 <main+0xa8>
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff f8c6 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 8001498:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80014b8 <main+0xa8>
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff f8c1 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(10000);
 80014a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80014a6:	f000 fe6b 	bl	8002180 <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 80014aa:	e7da      	b.n	8001462 <main+0x52>
 80014ac:	f3af 8000 	nop.w
 80014b0:	00000000 	.word	0x00000000
 80014b4:	408f4000 	.word	0x408f4000
	...
 80014c0:	200004d8 	.word	0x200004d8

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	2238      	movs	r2, #56	; 0x38
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f006 fb98 	bl	8007c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f002 fd26 	bl	8003f38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fa:	2302      	movs	r3, #2
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014fe:	2302      	movs	r3, #2
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001502:	2304      	movs	r3, #4
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001506:	2355      	movs	r3, #85	; 0x55
 8001508:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800150a:	2302      	movs	r3, #2
 800150c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800150e:	2302      	movs	r3, #2
 8001510:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001512:	2302      	movs	r3, #2
 8001514:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f107 0318 	add.w	r3, r7, #24
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fdc0 	bl	80040a0 <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001526:	f000 f843 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	230f      	movs	r3, #15
 800152c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	2303      	movs	r3, #3
 8001530:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2104      	movs	r1, #4
 8001542:	4618      	mov	r0, r3
 8001544:	f003 f8be 	bl	80046c4 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800154e:	f000 f82f 	bl	80015b0 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3750      	adds	r7, #80	; 0x50
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_TIM_IC_CaptureCallback+0x28>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d104      	bne.n	8001578 <HAL_TIM_IC_CaptureCallback+0x1c>
        contador_encoder++;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001576:	6013      	str	r3, [r2, #0]
    } /*if (htim->Instance == TIM16) {
    	contador_encoder++;
    }*/
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40014800 	.word	0x40014800
 8001588:	20000488 	.word	0x20000488

0800158c <HAL_TIM_PeriodElapsedCallback>:
// chama a funcao de calcular o rpm a cada 1 min
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    	vEncoderSystemExecuteMeasurement();
 800159e:	f7ff fd7f 	bl	80010a0 <vEncoderSystemExecuteMeasurement>
    }
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40000800 	.word	0x40000800

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_MspInit+0x44>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_MspInit+0x44>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6613      	str	r3, [r2, #96]	; 0x60
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x44>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015f2:	f002 fd45 	bl	8004080 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 fd78 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA1_Channel1_IRQHandler+0x10>)
 800165e:	f002 f869 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000248 	.word	0x20000248

0800166c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Channel2_IRQHandler+0x10>)
 8001672:	f002 f85f 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002a8 	.word	0x200002a8

08001680 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <DMA1_Channel3_IRQHandler+0x10>)
 8001686:	f002 f855 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000308 	.word	0x20000308

08001694 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <DMA1_Channel4_IRQHandler+0x10>)
 800169a:	f002 f84b 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000368 	.word	0x20000368

080016a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <DMA1_Channel5_IRQHandler+0x10>)
 80016ae:	f002 f841 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200003c8 	.word	0x200003c8

080016bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA1_Channel6_IRQHandler+0x10>)
 80016c2:	f002 f837 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000069c 	.word	0x2000069c

080016d0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Channel7_IRQHandler+0x10>)
 80016d6:	f002 f82d 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200006fc 	.word	0x200006fc

080016e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80016ea:	f004 f8b1 	bl	8005850 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80016f0:	f004 f8ae 	bl	8005850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000048c 	.word	0x2000048c
 80016fc:	20000570 	.word	0x20000570

08001700 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001706:	f004 f8a3 	bl	8005850 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800170c:	f004 f8a0 	bl	8005850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000048c 	.word	0x2000048c
 8001718:	200005bc 	.word	0x200005bc

0800171c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM4_IRQHandler+0x10>)
 8001722:	f004 f895 	bl	8005850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200004d8 	.word	0x200004d8

08001730 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001734:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001738:	f002 faa8 	bl	8003c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <SystemInit+0x20>)
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <SystemInit+0x20>)
 800174c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b09c      	sub	sp, #112	; 0x70
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2234      	movs	r2, #52	; 0x34
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f006 fa32 	bl	8007c08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017a6:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <MX_TIM1_Init+0x174>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80017aa:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017ac:	2210      	movs	r2, #16
 80017ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d0:	4840      	ldr	r0, [pc, #256]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017d2:	f003 fbe1 	bl	8004f98 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017dc:	f7ff fee8 	bl	80015b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ea:	4619      	mov	r1, r3
 80017ec:	4839      	ldr	r0, [pc, #228]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017ee:	f004 fb2f 	bl	8005e50 <HAL_TIM_ConfigClockSource>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017f8:	f7ff feda 	bl	80015b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017fc:	4835      	ldr	r0, [pc, #212]	; (80018d4 <MX_TIM1_Init+0x170>)
 80017fe:	f003 fd0b 	bl	8005218 <HAL_TIM_PWM_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001808:	f7ff fed2 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001818:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800181c:	4619      	mov	r1, r3
 800181e:	482d      	ldr	r0, [pc, #180]	; (80018d4 <MX_TIM1_Init+0x170>)
 8001820:	f005 fa14 	bl	8006c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800182a:	f7ff fec1 	bl	80015b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	; 0x60
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183a:	2300      	movs	r3, #0
 800183c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800184e:	2200      	movs	r2, #0
 8001850:	4619      	mov	r1, r3
 8001852:	4820      	ldr	r0, [pc, #128]	; (80018d4 <MX_TIM1_Init+0x170>)
 8001854:	f004 f9e8 	bl	8005c28 <HAL_TIM_PWM_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800185e:	f7ff fea7 	bl	80015b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001862:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001866:	2204      	movs	r2, #4
 8001868:	4619      	mov	r1, r3
 800186a:	481a      	ldr	r0, [pc, #104]	; (80018d4 <MX_TIM1_Init+0x170>)
 800186c:	f004 f9dc 	bl	8005c28 <HAL_TIM_PWM_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001876:	f7ff fe9b 	bl	80015b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <MX_TIM1_Init+0x170>)
 80018b8:	f005 fa5e 	bl	8006d78 <HAL_TIMEx_ConfigBreakDeadTime>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80018c2:	f7ff fe75 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MX_TIM1_Init+0x170>)
 80018c8:	f000 fa64 	bl	8001d94 <HAL_TIM_MspPostInit>

}
 80018cc:	bf00      	nop
 80018ce:	3770      	adds	r7, #112	; 0x70
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000048c 	.word	0x2000048c
 80018d8:	40012c00 	.word	0x40012c00

080018dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <MX_TIM4_Init+0x98>)
 80018fc:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <MX_TIM4_Init+0x9c>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2599;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <MX_TIM4_Init+0x98>)
 8001902:	f640 2227 	movw	r2, #2599	; 0xa27
 8001906:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_TIM4_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65383;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <MX_TIM4_Init+0x98>)
 8001910:	f64f 7267 	movw	r2, #65383	; 0xff67
 8001914:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_TIM4_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_TIM4_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001922:	4814      	ldr	r0, [pc, #80]	; (8001974 <MX_TIM4_Init+0x98>)
 8001924:	f003 fb38 	bl	8004f98 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800192e:	f7ff fe3f 	bl	80015b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <MX_TIM4_Init+0x98>)
 8001940:	f004 fa86 	bl	8005e50 <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800194a:	f7ff fe31 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <MX_TIM4_Init+0x98>)
 800195c:	f005 f976 	bl	8006c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001966:	f7ff fe23 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200004d8 	.word	0x200004d8
 8001978:	40000800 	.word	0x40000800

0800197c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b098      	sub	sp, #96	; 0x60
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001982:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2234      	movs	r2, #52	; 0x34
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f006 f92d 	bl	8007c08 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019b0:	4a3b      	ldr	r2, [pc, #236]	; (8001aa0 <MX_TIM8_Init+0x124>)
 80019b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019da:	4830      	ldr	r0, [pc, #192]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019dc:	f003 fc1c 	bl	8005218 <HAL_TIM_PWM_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80019e6:	f7ff fde3 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019fa:	4619      	mov	r1, r3
 80019fc:	4827      	ldr	r0, [pc, #156]	; (8001a9c <MX_TIM8_Init+0x120>)
 80019fe:	f005 f925 	bl	8006c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a08:	f7ff fdd2 	bl	80015b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0c:	2360      	movs	r3, #96	; 0x60
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a14:	2300      	movs	r3, #0
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481a      	ldr	r0, [pc, #104]	; (8001a9c <MX_TIM8_Init+0x120>)
 8001a32:	f004 f8f9 	bl	8005c28 <HAL_TIM_PWM_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a3c:	f7ff fdb8 	bl	80015b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4807      	ldr	r0, [pc, #28]	; (8001a9c <MX_TIM8_Init+0x120>)
 8001a7e:	f005 f97b 	bl	8006d78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001a88:	f7ff fd92 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a8c:	4803      	ldr	r0, [pc, #12]	; (8001a9c <MX_TIM8_Init+0x120>)
 8001a8e:	f000 f981 	bl	8001d94 <HAL_TIM_MspPostInit>

}
 8001a92:	bf00      	nop
 8001a94:	3760      	adds	r7, #96	; 0x60
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000524 	.word	0x20000524
 8001aa0:	40013400 	.word	0x40013400

08001aa4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <MX_TIM16_Init+0x90>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001abe:	22a9      	movs	r2, #169	; 0xa9
 8001ac0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001aca:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ace:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ae2:	4813      	ldr	r0, [pc, #76]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001ae4:	f003 fa58 	bl	8004f98 <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8001aee:	f7ff fd5f 	bl	80015b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001af2:	480f      	ldr	r0, [pc, #60]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001af4:	f003 fcfa 	bl	80054ec <HAL_TIM_IC_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001afe:	f7ff fd57 	bl	80015b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b06:	2301      	movs	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	2200      	movs	r2, #0
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_TIM16_Init+0x8c>)
 8001b1a:	f003 ffe8 	bl	8005aee <HAL_TIM_IC_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001b24:	f7ff fd44 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000570 	.word	0x20000570
 8001b34:	40014400 	.word	0x40014400

08001b38 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b3e:	463b      	mov	r3, r7
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <MX_TIM17_Init+0x90>)
 8001b4e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b52:	22a9      	movs	r2, #169	; 0xa9
 8001b54:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b62:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b76:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b78:	f003 fa0e 	bl	8004f98 <HAL_TIM_Base_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8001b82:	f7ff fd15 	bl	80015b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001b86:	480f      	ldr	r0, [pc, #60]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001b88:	f003 fcb0 	bl	80054ec <HAL_TIM_IC_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001b92:	f7ff fd0d 	bl	80015b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_TIM17_Init+0x8c>)
 8001bae:	f003 ff9e 	bl	8005aee <HAL_TIM_IC_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8001bb8:	f7ff fcfa 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200005bc 	.word	0x200005bc
 8001bc8:	40014800 	.word	0x40014800

08001bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	; 0x38
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a54      	ldr	r2, [pc, #336]	; (8001d3c <HAL_TIM_Base_MspInit+0x170>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11c      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bee:	4b54      	ldr	r3, [pc, #336]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf2:	4a53      	ldr	r2, [pc, #332]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bfa:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2019      	movs	r0, #25
 8001c0c:	f001 fcb5 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c10:	2019      	movs	r0, #25
 8001c12:	f001 fccc 	bl	80035ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	201a      	movs	r0, #26
 8001c1c:	f001 fcad 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c20:	201a      	movs	r0, #26
 8001c22:	f001 fcc4 	bl	80035ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001c26:	e084      	b.n	8001d32 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a45      	ldr	r2, [pc, #276]	; (8001d44 <HAL_TIM_Base_MspInit+0x178>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d114      	bne.n	8001c5c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	4a42      	ldr	r2, [pc, #264]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3e:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	201e      	movs	r0, #30
 8001c50:	f001 fc93 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c54:	201e      	movs	r0, #30
 8001c56:	f001 fcaa 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8001c5a:	e06a      	b.n	8001d32 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM16)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a39      	ldr	r2, [pc, #228]	; (8001d48 <HAL_TIM_Base_MspInit+0x17c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d130      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	6613      	str	r3, [r2, #96]	; 0x60
 8001c72:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8001c96:	2310      	movs	r3, #16
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4826      	ldr	r0, [pc, #152]	; (8001d4c <HAL_TIM_Base_MspInit+0x180>)
 8001cb2:	f001 fe51 	bl	8003958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2019      	movs	r0, #25
 8001cbc:	f001 fc5d 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cc0:	2019      	movs	r0, #25
 8001cc2:	f001 fc74 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8001cc6:	e034      	b.n	8001d32 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM17)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_TIM_Base_MspInit+0x184>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d12f      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_TIM_Base_MspInit+0x174>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8001d02:	2320      	movs	r3, #32
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001d12:	230a      	movs	r3, #10
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480b      	ldr	r0, [pc, #44]	; (8001d4c <HAL_TIM_Base_MspInit+0x180>)
 8001d1e:	f001 fe1b 	bl	8003958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	201a      	movs	r0, #26
 8001d28:	f001 fc27 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d2c:	201a      	movs	r0, #26
 8001d2e:	f001 fc3e 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3738      	adds	r7, #56	; 0x38
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40000800 	.word	0x40000800
 8001d48:	40014400 	.word	0x40014400
 8001d4c:	48000400 	.word	0x48000400
 8001d50:	40014800 	.word	0x40014800

08001d54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_TIM_PWM_MspInit+0x38>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10b      	bne.n	8001d7e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d70:	6613      	str	r3, [r2, #96]	; 0x60
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40013400 	.word	0x40013400
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <HAL_TIM_MspPostInit+0xac>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d11c      	bne.n	8001df0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_TIM_MspPostInit+0xb0>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_TIM_MspPostInit+0xb0>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_TIM_MspPostInit+0xb0>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001dde:	2302      	movs	r3, #2
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4817      	ldr	r0, [pc, #92]	; (8001e48 <HAL_TIM_MspPostInit+0xb4>)
 8001dea:	f001 fdb5 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001dee:	e022      	b.n	8001e36 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <HAL_TIM_MspPostInit+0xb8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d11d      	bne.n	8001e36 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_TIM_MspPostInit+0xb0>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_TIM_MspPostInit+0xb0>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_TIM_MspPostInit+0xb0>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001e24:	2302      	movs	r3, #2
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e32:	f001 fd91 	bl	8003958 <HAL_GPIO_Init>
}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	40013400 	.word	0x40013400

08001e50 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <MX_LPUART1_UART_Init+0x90>)
 8001e58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e92:	4812      	ldr	r0, [pc, #72]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001e94:	f005 f84a 	bl	8006f2c <HAL_UART_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e9e:	f7ff fb87 	bl	80015b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001ea6:	f005 fde5 	bl	8007a74 <HAL_UARTEx_SetTxFifoThreshold>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001eb0:	f7ff fb7e 	bl	80015b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001eb8:	f005 fe1a 	bl	8007af0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001ec2:	f7ff fb75 	bl	80015b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_LPUART1_UART_Init+0x8c>)
 8001ec8:	f005 fd9b 	bl	8007a02 <HAL_UARTEx_DisableFifoMode>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001ed2:	f7ff fb6d 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000608 	.word	0x20000608
 8001ee0:	40008000 	.word	0x40008000

08001ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09e      	sub	sp, #120	; 0x78
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2254      	movs	r2, #84	; 0x54
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 fe7f 	bl	8007c08 <memset>
  if(uartHandle->Instance==LPUART1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a49      	ldr	r2, [pc, #292]	; (8002034 <HAL_UART_MspInit+0x150>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	f040 808a 	bne.w	800202a <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f16:	2320      	movs	r3, #32
 8001f18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 fdea 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f2e:	f7ff fb3f 	bl	80015b0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_UART_MspInit+0x154>)
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	4a40      	ldr	r2, [pc, #256]	; (8002038 <HAL_UART_MspInit+0x154>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <HAL_UART_MspInit+0x154>)
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_UART_MspInit+0x154>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	; (8002038 <HAL_UART_MspInit+0x154>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f56:	4b38      	ldr	r3, [pc, #224]	; (8002038 <HAL_UART_MspInit+0x154>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001f62:	230c      	movs	r3, #12
 8001f64:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f72:	230c      	movs	r3, #12
 8001f74:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f001 fcea 	bl	8003958 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_UART_MspInit+0x158>)
 8001f86:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <HAL_UART_MspInit+0x15c>)
 8001f88:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_UART_MspInit+0x158>)
 8001f8c:	2222      	movs	r2, #34	; 0x22
 8001f8e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_UART_MspInit+0x158>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f96:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_UART_MspInit+0x158>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_UART_MspInit+0x158>)
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_UART_MspInit+0x158>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_UART_MspInit+0x158>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_UART_MspInit+0x158>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_UART_MspInit+0x158>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001fba:	4820      	ldr	r0, [pc, #128]	; (800203c <HAL_UART_MspInit+0x158>)
 8001fbc:	f001 fb12 	bl	80035e4 <HAL_DMA_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001fc6:	f7ff faf3 	bl	80015b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_UART_MspInit+0x158>)
 8001fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001fd2:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_UART_MspInit+0x158>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_UART_MspInit+0x160>)
 8001fda:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_UART_MspInit+0x164>)
 8001fdc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_UART_MspInit+0x160>)
 8001fe0:	2223      	movs	r2, #35	; 0x23
 8001fe2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_UART_MspInit+0x160>)
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_UART_MspInit+0x160>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_UART_MspInit+0x160>)
 8001ff2:	2280      	movs	r2, #128	; 0x80
 8001ff4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_UART_MspInit+0x160>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_UART_MspInit+0x160>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_UART_MspInit+0x160>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_UART_MspInit+0x160>)
 800200a:	2200      	movs	r2, #0
 800200c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <HAL_UART_MspInit+0x160>)
 8002010:	f001 fae8 	bl	80035e4 <HAL_DMA_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800201a:	f7ff fac9 	bl	80015b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_UART_MspInit+0x160>)
 8002022:	67da      	str	r2, [r3, #124]	; 0x7c
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_UART_MspInit+0x160>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800202a:	bf00      	nop
 800202c:	3778      	adds	r7, #120	; 0x78
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40008000 	.word	0x40008000
 8002038:	40021000 	.word	0x40021000
 800203c:	2000069c 	.word	0x2000069c
 8002040:	4002006c 	.word	0x4002006c
 8002044:	200006fc 	.word	0x200006fc
 8002048:	40020080 	.word	0x40020080

0800204c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800204e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002050:	f7ff fb76 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <LoopForever+0x6>)
  ldr r1, =_edata
 8002056:	490d      	ldr	r1, [pc, #52]	; (800208c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <LoopForever+0xe>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <LoopForever+0x12>)
  ldr r4, =_ebss
 800206c:	4c0a      	ldr	r4, [pc, #40]	; (8002098 <LoopForever+0x16>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800207a:	f005 fdcd 	bl	8007c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800207e:	f7ff f9c7 	bl	8001410 <main>

08002082 <LoopForever>:

LoopForever:
    b LoopForever
 8002082:	e7fe      	b.n	8002082 <LoopForever>
  ldr   r0, =_estack
 8002084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002090:	08007cc8 	.word	0x08007cc8
  ldr r2, =_sbss
 8002094:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002098:	20000760 	.word	0x20000760

0800209c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC1_2_IRQHandler>

0800209e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f001 fa5b 	bl	8003564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f80e 	bl	80020d0 <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	e001      	b.n	80020c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020c0:	f7ff fa7c 	bl	80015bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020c4:	79fb      	ldrb	r3, [r7, #7]

}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_InitTick+0x68>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d022      	beq.n	800212a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_InitTick+0x6c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_InitTick+0x68>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fa66 	bl	80035ca <HAL_SYSTICK_Config>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10f      	bne.n	8002124 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	d809      	bhi.n	800211e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210a:	2200      	movs	r2, #0
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	f04f 30ff 	mov.w	r0, #4294967295
 8002112:	f001 fa32 	bl	800357a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_InitTick+0x70>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e007      	b.n	800212e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	e004      	b.n	800212e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e001      	b.n	800212e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000000c 	.word	0x2000000c
 800213c:	20000004 	.word	0x20000004
 8002140:	20000008 	.word	0x20000008

08002144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_IncTick+0x1c>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_IncTick+0x20>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4413      	add	r3, r2
 8002152:	4a03      	ldr	r2, [pc, #12]	; (8002160 <HAL_IncTick+0x1c>)
 8002154:	6013      	str	r3, [r2, #0]
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	2000075c 	.word	0x2000075c
 8002164:	2000000c 	.word	0x2000000c

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000075c 	.word	0x2000075c

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d004      	beq.n	80021a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_Delay+0x40>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021a4:	bf00      	nop
 80021a6:	f7ff ffdf 	bl	8002168 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d8f7      	bhi.n	80021a6 <HAL_Delay+0x26>
  {
  }
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	2000000c 	.word	0x2000000c

080021c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <LL_ADC_SetOffset+0x44>)
 800224e:	4013      	ands	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	4313      	orrs	r3, r2
 800225c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	03fff000 	.word	0x03fff000

08002274 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3360      	adds	r3, #96	; 0x60
 8002282:	461a      	mov	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3360      	adds	r3, #96	; 0x60
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b087      	sub	sp, #28
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3360      	adds	r3, #96	; 0x60
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3360      	adds	r3, #96	; 0x60
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	431a      	orrs	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	615a      	str	r2, [r3, #20]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3330      	adds	r3, #48	; 0x30
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	4413      	add	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	211f      	movs	r1, #31
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0e9b      	lsrs	r3, r3, #26
 80023a0:	f003 011f 	and.w	r1, r3, #31
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	431a      	orrs	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3314      	adds	r3, #20
 80023d0:	461a      	mov	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	0e5b      	lsrs	r3, r3, #25
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	4413      	add	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	0d1b      	lsrs	r3, r3, #20
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2107      	movs	r1, #7
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	401a      	ands	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	0d1b      	lsrs	r3, r3, #20
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	431a      	orrs	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0318 	and.w	r3, r3, #24
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <LL_ADC_SetChannelSingleDiff+0x44>)
 800243c:	40d9      	lsrs	r1, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	400b      	ands	r3, r1
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	431a      	orrs	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	0007ffff 	.word	0x0007ffff

08002460 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6093      	str	r3, [r2, #8]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002498:	d101      	bne.n	800249e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024e8:	d101      	bne.n	80024ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <LL_ADC_IsEnabled+0x18>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <LL_ADC_IsEnabled+0x1a>
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d101      	bne.n	800253a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b08      	cmp	r3, #8
 800255a:	d101      	bne.n	8002560 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1a9      	b.n	80028de <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fe fa9b 	bl	8000ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff67 	bl	8002484 <LL_ADC_IsDeepPowerDownEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff4d 	bl	8002460 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff82 	bl	80024d4 <LL_ADC_IsInternalRegulatorEnabled>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d115      	bne.n	8002602 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff66 	bl	80024ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e0:	4b9c      	ldr	r3, [pc, #624]	; (8002854 <HAL_ADC_Init+0x2e4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	4a9c      	ldr	r2, [pc, #624]	; (8002858 <HAL_ADC_Init+0x2e8>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	099b      	lsrs	r3, r3, #6
 80025ee:	3301      	adds	r3, #1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025f4:	e002      	b.n	80025fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff64 	bl	80024d4 <LL_ADC_IsInternalRegulatorEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10d      	bne.n	800262e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	f043 0210 	orr.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff75 	bl	8002522 <LL_ADC_REG_IsConversionOngoing>
 8002638:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 8142 	bne.w	80028cc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 813e 	bne.w	80028cc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002658:	f043 0202 	orr.w	r2, r3, #2
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff49 	bl	80024fc <LL_ADC_IsEnabled>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d141      	bne.n	80026f4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002678:	d004      	beq.n	8002684 <HAL_ADC_Init+0x114>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a77      	ldr	r2, [pc, #476]	; (800285c <HAL_ADC_Init+0x2ec>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d10f      	bne.n	80026a4 <HAL_ADC_Init+0x134>
 8002684:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002688:	f7ff ff38 	bl	80024fc <LL_ADC_IsEnabled>
 800268c:	4604      	mov	r4, r0
 800268e:	4873      	ldr	r0, [pc, #460]	; (800285c <HAL_ADC_Init+0x2ec>)
 8002690:	f7ff ff34 	bl	80024fc <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	4323      	orrs	r3, r4
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e012      	b.n	80026ca <HAL_ADC_Init+0x15a>
 80026a4:	486e      	ldr	r0, [pc, #440]	; (8002860 <HAL_ADC_Init+0x2f0>)
 80026a6:	f7ff ff29 	bl	80024fc <LL_ADC_IsEnabled>
 80026aa:	4604      	mov	r4, r0
 80026ac:	486d      	ldr	r0, [pc, #436]	; (8002864 <HAL_ADC_Init+0x2f4>)
 80026ae:	f7ff ff25 	bl	80024fc <LL_ADC_IsEnabled>
 80026b2:	4603      	mov	r3, r0
 80026b4:	431c      	orrs	r4, r3
 80026b6:	486c      	ldr	r0, [pc, #432]	; (8002868 <HAL_ADC_Init+0x2f8>)
 80026b8:	f7ff ff20 	bl	80024fc <LL_ADC_IsEnabled>
 80026bc:	4603      	mov	r3, r0
 80026be:	4323      	orrs	r3, r4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d6:	d004      	beq.n	80026e2 <HAL_ADC_Init+0x172>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5f      	ldr	r2, [pc, #380]	; (800285c <HAL_ADC_Init+0x2ec>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_Init+0x176>
 80026e2:	4a62      	ldr	r2, [pc, #392]	; (800286c <HAL_ADC_Init+0x2fc>)
 80026e4:	e000      	b.n	80026e8 <HAL_ADC_Init+0x178>
 80026e6:	4a62      	ldr	r2, [pc, #392]	; (8002870 <HAL_ADC_Init+0x300>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f7ff fd68 	bl	80021c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7f5b      	ldrb	r3, [r3, #29]
 80026f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002704:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800270a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002712:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800271e:	2b01      	cmp	r3, #1
 8002720:	d106      	bne.n	8002730 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	3b01      	subs	r3, #1
 8002728:	045b      	lsls	r3, r3, #17
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	4b48      	ldr	r3, [pc, #288]	; (8002874 <HAL_ADC_Init+0x304>)
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	430b      	orrs	r3, r1
 800275e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fee4 	bl	8002548 <LL_ADC_INJ_IsConversionOngoing>
 8002780:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d17f      	bne.n	8002888 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d17c      	bne.n	8002888 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002792:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800279a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027aa:	f023 0302 	bic.w	r3, r3, #2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d017      	beq.n	80027f0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6911      	ldr	r1, [r2, #16]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027ee:	e013      	b.n	8002818 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002814:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281e:	2b01      	cmp	r3, #1
 8002820:	d12a      	bne.n	8002878 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002844:	430a      	orrs	r2, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e019      	b.n	8002888 <HAL_ADC_Init+0x318>
 8002854:	20000004 	.word	0x20000004
 8002858:	053e2d63 	.word	0x053e2d63
 800285c:	50000100 	.word	0x50000100
 8002860:	50000400 	.word	0x50000400
 8002864:	50000500 	.word	0x50000500
 8002868:	50000600 	.word	0x50000600
 800286c:	50000300 	.word	0x50000300
 8002870:	50000700 	.word	0x50000700
 8002874:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10c      	bne.n	80028aa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f023 010f 	bic.w	r1, r3, #15
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	1e5a      	subs	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
 80028a8:	e007      	b.n	80028ba <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 020f 	bic.w	r2, r2, #15
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80028ca:	e007      	b.n	80028dc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f043 0210 	orr.w	r2, r3, #16
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	bf00      	nop

080028e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b0b6      	sub	sp, #216	; 0xd8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002902:	2b01      	cmp	r3, #1
 8002904:	d102      	bne.n	800290c <HAL_ADC_ConfigChannel+0x24>
 8002906:	2302      	movs	r3, #2
 8002908:	f000 bc13 	b.w	8003132 <HAL_ADC_ConfigChannel+0x84a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fe02 	bl	8002522 <LL_ADC_REG_IsConversionOngoing>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 83f3 	bne.w	800310c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	f7ff fd18 	bl	8002368 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fdf0 	bl	8002522 <LL_ADC_REG_IsConversionOngoing>
 8002942:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fdfc 	bl	8002548 <LL_ADC_INJ_IsConversionOngoing>
 8002950:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002954:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 81d9 	bne.w	8002d10 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800295e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 81d4 	bne.w	8002d10 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002970:	d10f      	bne.n	8002992 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2200      	movs	r2, #0
 800297c:	4619      	mov	r1, r3
 800297e:	f7ff fd1f 	bl	80023c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fcd9 	bl	8002342 <LL_ADC_SetSamplingTimeCommonConfig>
 8002990:	e00e      	b.n	80029b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	461a      	mov	r2, r3
 80029a0:	f7ff fd0e 	bl	80023c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fcc9 	bl	8002342 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d022      	beq.n	8002a18 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6919      	ldr	r1, [r3, #16]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029e2:	f7ff fc23 	bl	800222c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6919      	ldr	r1, [r3, #16]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f7ff fc6f 	bl	80022d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d102      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x126>
 8002a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0c:	e000      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x128>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	461a      	mov	r2, r3
 8002a12:	f7ff fc7b 	bl	800230c <LL_ADC_SetOffsetSaturation>
 8002a16:	e17b      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fc28 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x15c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fc1d 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	f003 021f 	and.w	r2, r3, #31
 8002a42:	e01e      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x19a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fc12 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d105      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x1b2>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	e018      	b.n	8002acc <HAL_ADC_ConfigChannel+0x1e4>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e004      	b.n	8002acc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d106      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fbe1 	bl	80022a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fbc5 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x222>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fbba 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	e01e      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x260>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fbaf 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e004      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x278>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	e018      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x2aa>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e004      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d106      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fb7e 	bl	80022a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fb62 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x2e8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fb57 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 021f 	and.w	r2, r3, #31
 8002bce:	e01e      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x326>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fb4c 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e004      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x33e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	e016      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x36c>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c46:	2320      	movs	r3, #32
 8002c48:	e004      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d106      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fb1d 	bl	80022a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fb01 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x3aa>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2103      	movs	r1, #3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff faf6 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	e017      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x3da>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2103      	movs	r1, #3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff faeb 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x3f2>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	0e9b      	lsrs	r3, r3, #26
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	e011      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x416>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d106      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	2103      	movs	r1, #3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fac8 	bl	80022a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fbf1 	bl	80024fc <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 813d 	bne.w	8002f9c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7ff fb72 	bl	8002418 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4aa2      	ldr	r2, [pc, #648]	; (8002fc4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	f040 812e 	bne.w	8002f9c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x480>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0e9b      	lsrs	r3, r3, #26
 8002d56:	3301      	adds	r3, #1
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2b09      	cmp	r3, #9
 8002d5e:	bf94      	ite	ls
 8002d60:	2301      	movls	r3, #1
 8002d62:	2300      	movhi	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e019      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x4b4>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d78:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e003      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2b09      	cmp	r3, #9
 8002d94:	bf94      	ite	ls
 8002d96:	2301      	movls	r3, #1
 8002d98:	2300      	movhi	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d079      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x4d4>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	069b      	lsls	r3, r3, #26
 8002db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dba:	e015      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x500>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x520>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	e017      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x550>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e003      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	ea42 0103 	orr.w	r1, r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x576>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	051b      	lsls	r3, r3, #20
 8002e5c:	e018      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x5a8>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e003      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e90:	430b      	orrs	r3, r1
 8002e92:	e07e      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x5c8>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	069b      	lsls	r3, r3, #26
 8002eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eae:	e015      	b.n	8002edc <HAL_ADC_ConfigChannel+0x5f4>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	069b      	lsls	r3, r3, #26
 8002ed8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x614>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0e9b      	lsrs	r3, r3, #26
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	e017      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x644>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	61fb      	str	r3, [r7, #28]
  return result;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e003      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	ea42 0103 	orr.w	r1, r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x670>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3b1e      	subs	r3, #30
 8002f50:	051b      	lsls	r3, r3, #20
 8002f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f56:	e01b      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x6a8>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	613b      	str	r3, [r7, #16]
  return result;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f003 021f 	and.w	r2, r3, #31
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	3b1e      	subs	r3, #30
 8002f8a:	051b      	lsls	r3, r3, #20
 8002f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f96:	4619      	mov	r1, r3
 8002f98:	f7ff fa12 	bl	80023c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80be 	beq.w	8003126 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x6d6>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_ADC_ConfigChannel+0x6e4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x6ec>
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002fc0:	e009      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x6ee>
 8002fc2:	bf00      	nop
 8002fc4:	407f0000 	.word	0x407f0000
 8002fc8:	80080000 	.word	0x80080000
 8002fcc:	50000100 	.word	0x50000100
 8002fd0:	50000300 	.word	0x50000300
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_ADC_ConfigChannel+0x854>)
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f91a 	bl	8002210 <LL_ADC_GetCommonPathInternalCh>
 8002fdc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a56      	ldr	r2, [pc, #344]	; (8003140 <HAL_ADC_ConfigChannel+0x858>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_ADC_ConfigChannel+0x70c>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a55      	ldr	r2, [pc, #340]	; (8003144 <HAL_ADC_ConfigChannel+0x85c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d13a      	bne.n	800306a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d134      	bne.n	800306a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003008:	d005      	beq.n	8003016 <HAL_ADC_ConfigChannel+0x72e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a4e      	ldr	r2, [pc, #312]	; (8003148 <HAL_ADC_ConfigChannel+0x860>)
 8003010:	4293      	cmp	r3, r2
 8003012:	f040 8085 	bne.w	8003120 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301e:	d004      	beq.n	800302a <HAL_ADC_ConfigChannel+0x742>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_ADC_ConfigChannel+0x864>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x746>
 800302a:	4a49      	ldr	r2, [pc, #292]	; (8003150 <HAL_ADC_ConfigChannel+0x868>)
 800302c:	e000      	b.n	8003030 <HAL_ADC_ConfigChannel+0x748>
 800302e:	4a43      	ldr	r2, [pc, #268]	; (800313c <HAL_ADC_ConfigChannel+0x854>)
 8003030:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003034:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7ff f8d5 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003040:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_ADC_ConfigChannel+0x86c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	4a44      	ldr	r2, [pc, #272]	; (8003158 <HAL_ADC_ConfigChannel+0x870>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800305a:	e002      	b.n	8003062 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3b01      	subs	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f9      	bne.n	800305c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003068:	e05a      	b.n	8003120 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a3b      	ldr	r2, [pc, #236]	; (800315c <HAL_ADC_ConfigChannel+0x874>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d125      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11f      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a31      	ldr	r2, [pc, #196]	; (800314c <HAL_ADC_ConfigChannel+0x864>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d104      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x7ac>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a34      	ldr	r2, [pc, #208]	; (8003160 <HAL_ADC_ConfigChannel+0x878>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d047      	beq.n	8003124 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309c:	d004      	beq.n	80030a8 <HAL_ADC_ConfigChannel+0x7c0>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2a      	ldr	r2, [pc, #168]	; (800314c <HAL_ADC_ConfigChannel+0x864>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x7c4>
 80030a8:	4a29      	ldr	r2, [pc, #164]	; (8003150 <HAL_ADC_ConfigChannel+0x868>)
 80030aa:	e000      	b.n	80030ae <HAL_ADC_ConfigChannel+0x7c6>
 80030ac:	4a23      	ldr	r2, [pc, #140]	; (800313c <HAL_ADC_ConfigChannel+0x854>)
 80030ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7ff f896 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030be:	e031      	b.n	8003124 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a27      	ldr	r2, [pc, #156]	; (8003164 <HAL_ADC_ConfigChannel+0x87c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d12d      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d127      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_ADC_ConfigChannel+0x864>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e8:	d004      	beq.n	80030f4 <HAL_ADC_ConfigChannel+0x80c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_ADC_ConfigChannel+0x864>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x810>
 80030f4:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_ADC_ConfigChannel+0x868>)
 80030f6:	e000      	b.n	80030fa <HAL_ADC_ConfigChannel+0x812>
 80030f8:	4a10      	ldr	r2, [pc, #64]	; (800313c <HAL_ADC_ConfigChannel+0x854>)
 80030fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7ff f870 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
 800310a:	e00c      	b.n	8003126 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800311e:	e002      	b.n	8003126 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003124:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800312e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003132:	4618      	mov	r0, r3
 8003134:	37d8      	adds	r7, #216	; 0xd8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	50000700 	.word	0x50000700
 8003140:	c3210000 	.word	0xc3210000
 8003144:	90c00010 	.word	0x90c00010
 8003148:	50000600 	.word	0x50000600
 800314c:	50000100 	.word	0x50000100
 8003150:	50000300 	.word	0x50000300
 8003154:	20000004 	.word	0x20000004
 8003158:	053e2d63 	.word	0x053e2d63
 800315c:	c7520000 	.word	0xc7520000
 8003160:	50000500 	.word	0x50000500
 8003164:	cb840000 	.word	0xcb840000

08003168 <LL_ADC_IsEnabled>:
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <LL_ADC_IsEnabled+0x18>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <LL_ADC_IsEnabled+0x1a>
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_ADC_REG_IsConversionOngoing>:
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d101      	bne.n	80031a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b0a1      	sub	sp, #132	; 0x84
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0e7      	b.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80031da:	2300      	movs	r3, #0
 80031dc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80031de:	2300      	movs	r3, #0
 80031e0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ea:	d102      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031ec:	4b6f      	ldr	r3, [pc, #444]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	e009      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6e      	ldr	r2, [pc, #440]	; (80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d102      	bne.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80031fc:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	e001      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0be      	b.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ffb1 	bl	800318e <LL_ADC_REG_IsConversionOngoing>
 800322c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ffab 	bl	800318e <LL_ADC_REG_IsConversionOngoing>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 80a0 	bne.w	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 809c 	bne.w	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003250:	d004      	beq.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a55      	ldr	r2, [pc, #340]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800325c:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800325e:	e000      	b.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003260:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003262:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d04b      	beq.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800326c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800327e:	035b      	lsls	r3, r3, #13
 8003280:	430b      	orrs	r3, r1
 8003282:	431a      	orrs	r2, r3
 8003284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003286:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003290:	d004      	beq.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a45      	ldr	r2, [pc, #276]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10f      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800329c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032a0:	f7ff ff62 	bl	8003168 <LL_ADC_IsEnabled>
 80032a4:	4604      	mov	r4, r0
 80032a6:	4841      	ldr	r0, [pc, #260]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032a8:	f7ff ff5e 	bl	8003168 <LL_ADC_IsEnabled>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4323      	orrs	r3, r4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e012      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80032bc:	483c      	ldr	r0, [pc, #240]	; (80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032be:	f7ff ff53 	bl	8003168 <LL_ADC_IsEnabled>
 80032c2:	4604      	mov	r4, r0
 80032c4:	483b      	ldr	r0, [pc, #236]	; (80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032c6:	f7ff ff4f 	bl	8003168 <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	431c      	orrs	r4, r3
 80032ce:	483c      	ldr	r0, [pc, #240]	; (80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032d0:	f7ff ff4a 	bl	8003168 <LL_ADC_IsEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4323      	orrs	r3, r4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d056      	beq.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ee:	f023 030f 	bic.w	r3, r3, #15
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	6811      	ldr	r1, [r2, #0]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	6892      	ldr	r2, [r2, #8]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	431a      	orrs	r2, r3
 80032fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003300:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003302:	e047      	b.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800330e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003318:	d004      	beq.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a23      	ldr	r2, [pc, #140]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10f      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003324:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003328:	f7ff ff1e 	bl	8003168 <LL_ADC_IsEnabled>
 800332c:	4604      	mov	r4, r0
 800332e:	481f      	ldr	r0, [pc, #124]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003330:	f7ff ff1a 	bl	8003168 <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	4323      	orrs	r3, r4
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e012      	b.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003344:	481a      	ldr	r0, [pc, #104]	; (80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003346:	f7ff ff0f 	bl	8003168 <LL_ADC_IsEnabled>
 800334a:	4604      	mov	r4, r0
 800334c:	4819      	ldr	r0, [pc, #100]	; (80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800334e:	f7ff ff0b 	bl	8003168 <LL_ADC_IsEnabled>
 8003352:	4603      	mov	r3, r0
 8003354:	431c      	orrs	r4, r3
 8003356:	481a      	ldr	r0, [pc, #104]	; (80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003358:	f7ff ff06 	bl	8003168 <LL_ADC_IsEnabled>
 800335c:	4603      	mov	r3, r0
 800335e:	4323      	orrs	r3, r4
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800336e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003376:	f023 030f 	bic.w	r3, r3, #15
 800337a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800337c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800337e:	e009      	b.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003392:	e000      	b.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003394:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800339e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3784      	adds	r7, #132	; 0x84
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	50000100 	.word	0x50000100
 80033b0:	50000400 	.word	0x50000400
 80033b4:	50000500 	.word	0x50000500
 80033b8:	50000300 	.word	0x50000300
 80033bc:	50000700 	.word	0x50000700
 80033c0:	50000600 	.word	0x50000600

080033c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e0:	4013      	ands	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f6:	4a04      	ldr	r2, [pc, #16]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	60d3      	str	r3, [r2, #12]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <__NVIC_GetPriorityGrouping+0x18>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 0307 	and.w	r3, r3, #7
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db0b      	blt.n	8003452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	4907      	ldr	r1, [pc, #28]	; (8003460 <__NVIC_EnableIRQ+0x38>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2001      	movs	r0, #1
 800344a:	fa00 f202 	lsl.w	r2, r0, r2
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003530:	d301      	bcc.n	8003536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003532:	2301      	movs	r3, #1
 8003534:	e00f      	b.n	8003556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <SysTick_Config+0x40>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353e:	210f      	movs	r1, #15
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	f7ff ff8e 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <SysTick_Config+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <SysTick_Config+0x40>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010

08003564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff29 	bl	80033c4 <__NVIC_SetPriorityGrouping>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff40 	bl	800340c <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff90 	bl	80034b8 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5f 	bl	8003464 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff33 	bl	8003428 <__NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffa4 	bl	8003520 <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e08d      	b.n	8003712 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_DMA_Init+0x138>)
 80035fe:	429a      	cmp	r2, r3
 8003600:	d80f      	bhi.n	8003622 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	4b45      	ldr	r3, [pc, #276]	; (8003720 <HAL_DMA_Init+0x13c>)
 800360a:	4413      	add	r3, r2
 800360c:	4a45      	ldr	r2, [pc, #276]	; (8003724 <HAL_DMA_Init+0x140>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	009a      	lsls	r2, r3, #2
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a42      	ldr	r2, [pc, #264]	; (8003728 <HAL_DMA_Init+0x144>)
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
 8003620:	e00e      	b.n	8003640 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_DMA_Init+0x148>)
 800362a:	4413      	add	r3, r2
 800362c:	4a3d      	ldr	r2, [pc, #244]	; (8003724 <HAL_DMA_Init+0x140>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	009a      	lsls	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a3c      	ldr	r2, [pc, #240]	; (8003730 <HAL_DMA_Init+0x14c>)
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8fe 	bl	8003894 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a0:	d102      	bne.n	80036a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d010      	beq.n	80036e8 <HAL_DMA_Init+0x104>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d80c      	bhi.n	80036e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f91e 	bl	8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	e008      	b.n	80036fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40020407 	.word	0x40020407
 8003720:	bffdfff8 	.word	0xbffdfff8
 8003724:	cccccccd 	.word	0xcccccccd
 8003728:	40020000 	.word	0x40020000
 800372c:	bffdfbf8 	.word	0xbffdfbf8
 8003730:	40020400 	.word	0x40020400

08003734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2204      	movs	r2, #4
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d026      	beq.n	80037ae <HAL_DMA_IRQHandler+0x7a>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d021      	beq.n	80037ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0204 	bic.w	r2, r2, #4
 8003786:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	2104      	movs	r1, #4
 8003796:	fa01 f202 	lsl.w	r2, r1, r2
 800379a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d071      	beq.n	8003888 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037ac:	e06c      	b.n	8003888 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2202      	movs	r2, #2
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d02e      	beq.n	8003820 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d029      	beq.n	8003820 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 020a 	bic.w	r2, r2, #10
 80037e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f003 021f 	and.w	r2, r3, #31
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2102      	movs	r1, #2
 8003800:	fa01 f202 	lsl.w	r2, r1, r2
 8003804:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d038      	beq.n	8003888 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800381e:	e033      	b.n	8003888 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2208      	movs	r2, #8
 800382a:	409a      	lsls	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02a      	beq.n	800388a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d025      	beq.n	800388a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 020e 	bic.w	r2, r2, #14
 800384c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f003 021f 	and.w	r2, r3, #31
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2101      	movs	r1, #1
 800385c:	fa01 f202 	lsl.w	r2, r1, r2
 8003860:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003888:	bf00      	nop
 800388a:	bf00      	nop
}
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d802      	bhi.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e001      	b.n	80038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3b08      	subs	r3, #8
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	009a      	lsls	r2, r3, #2
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	461a      	mov	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a0b      	ldr	r2, [pc, #44]	; (800390c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80038de:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2201      	movs	r2, #1
 80038e8:	409a      	lsls	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40020407 	.word	0x40020407
 8003900:	40020800 	.word	0x40020800
 8003904:	40020820 	.word	0x40020820
 8003908:	cccccccd 	.word	0xcccccccd
 800390c:	40020880 	.word	0x40020880

08003910 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a08      	ldr	r2, [pc, #32]	; (8003954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003932:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3b01      	subs	r3, #1
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	2201      	movs	r2, #1
 800393e:	409a      	lsls	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	1000823f 	.word	0x1000823f
 8003954:	40020940 	.word	0x40020940

08003958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003966:	e15a      	b.n	8003c1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 814c 	beq.w	8003c18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d005      	beq.n	8003998 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003994:	2b02      	cmp	r3, #2
 8003996:	d130      	bne.n	80039fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ce:	2201      	movs	r2, #1
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 0201 	and.w	r2, r3, #1
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d017      	beq.n	8003a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	2203      	movs	r2, #3
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d123      	bne.n	8003a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	08da      	lsrs	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3208      	adds	r2, #8
 8003a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	08da      	lsrs	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3208      	adds	r2, #8
 8003a84:	6939      	ldr	r1, [r7, #16]
 8003a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	2203      	movs	r2, #3
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0203 	and.w	r2, r3, #3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a6 	beq.w	8003c18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003acc:	4b5b      	ldr	r3, [pc, #364]	; (8003c3c <HAL_GPIO_Init+0x2e4>)
 8003ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad0:	4a5a      	ldr	r2, [pc, #360]	; (8003c3c <HAL_GPIO_Init+0x2e4>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ad8:	4b58      	ldr	r3, [pc, #352]	; (8003c3c <HAL_GPIO_Init+0x2e4>)
 8003ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae4:	4a56      	ldr	r2, [pc, #344]	; (8003c40 <HAL_GPIO_Init+0x2e8>)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	089b      	lsrs	r3, r3, #2
 8003aea:	3302      	adds	r3, #2
 8003aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b0e:	d01f      	beq.n	8003b50 <HAL_GPIO_Init+0x1f8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a4c      	ldr	r2, [pc, #304]	; (8003c44 <HAL_GPIO_Init+0x2ec>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d019      	beq.n	8003b4c <HAL_GPIO_Init+0x1f4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d013      	beq.n	8003b48 <HAL_GPIO_Init+0x1f0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <HAL_GPIO_Init+0x2f4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00d      	beq.n	8003b44 <HAL_GPIO_Init+0x1ec>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a49      	ldr	r2, [pc, #292]	; (8003c50 <HAL_GPIO_Init+0x2f8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d007      	beq.n	8003b40 <HAL_GPIO_Init+0x1e8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a48      	ldr	r2, [pc, #288]	; (8003c54 <HAL_GPIO_Init+0x2fc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_GPIO_Init+0x1e4>
 8003b38:	2305      	movs	r3, #5
 8003b3a:	e00a      	b.n	8003b52 <HAL_GPIO_Init+0x1fa>
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	e008      	b.n	8003b52 <HAL_GPIO_Init+0x1fa>
 8003b40:	2304      	movs	r3, #4
 8003b42:	e006      	b.n	8003b52 <HAL_GPIO_Init+0x1fa>
 8003b44:	2303      	movs	r3, #3
 8003b46:	e004      	b.n	8003b52 <HAL_GPIO_Init+0x1fa>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e002      	b.n	8003b52 <HAL_GPIO_Init+0x1fa>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_GPIO_Init+0x1fa>
 8003b50:	2300      	movs	r3, #0
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	f002 0203 	and.w	r2, r2, #3
 8003b58:	0092      	lsls	r2, r2, #2
 8003b5a:	4093      	lsls	r3, r2
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b62:	4937      	ldr	r1, [pc, #220]	; (8003c40 <HAL_GPIO_Init+0x2e8>)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	3302      	adds	r3, #2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b70:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <HAL_GPIO_Init+0x300>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b94:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <HAL_GPIO_Init+0x300>)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <HAL_GPIO_Init+0x300>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_GPIO_Init+0x300>)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_GPIO_Init+0x300>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003be8:	4a1b      	ldr	r2, [pc, #108]	; (8003c58 <HAL_GPIO_Init+0x300>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bee:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <HAL_GPIO_Init+0x300>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c12:	4a11      	ldr	r2, [pc, #68]	; (8003c58 <HAL_GPIO_Init+0x300>)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f ae9d 	bne.w	8003968 <HAL_GPIO_Init+0x10>
  }
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40010000 	.word	0x40010000
 8003c44:	48000400 	.word	0x48000400
 8003c48:	48000800 	.word	0x48000800
 8003c4c:	48000c00 	.word	0x48000c00
 8003c50:	48001000 	.word	0x48001000
 8003c54:	48001400 	.word	0x48001400
 8003c58:	40010400 	.word	0x40010400

08003c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c6c:	787b      	ldrb	r3, [r7, #1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c78:	e002      	b.n	8003c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d006      	beq.n	8003cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ca2:	4a05      	ldr	r2, [pc, #20]	; (8003cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f806 	bl	8003cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40010400 	.word	0x40010400

08003cbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e08d      	b.n	8003e00 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fd fb13 	bl	8001324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2224      	movs	r2, #36	; 0x24
 8003d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d48:	609a      	str	r2, [r3, #8]
 8003d4a:	e006      	b.n	8003d5a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d108      	bne.n	8003d74 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	e007      	b.n	8003d84 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69d9      	ldr	r1, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d138      	bne.n	8003e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e032      	b.n	8003e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d139      	bne.n	8003f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e033      	b.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2224      	movs	r2, #36	; 0x24
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d141      	bne.n	8003fca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f46:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d131      	bne.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f54:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5a:	4a46      	ldr	r2, [pc, #280]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f6c:	4a41      	ldr	r2, [pc, #260]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f74:	4b40      	ldr	r3, [pc, #256]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2232      	movs	r2, #50	; 0x32
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	4a3f      	ldr	r2, [pc, #252]	; (800407c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	0c9b      	lsrs	r3, r3, #18
 8003f86:	3301      	adds	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8a:	e002      	b.n	8003f92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f92:	4b38      	ldr	r3, [pc, #224]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9e:	d102      	bne.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f2      	bne.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fa6:	4b33      	ldr	r3, [pc, #204]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d158      	bne.n	8004066 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e057      	b.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fbe:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fc8:	e04d      	b.n	8004066 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd0:	d141      	bne.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fd2:	4b28      	ldr	r3, [pc, #160]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d131      	bne.n	8004044 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe0:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	4a23      	ldr	r2, [pc, #140]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ff0:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2232      	movs	r2, #50	; 0x32
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	4a1c      	ldr	r2, [pc, #112]	; (800407c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	0c9b      	lsrs	r3, r3, #18
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004016:	e002      	b.n	800401e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3b01      	subs	r3, #1
 800401c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402a:	d102      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f2      	bne.n	8004018 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d112      	bne.n	8004066 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e011      	b.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004054:	e007      	b.n	8004066 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800405e:	4a05      	ldr	r2, [pc, #20]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004064:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40007000 	.word	0x40007000
 8004078:	20000004 	.word	0x20000004
 800407c:	431bde83 	.word	0x431bde83

08004080 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a04      	ldr	r2, [pc, #16]	; (800409c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800408a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800408e:	6093      	str	r3, [r2, #8]
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40007000 	.word	0x40007000

080040a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e2fe      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d075      	beq.n	80041aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040be:	4b97      	ldr	r3, [pc, #604]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c8:	4b94      	ldr	r3, [pc, #592]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	d102      	bne.n	80040de <HAL_RCC_OscConfig+0x3e>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d002      	beq.n	80040e4 <HAL_RCC_OscConfig+0x44>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d10b      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	4b8d      	ldr	r3, [pc, #564]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05b      	beq.n	80041a8 <HAL_RCC_OscConfig+0x108>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d157      	bne.n	80041a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e2d9      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d106      	bne.n	8004114 <HAL_RCC_OscConfig+0x74>
 8004106:	4b85      	ldr	r3, [pc, #532]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a84      	ldr	r2, [pc, #528]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x98>
 800411e:	4b7f      	ldr	r3, [pc, #508]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a7e      	ldr	r2, [pc, #504]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b7c      	ldr	r3, [pc, #496]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7b      	ldr	r2, [pc, #492]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004138:	4b78      	ldr	r3, [pc, #480]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a77      	ldr	r2, [pc, #476]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b75      	ldr	r3, [pc, #468]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a74      	ldr	r2, [pc, #464]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe f806 	bl	8002168 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004160:	f7fe f802 	bl	8002168 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e29e      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004172:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xc0>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd fff2 	bl	8002168 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fd ffee 	bl	8002168 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e28a      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800419a:	4b60      	ldr	r3, [pc, #384]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0xe8>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d075      	beq.n	80042a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b6:	4b59      	ldr	r3, [pc, #356]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c0:	4b56      	ldr	r3, [pc, #344]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b0c      	cmp	r3, #12
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_OscConfig+0x136>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d002      	beq.n	80041dc <HAL_RCC_OscConfig+0x13c>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d11f      	bne.n	800421c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041dc:	4b4f      	ldr	r3, [pc, #316]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_OscConfig+0x154>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e25d      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4b49      	ldr	r3, [pc, #292]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	4946      	ldr	r1, [pc, #280]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004208:	4b45      	ldr	r3, [pc, #276]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fd ff5f 	bl	80020d0 <HAL_InitTick>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d043      	beq.n	80042a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e249      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d023      	beq.n	800426c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004224:	4b3d      	ldr	r3, [pc, #244]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3c      	ldr	r2, [pc, #240]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd ff9a 	bl	8002168 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004238:	f7fd ff96 	bl	8002168 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e232      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424a:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	492d      	ldr	r1, [pc, #180]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
 800426a:	e01a      	b.n	80042a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800426c:	4b2b      	ldr	r3, [pc, #172]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2a      	ldr	r2, [pc, #168]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd ff76 	bl	8002168 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004280:	f7fd ff72 	bl	8002168 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e20e      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x1e0>
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d041      	beq.n	8004332 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01c      	beq.n	80042f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b6:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80042b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fd ff4f 	bl	8002168 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fd ff4b 	bl	8002168 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e1e7      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80042e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ef      	beq.n	80042ce <HAL_RCC_OscConfig+0x22e>
 80042ee:	e020      	b.n	8004332 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <HAL_RCC_OscConfig+0x27c>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fd ff32 	bl	8002168 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004306:	e00d      	b.n	8004324 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004308:	f7fd ff2e 	bl	8002168 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d906      	bls.n	8004324 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1ca      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004324:	4b8c      	ldr	r3, [pc, #560]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ea      	bne.n	8004308 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80a6 	beq.w	800448c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004344:	4b84      	ldr	r3, [pc, #528]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_OscConfig+0x2b4>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x2b6>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b7f      	ldr	r3, [pc, #508]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a7e      	ldr	r2, [pc, #504]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
 8004366:	4b7c      	ldr	r3, [pc, #496]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004372:	2301      	movs	r3, #1
 8004374:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004376:	4b79      	ldr	r3, [pc, #484]	; (800455c <HAL_RCC_OscConfig+0x4bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d118      	bne.n	80043b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004382:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCC_OscConfig+0x4bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a75      	ldr	r2, [pc, #468]	; (800455c <HAL_RCC_OscConfig+0x4bc>)
 8004388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438e:	f7fd feeb 	bl	8002168 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004396:	f7fd fee7 	bl	8002168 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e183      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a8:	4b6c      	ldr	r3, [pc, #432]	; (800455c <HAL_RCC_OscConfig+0x4bc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d108      	bne.n	80043ce <HAL_RCC_OscConfig+0x32e>
 80043bc:	4b66      	ldr	r3, [pc, #408]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	4a65      	ldr	r2, [pc, #404]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043cc:	e024      	b.n	8004418 <HAL_RCC_OscConfig+0x378>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d110      	bne.n	80043f8 <HAL_RCC_OscConfig+0x358>
 80043d6:	4b60      	ldr	r3, [pc, #384]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	4a5e      	ldr	r2, [pc, #376]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80043de:	f043 0304 	orr.w	r3, r3, #4
 80043e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e6:	4b5c      	ldr	r3, [pc, #368]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	4a5a      	ldr	r2, [pc, #360]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f6:	e00f      	b.n	8004418 <HAL_RCC_OscConfig+0x378>
 80043f8:	4b57      	ldr	r3, [pc, #348]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	4a56      	ldr	r2, [pc, #344]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004408:	4b53      	ldr	r3, [pc, #332]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	4a52      	ldr	r2, [pc, #328]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d016      	beq.n	800444e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fd fea2 	bl	8002168 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fd fe9e 	bl	8002168 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e138      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443e:	4b46      	ldr	r3, [pc, #280]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ed      	beq.n	8004428 <HAL_RCC_OscConfig+0x388>
 800444c:	e015      	b.n	800447a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fd fe8b 	bl	8002168 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fd fe87 	bl	8002168 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e121      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800446c:	4b3a      	ldr	r3, [pc, #232]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ed      	bne.n	8004456 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004480:	4b35      	ldr	r3, [pc, #212]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	4a34      	ldr	r2, [pc, #208]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d03c      	beq.n	8004512 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01c      	beq.n	80044da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a6:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fd fe5a 	bl	8002168 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b8:	f7fd fe56 	bl	8002168 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0f2      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80044cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ef      	beq.n	80044b8 <HAL_RCC_OscConfig+0x418>
 80044d8:	e01b      	b.n	8004512 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044da:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ea:	f7fd fe3d 	bl	8002168 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f2:	f7fd fe39 	bl	8002168 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0d5      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ef      	bne.n	80044f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80c9 	beq.w	80046ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b0c      	cmp	r3, #12
 8004526:	f000 8083 	beq.w	8004630 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d15e      	bne.n	80045f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <HAL_RCC_OscConfig+0x4b8>)
 8004538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7fd fe13 	bl	8002168 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004544:	e00c      	b.n	8004560 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004546:	f7fd fe0f 	bl	8002168 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d905      	bls.n	8004560 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0ab      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
 8004558:	40021000 	.word	0x40021000
 800455c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004560:	4b55      	ldr	r3, [pc, #340]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ec      	bne.n	8004546 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800456c:	4b52      	ldr	r3, [pc, #328]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_RCC_OscConfig+0x61c>)
 8004572:	4013      	ands	r3, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6a11      	ldr	r1, [r2, #32]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800457c:	3a01      	subs	r2, #1
 800457e:	0112      	lsls	r2, r2, #4
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004586:	0212      	lsls	r2, r2, #8
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800458e:	0852      	lsrs	r2, r2, #1
 8004590:	3a01      	subs	r2, #1
 8004592:	0552      	lsls	r2, r2, #21
 8004594:	4311      	orrs	r1, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800459a:	0852      	lsrs	r2, r2, #1
 800459c:	3a01      	subs	r2, #1
 800459e:	0652      	lsls	r2, r2, #25
 80045a0:	4311      	orrs	r1, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045a6:	06d2      	lsls	r2, r2, #27
 80045a8:	430a      	orrs	r2, r1
 80045aa:	4943      	ldr	r1, [pc, #268]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a40      	ldr	r2, [pc, #256]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 80045b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045bc:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a3d      	ldr	r2, [pc, #244]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 80045c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fd fdce 	bl	8002168 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fd fdca 	bl	8002168 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e066      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e2:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x530>
 80045ee:	e05e      	b.n	80046ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f0:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a30      	ldr	r2, [pc, #192]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 80045f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fd fdb4 	bl	8002168 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd fdb0 	bl	8002168 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e04c      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004616:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004622:	4b25      	ldr	r3, [pc, #148]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	4924      	ldr	r1, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 8004628:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <HAL_RCC_OscConfig+0x620>)
 800462a:	4013      	ands	r3, r2
 800462c:	60cb      	str	r3, [r1, #12]
 800462e:	e03e      	b.n	80046ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e039      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_RCC_OscConfig+0x618>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 0203 	and.w	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	429a      	cmp	r2, r3
 800464e:	d12c      	bne.n	80046aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	3b01      	subs	r3, #1
 800465c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d123      	bne.n	80046aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d11b      	bne.n	80046aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d113      	bne.n	80046aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	3b01      	subs	r3, #1
 8004690:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d109      	bne.n	80046aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	3b01      	subs	r3, #1
 80046a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d001      	beq.n	80046ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	019f800c 	.word	0x019f800c
 80046c0:	feeefffc 	.word	0xfeeefffc

080046c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e11e      	b.n	800491a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b91      	ldr	r3, [pc, #580]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d910      	bls.n	800470c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b8e      	ldr	r3, [pc, #568]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 020f 	bic.w	r2, r3, #15
 80046f2:	498c      	ldr	r1, [pc, #560]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b8a      	ldr	r3, [pc, #552]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e106      	b.n	800491a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d073      	beq.n	8004800 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d129      	bne.n	8004774 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004720:	4b81      	ldr	r3, [pc, #516]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0f4      	b.n	800491a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004730:	f000 f99e 	bl	8004a70 <RCC_GetSysClockFreqFromPLLSource>
 8004734:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4a7c      	ldr	r2, [pc, #496]	; (800492c <HAL_RCC_ClockConfig+0x268>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d93f      	bls.n	80047be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800473e:	4b7a      	ldr	r3, [pc, #488]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	d033      	beq.n	80047be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800475a:	2b00      	cmp	r3, #0
 800475c:	d12f      	bne.n	80047be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800475e:	4b72      	ldr	r3, [pc, #456]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004766:	4a70      	ldr	r2, [pc, #448]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e024      	b.n	80047be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d107      	bne.n	800478c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477c:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0c6      	b.n	800491a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800478c:	4b66      	ldr	r3, [pc, #408]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0be      	b.n	800491a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800479c:	f000 f8ce 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4a61      	ldr	r2, [pc, #388]	; (800492c <HAL_RCC_ClockConfig+0x268>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d909      	bls.n	80047be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047aa:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b2:	4a5d      	ldr	r2, [pc, #372]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047be:	4b5a      	ldr	r3, [pc, #360]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4957      	ldr	r1, [pc, #348]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd fcca 	bl	8002168 <HAL_GetTick>
 80047d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d8:	f7fd fcc6 	bl	8002168 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e095      	b.n	800491a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	4b4e      	ldr	r3, [pc, #312]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 020c 	and.w	r2, r3, #12
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d1eb      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d023      	beq.n	8004854 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004818:	4b43      	ldr	r3, [pc, #268]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a42      	ldr	r2, [pc, #264]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 800481e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004822:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004830:	4b3d      	ldr	r3, [pc, #244]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004838:	4a3b      	ldr	r2, [pc, #236]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 800483a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800483e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b39      	ldr	r3, [pc, #228]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4936      	ldr	r1, [pc, #216]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
 8004852:	e008      	b.n	8004866 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b80      	cmp	r3, #128	; 0x80
 8004858:	d105      	bne.n	8004866 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800485a:	4b33      	ldr	r3, [pc, #204]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4a32      	ldr	r2, [pc, #200]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 8004860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004864:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d21d      	bcs.n	80048b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004874:	4b2b      	ldr	r3, [pc, #172]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 020f 	bic.w	r2, r3, #15
 800487c:	4929      	ldr	r1, [pc, #164]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004884:	f7fd fc70 	bl	8002168 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fd fc6c 	bl	8002168 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e03b      	b.n	800491a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d1ed      	bne.n	800488c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048bc:	4b1a      	ldr	r3, [pc, #104]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4917      	ldr	r1, [pc, #92]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	490f      	ldr	r1, [pc, #60]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ee:	f000 f825 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80048f2:	4602      	mov	r2, r0
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	490c      	ldr	r1, [pc, #48]	; (8004930 <HAL_RCC_ClockConfig+0x26c>)
 8004900:	5ccb      	ldrb	r3, [r1, r3]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x270>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_RCC_ClockConfig+0x274>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fd fbdc 	bl	80020d0 <HAL_InitTick>
 8004918:	4603      	mov	r3, r0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40022000 	.word	0x40022000
 8004928:	40021000 	.word	0x40021000
 800492c:	04c4b400 	.word	0x04c4b400
 8004930:	08007c78 	.word	0x08007c78
 8004934:	20000004 	.word	0x20000004
 8004938:	20000008 	.word	0x20000008

0800493c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004942:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b04      	cmp	r3, #4
 800494c:	d102      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800494e:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e047      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004954:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b08      	cmp	r3, #8
 800495e:	d102      	bne.n	8004966 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004960:	4b26      	ldr	r3, [pc, #152]	; (80049fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e03e      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004966:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b0c      	cmp	r3, #12
 8004970:	d136      	bne.n	80049e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004972:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	3301      	adds	r3, #1
 8004988:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d10c      	bne.n	80049aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004990:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499a:	68d2      	ldr	r2, [r2, #12]
 800499c:	0a12      	lsrs	r2, r2, #8
 800499e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	617b      	str	r3, [r7, #20]
      break;
 80049a8:	e00c      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049aa:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b4:	68d2      	ldr	r2, [r2, #12]
 80049b6:	0a12      	lsrs	r2, r2, #8
 80049b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049bc:	fb02 f303 	mul.w	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
      break;
 80049c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	0e5b      	lsrs	r3, r3, #25
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	3301      	adds	r3, #1
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e001      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049e4:	693b      	ldr	r3, [r7, #16]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	016e3600 	.word	0x016e3600

08004a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000004 	.word	0x20000004

08004a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a1c:	f7ff fff0 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4904      	ldr	r1, [pc, #16]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	08007c88 	.word	0x08007c88

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a48:	f7ff ffda 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0adb      	lsrs	r3, r3, #11
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4904      	ldr	r1, [pc, #16]	; (8004a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	08007c88 	.word	0x08007c88

08004a70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a76:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a80:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d10c      	bne.n	8004aae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a9e:	68d2      	ldr	r2, [r2, #12]
 8004aa0:	0a12      	lsrs	r2, r2, #8
 8004aa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	617b      	str	r3, [r7, #20]
    break;
 8004aac:	e00c      	b.n	8004ac8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ab8:	68d2      	ldr	r2, [r2, #12]
 8004aba:	0a12      	lsrs	r2, r2, #8
 8004abc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
    break;
 8004ac6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0e5b      	lsrs	r3, r3, #25
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ae2:	687b      	ldr	r3, [r7, #4]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	40021000 	.word	0x40021000
 8004af4:	016e3600 	.word	0x016e3600
 8004af8:	00f42400 	.word	0x00f42400

08004afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b04:	2300      	movs	r3, #0
 8004b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b08:	2300      	movs	r3, #0
 8004b0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8098 	beq.w	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10d      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	4b40      	ldr	r3, [pc, #256]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	4a3f      	ldr	r2, [pc, #252]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6593      	str	r3, [r2, #88]	; 0x58
 8004b36:	4b3d      	ldr	r3, [pc, #244]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b42:	2301      	movs	r3, #1
 8004b44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b46:	4b3a      	ldr	r3, [pc, #232]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a39      	ldr	r2, [pc, #228]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b52:	f7fd fb09 	bl	8002168 <HAL_GetTick>
 8004b56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b58:	e009      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7fd fb05 	bl	8002168 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d902      	bls.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b6c:	e005      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b6e:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0ef      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b7a:	7cfb      	ldrb	r3, [r7, #19]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d159      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b80:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01e      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d019      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b9c:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba8:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb8:	4b1c      	ldr	r3, [pc, #112]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fd fac5 	bl	8002168 <HAL_GetTick>
 8004bde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be0:	e00b      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fd fac1 	bl	8002168 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d902      	bls.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	74fb      	strb	r3, [r7, #19]
            break;
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ec      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10b      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	4903      	ldr	r1, [pc, #12]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c24:	e008      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c26:	7cfb      	ldrb	r3, [r7, #19]
 8004c28:	74bb      	strb	r3, [r7, #18]
 8004c2a:	e005      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c38:	7c7b      	ldrb	r3, [r7, #17]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3e:	4ba7      	ldr	r3, [pc, #668]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c42:	4aa6      	ldr	r2, [pc, #664]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c56:	4ba1      	ldr	r3, [pc, #644]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f023 0203 	bic.w	r2, r3, #3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	499d      	ldr	r1, [pc, #628]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c78:	4b98      	ldr	r3, [pc, #608]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f023 020c 	bic.w	r2, r3, #12
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4995      	ldr	r1, [pc, #596]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c9a:	4b90      	ldr	r3, [pc, #576]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	498c      	ldr	r1, [pc, #560]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cbc:	4b87      	ldr	r3, [pc, #540]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	4984      	ldr	r1, [pc, #528]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cde:	4b7f      	ldr	r3, [pc, #508]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	497b      	ldr	r1, [pc, #492]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d00:	4b76      	ldr	r3, [pc, #472]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	4973      	ldr	r1, [pc, #460]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d22:	4b6e      	ldr	r3, [pc, #440]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	496a      	ldr	r1, [pc, #424]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d44:	4b65      	ldr	r3, [pc, #404]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	4962      	ldr	r1, [pc, #392]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d66:	4b5d      	ldr	r3, [pc, #372]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	4959      	ldr	r1, [pc, #356]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d88:	4b54      	ldr	r3, [pc, #336]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d8e:	f023 0203 	bic.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	4951      	ldr	r1, [pc, #324]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004daa:	4b4c      	ldr	r3, [pc, #304]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	4948      	ldr	r1, [pc, #288]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d015      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dcc:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	4940      	ldr	r1, [pc, #256]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dea:	d105      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dec:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4a3a      	ldr	r2, [pc, #232]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d015      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e04:	4b35      	ldr	r3, [pc, #212]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	4932      	ldr	r1, [pc, #200]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e22:	d105      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e24:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d015      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e3c:	4b27      	ldr	r3, [pc, #156]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	4924      	ldr	r1, [pc, #144]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5c:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	4916      	ldr	r1, [pc, #88]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e94:	4b11      	ldr	r3, [pc, #68]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d019      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	4908      	ldr	r1, [pc, #32]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eca:	d109      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a02      	ldr	r2, [pc, #8]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ed6:	60d3      	str	r3, [r2, #12]
 8004ed8:	e002      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004eec:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	4926      	ldr	r1, [pc, #152]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f0c:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a20      	ldr	r2, [pc, #128]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f24:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f32:	4918      	ldr	r1, [pc, #96]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d105      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f44:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a12      	ldr	r2, [pc, #72]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	490a      	ldr	r1, [pc, #40]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f88:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000

08004f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e049      	b.n	800503e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc fe04 	bl	8001bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f001 f86e 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d001      	beq.n	8005060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e04c      	b.n	80050fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a26      	ldr	r2, [pc, #152]	; (8005108 <HAL_TIM_Base_Start+0xc0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d01d      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_TIM_Base_Start+0xc4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	; (8005110 <HAL_TIM_Base_Start+0xc8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_TIM_Base_Start+0xcc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <HAL_TIM_Base_Start+0xd0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	; (800511c <HAL_TIM_Base_Start+0xd4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_TIM_Base_Start+0xd8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d115      	bne.n	80050e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <HAL_TIM_Base_Start+0xdc>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d015      	beq.n	80050f6 <HAL_TIM_Base_Start+0xae>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d011      	beq.n	80050f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	e008      	b.n	80050f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40013400 	.word	0x40013400
 800511c:	40014000 	.word	0x40014000
 8005120:	40015000 	.word	0x40015000
 8005124:	00010007 	.word	0x00010007

08005128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e054      	b.n	80051ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d022      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d01d      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a22      	ldr	r2, [pc, #136]	; (80051fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d018      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <HAL_TIM_Base_Start_IT+0xd8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d013      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_TIM_Base_Start_IT+0xdc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00e      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_TIM_Base_Start_IT+0xe0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d009      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_TIM_Base_Start_IT+0xe4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_TIM_Base_Start_IT+0xe8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d115      	bne.n	80051d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	4b19      	ldr	r3, [pc, #100]	; (8005214 <HAL_TIM_Base_Start_IT+0xec>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b06      	cmp	r3, #6
 80051b8:	d015      	beq.n	80051e6 <HAL_TIM_Base_Start_IT+0xbe>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c0:	d011      	beq.n	80051e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	e008      	b.n	80051e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e000      	b.n	80051e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40000c00 	.word	0x40000c00
 8005208:	40013400 	.word	0x40013400
 800520c:	40014000 	.word	0x40014000
 8005210:	40015000 	.word	0x40015000
 8005214:	00010007 	.word	0x00010007

08005218 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e049      	b.n	80052be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc fd88 	bl	8001d54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f000 ff2e 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <HAL_TIM_PWM_Start+0x24>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	e03c      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d109      	bne.n	8005306 <HAL_TIM_PWM_Start+0x3e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	e02f      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d109      	bne.n	8005320 <HAL_TIM_PWM_Start+0x58>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e022      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	d109      	bne.n	800533a <HAL_TIM_PWM_Start+0x72>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	bf14      	ite	ne
 8005332:	2301      	movne	r3, #1
 8005334:	2300      	moveq	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	e015      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b10      	cmp	r3, #16
 800533e:	d109      	bne.n	8005354 <HAL_TIM_PWM_Start+0x8c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e008      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0a6      	b.n	80054bc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <HAL_TIM_PWM_Start+0xb6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800537c:	e023      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d104      	bne.n	800538e <HAL_TIM_PWM_Start+0xc6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800538c:	e01b      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d104      	bne.n	800539e <HAL_TIM_PWM_Start+0xd6>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800539c:	e013      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0xe6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ac:	e00b      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Start+0xf6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053bc:	e003      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2201      	movs	r2, #1
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fc16 	bl	8006c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a3a      	ldr	r2, [pc, #232]	; (80054c4 <HAL_TIM_PWM_Start+0x1fc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d018      	beq.n	8005410 <HAL_TIM_PWM_Start+0x148>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a39      	ldr	r2, [pc, #228]	; (80054c8 <HAL_TIM_PWM_Start+0x200>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <HAL_TIM_PWM_Start+0x148>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a37      	ldr	r2, [pc, #220]	; (80054cc <HAL_TIM_PWM_Start+0x204>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00e      	beq.n	8005410 <HAL_TIM_PWM_Start+0x148>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a36      	ldr	r2, [pc, #216]	; (80054d0 <HAL_TIM_PWM_Start+0x208>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d009      	beq.n	8005410 <HAL_TIM_PWM_Start+0x148>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <HAL_TIM_PWM_Start+0x20c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_TIM_PWM_Start+0x148>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a33      	ldr	r2, [pc, #204]	; (80054d8 <HAL_TIM_PWM_Start+0x210>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d101      	bne.n	8005414 <HAL_TIM_PWM_Start+0x14c>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_TIM_PWM_Start+0x14e>
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <HAL_TIM_PWM_Start+0x1fc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d022      	beq.n	800547a <HAL_TIM_PWM_Start+0x1b2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543c:	d01d      	beq.n	800547a <HAL_TIM_PWM_Start+0x1b2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a26      	ldr	r2, [pc, #152]	; (80054dc <HAL_TIM_PWM_Start+0x214>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d018      	beq.n	800547a <HAL_TIM_PWM_Start+0x1b2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a24      	ldr	r2, [pc, #144]	; (80054e0 <HAL_TIM_PWM_Start+0x218>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_TIM_PWM_Start+0x1b2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a23      	ldr	r2, [pc, #140]	; (80054e4 <HAL_TIM_PWM_Start+0x21c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_TIM_PWM_Start+0x1b2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a19      	ldr	r2, [pc, #100]	; (80054c8 <HAL_TIM_PWM_Start+0x200>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_TIM_PWM_Start+0x1b2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a18      	ldr	r2, [pc, #96]	; (80054cc <HAL_TIM_PWM_Start+0x204>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_TIM_PWM_Start+0x1b2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_TIM_PWM_Start+0x210>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d115      	bne.n	80054a6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_TIM_PWM_Start+0x220>)
 8005482:	4013      	ands	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b06      	cmp	r3, #6
 800548a:	d015      	beq.n	80054b8 <HAL_TIM_PWM_Start+0x1f0>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005492:	d011      	beq.n	80054b8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a4:	e008      	b.n	80054b8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e000      	b.n	80054ba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40013400 	.word	0x40013400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	40015000 	.word	0x40015000
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40000c00 	.word	0x40000c00
 80054e8:	00010007 	.word	0x00010007

080054ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e049      	b.n	8005592 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f841 	bl	800559a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f000 fdc4 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_IC_Start_IT+0x1e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e023      	b.n	8005616 <HAL_TIM_IC_Start_IT+0x66>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d104      	bne.n	80055de <HAL_TIM_IC_Start_IT+0x2e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	e01b      	b.n	8005616 <HAL_TIM_IC_Start_IT+0x66>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_IC_Start_IT+0x3e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e013      	b.n	8005616 <HAL_TIM_IC_Start_IT+0x66>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_IC_Start_IT+0x4e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	e00b      	b.n	8005616 <HAL_TIM_IC_Start_IT+0x66>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b10      	cmp	r3, #16
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0x5e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e003      	b.n	8005616 <HAL_TIM_IC_Start_IT+0x66>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005614:	b2db      	uxtb	r3, r3
 8005616:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <HAL_TIM_IC_Start_IT+0x78>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e013      	b.n	8005650 <HAL_TIM_IC_Start_IT+0xa0>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b04      	cmp	r3, #4
 800562c:	d104      	bne.n	8005638 <HAL_TIM_IC_Start_IT+0x88>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e00b      	b.n	8005650 <HAL_TIM_IC_Start_IT+0xa0>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b08      	cmp	r3, #8
 800563c:	d104      	bne.n	8005648 <HAL_TIM_IC_Start_IT+0x98>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e003      	b.n	8005650 <HAL_TIM_IC_Start_IT+0xa0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800564e:	b2db      	uxtb	r3, r3
 8005650:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005652:	7bbb      	ldrb	r3, [r7, #14]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d102      	bne.n	800565e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005658:	7b7b      	ldrb	r3, [r7, #13]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d001      	beq.n	8005662 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e0e2      	b.n	8005828 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_TIM_IC_Start_IT+0xc2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005670:	e023      	b.n	80056ba <HAL_TIM_IC_Start_IT+0x10a>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b04      	cmp	r3, #4
 8005676:	d104      	bne.n	8005682 <HAL_TIM_IC_Start_IT+0xd2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005680:	e01b      	b.n	80056ba <HAL_TIM_IC_Start_IT+0x10a>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d104      	bne.n	8005692 <HAL_TIM_IC_Start_IT+0xe2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005690:	e013      	b.n	80056ba <HAL_TIM_IC_Start_IT+0x10a>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b0c      	cmp	r3, #12
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_IC_Start_IT+0xf2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a0:	e00b      	b.n	80056ba <HAL_TIM_IC_Start_IT+0x10a>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d104      	bne.n	80056b2 <HAL_TIM_IC_Start_IT+0x102>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b0:	e003      	b.n	80056ba <HAL_TIM_IC_Start_IT+0x10a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <HAL_TIM_IC_Start_IT+0x11a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c8:	e013      	b.n	80056f2 <HAL_TIM_IC_Start_IT+0x142>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d104      	bne.n	80056da <HAL_TIM_IC_Start_IT+0x12a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d8:	e00b      	b.n	80056f2 <HAL_TIM_IC_Start_IT+0x142>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d104      	bne.n	80056ea <HAL_TIM_IC_Start_IT+0x13a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056e8:	e003      	b.n	80056f2 <HAL_TIM_IC_Start_IT+0x142>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	d841      	bhi.n	800577c <HAL_TIM_IC_Start_IT+0x1cc>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <HAL_TIM_IC_Start_IT+0x150>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005735 	.word	0x08005735
 8005704:	0800577d 	.word	0x0800577d
 8005708:	0800577d 	.word	0x0800577d
 800570c:	0800577d 	.word	0x0800577d
 8005710:	08005747 	.word	0x08005747
 8005714:	0800577d 	.word	0x0800577d
 8005718:	0800577d 	.word	0x0800577d
 800571c:	0800577d 	.word	0x0800577d
 8005720:	08005759 	.word	0x08005759
 8005724:	0800577d 	.word	0x0800577d
 8005728:	0800577d 	.word	0x0800577d
 800572c:	0800577d 	.word	0x0800577d
 8005730:	0800576b 	.word	0x0800576b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0202 	orr.w	r2, r2, #2
 8005742:	60da      	str	r2, [r3, #12]
      break;
 8005744:	e01d      	b.n	8005782 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0204 	orr.w	r2, r2, #4
 8005754:	60da      	str	r2, [r3, #12]
      break;
 8005756:	e014      	b.n	8005782 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0208 	orr.w	r2, r2, #8
 8005766:	60da      	str	r2, [r3, #12]
      break;
 8005768:	e00b      	b.n	8005782 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0210 	orr.w	r2, r2, #16
 8005778:	60da      	str	r2, [r3, #12]
      break;
 800577a:	e002      	b.n	8005782 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      break;
 8005780:	bf00      	nop
  }

  if (status == HAL_OK)
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d14e      	bne.n	8005826 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2201      	movs	r2, #1
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f001 fa35 	bl	8006c00 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a25      	ldr	r2, [pc, #148]	; (8005830 <HAL_TIM_IC_Start_IT+0x280>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_TIM_IC_Start_IT+0x236>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a8:	d01d      	beq.n	80057e6 <HAL_TIM_IC_Start_IT+0x236>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a21      	ldr	r2, [pc, #132]	; (8005834 <HAL_TIM_IC_Start_IT+0x284>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIM_IC_Start_IT+0x236>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1f      	ldr	r2, [pc, #124]	; (8005838 <HAL_TIM_IC_Start_IT+0x288>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_TIM_IC_Start_IT+0x236>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1e      	ldr	r2, [pc, #120]	; (800583c <HAL_TIM_IC_Start_IT+0x28c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIM_IC_Start_IT+0x236>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <HAL_TIM_IC_Start_IT+0x290>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIM_IC_Start_IT+0x236>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <HAL_TIM_IC_Start_IT+0x294>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIM_IC_Start_IT+0x236>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a19      	ldr	r2, [pc, #100]	; (8005848 <HAL_TIM_IC_Start_IT+0x298>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d115      	bne.n	8005812 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	4b17      	ldr	r3, [pc, #92]	; (800584c <HAL_TIM_IC_Start_IT+0x29c>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b06      	cmp	r3, #6
 80057f6:	d015      	beq.n	8005824 <HAL_TIM_IC_Start_IT+0x274>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fe:	d011      	beq.n	8005824 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	e008      	b.n	8005824 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e000      	b.n	8005826 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005824:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40013400 	.word	0x40013400
 8005844:	40014000 	.word	0x40014000
 8005848:	40015000 	.word	0x40015000
 800584c:	00010007 	.word	0x00010007

08005850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d020      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01b      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0202 	mvn.w	r2, #2
 8005884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb fe5e 	bl	800155c <HAL_TIM_IC_CaptureCallback>
 80058a0:	e005      	b.n	80058ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fbea 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fbf1 	bl	8006090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d020      	beq.n	8005900 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0204 	mvn.w	r2, #4
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fb fe38 	bl	800155c <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fbc4 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fbcb 	bl	8006090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01b      	beq.n	800594c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0208 	mvn.w	r2, #8
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2204      	movs	r2, #4
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fb fe12 	bl	800155c <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb9e 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fba5 	bl	8006090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0210 	mvn.w	r2, #16
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2208      	movs	r2, #8
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fdec 	bl	800155c <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fb78 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fb7f 	bl	8006090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00c      	beq.n	80059bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0201 	mvn.w	r2, #1
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fde8 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d104      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00c      	beq.n	80059ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80059e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 fa65 	bl	8006eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00c      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 fa5d 	bl	8006ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb39 	bl	80060a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00c      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0220 	mvn.w	r2, #32
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 fa25 	bl	8006ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00c      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d007      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fa31 	bl	8006edc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00c      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fa29 	bl	8006ef0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00c      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 fa21 	bl	8006f04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00c      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 fa19 	bl	8006f18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e088      	b.n	8005c1e <HAL_TIM_IC_ConfigChannel+0x130>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d11b      	bne.n	8005b52 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b2a:	f000 fea3 	bl	8006874 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 020c 	bic.w	r2, r2, #12
 8005b3c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6999      	ldr	r1, [r3, #24]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	619a      	str	r2, [r3, #24]
 8005b50:	e060      	b.n	8005c14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d11c      	bne.n	8005b92 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b68:	f000 ff27 	bl	80069ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b7a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6999      	ldr	r1, [r3, #24]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	021a      	lsls	r2, r3, #8
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	619a      	str	r2, [r3, #24]
 8005b90:	e040      	b.n	8005c14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005ba8:	f000 ff74 	bl	8006a94 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 020c 	bic.w	r2, r2, #12
 8005bba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69d9      	ldr	r1, [r3, #28]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	61da      	str	r2, [r3, #28]
 8005bce:	e021      	b.n	8005c14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	d11c      	bne.n	8005c10 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005be6:	f000 ff91 	bl	8006b0c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bf8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69d9      	ldr	r1, [r3, #28]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	021a      	lsls	r2, r3, #8
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	61da      	str	r2, [r3, #28]
 8005c0e:	e001      	b.n	8005c14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e0ff      	b.n	8005e46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b14      	cmp	r3, #20
 8005c52:	f200 80f0 	bhi.w	8005e36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005e37 	.word	0x08005e37
 8005c64:	08005e37 	.word	0x08005e37
 8005c68:	08005e37 	.word	0x08005e37
 8005c6c:	08005cf1 	.word	0x08005cf1
 8005c70:	08005e37 	.word	0x08005e37
 8005c74:	08005e37 	.word	0x08005e37
 8005c78:	08005e37 	.word	0x08005e37
 8005c7c:	08005d33 	.word	0x08005d33
 8005c80:	08005e37 	.word	0x08005e37
 8005c84:	08005e37 	.word	0x08005e37
 8005c88:	08005e37 	.word	0x08005e37
 8005c8c:	08005d73 	.word	0x08005d73
 8005c90:	08005e37 	.word	0x08005e37
 8005c94:	08005e37 	.word	0x08005e37
 8005c98:	08005e37 	.word	0x08005e37
 8005c9c:	08005db5 	.word	0x08005db5
 8005ca0:	08005e37 	.word	0x08005e37
 8005ca4:	08005e37 	.word	0x08005e37
 8005ca8:	08005e37 	.word	0x08005e37
 8005cac:	08005df5 	.word	0x08005df5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fab2 	bl	8006220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0208 	orr.w	r2, r2, #8
 8005cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0204 	bic.w	r2, r2, #4
 8005cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6999      	ldr	r1, [r3, #24]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	619a      	str	r2, [r3, #24]
      break;
 8005cee:	e0a5      	b.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fb2c 	bl	8006354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6999      	ldr	r1, [r3, #24]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	021a      	lsls	r2, r3, #8
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	619a      	str	r2, [r3, #24]
      break;
 8005d30:	e084      	b.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fb9f 	bl	800647c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0208 	orr.w	r2, r2, #8
 8005d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0204 	bic.w	r2, r2, #4
 8005d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69d9      	ldr	r1, [r3, #28]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	61da      	str	r2, [r3, #28]
      break;
 8005d70:	e064      	b.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fc11 	bl	80065a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69d9      	ldr	r1, [r3, #28]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	021a      	lsls	r2, r3, #8
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	61da      	str	r2, [r3, #28]
      break;
 8005db2:	e043      	b.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fc84 	bl	80066c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0208 	orr.w	r2, r2, #8
 8005dce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0204 	bic.w	r2, r2, #4
 8005dde:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005df2:	e023      	b.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fcce 	bl	800679c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	021a      	lsls	r2, r3, #8
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e34:	e002      	b.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop

08005e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0f6      	b.n	800605a <HAL_TIM_ConfigClockSource+0x20a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a6f      	ldr	r2, [pc, #444]	; (8006064 <HAL_TIM_ConfigClockSource+0x214>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	f000 80c1 	beq.w	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005eac:	4a6d      	ldr	r2, [pc, #436]	; (8006064 <HAL_TIM_ConfigClockSource+0x214>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	f200 80c6 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005eb4:	4a6c      	ldr	r2, [pc, #432]	; (8006068 <HAL_TIM_ConfigClockSource+0x218>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f000 80b9 	beq.w	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005ebc:	4a6a      	ldr	r2, [pc, #424]	; (8006068 <HAL_TIM_ConfigClockSource+0x218>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	f200 80be 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ec4:	4a69      	ldr	r2, [pc, #420]	; (800606c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	f000 80b1 	beq.w	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005ecc:	4a67      	ldr	r2, [pc, #412]	; (800606c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	f200 80b6 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ed4:	4a66      	ldr	r2, [pc, #408]	; (8006070 <HAL_TIM_ConfigClockSource+0x220>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	f000 80a9 	beq.w	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005edc:	4a64      	ldr	r2, [pc, #400]	; (8006070 <HAL_TIM_ConfigClockSource+0x220>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	f200 80ae 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ee4:	4a63      	ldr	r2, [pc, #396]	; (8006074 <HAL_TIM_ConfigClockSource+0x224>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f000 80a1 	beq.w	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005eec:	4a61      	ldr	r2, [pc, #388]	; (8006074 <HAL_TIM_ConfigClockSource+0x224>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f200 80a6 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ef4:	4a60      	ldr	r2, [pc, #384]	; (8006078 <HAL_TIM_ConfigClockSource+0x228>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f000 8099 	beq.w	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005efc:	4a5e      	ldr	r2, [pc, #376]	; (8006078 <HAL_TIM_ConfigClockSource+0x228>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f200 809e 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f08:	f000 8091 	beq.w	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005f0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f10:	f200 8096 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f18:	f000 8089 	beq.w	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f20:	f200 808e 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f28:	d03e      	beq.n	8005fa8 <HAL_TIM_ConfigClockSource+0x158>
 8005f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2e:	f200 8087 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f36:	f000 8086 	beq.w	8006046 <HAL_TIM_ConfigClockSource+0x1f6>
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3e:	d87f      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f40:	2b70      	cmp	r3, #112	; 0x70
 8005f42:	d01a      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x12a>
 8005f44:	2b70      	cmp	r3, #112	; 0x70
 8005f46:	d87b      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f48:	2b60      	cmp	r3, #96	; 0x60
 8005f4a:	d050      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x19e>
 8005f4c:	2b60      	cmp	r3, #96	; 0x60
 8005f4e:	d877      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f50:	2b50      	cmp	r3, #80	; 0x50
 8005f52:	d03c      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0x17e>
 8005f54:	2b50      	cmp	r3, #80	; 0x50
 8005f56:	d873      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d058      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x1be>
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d86f      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f60:	2b30      	cmp	r3, #48	; 0x30
 8005f62:	d064      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005f64:	2b30      	cmp	r3, #48	; 0x30
 8005f66:	d86b      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d060      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d867      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d05c      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d05a      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x1de>
 8005f78:	e062      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f8a:	f000 fe19 	bl	8006bc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	609a      	str	r2, [r3, #8]
      break;
 8005fa6:	e04f      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fb8:	f000 fe02 	bl	8006bc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fca:	609a      	str	r2, [r3, #8]
      break;
 8005fcc:	e03c      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f000 fcbe 	bl	800695c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2150      	movs	r1, #80	; 0x50
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fdcd 	bl	8006b86 <TIM_ITRx_SetConfig>
      break;
 8005fec:	e02c      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 fd1a 	bl	8006a34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2160      	movs	r1, #96	; 0x60
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fdbd 	bl	8006b86 <TIM_ITRx_SetConfig>
      break;
 800600c:	e01c      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800601a:	461a      	mov	r2, r3
 800601c:	f000 fc9e 	bl	800695c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2140      	movs	r1, #64	; 0x40
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fdad 	bl	8006b86 <TIM_ITRx_SetConfig>
      break;
 800602c:	e00c      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f000 fda4 	bl	8006b86 <TIM_ITRx_SetConfig>
      break;
 800603e:	e003      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
      break;
 8006044:	e000      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	00100070 	.word	0x00100070
 8006068:	00100060 	.word	0x00100060
 800606c:	00100050 	.word	0x00100050
 8006070:	00100040 	.word	0x00100040
 8006074:	00100030 	.word	0x00100030
 8006078:	00100020 	.word	0x00100020

0800607c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a4c      	ldr	r2, [pc, #304]	; (80061fc <TIM_Base_SetConfig+0x144>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d017      	beq.n	8006100 <TIM_Base_SetConfig+0x48>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d013      	beq.n	8006100 <TIM_Base_SetConfig+0x48>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a49      	ldr	r2, [pc, #292]	; (8006200 <TIM_Base_SetConfig+0x148>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00f      	beq.n	8006100 <TIM_Base_SetConfig+0x48>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a48      	ldr	r2, [pc, #288]	; (8006204 <TIM_Base_SetConfig+0x14c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00b      	beq.n	8006100 <TIM_Base_SetConfig+0x48>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a47      	ldr	r2, [pc, #284]	; (8006208 <TIM_Base_SetConfig+0x150>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_Base_SetConfig+0x48>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a46      	ldr	r2, [pc, #280]	; (800620c <TIM_Base_SetConfig+0x154>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_Base_SetConfig+0x48>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a45      	ldr	r2, [pc, #276]	; (8006210 <TIM_Base_SetConfig+0x158>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d108      	bne.n	8006112 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a39      	ldr	r2, [pc, #228]	; (80061fc <TIM_Base_SetConfig+0x144>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d023      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006120:	d01f      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a36      	ldr	r2, [pc, #216]	; (8006200 <TIM_Base_SetConfig+0x148>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d01b      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a35      	ldr	r2, [pc, #212]	; (8006204 <TIM_Base_SetConfig+0x14c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d017      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a34      	ldr	r2, [pc, #208]	; (8006208 <TIM_Base_SetConfig+0x150>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a33      	ldr	r2, [pc, #204]	; (800620c <TIM_Base_SetConfig+0x154>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00f      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a33      	ldr	r2, [pc, #204]	; (8006214 <TIM_Base_SetConfig+0x15c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00b      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a32      	ldr	r2, [pc, #200]	; (8006218 <TIM_Base_SetConfig+0x160>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d007      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a31      	ldr	r2, [pc, #196]	; (800621c <TIM_Base_SetConfig+0x164>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_Base_SetConfig+0xaa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2c      	ldr	r2, [pc, #176]	; (8006210 <TIM_Base_SetConfig+0x158>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d108      	bne.n	8006174 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a18      	ldr	r2, [pc, #96]	; (80061fc <TIM_Base_SetConfig+0x144>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <TIM_Base_SetConfig+0x110>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a1a      	ldr	r2, [pc, #104]	; (800620c <TIM_Base_SetConfig+0x154>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00f      	beq.n	80061c8 <TIM_Base_SetConfig+0x110>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a1a      	ldr	r2, [pc, #104]	; (8006214 <TIM_Base_SetConfig+0x15c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00b      	beq.n	80061c8 <TIM_Base_SetConfig+0x110>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a19      	ldr	r2, [pc, #100]	; (8006218 <TIM_Base_SetConfig+0x160>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_Base_SetConfig+0x110>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a18      	ldr	r2, [pc, #96]	; (800621c <TIM_Base_SetConfig+0x164>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0x110>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a13      	ldr	r2, [pc, #76]	; (8006210 <TIM_Base_SetConfig+0x158>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d105      	bne.n	80061ee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	611a      	str	r2, [r3, #16]
  }
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40013400 	.word	0x40013400
 8006210:	40015000 	.word	0x40015000
 8006214:	40014000 	.word	0x40014000
 8006218:	40014400 	.word	0x40014400
 800621c:	40014800 	.word	0x40014800

08006220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f023 0201 	bic.w	r2, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f023 0302 	bic.w	r3, r3, #2
 800626c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a30      	ldr	r2, [pc, #192]	; (800633c <TIM_OC1_SetConfig+0x11c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <TIM_OC1_SetConfig+0x88>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a2f      	ldr	r2, [pc, #188]	; (8006340 <TIM_OC1_SetConfig+0x120>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00f      	beq.n	80062a8 <TIM_OC1_SetConfig+0x88>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a2e      	ldr	r2, [pc, #184]	; (8006344 <TIM_OC1_SetConfig+0x124>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00b      	beq.n	80062a8 <TIM_OC1_SetConfig+0x88>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <TIM_OC1_SetConfig+0x128>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d007      	beq.n	80062a8 <TIM_OC1_SetConfig+0x88>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a2c      	ldr	r2, [pc, #176]	; (800634c <TIM_OC1_SetConfig+0x12c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC1_SetConfig+0x88>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a2b      	ldr	r2, [pc, #172]	; (8006350 <TIM_OC1_SetConfig+0x130>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10c      	bne.n	80062c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0308 	bic.w	r3, r3, #8
 80062ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a1d      	ldr	r2, [pc, #116]	; (800633c <TIM_OC1_SetConfig+0x11c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <TIM_OC1_SetConfig+0xd2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a1c      	ldr	r2, [pc, #112]	; (8006340 <TIM_OC1_SetConfig+0x120>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00f      	beq.n	80062f2 <TIM_OC1_SetConfig+0xd2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <TIM_OC1_SetConfig+0x124>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00b      	beq.n	80062f2 <TIM_OC1_SetConfig+0xd2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1a      	ldr	r2, [pc, #104]	; (8006348 <TIM_OC1_SetConfig+0x128>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d007      	beq.n	80062f2 <TIM_OC1_SetConfig+0xd2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a19      	ldr	r2, [pc, #100]	; (800634c <TIM_OC1_SetConfig+0x12c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_OC1_SetConfig+0xd2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a18      	ldr	r2, [pc, #96]	; (8006350 <TIM_OC1_SetConfig+0x130>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d111      	bne.n	8006316 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40012c00 	.word	0x40012c00
 8006340:	40013400 	.word	0x40013400
 8006344:	40014000 	.word	0x40014000
 8006348:	40014400 	.word	0x40014400
 800634c:	40014800 	.word	0x40014800
 8006350:	40015000 	.word	0x40015000

08006354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f023 0210 	bic.w	r2, r3, #16
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 0320 	bic.w	r3, r3, #32
 80063a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a2c      	ldr	r2, [pc, #176]	; (8006464 <TIM_OC2_SetConfig+0x110>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_OC2_SetConfig+0x74>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a2b      	ldr	r2, [pc, #172]	; (8006468 <TIM_OC2_SetConfig+0x114>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC2_SetConfig+0x74>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a2a      	ldr	r2, [pc, #168]	; (800646c <TIM_OC2_SetConfig+0x118>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d10d      	bne.n	80063e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <TIM_OC2_SetConfig+0x110>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <TIM_OC2_SetConfig+0xc0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <TIM_OC2_SetConfig+0x114>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00f      	beq.n	8006414 <TIM_OC2_SetConfig+0xc0>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <TIM_OC2_SetConfig+0x11c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00b      	beq.n	8006414 <TIM_OC2_SetConfig+0xc0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <TIM_OC2_SetConfig+0x120>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <TIM_OC2_SetConfig+0xc0>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <TIM_OC2_SetConfig+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_OC2_SetConfig+0xc0>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <TIM_OC2_SetConfig+0x118>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d113      	bne.n	800643c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800641a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40013400 	.word	0x40013400
 800646c:	40015000 	.word	0x40015000
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800

0800647c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0303 	bic.w	r3, r3, #3
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2b      	ldr	r2, [pc, #172]	; (8006588 <TIM_OC3_SetConfig+0x10c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d007      	beq.n	80064ee <TIM_OC3_SetConfig+0x72>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2a      	ldr	r2, [pc, #168]	; (800658c <TIM_OC3_SetConfig+0x110>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_OC3_SetConfig+0x72>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a29      	ldr	r2, [pc, #164]	; (8006590 <TIM_OC3_SetConfig+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d10d      	bne.n	800650a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	021b      	lsls	r3, r3, #8
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <TIM_OC3_SetConfig+0x10c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <TIM_OC3_SetConfig+0xbe>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1d      	ldr	r2, [pc, #116]	; (800658c <TIM_OC3_SetConfig+0x110>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00f      	beq.n	800653a <TIM_OC3_SetConfig+0xbe>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <TIM_OC3_SetConfig+0x118>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00b      	beq.n	800653a <TIM_OC3_SetConfig+0xbe>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <TIM_OC3_SetConfig+0x11c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d007      	beq.n	800653a <TIM_OC3_SetConfig+0xbe>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a1b      	ldr	r2, [pc, #108]	; (800659c <TIM_OC3_SetConfig+0x120>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_OC3_SetConfig+0xbe>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a16      	ldr	r2, [pc, #88]	; (8006590 <TIM_OC3_SetConfig+0x114>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d113      	bne.n	8006562 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	621a      	str	r2, [r3, #32]
}
 800657c:	bf00      	nop
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	40012c00 	.word	0x40012c00
 800658c:	40013400 	.word	0x40013400
 8006590:	40015000 	.word	0x40015000
 8006594:	40014000 	.word	0x40014000
 8006598:	40014400 	.word	0x40014400
 800659c:	40014800 	.word	0x40014800

080065a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	031b      	lsls	r3, r3, #12
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a2c      	ldr	r2, [pc, #176]	; (80066b0 <TIM_OC4_SetConfig+0x110>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d007      	beq.n	8006614 <TIM_OC4_SetConfig+0x74>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a2b      	ldr	r2, [pc, #172]	; (80066b4 <TIM_OC4_SetConfig+0x114>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_OC4_SetConfig+0x74>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a2a      	ldr	r2, [pc, #168]	; (80066b8 <TIM_OC4_SetConfig+0x118>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d10d      	bne.n	8006630 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800661a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	031b      	lsls	r3, r3, #12
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <TIM_OC4_SetConfig+0x110>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <TIM_OC4_SetConfig+0xc0>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a1e      	ldr	r2, [pc, #120]	; (80066b4 <TIM_OC4_SetConfig+0x114>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00f      	beq.n	8006660 <TIM_OC4_SetConfig+0xc0>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a1e      	ldr	r2, [pc, #120]	; (80066bc <TIM_OC4_SetConfig+0x11c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00b      	beq.n	8006660 <TIM_OC4_SetConfig+0xc0>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <TIM_OC4_SetConfig+0x120>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d007      	beq.n	8006660 <TIM_OC4_SetConfig+0xc0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <TIM_OC4_SetConfig+0x124>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_OC4_SetConfig+0xc0>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <TIM_OC4_SetConfig+0x118>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d113      	bne.n	8006688 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006666:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800666e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	019b      	lsls	r3, r3, #6
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	019b      	lsls	r3, r3, #6
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40013400 	.word	0x40013400
 80066b8:	40015000 	.word	0x40015000
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40014400 	.word	0x40014400
 80066c4:	40014800 	.word	0x40014800

080066c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800670c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a19      	ldr	r2, [pc, #100]	; (8006784 <TIM_OC5_SetConfig+0xbc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d013      	beq.n	800674a <TIM_OC5_SetConfig+0x82>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a18      	ldr	r2, [pc, #96]	; (8006788 <TIM_OC5_SetConfig+0xc0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00f      	beq.n	800674a <TIM_OC5_SetConfig+0x82>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a17      	ldr	r2, [pc, #92]	; (800678c <TIM_OC5_SetConfig+0xc4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00b      	beq.n	800674a <TIM_OC5_SetConfig+0x82>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a16      	ldr	r2, [pc, #88]	; (8006790 <TIM_OC5_SetConfig+0xc8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d007      	beq.n	800674a <TIM_OC5_SetConfig+0x82>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a15      	ldr	r2, [pc, #84]	; (8006794 <TIM_OC5_SetConfig+0xcc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <TIM_OC5_SetConfig+0x82>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a14      	ldr	r2, [pc, #80]	; (8006798 <TIM_OC5_SetConfig+0xd0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d109      	bne.n	800675e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006750:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	621a      	str	r2, [r3, #32]
}
 8006778:	bf00      	nop
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40013400 	.word	0x40013400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800
 8006798:	40015000 	.word	0x40015000

0800679c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	051b      	lsls	r3, r3, #20
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a1a      	ldr	r2, [pc, #104]	; (800685c <TIM_OC6_SetConfig+0xc0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <TIM_OC6_SetConfig+0x84>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a19      	ldr	r2, [pc, #100]	; (8006860 <TIM_OC6_SetConfig+0xc4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00f      	beq.n	8006820 <TIM_OC6_SetConfig+0x84>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a18      	ldr	r2, [pc, #96]	; (8006864 <TIM_OC6_SetConfig+0xc8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_OC6_SetConfig+0x84>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a17      	ldr	r2, [pc, #92]	; (8006868 <TIM_OC6_SetConfig+0xcc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_OC6_SetConfig+0x84>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a16      	ldr	r2, [pc, #88]	; (800686c <TIM_OC6_SetConfig+0xd0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_OC6_SetConfig+0x84>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a15      	ldr	r2, [pc, #84]	; (8006870 <TIM_OC6_SetConfig+0xd4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d109      	bne.n	8006834 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40013400 	.word	0x40013400
 8006864:	40014000 	.word	0x40014000
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800
 8006870:	40015000 	.word	0x40015000

08006874 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	f023 0201 	bic.w	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4a28      	ldr	r2, [pc, #160]	; (8006940 <TIM_TI1_SetConfig+0xcc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01b      	beq.n	80068da <TIM_TI1_SetConfig+0x66>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d017      	beq.n	80068da <TIM_TI1_SetConfig+0x66>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4a25      	ldr	r2, [pc, #148]	; (8006944 <TIM_TI1_SetConfig+0xd0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <TIM_TI1_SetConfig+0x66>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a24      	ldr	r2, [pc, #144]	; (8006948 <TIM_TI1_SetConfig+0xd4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00f      	beq.n	80068da <TIM_TI1_SetConfig+0x66>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4a23      	ldr	r2, [pc, #140]	; (800694c <TIM_TI1_SetConfig+0xd8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00b      	beq.n	80068da <TIM_TI1_SetConfig+0x66>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a22      	ldr	r2, [pc, #136]	; (8006950 <TIM_TI1_SetConfig+0xdc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d007      	beq.n	80068da <TIM_TI1_SetConfig+0x66>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4a21      	ldr	r2, [pc, #132]	; (8006954 <TIM_TI1_SetConfig+0xe0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_TI1_SetConfig+0x66>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a20      	ldr	r2, [pc, #128]	; (8006958 <TIM_TI1_SetConfig+0xe4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d101      	bne.n	80068de <TIM_TI1_SetConfig+0x6a>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <TIM_TI1_SetConfig+0x6c>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d008      	beq.n	80068f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e003      	b.n	80068fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	b2db      	uxtb	r3, r3
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f023 030a 	bic.w	r3, r3, #10
 8006918:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f003 030a 	and.w	r3, r3, #10
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40013400 	.word	0x40013400
 8006954:	40014000 	.word	0x40014000
 8006958:	40015000 	.word	0x40015000

0800695c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	f023 0201 	bic.w	r2, r3, #1
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f023 030a 	bic.w	r3, r3, #10
 8006998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b087      	sub	sp, #28
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	607a      	str	r2, [r7, #4]
 80069c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0210 	bic.w	r2, r3, #16
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	621a      	str	r2, [r3, #32]
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0210 	bic.w	r2, r3, #16
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	031b      	lsls	r3, r3, #12
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f023 0303 	bic.w	r3, r3, #3
 8006ac0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ad0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	621a      	str	r2, [r3, #32]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b4a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	031b      	lsls	r3, r3, #12
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	031b      	lsls	r3, r3, #12
 8006b64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	621a      	str	r2, [r3, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f043 0307 	orr.w	r3, r3, #7
 8006bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	609a      	str	r2, [r3, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	021a      	lsls	r2, r3, #8
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	609a      	str	r2, [r3, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	2201      	movs	r2, #1
 8006c14:	fa02 f303 	lsl.w	r3, r2, r3
 8006c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a1a      	ldr	r2, [r3, #32]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	401a      	ands	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1a      	ldr	r2, [r3, #32]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	fa01 f303 	lsl.w	r3, r1, r3
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
	...

08006c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e074      	b.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a34      	ldr	r2, [pc, #208]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a33      	ldr	r2, [pc, #204]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a31      	ldr	r2, [pc, #196]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d108      	bne.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ca8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a21      	ldr	r2, [pc, #132]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d022      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce4:	d01d      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d018      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1c      	ldr	r2, [pc, #112]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00e      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d009      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d004      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a11      	ldr	r2, [pc, #68]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d10c      	bne.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40012c00 	.word	0x40012c00
 8006d60:	40013400 	.word	0x40013400
 8006d64:	40015000 	.word	0x40015000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e078      	b.n	8006e86 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	041b      	lsls	r3, r3, #16
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1c      	ldr	r2, [pc, #112]	; (8006e94 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d009      	beq.n	8006e3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1b      	ldr	r2, [pc, #108]	; (8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d004      	beq.n	8006e3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a19      	ldr	r2, [pc, #100]	; (8006e9c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d11c      	bne.n	8006e74 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	051b      	lsls	r3, r3, #20
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40013400 	.word	0x40013400
 8006e9c:	40015000 	.word	0x40015000

08006ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e042      	b.n	8006fc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fa ffc7 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2224      	movs	r2, #36	; 0x24
 8006f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fb24 	bl	80075c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f825 	bl	8006fcc <UART_SetConfig>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e01b      	b.n	8006fc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fba3 	bl	8007708 <UART_CheckIdleState>
 8006fc2:	4603      	mov	r3, r0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd0:	b08c      	sub	sp, #48	; 0x30
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4baa      	ldr	r3, [pc, #680]	; (80072a4 <UART_SetConfig+0x2d8>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007004:	430b      	orrs	r3, r1
 8007006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a9f      	ldr	r2, [pc, #636]	; (80072a8 <UART_SetConfig+0x2dc>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007034:	4313      	orrs	r3, r2
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007042:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800704c:	430b      	orrs	r3, r1
 800704e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	f023 010f 	bic.w	r1, r3, #15
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a90      	ldr	r2, [pc, #576]	; (80072ac <UART_SetConfig+0x2e0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d125      	bne.n	80070bc <UART_SetConfig+0xf0>
 8007070:	4b8f      	ldr	r3, [pc, #572]	; (80072b0 <UART_SetConfig+0x2e4>)
 8007072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	2b03      	cmp	r3, #3
 800707c:	d81a      	bhi.n	80070b4 <UART_SetConfig+0xe8>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0xb8>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	08007095 	.word	0x08007095
 8007088:	080070a5 	.word	0x080070a5
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070ad 	.word	0x080070ad
 8007094:	2301      	movs	r3, #1
 8007096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709a:	e116      	b.n	80072ca <UART_SetConfig+0x2fe>
 800709c:	2302      	movs	r3, #2
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a2:	e112      	b.n	80072ca <UART_SetConfig+0x2fe>
 80070a4:	2304      	movs	r3, #4
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070aa:	e10e      	b.n	80072ca <UART_SetConfig+0x2fe>
 80070ac:	2308      	movs	r3, #8
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b2:	e10a      	b.n	80072ca <UART_SetConfig+0x2fe>
 80070b4:	2310      	movs	r3, #16
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ba:	e106      	b.n	80072ca <UART_SetConfig+0x2fe>
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a7c      	ldr	r2, [pc, #496]	; (80072b4 <UART_SetConfig+0x2e8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d138      	bne.n	8007138 <UART_SetConfig+0x16c>
 80070c6:	4b7a      	ldr	r3, [pc, #488]	; (80072b0 <UART_SetConfig+0x2e4>)
 80070c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070cc:	f003 030c 	and.w	r3, r3, #12
 80070d0:	2b0c      	cmp	r3, #12
 80070d2:	d82d      	bhi.n	8007130 <UART_SetConfig+0x164>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0x110>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	08007111 	.word	0x08007111
 80070e0:	08007131 	.word	0x08007131
 80070e4:	08007131 	.word	0x08007131
 80070e8:	08007131 	.word	0x08007131
 80070ec:	08007121 	.word	0x08007121
 80070f0:	08007131 	.word	0x08007131
 80070f4:	08007131 	.word	0x08007131
 80070f8:	08007131 	.word	0x08007131
 80070fc:	08007119 	.word	0x08007119
 8007100:	08007131 	.word	0x08007131
 8007104:	08007131 	.word	0x08007131
 8007108:	08007131 	.word	0x08007131
 800710c:	08007129 	.word	0x08007129
 8007110:	2300      	movs	r3, #0
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007116:	e0d8      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007118:	2302      	movs	r3, #2
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711e:	e0d4      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007126:	e0d0      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800712e:	e0cc      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007136:	e0c8      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a5e      	ldr	r2, [pc, #376]	; (80072b8 <UART_SetConfig+0x2ec>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d125      	bne.n	800718e <UART_SetConfig+0x1c2>
 8007142:	4b5b      	ldr	r3, [pc, #364]	; (80072b0 <UART_SetConfig+0x2e4>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d016      	beq.n	800717e <UART_SetConfig+0x1b2>
 8007150:	2b30      	cmp	r3, #48	; 0x30
 8007152:	d818      	bhi.n	8007186 <UART_SetConfig+0x1ba>
 8007154:	2b20      	cmp	r3, #32
 8007156:	d00a      	beq.n	800716e <UART_SetConfig+0x1a2>
 8007158:	2b20      	cmp	r3, #32
 800715a:	d814      	bhi.n	8007186 <UART_SetConfig+0x1ba>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <UART_SetConfig+0x19a>
 8007160:	2b10      	cmp	r3, #16
 8007162:	d008      	beq.n	8007176 <UART_SetConfig+0x1aa>
 8007164:	e00f      	b.n	8007186 <UART_SetConfig+0x1ba>
 8007166:	2300      	movs	r3, #0
 8007168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716c:	e0ad      	b.n	80072ca <UART_SetConfig+0x2fe>
 800716e:	2302      	movs	r3, #2
 8007170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007174:	e0a9      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007176:	2304      	movs	r3, #4
 8007178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717c:	e0a5      	b.n	80072ca <UART_SetConfig+0x2fe>
 800717e:	2308      	movs	r3, #8
 8007180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007184:	e0a1      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007186:	2310      	movs	r3, #16
 8007188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800718c:	e09d      	b.n	80072ca <UART_SetConfig+0x2fe>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a4a      	ldr	r2, [pc, #296]	; (80072bc <UART_SetConfig+0x2f0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d125      	bne.n	80071e4 <UART_SetConfig+0x218>
 8007198:	4b45      	ldr	r3, [pc, #276]	; (80072b0 <UART_SetConfig+0x2e4>)
 800719a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071a2:	2bc0      	cmp	r3, #192	; 0xc0
 80071a4:	d016      	beq.n	80071d4 <UART_SetConfig+0x208>
 80071a6:	2bc0      	cmp	r3, #192	; 0xc0
 80071a8:	d818      	bhi.n	80071dc <UART_SetConfig+0x210>
 80071aa:	2b80      	cmp	r3, #128	; 0x80
 80071ac:	d00a      	beq.n	80071c4 <UART_SetConfig+0x1f8>
 80071ae:	2b80      	cmp	r3, #128	; 0x80
 80071b0:	d814      	bhi.n	80071dc <UART_SetConfig+0x210>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <UART_SetConfig+0x1f0>
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d008      	beq.n	80071cc <UART_SetConfig+0x200>
 80071ba:	e00f      	b.n	80071dc <UART_SetConfig+0x210>
 80071bc:	2300      	movs	r3, #0
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c2:	e082      	b.n	80072ca <UART_SetConfig+0x2fe>
 80071c4:	2302      	movs	r3, #2
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ca:	e07e      	b.n	80072ca <UART_SetConfig+0x2fe>
 80071cc:	2304      	movs	r3, #4
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d2:	e07a      	b.n	80072ca <UART_SetConfig+0x2fe>
 80071d4:	2308      	movs	r3, #8
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071da:	e076      	b.n	80072ca <UART_SetConfig+0x2fe>
 80071dc:	2310      	movs	r3, #16
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e2:	e072      	b.n	80072ca <UART_SetConfig+0x2fe>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a35      	ldr	r2, [pc, #212]	; (80072c0 <UART_SetConfig+0x2f4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d12a      	bne.n	8007244 <UART_SetConfig+0x278>
 80071ee:	4b30      	ldr	r3, [pc, #192]	; (80072b0 <UART_SetConfig+0x2e4>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071fc:	d01a      	beq.n	8007234 <UART_SetConfig+0x268>
 80071fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007202:	d81b      	bhi.n	800723c <UART_SetConfig+0x270>
 8007204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007208:	d00c      	beq.n	8007224 <UART_SetConfig+0x258>
 800720a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800720e:	d815      	bhi.n	800723c <UART_SetConfig+0x270>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <UART_SetConfig+0x250>
 8007214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007218:	d008      	beq.n	800722c <UART_SetConfig+0x260>
 800721a:	e00f      	b.n	800723c <UART_SetConfig+0x270>
 800721c:	2300      	movs	r3, #0
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007222:	e052      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007224:	2302      	movs	r3, #2
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722a:	e04e      	b.n	80072ca <UART_SetConfig+0x2fe>
 800722c:	2304      	movs	r3, #4
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007232:	e04a      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007234:	2308      	movs	r3, #8
 8007236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800723a:	e046      	b.n	80072ca <UART_SetConfig+0x2fe>
 800723c:	2310      	movs	r3, #16
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007242:	e042      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <UART_SetConfig+0x2dc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d13a      	bne.n	80072c4 <UART_SetConfig+0x2f8>
 800724e:	4b18      	ldr	r3, [pc, #96]	; (80072b0 <UART_SetConfig+0x2e4>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800725c:	d01a      	beq.n	8007294 <UART_SetConfig+0x2c8>
 800725e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007262:	d81b      	bhi.n	800729c <UART_SetConfig+0x2d0>
 8007264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007268:	d00c      	beq.n	8007284 <UART_SetConfig+0x2b8>
 800726a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800726e:	d815      	bhi.n	800729c <UART_SetConfig+0x2d0>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <UART_SetConfig+0x2b0>
 8007274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007278:	d008      	beq.n	800728c <UART_SetConfig+0x2c0>
 800727a:	e00f      	b.n	800729c <UART_SetConfig+0x2d0>
 800727c:	2300      	movs	r3, #0
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e022      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007284:	2302      	movs	r3, #2
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728a:	e01e      	b.n	80072ca <UART_SetConfig+0x2fe>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007292:	e01a      	b.n	80072ca <UART_SetConfig+0x2fe>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729a:	e016      	b.n	80072ca <UART_SetConfig+0x2fe>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a2:	e012      	b.n	80072ca <UART_SetConfig+0x2fe>
 80072a4:	cfff69f3 	.word	0xcfff69f3
 80072a8:	40008000 	.word	0x40008000
 80072ac:	40013800 	.word	0x40013800
 80072b0:	40021000 	.word	0x40021000
 80072b4:	40004400 	.word	0x40004400
 80072b8:	40004800 	.word	0x40004800
 80072bc:	40004c00 	.word	0x40004c00
 80072c0:	40005000 	.word	0x40005000
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4aae      	ldr	r2, [pc, #696]	; (8007588 <UART_SetConfig+0x5bc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	f040 8097 	bne.w	8007404 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d823      	bhi.n	8007326 <UART_SetConfig+0x35a>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <UART_SetConfig+0x318>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007327 	.word	0x08007327
 80072ec:	08007311 	.word	0x08007311
 80072f0:	08007327 	.word	0x08007327
 80072f4:	08007317 	.word	0x08007317
 80072f8:	08007327 	.word	0x08007327
 80072fc:	08007327 	.word	0x08007327
 8007300:	08007327 	.word	0x08007327
 8007304:	0800731f 	.word	0x0800731f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007308:	f7fd fb86 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 800730c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800730e:	e010      	b.n	8007332 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007310:	4b9e      	ldr	r3, [pc, #632]	; (800758c <UART_SetConfig+0x5c0>)
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007314:	e00d      	b.n	8007332 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007316:	f7fd fb11 	bl	800493c <HAL_RCC_GetSysClockFreq>
 800731a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800731c:	e009      	b.n	8007332 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007324:	e005      	b.n	8007332 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007330:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8130 	beq.w	800759a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	4a94      	ldr	r2, [pc, #592]	; (8007590 <UART_SetConfig+0x5c4>)
 8007340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007344:	461a      	mov	r2, r3
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	fbb3 f3f2 	udiv	r3, r3, r2
 800734c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	4413      	add	r3, r2
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	429a      	cmp	r2, r3
 800735c:	d305      	bcc.n	800736a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	429a      	cmp	r2, r3
 8007368:	d903      	bls.n	8007372 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007370:	e113      	b.n	800759a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	2200      	movs	r2, #0
 8007376:	60bb      	str	r3, [r7, #8]
 8007378:	60fa      	str	r2, [r7, #12]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	4a84      	ldr	r2, [pc, #528]	; (8007590 <UART_SetConfig+0x5c4>)
 8007380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007384:	b29b      	uxth	r3, r3
 8007386:	2200      	movs	r2, #0
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007390:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007394:	f7f8 ff60 	bl	8000258 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4610      	mov	r0, r2
 800739e:	4619      	mov	r1, r3
 80073a0:	f04f 0200 	mov.w	r2, #0
 80073a4:	f04f 0300 	mov.w	r3, #0
 80073a8:	020b      	lsls	r3, r1, #8
 80073aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073ae:	0202      	lsls	r2, r0, #8
 80073b0:	6979      	ldr	r1, [r7, #20]
 80073b2:	6849      	ldr	r1, [r1, #4]
 80073b4:	0849      	lsrs	r1, r1, #1
 80073b6:	2000      	movs	r0, #0
 80073b8:	460c      	mov	r4, r1
 80073ba:	4605      	mov	r5, r0
 80073bc:	eb12 0804 	adds.w	r8, r2, r4
 80073c0:	eb43 0905 	adc.w	r9, r3, r5
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	469a      	mov	sl, r3
 80073cc:	4693      	mov	fp, r2
 80073ce:	4652      	mov	r2, sl
 80073d0:	465b      	mov	r3, fp
 80073d2:	4640      	mov	r0, r8
 80073d4:	4649      	mov	r1, r9
 80073d6:	f7f8 ff3f 	bl	8000258 <__aeabi_uldivmod>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4613      	mov	r3, r2
 80073e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e8:	d308      	bcc.n	80073fc <UART_SetConfig+0x430>
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f0:	d204      	bcs.n	80073fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a3a      	ldr	r2, [r7, #32]
 80073f8:	60da      	str	r2, [r3, #12]
 80073fa:	e0ce      	b.n	800759a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007402:	e0ca      	b.n	800759a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740c:	d166      	bne.n	80074dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800740e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007412:	2b08      	cmp	r3, #8
 8007414:	d827      	bhi.n	8007466 <UART_SetConfig+0x49a>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0x450>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007441 	.word	0x08007441
 8007420:	08007449 	.word	0x08007449
 8007424:	08007451 	.word	0x08007451
 8007428:	08007467 	.word	0x08007467
 800742c:	08007457 	.word	0x08007457
 8007430:	08007467 	.word	0x08007467
 8007434:	08007467 	.word	0x08007467
 8007438:	08007467 	.word	0x08007467
 800743c:	0800745f 	.word	0x0800745f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007440:	f7fd faea 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8007444:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007446:	e014      	b.n	8007472 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007448:	f7fd fafc 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 800744c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800744e:	e010      	b.n	8007472 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007450:	4b4e      	ldr	r3, [pc, #312]	; (800758c <UART_SetConfig+0x5c0>)
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007454:	e00d      	b.n	8007472 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007456:	f7fd fa71 	bl	800493c <HAL_RCC_GetSysClockFreq>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800745c:	e009      	b.n	8007472 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007464:	e005      	b.n	8007472 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8090 	beq.w	800759a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	4a44      	ldr	r2, [pc, #272]	; (8007590 <UART_SetConfig+0x5c4>)
 8007480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007484:	461a      	mov	r2, r3
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	fbb3 f3f2 	udiv	r3, r3, r2
 800748c:	005a      	lsls	r2, r3, #1
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	441a      	add	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	fbb2 f3f3 	udiv	r3, r2, r3
 800749e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	2b0f      	cmp	r3, #15
 80074a4:	d916      	bls.n	80074d4 <UART_SetConfig+0x508>
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ac:	d212      	bcs.n	80074d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f023 030f 	bic.w	r3, r3, #15
 80074b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	8bfb      	ldrh	r3, [r7, #30]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	8bfa      	ldrh	r2, [r7, #30]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	e062      	b.n	800759a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074da:	e05e      	b.n	800759a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d828      	bhi.n	8007536 <UART_SetConfig+0x56a>
 80074e4:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <UART_SetConfig+0x520>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	08007511 	.word	0x08007511
 80074f0:	08007519 	.word	0x08007519
 80074f4:	08007521 	.word	0x08007521
 80074f8:	08007537 	.word	0x08007537
 80074fc:	08007527 	.word	0x08007527
 8007500:	08007537 	.word	0x08007537
 8007504:	08007537 	.word	0x08007537
 8007508:	08007537 	.word	0x08007537
 800750c:	0800752f 	.word	0x0800752f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007510:	f7fd fa82 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8007514:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007516:	e014      	b.n	8007542 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007518:	f7fd fa94 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 800751c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800751e:	e010      	b.n	8007542 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007520:	4b1a      	ldr	r3, [pc, #104]	; (800758c <UART_SetConfig+0x5c0>)
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007524:	e00d      	b.n	8007542 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007526:	f7fd fa09 	bl	800493c <HAL_RCC_GetSysClockFreq>
 800752a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800752c:	e009      	b.n	8007542 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800752e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007534:	e005      	b.n	8007542 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007540:	bf00      	nop
    }

    if (pclk != 0U)
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	2b00      	cmp	r3, #0
 8007546:	d028      	beq.n	800759a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	4a10      	ldr	r2, [pc, #64]	; (8007590 <UART_SetConfig+0x5c4>)
 800754e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007552:	461a      	mov	r2, r3
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	fbb3 f2f2 	udiv	r2, r3, r2
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	441a      	add	r2, r3
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	fbb2 f3f3 	udiv	r3, r2, r3
 800756a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	2b0f      	cmp	r3, #15
 8007570:	d910      	bls.n	8007594 <UART_SetConfig+0x5c8>
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007578:	d20c      	bcs.n	8007594 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	b29a      	uxth	r2, r3
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60da      	str	r2, [r3, #12]
 8007584:	e009      	b.n	800759a <UART_SetConfig+0x5ce>
 8007586:	bf00      	nop
 8007588:	40008000 	.word	0x40008000
 800758c:	00f42400 	.word	0x00f42400
 8007590:	08007c90 	.word	0x08007c90
      }
      else
      {
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2201      	movs	r2, #1
 800759e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2200      	movs	r2, #0
 80075ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2200      	movs	r2, #0
 80075b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3730      	adds	r7, #48	; 0x30
 80075be:	46bd      	mov	sp, r7
 80075c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01a      	beq.n	80076da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c2:	d10a      	bne.n	80076da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b098      	sub	sp, #96	; 0x60
 800770c:	af02      	add	r7, sp, #8
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007718:	f7fa fd26 	bl	8002168 <HAL_GetTick>
 800771c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b08      	cmp	r3, #8
 800772a:	d12f      	bne.n	800778c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800772c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007734:	2200      	movs	r2, #0
 8007736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f88e 	bl	800785c <UART_WaitOnFlagUntilTimeout>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d022      	beq.n	800778c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800775a:	653b      	str	r3, [r7, #80]	; 0x50
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007764:	647b      	str	r3, [r7, #68]	; 0x44
 8007766:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800776a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e063      	b.n	8007854 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b04      	cmp	r3, #4
 8007798:	d149      	bne.n	800782e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800779a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a2:	2200      	movs	r2, #0
 80077a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f857 	bl	800785c <UART_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d03c      	beq.n	800782e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	623b      	str	r3, [r7, #32]
   return(result);
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d2:	633b      	str	r3, [r7, #48]	; 0x30
 80077d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e6      	bne.n	80077b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007806:	61fa      	str	r2, [r7, #28]
 8007808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	69b9      	ldr	r1, [r7, #24]
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	617b      	str	r3, [r7, #20]
   return(result);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e012      	b.n	8007854 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3758      	adds	r7, #88	; 0x58
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	4613      	mov	r3, r2
 800786a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786c:	e04f      	b.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d04b      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007876:	f7fa fc77 	bl	8002168 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	429a      	cmp	r2, r3
 8007884:	d302      	bcc.n	800788c <UART_WaitOnFlagUntilTimeout+0x30>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e04e      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d037      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b80      	cmp	r3, #128	; 0x80
 80078a2:	d034      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d031      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d110      	bne.n	80078da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2208      	movs	r2, #8
 80078be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f838 	bl	8007936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2208      	movs	r2, #8
 80078ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e029      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e8:	d111      	bne.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f81e 	bl	8007936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e00f      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4013      	ands	r3, r2
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	429a      	cmp	r2, r3
 800792a:	d0a0      	beq.n	800786e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007936:	b480      	push	{r7}
 8007938:	b095      	sub	sp, #84	; 0x54
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800795c:	643b      	str	r3, [r7, #64]	; 0x40
 800795e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e6      	bne.n	800793e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	64bb      	str	r3, [r7, #72]	; 0x48
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3308      	adds	r3, #8
 8007992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007994:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800799a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e3      	bne.n	8007970 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d118      	bne.n	80079e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f023 0310 	bic.w	r3, r3, #16
 80079c4:	647b      	str	r3, [r7, #68]	; 0x44
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	6979      	ldr	r1, [r7, #20]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	613b      	str	r3, [r7, #16]
   return(result);
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e6      	bne.n	80079b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80079f6:	bf00      	nop
 80079f8:	3754      	adds	r7, #84	; 0x54
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e027      	b.n	8007a68 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2224      	movs	r2, #36	; 0x24
 8007a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e02d      	b.n	8007ae8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2224      	movs	r2, #36	; 0x24
 8007a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f84f 	bl	8007b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e02d      	b.n	8007b64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2224      	movs	r2, #36	; 0x24
 8007b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0201 	bic.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f811 	bl	8007b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d108      	bne.n	8007b8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b8c:	e031      	b.n	8007bf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b8e:	2308      	movs	r3, #8
 8007b90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b92:	2308      	movs	r3, #8
 8007b94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	0e5b      	lsrs	r3, r3, #25
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	0f5b      	lsrs	r3, r3, #29
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	7b3a      	ldrb	r2, [r7, #12]
 8007bba:	4911      	ldr	r1, [pc, #68]	; (8007c00 <UARTEx_SetNbDataToProcess+0x94>)
 8007bbc:	5c8a      	ldrb	r2, [r1, r2]
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bc2:	7b3a      	ldrb	r2, [r7, #12]
 8007bc4:	490f      	ldr	r1, [pc, #60]	; (8007c04 <UARTEx_SetNbDataToProcess+0x98>)
 8007bc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	7b7a      	ldrb	r2, [r7, #13]
 8007bd8:	4909      	ldr	r1, [pc, #36]	; (8007c00 <UARTEx_SetNbDataToProcess+0x94>)
 8007bda:	5c8a      	ldrb	r2, [r1, r2]
 8007bdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007be0:	7b7a      	ldrb	r2, [r7, #13]
 8007be2:	4908      	ldr	r1, [pc, #32]	; (8007c04 <UARTEx_SetNbDataToProcess+0x98>)
 8007be4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007be6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	08007ca8 	.word	0x08007ca8
 8007c04:	08007cb0 	.word	0x08007cb0

08007c08 <memset>:
 8007c08:	4402      	add	r2, r0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d100      	bne.n	8007c12 <memset+0xa>
 8007c10:	4770      	bx	lr
 8007c12:	f803 1b01 	strb.w	r1, [r3], #1
 8007c16:	e7f9      	b.n	8007c0c <memset+0x4>

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4d0d      	ldr	r5, [pc, #52]	; (8007c50 <__libc_init_array+0x38>)
 8007c1c:	4c0d      	ldr	r4, [pc, #52]	; (8007c54 <__libc_init_array+0x3c>)
 8007c1e:	1b64      	subs	r4, r4, r5
 8007c20:	10a4      	asrs	r4, r4, #2
 8007c22:	2600      	movs	r6, #0
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	4d0b      	ldr	r5, [pc, #44]	; (8007c58 <__libc_init_array+0x40>)
 8007c2a:	4c0c      	ldr	r4, [pc, #48]	; (8007c5c <__libc_init_array+0x44>)
 8007c2c:	f000 f818 	bl	8007c60 <_init>
 8007c30:	1b64      	subs	r4, r4, r5
 8007c32:	10a4      	asrs	r4, r4, #2
 8007c34:	2600      	movs	r6, #0
 8007c36:	42a6      	cmp	r6, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c40:	4798      	blx	r3
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4a:	4798      	blx	r3
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	08007cc0 	.word	0x08007cc0
 8007c54:	08007cc0 	.word	0x08007cc0
 8007c58:	08007cc0 	.word	0x08007cc0
 8007c5c:	08007cc4 	.word	0x08007cc4

08007c60 <_init>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	bf00      	nop
 8007c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c66:	bc08      	pop	{r3}
 8007c68:	469e      	mov	lr, r3
 8007c6a:	4770      	bx	lr

08007c6c <_fini>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	bf00      	nop
 8007c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c72:	bc08      	pop	{r3}
 8007c74:	469e      	mov	lr, r3
 8007c76:	4770      	bx	lr
