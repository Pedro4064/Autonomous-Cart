
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800788c  0800788c  0000888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078cc  080078cc  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080078cc  080078cc  000088cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d4  080078d4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d4  080078d4  000088d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d8  080078d8  000088d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  2000000c  080078e8  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  080078e8  00009720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c63c  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b5  00000000  00000000  00025678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00029030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133e  00000000  00000000  0002a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cb5  00000000  00000000  0002bc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000203f1  00000000  00000000  0002f8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112415  00000000  00000000  0004fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001620d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006938  00000000  00000000  0016211c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00168a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007874 	.word	0x08007874

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007874 	.word	0x08007874

08000218 <__aeabi_d2uiz>:
 8000218:	004a      	lsls	r2, r1, #1
 800021a:	d211      	bcs.n	8000240 <__aeabi_d2uiz+0x28>
 800021c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000220:	d211      	bcs.n	8000246 <__aeabi_d2uiz+0x2e>
 8000222:	d50d      	bpl.n	8000240 <__aeabi_d2uiz+0x28>
 8000224:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000228:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800022c:	d40e      	bmi.n	800024c <__aeabi_d2uiz+0x34>
 800022e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000232:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000236:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800023a:	fa23 f002 	lsr.w	r0, r3, r2
 800023e:	4770      	bx	lr
 8000240:	f04f 0000 	mov.w	r0, #0
 8000244:	4770      	bx	lr
 8000246:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800024a:	d102      	bne.n	8000252 <__aeabi_d2uiz+0x3a>
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	4770      	bx	lr
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	4770      	bx	lr

08000258 <__aeabi_uldivmod>:
 8000258:	b953      	cbnz	r3, 8000270 <__aeabi_uldivmod+0x18>
 800025a:	b94a      	cbnz	r2, 8000270 <__aeabi_uldivmod+0x18>
 800025c:	2900      	cmp	r1, #0
 800025e:	bf08      	it	eq
 8000260:	2800      	cmpeq	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	f04f 31ff 	movne.w	r1, #4294967295
 8000268:	f04f 30ff 	movne.w	r0, #4294967295
 800026c:	f000 b96a 	b.w	8000544 <__aeabi_idiv0>
 8000270:	f1ad 0c08 	sub.w	ip, sp, #8
 8000274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000284:	b004      	add	sp, #16
 8000286:	4770      	bx	lr

08000288 <__udivmoddi4>:
 8000288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800028c:	9d08      	ldr	r5, [sp, #32]
 800028e:	460c      	mov	r4, r1
 8000290:	2b00      	cmp	r3, #0
 8000292:	d14e      	bne.n	8000332 <__udivmoddi4+0xaa>
 8000294:	4694      	mov	ip, r2
 8000296:	458c      	cmp	ip, r1
 8000298:	4686      	mov	lr, r0
 800029a:	fab2 f282 	clz	r2, r2
 800029e:	d962      	bls.n	8000366 <__udivmoddi4+0xde>
 80002a0:	b14a      	cbz	r2, 80002b6 <__udivmoddi4+0x2e>
 80002a2:	f1c2 0320 	rsb	r3, r2, #32
 80002a6:	4091      	lsls	r1, r2
 80002a8:	fa20 f303 	lsr.w	r3, r0, r3
 80002ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b0:	4319      	orrs	r1, r3
 80002b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ba:	fa1f f68c 	uxth.w	r6, ip
 80002be:	fbb1 f4f7 	udiv	r4, r1, r7
 80002c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002c6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	fb04 f106 	mul.w	r1, r4, r6
 80002d2:	4299      	cmp	r1, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x64>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f104 30ff 	add.w	r0, r4, #4294967295
 80002de:	f080 8112 	bcs.w	8000506 <__udivmoddi4+0x27e>
 80002e2:	4299      	cmp	r1, r3
 80002e4:	f240 810f 	bls.w	8000506 <__udivmoddi4+0x27e>
 80002e8:	3c02      	subs	r4, #2
 80002ea:	4463      	add	r3, ip
 80002ec:	1a59      	subs	r1, r3, r1
 80002ee:	fa1f f38e 	uxth.w	r3, lr
 80002f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002f6:	fb07 1110 	mls	r1, r7, r0, r1
 80002fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fe:	fb00 f606 	mul.w	r6, r0, r6
 8000302:	429e      	cmp	r6, r3
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x94>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f100 31ff 	add.w	r1, r0, #4294967295
 800030e:	f080 80fc 	bcs.w	800050a <__udivmoddi4+0x282>
 8000312:	429e      	cmp	r6, r3
 8000314:	f240 80f9 	bls.w	800050a <__udivmoddi4+0x282>
 8000318:	4463      	add	r3, ip
 800031a:	3802      	subs	r0, #2
 800031c:	1b9b      	subs	r3, r3, r6
 800031e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000322:	2100      	movs	r1, #0
 8000324:	b11d      	cbz	r5, 800032e <__udivmoddi4+0xa6>
 8000326:	40d3      	lsrs	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	e9c5 3200 	strd	r3, r2, [r5]
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d905      	bls.n	8000342 <__udivmoddi4+0xba>
 8000336:	b10d      	cbz	r5, 800033c <__udivmoddi4+0xb4>
 8000338:	e9c5 0100 	strd	r0, r1, [r5]
 800033c:	2100      	movs	r1, #0
 800033e:	4608      	mov	r0, r1
 8000340:	e7f5      	b.n	800032e <__udivmoddi4+0xa6>
 8000342:	fab3 f183 	clz	r1, r3
 8000346:	2900      	cmp	r1, #0
 8000348:	d146      	bne.n	80003d8 <__udivmoddi4+0x150>
 800034a:	42a3      	cmp	r3, r4
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xcc>
 800034e:	4290      	cmp	r0, r2
 8000350:	f0c0 80f0 	bcc.w	8000534 <__udivmoddi4+0x2ac>
 8000354:	1a86      	subs	r6, r0, r2
 8000356:	eb64 0303 	sbc.w	r3, r4, r3
 800035a:	2001      	movs	r0, #1
 800035c:	2d00      	cmp	r5, #0
 800035e:	d0e6      	beq.n	800032e <__udivmoddi4+0xa6>
 8000360:	e9c5 6300 	strd	r6, r3, [r5]
 8000364:	e7e3      	b.n	800032e <__udivmoddi4+0xa6>
 8000366:	2a00      	cmp	r2, #0
 8000368:	f040 8090 	bne.w	800048c <__udivmoddi4+0x204>
 800036c:	eba1 040c 	sub.w	r4, r1, ip
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	fa1f f78c 	uxth.w	r7, ip
 8000378:	2101      	movs	r1, #1
 800037a:	fbb4 f6f8 	udiv	r6, r4, r8
 800037e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000382:	fb08 4416 	mls	r4, r8, r6, r4
 8000386:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038a:	fb07 f006 	mul.w	r0, r7, r6
 800038e:	4298      	cmp	r0, r3
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x11c>
 8000392:	eb1c 0303 	adds.w	r3, ip, r3
 8000396:	f106 34ff 	add.w	r4, r6, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x11a>
 800039c:	4298      	cmp	r0, r3
 800039e:	f200 80cd 	bhi.w	800053c <__udivmoddi4+0x2b4>
 80003a2:	4626      	mov	r6, r4
 80003a4:	1a1c      	subs	r4, r3, r0
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ae:	fb08 4410 	mls	r4, r8, r0, r4
 80003b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b6:	fb00 f707 	mul.w	r7, r0, r7
 80003ba:	429f      	cmp	r7, r3
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x148>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x146>
 80003c8:	429f      	cmp	r7, r3
 80003ca:	f200 80b0 	bhi.w	800052e <__udivmoddi4+0x2a6>
 80003ce:	4620      	mov	r0, r4
 80003d0:	1bdb      	subs	r3, r3, r7
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	e7a5      	b.n	8000324 <__udivmoddi4+0x9c>
 80003d8:	f1c1 0620 	rsb	r6, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa22 f706 	lsr.w	r7, r2, r6
 80003e2:	431f      	orrs	r7, r3
 80003e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ec:	ea43 030c 	orr.w	r3, r3, ip
 80003f0:	40f4      	lsrs	r4, r6
 80003f2:	fa00 f801 	lsl.w	r8, r0, r1
 80003f6:	0c38      	lsrs	r0, r7, #16
 80003f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000400:	fa1f fc87 	uxth.w	ip, r7
 8000404:	fb00 441e 	mls	r4, r0, lr, r4
 8000408:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040c:	fb0e f90c 	mul.w	r9, lr, ip
 8000410:	45a1      	cmp	r9, r4
 8000412:	fa02 f201 	lsl.w	r2, r2, r1
 8000416:	d90a      	bls.n	800042e <__udivmoddi4+0x1a6>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800041e:	f080 8084 	bcs.w	800052a <__udivmoddi4+0x2a2>
 8000422:	45a1      	cmp	r9, r4
 8000424:	f240 8081 	bls.w	800052a <__udivmoddi4+0x2a2>
 8000428:	f1ae 0e02 	sub.w	lr, lr, #2
 800042c:	443c      	add	r4, r7
 800042e:	eba4 0409 	sub.w	r4, r4, r9
 8000432:	fa1f f983 	uxth.w	r9, r3
 8000436:	fbb4 f3f0 	udiv	r3, r4, r0
 800043a:	fb00 4413 	mls	r4, r0, r3, r4
 800043e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000442:	fb03 fc0c 	mul.w	ip, r3, ip
 8000446:	45a4      	cmp	ip, r4
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x1d2>
 800044a:	193c      	adds	r4, r7, r4
 800044c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000450:	d267      	bcs.n	8000522 <__udivmoddi4+0x29a>
 8000452:	45a4      	cmp	ip, r4
 8000454:	d965      	bls.n	8000522 <__udivmoddi4+0x29a>
 8000456:	3b02      	subs	r3, #2
 8000458:	443c      	add	r4, r7
 800045a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800045e:	fba0 9302 	umull	r9, r3, r0, r2
 8000462:	eba4 040c 	sub.w	r4, r4, ip
 8000466:	429c      	cmp	r4, r3
 8000468:	46ce      	mov	lr, r9
 800046a:	469c      	mov	ip, r3
 800046c:	d351      	bcc.n	8000512 <__udivmoddi4+0x28a>
 800046e:	d04e      	beq.n	800050e <__udivmoddi4+0x286>
 8000470:	b155      	cbz	r5, 8000488 <__udivmoddi4+0x200>
 8000472:	ebb8 030e 	subs.w	r3, r8, lr
 8000476:	eb64 040c 	sbc.w	r4, r4, ip
 800047a:	fa04 f606 	lsl.w	r6, r4, r6
 800047e:	40cb      	lsrs	r3, r1
 8000480:	431e      	orrs	r6, r3
 8000482:	40cc      	lsrs	r4, r1
 8000484:	e9c5 6400 	strd	r6, r4, [r5]
 8000488:	2100      	movs	r1, #0
 800048a:	e750      	b.n	800032e <__udivmoddi4+0xa6>
 800048c:	f1c2 0320 	rsb	r3, r2, #32
 8000490:	fa20 f103 	lsr.w	r1, r0, r3
 8000494:	fa0c fc02 	lsl.w	ip, ip, r2
 8000498:	fa24 f303 	lsr.w	r3, r4, r3
 800049c:	4094      	lsls	r4, r2
 800049e:	430c      	orrs	r4, r1
 80004a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004a8:	fa1f f78c 	uxth.w	r7, ip
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3110 	mls	r1, r8, r0, r3
 80004b4:	0c23      	lsrs	r3, r4, #16
 80004b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ba:	fb00 f107 	mul.w	r1, r0, r7
 80004be:	4299      	cmp	r1, r3
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x24c>
 80004c2:	eb1c 0303 	adds.w	r3, ip, r3
 80004c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ca:	d22c      	bcs.n	8000526 <__udivmoddi4+0x29e>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	d92a      	bls.n	8000526 <__udivmoddi4+0x29e>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	1a5b      	subs	r3, r3, r1
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004dc:	fb08 3311 	mls	r3, r8, r1, r3
 80004e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004e4:	fb01 f307 	mul.w	r3, r1, r7
 80004e8:	42a3      	cmp	r3, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x276>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004f4:	d213      	bcs.n	800051e <__udivmoddi4+0x296>
 80004f6:	42a3      	cmp	r3, r4
 80004f8:	d911      	bls.n	800051e <__udivmoddi4+0x296>
 80004fa:	3902      	subs	r1, #2
 80004fc:	4464      	add	r4, ip
 80004fe:	1ae4      	subs	r4, r4, r3
 8000500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000504:	e739      	b.n	800037a <__udivmoddi4+0xf2>
 8000506:	4604      	mov	r4, r0
 8000508:	e6f0      	b.n	80002ec <__udivmoddi4+0x64>
 800050a:	4608      	mov	r0, r1
 800050c:	e706      	b.n	800031c <__udivmoddi4+0x94>
 800050e:	45c8      	cmp	r8, r9
 8000510:	d2ae      	bcs.n	8000470 <__udivmoddi4+0x1e8>
 8000512:	ebb9 0e02 	subs.w	lr, r9, r2
 8000516:	eb63 0c07 	sbc.w	ip, r3, r7
 800051a:	3801      	subs	r0, #1
 800051c:	e7a8      	b.n	8000470 <__udivmoddi4+0x1e8>
 800051e:	4631      	mov	r1, r6
 8000520:	e7ed      	b.n	80004fe <__udivmoddi4+0x276>
 8000522:	4603      	mov	r3, r0
 8000524:	e799      	b.n	800045a <__udivmoddi4+0x1d2>
 8000526:	4630      	mov	r0, r6
 8000528:	e7d4      	b.n	80004d4 <__udivmoddi4+0x24c>
 800052a:	46d6      	mov	lr, sl
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1a6>
 800052e:	4463      	add	r3, ip
 8000530:	3802      	subs	r0, #2
 8000532:	e74d      	b.n	80003d0 <__udivmoddi4+0x148>
 8000534:	4606      	mov	r6, r0
 8000536:	4623      	mov	r3, r4
 8000538:	4608      	mov	r0, r1
 800053a:	e70f      	b.n	800035c <__udivmoddi4+0xd4>
 800053c:	3e02      	subs	r6, #2
 800053e:	4463      	add	r3, ip
 8000540:	e730      	b.n	80003a4 <__udivmoddi4+0x11c>
 8000542:	bf00      	nop

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <vLineSensorSystemInit>:
#define IR4_AD hadc4
#define IR5_AD hadc5

extern uint32_t uiAdcValue;

void vLineSensorSystemInit(uint32_t *pLineSensorsReadings){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(&IR1_AD, ADC_SINGLE_ENDED);
 8000550:	217f      	movs	r1, #127	@ 0x7f
 8000552:	481b      	ldr	r0, [pc, #108]	@ (80005c0 <vLineSensorSystemInit+0x78>)
 8000554:	f003 f8c2 	bl	80036dc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR1_AD, &pLineSensorsReadings[0] , 1);
 8000558:	2201      	movs	r2, #1
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	4818      	ldr	r0, [pc, #96]	@ (80005c0 <vLineSensorSystemInit+0x78>)
 800055e:	f002 f9af 	bl	80028c0 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR2_AD, ADC_SINGLE_ENDED);
 8000562:	217f      	movs	r1, #127	@ 0x7f
 8000564:	4817      	ldr	r0, [pc, #92]	@ (80005c4 <vLineSensorSystemInit+0x7c>)
 8000566:	f003 f8b9 	bl	80036dc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR2_AD, &uiAdcValue , 1);
 800056a:	2201      	movs	r2, #1
 800056c:	4916      	ldr	r1, [pc, #88]	@ (80005c8 <vLineSensorSystemInit+0x80>)
 800056e:	4815      	ldr	r0, [pc, #84]	@ (80005c4 <vLineSensorSystemInit+0x7c>)
 8000570:	f002 f9a6 	bl	80028c0 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR3_AD, ADC_SINGLE_ENDED);
 8000574:	217f      	movs	r1, #127	@ 0x7f
 8000576:	4815      	ldr	r0, [pc, #84]	@ (80005cc <vLineSensorSystemInit+0x84>)
 8000578:	f003 f8b0 	bl	80036dc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR3_AD, &pLineSensorsReadings[2] , 1);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3308      	adds	r3, #8
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	4811      	ldr	r0, [pc, #68]	@ (80005cc <vLineSensorSystemInit+0x84>)
 8000586:	f002 f99b 	bl	80028c0 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR4_AD, ADC_SINGLE_ENDED);
 800058a:	217f      	movs	r1, #127	@ 0x7f
 800058c:	4810      	ldr	r0, [pc, #64]	@ (80005d0 <vLineSensorSystemInit+0x88>)
 800058e:	f003 f8a5 	bl	80036dc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR4_AD, &pLineSensorsReadings[3] , 1);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	330c      	adds	r3, #12
 8000596:	2201      	movs	r2, #1
 8000598:	4619      	mov	r1, r3
 800059a:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <vLineSensorSystemInit+0x88>)
 800059c:	f002 f990 	bl	80028c0 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR5_AD, ADC_SINGLE_ENDED);
 80005a0:	217f      	movs	r1, #127	@ 0x7f
 80005a2:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <vLineSensorSystemInit+0x8c>)
 80005a4:	f003 f89a 	bl	80036dc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR5_AD, &pLineSensorsReadings[4] , 1);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3310      	adds	r3, #16
 80005ac:	2201      	movs	r2, #1
 80005ae:	4619      	mov	r1, r3
 80005b0:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <vLineSensorSystemInit+0x8c>)
 80005b2:	f002 f985 	bl	80028c0 <HAL_ADC_Start_DMA>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028
 80005c4:	20000094 	.word	0x20000094
 80005c8:	20000494 	.word	0x20000494
 80005cc:	20000100 	.word	0x20000100
 80005d0:	2000016c 	.word	0x2000016c
 80005d4:	200001d8 	.word	0x200001d8

080005d8 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 80005dc:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <vPowerTrainSystemInit+0x20>)
 80005de:	f005 f8e1 	bl	80057a4 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 80005e2:	2100      	movs	r1, #0
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <vPowerTrainSystemInit+0x20>)
 80005e6:	f005 f9a5 	bl	8005934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 80005ea:	2104      	movs	r1, #4
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <vPowerTrainSystemInit+0x20>)
 80005ee:	f005 f9a1 	bl	8005934 <HAL_TIM_PWM_Start>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000498 	.word	0x20000498

080005fc <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <vPowerTrainSystemSetMotorDirection+0x1c>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d01f      	beq.n	8000656 <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000616:	e040      	b.n	800069a <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10b      	bne.n	8000636 <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000624:	481f      	ldr	r0, [pc, #124]	@ (80006a4 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000626:	f003 fec7 	bl	80043b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000630:	481c      	ldr	r0, [pc, #112]	@ (80006a4 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000632:	f003 fec1 	bl	80043b8 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d12b      	bne.n	8000694 <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000642:	4818      	ldr	r0, [pc, #96]	@ (80006a4 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000644:	f003 feb8 	bl	80043b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800064e:	4815      	ldr	r0, [pc, #84]	@ (80006a4 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000650:	f003 feb2 	bl	80043b8 <HAL_GPIO_WritePin>
			} break;
 8000654:	e01e      	b.n	8000694 <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10b      	bne.n	8000674 <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2180      	movs	r1, #128	@ 0x80
 8000660:	4810      	ldr	r0, [pc, #64]	@ (80006a4 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000662:	f003 fea9 	bl	80043b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000670:	f003 fea2 	bl	80043b8 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d10e      	bne.n	8000698 <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000680:	f003 fe9a 	bl	80043b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f003 fe93 	bl	80043b8 <HAL_GPIO_WritePin>
			} break;
 8000692:	e001      	b.n	8000698 <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000694:	bf00      	nop
 8000696:	e000      	b.n	800069a <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000698:	bf00      	nop
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	48000400 	.word	0x48000400

080006a8 <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	ed87 0b00 	vstr	d0, [r7]
 80006b4:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <vPowerTrainSystemSetMotorSpeed+0x1a>
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d009      	beq.n	80006d4 <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 80006c0:	e011      	b.n	80006e6 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <vPowerTrainSystemSetMotorSpeed+0x48>)
 80006c4:	681c      	ldr	r4, [r3, #0]
 80006c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006ca:	f7ff fda5 	bl	8000218 <__aeabi_d2uiz>
 80006ce:	4603      	mov	r3, r0
 80006d0:	6363      	str	r3, [r4, #52]	@ 0x34
			break;
 80006d2:	e008      	b.n	80006e6 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <vPowerTrainSystemSetMotorSpeed+0x48>)
 80006d6:	681c      	ldr	r4, [r3, #0]
 80006d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006dc:	f7ff fd9c 	bl	8000218 <__aeabi_d2uiz>
 80006e0:	4603      	mov	r3, r0
 80006e2:	63a3      	str	r3, [r4, #56]	@ 0x38
			break;
 80006e4:	bf00      	nop
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000498 	.word	0x20000498

080006f4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2220      	movs	r2, #32
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f007 f885 	bl	800781c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000714:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000718:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071a:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <MX_ADC1_Init+0xe8>)
 800071c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000720:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000722:	4b2e      	ldr	r3, [pc, #184]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000728:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <MX_ADC1_Init+0xe8>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800072e:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <MX_ADC1_Init+0xe8>)
 800073c:	2204      	movs	r2, #4
 800073e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000740:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000742:	2200      	movs	r2, #0
 8000744:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000746:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000748:	2201      	movs	r2, #1
 800074a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_ADC1_Init+0xe8>)
 800074e:	2201      	movs	r2, #1
 8000750:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075a:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <MX_ADC1_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000762:	2200      	movs	r2, #0
 8000764:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000766:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000768:	2201      	movs	r2, #1
 800076a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000770:	2200      	movs	r2, #0
 8000772:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077c:	4817      	ldr	r0, [pc, #92]	@ (80007dc <MX_ADC1_Init+0xe8>)
 800077e:	f001 fee3 	bl	8002548 <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000788:	f000 ff1f 	bl	80015ca <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	4811      	ldr	r0, [pc, #68]	@ (80007dc <MX_ADC1_Init+0xe8>)
 8000798:	f003 f802 	bl	80037a0 <HAL_ADCEx_MultiModeConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007a2:	f000 ff12 	bl	80015ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_ADC1_Init+0xec>)
 80007a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007aa:	2306      	movs	r3, #6
 80007ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b2:	237f      	movs	r3, #127	@ 0x7f
 80007b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b6:	2304      	movs	r3, #4
 80007b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_ADC1_Init+0xe8>)
 80007c4:	f002 f96e 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007ce:	f000 fefc 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028
 80007e0:	04300002 	.word	0x04300002

080007e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2220      	movs	r2, #32
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 f813 	bl	800781c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007f6:	4b32      	ldr	r3, [pc, #200]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 80007f8:	4a32      	ldr	r2, [pc, #200]	@ (80008c4 <MX_ADC2_Init+0xe0>)
 80007fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007fc:	4b30      	ldr	r3, [pc, #192]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 80007fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000802:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000804:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000810:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000816:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081c:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 800081e:	2204      	movs	r2, #4
 8000820:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000822:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000824:	2200      	movs	r2, #0
 8000826:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000828:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 800082a:	2201      	movs	r2, #1
 800082c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800082e:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000830:	2202      	movs	r2, #2
 8000832:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000834:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083c:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 800083e:	2200      	movs	r2, #0
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000842:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000848:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 800084a:	2201      	movs	r2, #1
 800084c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000852:	2200      	movs	r2, #0
 8000854:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800085e:	4818      	ldr	r0, [pc, #96]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 8000860:	f001 fe72 	bl	8002548 <HAL_ADC_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800086a:	f000 feae 	bl	80015ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_ADC2_Init+0xe4>)
 8000870:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000872:	2306      	movs	r3, #6
 8000874:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000876:	2302      	movs	r3, #2
 8000878:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800087a:	237f      	movs	r3, #127	@ 0x7f
 800087c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800087e:	2304      	movs	r3, #4
 8000880:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 800088c:	f002 f90a 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000896:	f000 fe98 	bl	80015ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_ADC2_Init+0xe8>)
 800089c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800089e:	230c      	movs	r3, #12
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <MX_ADC2_Init+0xdc>)
 80008a8:	f002 f8fc 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80008b2:	f000 fe8a 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000094 	.word	0x20000094
 80008c4:	50000100 	.word	0x50000100
 80008c8:	0c900008 	.word	0x0c900008
 80008cc:	10c00010 	.word	0x10c00010

080008d0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	@ 0x30
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2220      	movs	r2, #32
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f006 ff97 	bl	800781c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80008ee:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 80008f0:	4a31      	ldr	r2, [pc, #196]	@ (80009b8 <MX_ADC3_Init+0xe8>)
 80008f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 80008f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008fc:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000902:	4b2c      	ldr	r3, [pc, #176]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000908:	4b2a      	ldr	r3, [pc, #168]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800090e:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000914:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000916:	2204      	movs	r2, #4
 8000918:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800091a:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 800091c:	2200      	movs	r2, #0
 800091e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000920:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000922:	2201      	movs	r2, #1
 8000924:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000926:	4b23      	ldr	r3, [pc, #140]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000928:	2201      	movs	r2, #1
 800092a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800092c:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000936:	2200      	movs	r2, #0
 8000938:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000942:	2201      	movs	r2, #1
 8000944:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000956:	4817      	ldr	r0, [pc, #92]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000958:	f001 fdf6 	bl	8002548 <HAL_ADC_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000962:	f000 fe32 	bl	80015ca <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800096a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 8000972:	f002 ff15 	bl	80037a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800097c:	f000 fe25 	bl	80015ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_ADC3_Init+0xec>)
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000984:	2306      	movs	r3, #6
 8000986:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000988:	2302      	movs	r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800098c:	237f      	movs	r3, #127	@ 0x7f
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000990:	2304      	movs	r3, #4
 8000992:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_ADC3_Init+0xe4>)
 800099e:	f002 f881 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80009a8:	f000 fe0f 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3730      	adds	r7, #48	@ 0x30
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000100 	.word	0x20000100
 80009b8:	50000400 	.word	0x50000400
 80009bc:	14f00020 	.word	0x14f00020

080009c0 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2220      	movs	r2, #32
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f006 ff25 	bl	800781c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80009d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 80009d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a84 <MX_ADC4_Init+0xc4>)
 80009d6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009d8:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 80009da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009de:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e6:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80009ec:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f2:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f8:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80009fe:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a18:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000a3a:	4811      	ldr	r0, [pc, #68]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a3c:	f001 fd84 	bl	8002548 <HAL_ADC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000a46:	f000 fdc0 	bl	80015ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_ADC4_Init+0xc8>)
 8000a4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000a52:	2302      	movs	r3, #2
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a56:	237f      	movs	r3, #127	@ 0x7f
 8000a58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_ADC4_Init+0xc0>)
 8000a68:	f002 f81c 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000a72:	f000 fdaa 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000016c 	.word	0x2000016c
 8000a84:	50000500 	.word	0x50000500
 8000a88:	14f00020 	.word	0x14f00020

08000a8c <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a92:	463b      	mov	r3, r7
 8000a94:	2220      	movs	r2, #32
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f006 febf 	bl	800781c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b50 <MX_ADC5_Init+0xc4>)
 8000aa2:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000aa6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000aaa:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000abe:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000aca:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000b06:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000b08:	f001 fd1e 	bl	8002548 <HAL_ADC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000b12:	f000 fd5a 	bl	80015ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_ADC5_Init+0xc8>)
 8000b18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b22:	237f      	movs	r3, #127	@ 0x7f
 8000b24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b26:	2304      	movs	r3, #4
 8000b28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <MX_ADC5_Init+0xc0>)
 8000b34:	f001 ffb6 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000b3e:	f000 fd44 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001d8 	.word	0x200001d8
 8000b50:	50000600 	.word	0x50000600
 8000b54:	08600004 	.word	0x08600004

08000b58 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0a6      	sub	sp, #152	@ 0x98
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b74:	2254      	movs	r2, #84	@ 0x54
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f006 fe4f 	bl	800781c <memset>
  if(adcHandle->Instance==ADC1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b86:	d16c      	bne.n	8000c62 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b92:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 fb5d 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ba4:	f000 fd11 	bl	80015ca <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ba8:	4ba0      	ldr	r3, [pc, #640]	@ (8000e2c <HAL_ADC_MspInit+0x2d4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a9f      	ldr	r2, [pc, #636]	@ (8000e2c <HAL_ADC_MspInit+0x2d4>)
 8000bb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8000e2c <HAL_ADC_MspInit+0x2d4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d10b      	bne.n	8000bd2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bba:	4b9d      	ldr	r3, [pc, #628]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a9c      	ldr	r2, [pc, #624]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000bc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b9a      	ldr	r3, [pc, #616]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b97      	ldr	r3, [pc, #604]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a96      	ldr	r2, [pc, #600]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b94      	ldr	r3, [pc, #592]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c06:	f003 fa55 	bl	80040b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c0a:	4b8a      	ldr	r3, [pc, #552]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c0c:	4a8a      	ldr	r2, [pc, #552]	@ (8000e38 <HAL_ADC_MspInit+0x2e0>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c10:	4b88      	ldr	r3, [pc, #544]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c12:	2205      	movs	r2, #5
 8000c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c16:	4b87      	ldr	r3, [pc, #540]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1c:	4b85      	ldr	r3, [pc, #532]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c22:	4b84      	ldr	r3, [pc, #528]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c28:	4b82      	ldr	r3, [pc, #520]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c2e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c30:	4b80      	ldr	r3, [pc, #512]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c38:	4b7e      	ldr	r3, [pc, #504]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c44:	487b      	ldr	r0, [pc, #492]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c46:	f002 ffc3 	bl	8003bd0 <HAL_DMA_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000c50:	f000 fcbb 	bl	80015ca <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a77      	ldr	r2, [pc, #476]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c58:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c5a:	4a76      	ldr	r2, [pc, #472]	@ (8000e34 <HAL_ADC_MspInit+0x2dc>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000c60:	e1e0      	b.n	8001024 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a75      	ldr	r2, [pc, #468]	@ (8000e3c <HAL_ADC_MspInit+0x2e4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d16c      	bne.n	8000d46 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c70:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c76:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 faeb 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000c88:	f000 fc9f 	bl	80015ca <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c8c:	4b67      	ldr	r3, [pc, #412]	@ (8000e2c <HAL_ADC_MspInit+0x2d4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a66      	ldr	r2, [pc, #408]	@ (8000e2c <HAL_ADC_MspInit+0x2d4>)
 8000c94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c96:	4b65      	ldr	r3, [pc, #404]	@ (8000e2c <HAL_ADC_MspInit+0x2d4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c9e:	4b64      	ldr	r3, [pc, #400]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a63      	ldr	r2, [pc, #396]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000ca4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b61      	ldr	r3, [pc, #388]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	4a5d      	ldr	r2, [pc, #372]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000cce:	23c0      	movs	r3, #192	@ 0xc0
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cea:	f003 f9e3 	bl	80040b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000cee:	4b54      	ldr	r3, [pc, #336]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000cf0:	4a54      	ldr	r2, [pc, #336]	@ (8000e44 <HAL_ADC_MspInit+0x2ec>)
 8000cf2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000cf4:	4b52      	ldr	r3, [pc, #328]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000cf6:	2224      	movs	r2, #36	@ 0x24
 8000cf8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfa:	4b51      	ldr	r3, [pc, #324]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	4b4f      	ldr	r3, [pc, #316]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	4b4e      	ldr	r3, [pc, #312]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d08:	2280      	movs	r2, #128	@ 0x80
 8000d0a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d0c:	4b4c      	ldr	r3, [pc, #304]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d12:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d14:	4b4a      	ldr	r3, [pc, #296]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d1a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d1c:	4b48      	ldr	r3, [pc, #288]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d1e:	2220      	movs	r2, #32
 8000d20:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d22:	4b47      	ldr	r3, [pc, #284]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d28:	4845      	ldr	r0, [pc, #276]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d2a:	f002 ff51 	bl	8003bd0 <HAL_DMA_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000d34:	f000 fc49 	bl	80015ca <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a41      	ldr	r2, [pc, #260]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d3e:	4a40      	ldr	r2, [pc, #256]	@ (8000e40 <HAL_ADC_MspInit+0x2e8>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000d44:	e16e      	b.n	8001024 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e48 <HAL_ADC_MspInit+0x2f0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	f040 8085 	bne.w	8000e5c <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d62:	4618      	mov	r0, r3
 8000d64:	f004 fa78 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000d6e:	f000 fc2c 	bl	80015ca <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000d72:	4b36      	ldr	r3, [pc, #216]	@ (8000e4c <HAL_ADC_MspInit+0x2f4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	4a34      	ldr	r2, [pc, #208]	@ (8000e4c <HAL_ADC_MspInit+0x2f4>)
 8000d7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000d7c:	4b33      	ldr	r3, [pc, #204]	@ (8000e4c <HAL_ADC_MspInit+0x2f4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d10b      	bne.n	8000d9c <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d84:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	4a29      	ldr	r2, [pc, #164]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da0:	4a23      	ldr	r2, [pc, #140]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da8:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <HAL_ADC_MspInit+0x2d8>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000db4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4820      	ldr	r0, [pc, #128]	@ (8000e50 <HAL_ADC_MspInit+0x2f8>)
 8000dd0:	f003 f970 	bl	80040b4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000dd6:	4a20      	ldr	r2, [pc, #128]	@ (8000e58 <HAL_ADC_MspInit+0x300>)
 8000dd8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000ddc:	2225      	movs	r2, #37	@ 0x25
 8000dde:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000dee:	2280      	movs	r2, #128	@ 0x80
 8000df0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e00:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000e02:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000e04:	2220      	movs	r2, #32
 8000e06:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e0e:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000e10:	f002 fede 	bl	8003bd0 <HAL_DMA_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000e1a:	f000 fbd6 	bl	80015ca <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a0c      	ldr	r2, [pc, #48]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000e22:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e24:	4a0b      	ldr	r2, [pc, #44]	@ (8000e54 <HAL_ADC_MspInit+0x2fc>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e2a:	e0fb      	b.n	8001024 <HAL_ADC_MspInit+0x4cc>
 8000e2c:	20000424 	.word	0x20000424
 8000e30:	40021000 	.word	0x40021000
 8000e34:	20000244 	.word	0x20000244
 8000e38:	40020008 	.word	0x40020008
 8000e3c:	50000100 	.word	0x50000100
 8000e40:	200002a4 	.word	0x200002a4
 8000e44:	4002001c 	.word	0x4002001c
 8000e48:	50000400 	.word	0x50000400
 8000e4c:	20000428 	.word	0x20000428
 8000e50:	48000400 	.word	0x48000400
 8000e54:	20000304 	.word	0x20000304
 8000e58:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a72      	ldr	r2, [pc, #456]	@ (800102c <HAL_ADC_MspInit+0x4d4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d16c      	bne.n	8000f40 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e70:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 f9ee 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000e82:	f000 fba2 	bl	80015ca <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e86:	4b6a      	ldr	r3, [pc, #424]	@ (8001030 <HAL_ADC_MspInit+0x4d8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a68      	ldr	r2, [pc, #416]	@ (8001030 <HAL_ADC_MspInit+0x4d8>)
 8000e8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e90:	4b67      	ldr	r3, [pc, #412]	@ (8001030 <HAL_ADC_MspInit+0x4d8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10b      	bne.n	8000eb0 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000e98:	4b66      	ldr	r3, [pc, #408]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9c:	4a65      	ldr	r2, [pc, #404]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000e9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea4:	4b63      	ldr	r3, [pc, #396]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb4:	4a5f      	ldr	r2, [pc, #380]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4855      	ldr	r0, [pc, #340]	@ (8001038 <HAL_ADC_MspInit+0x4e0>)
 8000ee4:	f003 f8e6 	bl	80040b4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000ee8:	4b54      	ldr	r3, [pc, #336]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000eea:	4a55      	ldr	r2, [pc, #340]	@ (8001040 <HAL_ADC_MspInit+0x4e8>)
 8000eec:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000eee:	4b53      	ldr	r3, [pc, #332]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000ef0:	2226      	movs	r2, #38	@ 0x26
 8000ef2:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef4:	4b51      	ldr	r3, [pc, #324]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efa:	4b50      	ldr	r3, [pc, #320]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000f00:	4b4e      	ldr	r3, [pc, #312]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000f02:	2280      	movs	r2, #128	@ 0x80
 8000f04:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f06:	4b4d      	ldr	r3, [pc, #308]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f0c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f14:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000f16:	4b49      	ldr	r3, [pc, #292]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000f18:	2220      	movs	r2, #32
 8000f1a:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000f1c:	4b47      	ldr	r3, [pc, #284]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000f22:	4846      	ldr	r0, [pc, #280]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000f24:	f002 fe54 	bl	8003bd0 <HAL_DMA_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000f2e:	f000 fb4c 	bl	80015ca <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a41      	ldr	r2, [pc, #260]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000f36:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f38:	4a40      	ldr	r2, [pc, #256]	@ (800103c <HAL_ADC_MspInit+0x4e4>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f3e:	e071      	b.n	8001024 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a3f      	ldr	r2, [pc, #252]	@ (8001044 <HAL_ADC_MspInit+0x4ec>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d16c      	bne.n	8001024 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000f50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000f54:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 f97c 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000f66:	f000 fb30 	bl	80015ca <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <HAL_ADC_MspInit+0x4d8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a2f      	ldr	r2, [pc, #188]	@ (8001030 <HAL_ADC_MspInit+0x4d8>)
 8000f72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000f74:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <HAL_ADC_MspInit+0x4d8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d10b      	bne.n	8000f94 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f80:	4a2c      	ldr	r2, [pc, #176]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f88:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f98:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <HAL_ADC_MspInit+0x4dc>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f003 f873 	bl	80040b4 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <HAL_ADC_MspInit+0x4f4>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8000fd6:	2227      	movs	r2, #39	@ 0x27
 8000fd8:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8000fee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ff2:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8000ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ffa:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8000ffe:	2220      	movs	r2, #32
 8001000:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001008:	480f      	ldr	r0, [pc, #60]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 800100a:	f002 fde1 	bl	8003bd0 <HAL_DMA_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8001014:	f000 fad9 	bl	80015ca <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 800101c:	655a      	str	r2, [r3, #84]	@ 0x54
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <HAL_ADC_MspInit+0x4f0>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001024:	bf00      	nop
 8001026:	3798      	adds	r7, #152	@ 0x98
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	50000500 	.word	0x50000500
 8001030:	20000428 	.word	0x20000428
 8001034:	40021000 	.word	0x40021000
 8001038:	48000400 	.word	0x48000400
 800103c:	20000364 	.word	0x20000364
 8001040:	40020044 	.word	0x40020044
 8001044:	50000600 	.word	0x50000600
 8001048:	200003c4 	.word	0x200003c4
 800104c:	40020058 	.word	0x40020058

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_DMA_Init+0xb0>)
 8001058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800105a:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <MX_DMA_Init+0xb0>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6493      	str	r3, [r2, #72]	@ 0x48
 8001062:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <MX_DMA_Init+0xb0>)
 8001064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <MX_DMA_Init+0xb0>)
 8001070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001072:	4a23      	ldr	r2, [pc, #140]	@ (8001100 <MX_DMA_Init+0xb0>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6493      	str	r3, [r2, #72]	@ 0x48
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_DMA_Init+0xb0>)
 800107c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200b      	movs	r0, #11
 800108c:	f002 fd6b 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001090:	200b      	movs	r0, #11
 8001092:	f002 fd82 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200c      	movs	r0, #12
 800109c:	f002 fd63 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010a0:	200c      	movs	r0, #12
 80010a2:	f002 fd7a 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200d      	movs	r0, #13
 80010ac:	f002 fd5b 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010b0:	200d      	movs	r0, #13
 80010b2:	f002 fd72 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	200e      	movs	r0, #14
 80010bc:	f002 fd53 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010c0:	200e      	movs	r0, #14
 80010c2:	f002 fd6a 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	200f      	movs	r0, #15
 80010cc:	f002 fd4b 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010d0:	200f      	movs	r0, #15
 80010d2:	f002 fd62 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2010      	movs	r0, #16
 80010dc:	f002 fd43 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010e0:	2010      	movs	r0, #16
 80010e2:	f002 fd5a 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2011      	movs	r0, #17
 80010ec:	f002 fd3b 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80010f0:	2011      	movs	r0, #17
 80010f2:	f002 fd52 	bl	8003b9a <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <MX_GPIO_Init>:
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
     PB5   ------> S_TIM17_CH1
*/
void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b6e      	ldr	r3, [pc, #440]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a6d      	ldr	r2, [pc, #436]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b6b      	ldr	r3, [pc, #428]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	4b68      	ldr	r3, [pc, #416]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a67      	ldr	r2, [pc, #412]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b65      	ldr	r3, [pc, #404]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b62      	ldr	r3, [pc, #392]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a61      	ldr	r2, [pc, #388]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b5f      	ldr	r3, [pc, #380]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b5c      	ldr	r3, [pc, #368]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a5b      	ldr	r2, [pc, #364]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b59      	ldr	r3, [pc, #356]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4b56      	ldr	r3, [pc, #344]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a55      	ldr	r2, [pc, #340]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b53      	ldr	r3, [pc, #332]	@ (80012d4 <MX_GPIO_Init+0x1d0>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f003 f90c 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 80011a6:	484c      	ldr	r0, [pc, #304]	@ (80012d8 <MX_GPIO_Init+0x1d4>)
 80011a8:	f003 f906 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 80011ac:	f242 33a0 	movw	r3, #9120	@ 0x23a0
 80011b0:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4846      	ldr	r0, [pc, #280]	@ (80012dc <MX_GPIO_Init+0x1d8>)
 80011c4:	f002 ff76 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 80011c8:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e4:	f002 ff66 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 80011e8:	2304      	movs	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80011f8:	2303      	movs	r3, #3
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4835      	ldr	r0, [pc, #212]	@ (80012d8 <MX_GPIO_Init+0x1d4>)
 8001204:	f002 ff56 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8001208:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121a:	2307      	movs	r3, #7
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	482c      	ldr	r0, [pc, #176]	@ (80012d8 <MX_GPIO_Init+0x1d4>)
 8001226:	f002 ff45 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 800122a:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4825      	ldr	r0, [pc, #148]	@ (80012d8 <MX_GPIO_Init+0x1d4>)
 8001244:	f002 ff36 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8001248:	2340      	movs	r3, #64	@ 0x40
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001258:	2302      	movs	r3, #2
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	481e      	ldr	r0, [pc, #120]	@ (80012dc <MX_GPIO_Init+0x1d8>)
 8001264:	f002 ff26 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8001268:	2304      	movs	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4818      	ldr	r0, [pc, #96]	@ (80012e0 <MX_GPIO_Init+0x1dc>)
 800127e:	f002 ff19 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8001282:	2320      	movs	r3, #32
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001292:	230a      	movs	r3, #10
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	480e      	ldr	r0, [pc, #56]	@ (80012d8 <MX_GPIO_Init+0x1d4>)
 800129e:	f002 ff09 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 80012a2:	2340      	movs	r3, #64	@ 0x40
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <MX_GPIO_Init+0x1d4>)
 80012b8:	f002 fefc 	bl	80040b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2028      	movs	r0, #40	@ 0x28
 80012c2:	f002 fc50 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c6:	2028      	movs	r0, #40	@ 0x28
 80012c8:	f002 fc67 	bl	8003b9a <HAL_NVIC_EnableIRQ>

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	@ 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00

080012e4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <MX_I2C2_Init+0x74>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <MX_I2C2_Init+0x78>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <MX_I2C2_Init+0x74>)
 80012f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <MX_I2C2_Init+0x7c>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <MX_I2C2_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <MX_I2C2_Init+0x74>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <MX_I2C2_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <MX_I2C2_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <MX_I2C2_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_I2C2_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_I2C2_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800131e:	480e      	ldr	r0, [pc, #56]	@ (8001358 <MX_I2C2_Init+0x74>)
 8001320:	f003 f885 	bl	800442e <HAL_I2C_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800132a:	f000 f94e 	bl	80015ca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800132e:	2100      	movs	r1, #0
 8001330:	4809      	ldr	r0, [pc, #36]	@ (8001358 <MX_I2C2_Init+0x74>)
 8001332:	f003 f917 	bl	8004564 <HAL_I2CEx_ConfigAnalogFilter>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800133c:	f000 f945 	bl	80015ca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_I2C2_Init+0x74>)
 8001344:	f003 f959 	bl	80045fa <HAL_I2CEx_ConfigDigitalFilter>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800134e:	f000 f93c 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000042c 	.word	0x2000042c
 800135c:	40005800 	.word	0x40005800
 8001360:	30a0a7fb 	.word	0x30a0a7fb

08001364 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0a0      	sub	sp, #128	@ 0x80
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	2254      	movs	r2, #84	@ 0x54
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f006 fa49 	bl	800781c <memset>
  if(i2cHandle->Instance==I2C2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a2d      	ldr	r2, [pc, #180]	@ (8001444 <HAL_I2C_MspInit+0xe0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d153      	bne.n	800143c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001398:	2300      	movs	r3, #0
 800139a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 ff59 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013ac:	f000 f90d 	bl	80015ca <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b0:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 80013e0:	2310      	movs	r3, #16
 80013e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e4:	2312      	movs	r3, #18
 80013e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013f0:	2304      	movs	r3, #4
 80013f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013f8:	4619      	mov	r1, r3
 80013fa:	4814      	ldr	r0, [pc, #80]	@ (800144c <HAL_I2C_MspInit+0xe8>)
 80013fc:	f002 fe5a 	bl	80040b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8001400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001404:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001412:	2304      	movs	r3, #4
 8001414:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001420:	f002 fe48 	bl	80040b4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 800142a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800142e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_I2C_MspInit+0xe4>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800143c:	bf00      	nop
 800143e:	3780      	adds	r7, #128	@ 0x80
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40005800 	.word	0x40005800
 8001448:	40021000 	.word	0x40021000
 800144c:	48000800 	.word	0x48000800

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f000 fda1 	bl	8001f9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f86c 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f7ff fe52 	bl	8001104 <MX_GPIO_Init>
  MX_DMA_Init();
 8001460:	f7ff fdf6 	bl	8001050 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001464:	f000 fc72 	bl	8001d4c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001468:	f7ff f944 	bl	80006f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800146c:	f7ff f9ba 	bl	80007e4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001470:	f7ff fa2e 	bl	80008d0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001474:	f000 f964 	bl	8001740 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001478:	f000 fb02 	bl	8001a80 <MX_TIM16_Init>
  MX_TIM4_Init();
 800147c:	f000 fa1c 	bl	80018b8 <MX_TIM4_Init>
  MX_ADC4_Init();
 8001480:	f7ff fa9e 	bl	80009c0 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001484:	f7ff fb02 	bl	8000a8c <MX_ADC5_Init>
  MX_I2C2_Init();
 8001488:	f7ff ff2c 	bl	80012e4 <MX_I2C2_Init>
  MX_TIM8_Init();
 800148c:	f000 fa64 	bl	8001958 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  vLineSensorSystemInit(pLineSensorsReadings);
 8001490:	4827      	ldr	r0, [pc, #156]	@ (8001530 <main+0xe0>)
 8001492:	f7ff f859 	bl	8000548 <vLineSensorSystemInit>
  vPowerTrainSystemInit();
 8001496:	f7ff f89f 	bl	80005d8 <vPowerTrainSystemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 800149a:	2100      	movs	r1, #0
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff f8ad 	bl	80005fc <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR, COUNTER_CLOCKWISE);
 80014a2:	2101      	movs	r1, #1
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff f8a9 	bl	80005fc <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,1000);
 80014aa:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001518 <main+0xc8>
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff f8fa 	bl	80006a8 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 500);
 80014b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8001520 <main+0xd0>
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff f8f5 	bl	80006a8 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(3000);
 80014be:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014c2:	f000 fddb 	bl	800207c <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,0);
 80014c6:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8001528 <main+0xd8>
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff f8ec 	bl	80006a8 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 80014d0:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 8001528 <main+0xd8>
 80014d4:	2001      	movs	r0, #1
 80014d6:	f7ff f8e7 	bl	80006a8 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(1000);
 80014da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014de:	f000 fdcd 	bl	800207c <HAL_Delay>

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, COUNTER_CLOCKWISE);
 80014e2:	2101      	movs	r1, #1
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff f889 	bl	80005fc <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR, CLOCKWISE);
 80014ea:	2100      	movs	r1, #0
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff f885 	bl	80005fc <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,1000);
 80014f2:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001518 <main+0xc8>
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff f8d6 	bl	80006a8 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 500);
 80014fc:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8001520 <main+0xd0>
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff f8d1 	bl	80006a8 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(3000);
 8001506:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800150a:	f000 fdb7 	bl	800207c <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 800150e:	bf00      	nop
 8001510:	e7c3      	b.n	800149a <main+0x4a>
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	408f4000 	.word	0x408f4000
 8001520:	00000000 	.word	0x00000000
 8001524:	407f4000 	.word	0x407f4000
	...
 8001530:	20000480 	.word	0x20000480

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b094      	sub	sp, #80	@ 0x50
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	2238      	movs	r2, #56	@ 0x38
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f006 f96a 	bl	800781c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001556:	2000      	movs	r0, #0
 8001558:	f003 f89c 	bl	8004694 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001566:	2340      	movs	r3, #64	@ 0x40
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156e:	2302      	movs	r3, #2
 8001570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001572:	2304      	movs	r3, #4
 8001574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001576:	2355      	movs	r3, #85	@ 0x55
 8001578:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157a:	2302      	movs	r3, #2
 800157c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800157e:	2302      	movs	r3, #2
 8001580:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001582:	2302      	movs	r3, #2
 8001584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f003 f936 	bl	80047fc <HAL_RCC_OscConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001596:	f000 f818 	bl	80015ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	230f      	movs	r3, #15
 800159c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159e:	2303      	movs	r3, #3
 80015a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2104      	movs	r1, #4
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fc34 	bl	8004e20 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015be:	f000 f804 	bl	80015ca <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3750      	adds	r7, #80	@ 0x50
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ce:	b672      	cpsid	i
}
 80015d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d2:	bf00      	nop
 80015d4:	e7fd      	b.n	80015d2 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_MspInit+0x44>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e2:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <HAL_MspInit+0x44>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_MspInit+0x44>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <HAL_MspInit+0x44>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	4a08      	ldr	r2, [pc, #32]	@ (800161c <HAL_MspInit+0x44>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001600:	6593      	str	r3, [r2, #88]	@ 0x58
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_MspInit+0x44>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800160e:	f003 f8e5 	bl	80047dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <NMI_Handler+0x4>

08001628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <MemManage_Handler+0x4>

08001638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <UsageFault_Handler+0x4>

08001648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001676:	f000 fce3 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <DMA1_Channel1_IRQHandler+0x10>)
 8001686:	f002 fbc6 	bl	8003e16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000244 	.word	0x20000244

08001694 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <DMA1_Channel2_IRQHandler+0x10>)
 800169a:	f002 fbbc 	bl	8003e16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200002a4 	.word	0x200002a4

080016a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <DMA1_Channel3_IRQHandler+0x10>)
 80016ae:	f002 fbb2 	bl	8003e16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000304 	.word	0x20000304

080016bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <DMA1_Channel4_IRQHandler+0x10>)
 80016c2:	f002 fba8 	bl	8003e16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000364 	.word	0x20000364

080016d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <DMA1_Channel5_IRQHandler+0x10>)
 80016d6:	f002 fb9e 	bl	8003e16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200003c4 	.word	0x200003c4

080016e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <DMA1_Channel6_IRQHandler+0x10>)
 80016ea:	f002 fb94 	bl	8003e16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000065c 	.word	0x2000065c

080016f8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <DMA1_Channel7_IRQHandler+0x10>)
 80016fe:	f002 fb8a 	bl	8003e16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200006bc 	.word	0x200006bc

0800170c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001710:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001714:	f002 fe68 	bl	80043e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	@ (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09c      	sub	sp, #112	@ 0x70
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001760:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	615a      	str	r2, [r3, #20]
 8001772:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2234      	movs	r2, #52	@ 0x34
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f006 f84e 	bl	800781c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001780:	4b4b      	ldr	r3, [pc, #300]	@ (80018b0 <MX_TIM1_Init+0x170>)
 8001782:	4a4c      	ldr	r2, [pc, #304]	@ (80018b4 <MX_TIM1_Init+0x174>)
 8001784:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8001786:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <MX_TIM1_Init+0x170>)
 8001788:	2210      	movs	r2, #16
 800178a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b48      	ldr	r3, [pc, #288]	@ (80018b0 <MX_TIM1_Init+0x170>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001792:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <MX_TIM1_Init+0x170>)
 8001794:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001798:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	4b45      	ldr	r3, [pc, #276]	@ (80018b0 <MX_TIM1_Init+0x170>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017a0:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <MX_TIM1_Init+0x170>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a6:	4b42      	ldr	r3, [pc, #264]	@ (80018b0 <MX_TIM1_Init+0x170>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ac:	4840      	ldr	r0, [pc, #256]	@ (80018b0 <MX_TIM1_Init+0x170>)
 80017ae:	f003 ffa1 	bl	80056f4 <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017b8:	f7ff ff07 	bl	80015ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017c6:	4619      	mov	r1, r3
 80017c8:	4839      	ldr	r0, [pc, #228]	@ (80018b0 <MX_TIM1_Init+0x170>)
 80017ca:	f004 fad9 	bl	8005d80 <HAL_TIM_ConfigClockSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017d4:	f7ff fef9 	bl	80015ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017d8:	4835      	ldr	r0, [pc, #212]	@ (80018b0 <MX_TIM1_Init+0x170>)
 80017da:	f004 f853 	bl	8005884 <HAL_TIM_PWM_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017e4:	f7ff fef1 	bl	80015ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017f8:	4619      	mov	r1, r3
 80017fa:	482d      	ldr	r0, [pc, #180]	@ (80018b0 <MX_TIM1_Init+0x170>)
 80017fc:	f005 f876 	bl	80068ec <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001806:	f7ff fee0 	bl	80015ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180a:	2360      	movs	r3, #96	@ 0x60
 800180c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001812:	2300      	movs	r3, #0
 8001814:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001816:	2300      	movs	r3, #0
 8001818:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001826:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800182a:	2200      	movs	r2, #0
 800182c:	4619      	mov	r1, r3
 800182e:	4820      	ldr	r0, [pc, #128]	@ (80018b0 <MX_TIM1_Init+0x170>)
 8001830:	f004 f992 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800183a:	f7ff fec6 	bl	80015ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800183e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001842:	2204      	movs	r2, #4
 8001844:	4619      	mov	r1, r3
 8001846:	481a      	ldr	r0, [pc, #104]	@ (80018b0 <MX_TIM1_Init+0x170>)
 8001848:	f004 f986 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001852:	f7ff feba 	bl	80015ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800187c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <MX_TIM1_Init+0x170>)
 8001894:	f005 f8c0 	bl	8006a18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800189e:	f7ff fe94 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018a2:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <MX_TIM1_Init+0x170>)
 80018a4:	f000 f9ce 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 80018a8:	bf00      	nop
 80018aa:	3770      	adds	r7, #112	@ 0x70
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000498 	.word	0x20000498
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <MX_TIM4_Init+0x98>)
 80018d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001954 <MX_TIM4_Init+0x9c>)
 80018da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_TIM4_Init+0x98>)
 80018de:	f244 2267 	movw	r2, #16999	@ 0x4267
 80018e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MX_TIM4_Init+0x98>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_TIM4_Init+0x98>)
 80018ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <MX_TIM4_Init+0x98>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <MX_TIM4_Init+0x98>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018fe:	4814      	ldr	r0, [pc, #80]	@ (8001950 <MX_TIM4_Init+0x98>)
 8001900:	f003 fef8 	bl	80056f4 <HAL_TIM_Base_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800190a:	f7ff fe5e 	bl	80015ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	@ (8001950 <MX_TIM4_Init+0x98>)
 800191c:	f004 fa30 	bl	8005d80 <HAL_TIM_ConfigClockSource>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001926:	f7ff fe50 	bl	80015ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	@ (8001950 <MX_TIM4_Init+0x98>)
 8001938:	f004 ffd8 	bl	80068ec <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001942:	f7ff fe42 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200004e4 	.word	0x200004e4
 8001954:	40000800 	.word	0x40000800

08001958 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b098      	sub	sp, #96	@ 0x60
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2234      	movs	r2, #52	@ 0x34
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f005 ff49 	bl	800781c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800198a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a78 <MX_TIM8_Init+0x120>)
 800198c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a7c <MX_TIM8_Init+0x124>)
 800198e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001990:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <MX_TIM8_Init+0x120>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <MX_TIM8_Init+0x120>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800199c:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <MX_TIM8_Init+0x120>)
 800199e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a4:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <MX_TIM8_Init+0x120>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019aa:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <MX_TIM8_Init+0x120>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <MX_TIM8_Init+0x120>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019b6:	4830      	ldr	r0, [pc, #192]	@ (8001a78 <MX_TIM8_Init+0x120>)
 80019b8:	f003 ff64 	bl	8005884 <HAL_TIM_PWM_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80019c2:	f7ff fe02 	bl	80015ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019d6:	4619      	mov	r1, r3
 80019d8:	4827      	ldr	r0, [pc, #156]	@ (8001a78 <MX_TIM8_Init+0x120>)
 80019da:	f004 ff87 	bl	80068ec <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80019e4:	f7ff fdf1 	bl	80015ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e8:	2360      	movs	r3, #96	@ 0x60
 80019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f0:	2300      	movs	r3, #0
 80019f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019f4:	2300      	movs	r3, #0
 80019f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481a      	ldr	r0, [pc, #104]	@ (8001a78 <MX_TIM8_Init+0x120>)
 8001a0e:	f004 f8a3 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a18:	f7ff fdd7 	bl	80015ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <MX_TIM8_Init+0x120>)
 8001a5a:	f004 ffdd 	bl	8006a18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001a64:	f7ff fdb1 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a68:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <MX_TIM8_Init+0x120>)
 8001a6a:	f000 f8eb 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 8001a6e:	bf00      	nop
 8001a70:	3760      	adds	r7, #96	@ 0x60
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000530 	.word	0x20000530
 8001a7c:	40013400 	.word	0x40013400

08001a80 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b094      	sub	sp, #80	@ 0x50
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2234      	movs	r2, #52	@ 0x34
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f005 febb 	bl	800781c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001aa6:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001aa8:	4a31      	ldr	r2, [pc, #196]	@ (8001b70 <MX_TIM16_Init+0xf0>)
 8001aaa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001aba:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001abe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ac6:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001acc:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ad2:	4826      	ldr	r0, [pc, #152]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001ad4:	f003 fe0e 	bl	80056f4 <HAL_TIM_Base_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001ade:	f7ff fd74 	bl	80015ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001ae2:	4822      	ldr	r0, [pc, #136]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001ae4:	f003 fece 	bl	8005884 <HAL_TIM_PWM_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001aee:	f7ff fd6c 	bl	80015ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af2:	2360      	movs	r3, #96	@ 0x60
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001afe:	2300      	movs	r3, #0
 8001b00:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b12:	2200      	movs	r2, #0
 8001b14:	4619      	mov	r1, r3
 8001b16:	4815      	ldr	r0, [pc, #84]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001b18:	f004 f81e 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001b22:	f7ff fd52 	bl	80015ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4807      	ldr	r0, [pc, #28]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001b4e:	f004 ff63 	bl	8006a18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001b58:	f7ff fd37 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001b5c:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <MX_TIM16_Init+0xec>)
 8001b5e:	f000 f871 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 8001b62:	bf00      	nop
 8001b64:	3750      	adds	r7, #80	@ 0x50
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000057c 	.word	0x2000057c
 8001b70:	40014400 	.word	0x40014400

08001b74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x80>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d10c      	bne.n	8001ba0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001b8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b92:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001b9e:	e022      	b.n	8001be6 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a15      	ldr	r2, [pc, #84]	@ (8001bfc <HAL_TIM_Base_MspInit+0x88>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
}
 8001bc2:	e010      	b.n	8001be6 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <HAL_TIM_Base_MspInit+0x8c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10b      	bne.n	8001be6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x84>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
}
 8001be6:	bf00      	nop
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40012c00 	.word	0x40012c00
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40000800 	.word	0x40000800
 8001c00:	40014400 	.word	0x40014400

08001c04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_TIM_PWM_MspInit+0x38>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10b      	bne.n	8001c2e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40013400 	.word	0x40013400
 8001c40:	40021000 	.word	0x40021000

08001c44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a34      	ldr	r2, [pc, #208]	@ (8001d34 <HAL_TIM_MspPostInit+0xf0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d11c      	bne.n	8001ca0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	4b34      	ldr	r3, [pc, #208]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	4a33      	ldr	r2, [pc, #204]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c72:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4828      	ldr	r0, [pc, #160]	@ (8001d3c <HAL_TIM_MspPostInit+0xf8>)
 8001c9a:	f002 fa0b 	bl	80040b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001c9e:	e044      	b.n	8001d2a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a26      	ldr	r2, [pc, #152]	@ (8001d40 <HAL_TIM_MspPostInit+0xfc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d11e      	bne.n	8001ce8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cae:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce2:	f002 f9e7 	bl	80040b4 <HAL_GPIO_Init>
}
 8001ce6:	e020      	b.n	8001d2a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM16)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <HAL_TIM_MspPostInit+0x100>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11b      	bne.n	8001d2a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <HAL_TIM_MspPostInit+0xf4>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4808      	ldr	r0, [pc, #32]	@ (8001d48 <HAL_TIM_MspPostInit+0x104>)
 8001d26:	f002 f9c5 	bl	80040b4 <HAL_GPIO_Init>
}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	@ 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	40013400 	.word	0x40013400
 8001d44:	40014400 	.word	0x40014400
 8001d48:	48000400 	.word	0x48000400

08001d4c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d50:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d52:	4a22      	ldr	r2, [pc, #136]	@ (8001ddc <MX_LPUART1_UART_Init+0x90>)
 8001d54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d5c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d72:	220c      	movs	r2, #12
 8001d74:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d8e:	4812      	ldr	r0, [pc, #72]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001d90:	f004 fed6 	bl	8006b40 <HAL_UART_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d9a:	f7ff fc16 	bl	80015ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d9e:	2100      	movs	r1, #0
 8001da0:	480d      	ldr	r0, [pc, #52]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001da2:	f005 fc71 	bl	8007688 <HAL_UARTEx_SetTxFifoThreshold>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001dac:	f7ff fc0d 	bl	80015ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db0:	2100      	movs	r1, #0
 8001db2:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001db4:	f005 fca6 	bl	8007704 <HAL_UARTEx_SetRxFifoThreshold>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001dbe:	f7ff fc04 	bl	80015ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <MX_LPUART1_UART_Init+0x8c>)
 8001dc4:	f005 fc27 	bl	8007616 <HAL_UARTEx_DisableFifoMode>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001dce:	f7ff fbfc 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200005c8 	.word	0x200005c8
 8001ddc:	40008000 	.word	0x40008000

08001de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b09e      	sub	sp, #120	@ 0x78
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2254      	movs	r2, #84	@ 0x54
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f005 fd0b 	bl	800781c <memset>
  if(uartHandle->Instance==LPUART1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a49      	ldr	r2, [pc, #292]	@ (8001f30 <HAL_UART_MspInit+0x150>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f040 808a 	bne.w	8001f26 <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e12:	2320      	movs	r3, #32
 8001e14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fa1a 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e2a:	f7ff fbce 	bl	80015ca <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e2e:	4b41      	ldr	r3, [pc, #260]	@ (8001f34 <HAL_UART_MspInit+0x154>)
 8001e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e32:	4a40      	ldr	r2, [pc, #256]	@ (8001f34 <HAL_UART_MspInit+0x154>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f34 <HAL_UART_MspInit+0x154>)
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b3b      	ldr	r3, [pc, #236]	@ (8001f34 <HAL_UART_MspInit+0x154>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f34 <HAL_UART_MspInit+0x154>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e52:	4b38      	ldr	r3, [pc, #224]	@ (8001f34 <HAL_UART_MspInit+0x154>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001e5e:	230c      	movs	r3, #12
 8001e60:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e6e:	230c      	movs	r3, #12
 8001e70:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7c:	f002 f91a 	bl	80040b4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001e82:	4a2e      	ldr	r2, [pc, #184]	@ (8001f3c <HAL_UART_MspInit+0x15c>)
 8001e84:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001e86:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001e88:	2222      	movs	r2, #34	@ 0x22
 8001e8a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e92:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e98:	4b27      	ldr	r3, [pc, #156]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001e9a:	2280      	movs	r2, #128	@ 0x80
 8001e9c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea4:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001eaa:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001eb6:	4820      	ldr	r0, [pc, #128]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001eb8:	f001 fe8a 	bl	8003bd0 <HAL_DMA_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001ec2:	f7ff fb82 	bl	80015ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ece:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <HAL_UART_MspInit+0x158>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001ed8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001edc:	2223      	movs	r2, #35	@ 0x23
 8001ede:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee6:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001eee:	2280      	movs	r2, #128	@ 0x80
 8001ef0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001f0a:	480d      	ldr	r0, [pc, #52]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001f0c:	f001 fe60 	bl	8003bd0 <HAL_DMA_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001f16:	f7ff fb58 	bl	80015ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001f1e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	3778      	adds	r7, #120	@ 0x78
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40008000 	.word	0x40008000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	2000065c 	.word	0x2000065c
 8001f3c:	4002006c 	.word	0x4002006c
 8001f40:	200006bc 	.word	0x200006bc
 8001f44:	40020080 	.word	0x40020080

08001f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f48:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f4c:	f7ff fbe6 	bl	800171c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f50:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f52:	490d      	ldr	r1, [pc, #52]	@ (8001f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f54:	4a0d      	ldr	r2, [pc, #52]	@ (8001f8c <LoopForever+0xe>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f68:	4c0a      	ldr	r4, [pc, #40]	@ (8001f94 <LoopForever+0x16>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f76:	f005 fc59 	bl	800782c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f7a:	f7ff fa69 	bl	8001450 <main>

08001f7e <LoopForever>:

LoopForever:
    b LoopForever
 8001f7e:	e7fe      	b.n	8001f7e <LoopForever>
  ldr   r0, =_estack
 8001f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f8c:	080078dc 	.word	0x080078dc
  ldr r2, =_sbss
 8001f90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f94:	20000720 	.word	0x20000720

08001f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f98:	e7fe      	b.n	8001f98 <ADC1_2_IRQHandler>

08001f9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f001 fdd3 	bl	8003b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 f80e 	bl	8001fcc <HAL_InitTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	e001      	b.n	8001fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fbc:	f7ff fb0c 	bl	80015d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fc0:	79fb      	ldrb	r3, [r7, #7]

}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fd8:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_InitTick+0x68>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d022      	beq.n	8002026 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_InitTick+0x6c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_InitTick+0x68>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 fdde 	bl	8003bb6 <HAL_SYSTICK_Config>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10f      	bne.n	8002020 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	d809      	bhi.n	800201a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002006:	2200      	movs	r2, #0
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	f04f 30ff 	mov.w	r0, #4294967295
 800200e:	f001 fdaa 	bl	8003b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_InitTick+0x70>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e007      	b.n	800202a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	e004      	b.n	800202a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e001      	b.n	800202a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000008 	.word	0x20000008
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_IncTick+0x1c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_IncTick+0x20>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4413      	add	r3, r2
 800204e:	4a03      	ldr	r2, [pc, #12]	@ (800205c <HAL_IncTick+0x1c>)
 8002050:	6013      	str	r3, [r2, #0]
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	2000071c 	.word	0x2000071c
 8002060:	20000008 	.word	0x20000008

08002064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	2000071c 	.word	0x2000071c

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d004      	beq.n	80020a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <HAL_Delay+0x40>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a0:	bf00      	nop
 80020a2:	f7ff ffdf 	bl	8002064 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d8f7      	bhi.n	80020a2 <HAL_Delay+0x26>
  {
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000008 	.word	0x20000008

080020c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	609a      	str	r2, [r3, #8]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3360      	adds	r3, #96	@ 0x60
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <LL_ADC_SetOffset+0x44>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	4313      	orrs	r3, r2
 8002158:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	03fff000 	.word	0x03fff000

08002170 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3360      	adds	r3, #96	@ 0x60
 800217e:	461a      	mov	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3360      	adds	r3, #96	@ 0x60
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b087      	sub	sp, #28
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3360      	adds	r3, #96	@ 0x60
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021fc:	bf00      	nop
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3360      	adds	r3, #96	@ 0x60
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	431a      	orrs	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	615a      	str	r2, [r3, #20]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800228a:	b480      	push	{r7}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3330      	adds	r3, #48	@ 0x30
 800229a:	461a      	mov	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	4413      	add	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	211f      	movs	r1, #31
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	401a      	ands	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	f003 011f 	and.w	r1, r3, #31
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	431a      	orrs	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b087      	sub	sp, #28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3314      	adds	r3, #20
 80022f2:	461a      	mov	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	0e5b      	lsrs	r3, r3, #25
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	4413      	add	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	0d1b      	lsrs	r3, r3, #20
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	2107      	movs	r1, #7
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	401a      	ands	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0d1b      	lsrs	r3, r3, #20
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	431a      	orrs	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800232c:	bf00      	nop
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0318 	and.w	r3, r3, #24
 800235a:	4908      	ldr	r1, [pc, #32]	@ (800237c <LL_ADC_SetChannelSingleDiff+0x44>)
 800235c:	40d9      	lsrs	r1, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	400b      	ands	r3, r1
 8002362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002366:	431a      	orrs	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	0007ffff 	.word	0x0007ffff

08002380 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 031f 	and.w	r3, r3, #31
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6093      	str	r3, [r2, #8]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023d4:	d101      	bne.n	80023da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002424:	d101      	bne.n	800242a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002470:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002474:	f043 0202 	orr.w	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_ADC_IsEnabled+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_ADC_IsEnabled+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_IsDisableOngoing+0x18>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_IsDisableOngoing+0x1a>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e8:	f043 0204 	orr.w	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d101      	bne.n	8002514 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b08      	cmp	r3, #8
 8002534:	d101      	bne.n	800253a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b089      	sub	sp, #36	@ 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1a9      	b.n	80028b6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7fe faf1 	bl	8000b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff19 	bl	80023c0 <LL_ADC_IsDeepPowerDownEnabled>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff feff 	bl	800239c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff34 	bl	8002410 <LL_ADC_IsInternalRegulatorEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d115      	bne.n	80025da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff18 	bl	80023e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b8:	4b9c      	ldr	r3, [pc, #624]	@ (800282c <HAL_ADC_Init+0x2e4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	4a9c      	ldr	r2, [pc, #624]	@ (8002830 <HAL_ADC_Init+0x2e8>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	3301      	adds	r3, #1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff16 	bl	8002410 <LL_ADC_IsInternalRegulatorEnabled>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff76 	bl	80024fc <LL_ADC_REG_IsConversionOngoing>
 8002610:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 8142 	bne.w	80028a4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 813e 	bne.w	80028a4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002630:	f043 0202 	orr.w	r2, r3, #2
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff23 	bl	8002488 <LL_ADC_IsEnabled>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d141      	bne.n	80026cc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002650:	d004      	beq.n	800265c <HAL_ADC_Init+0x114>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a77      	ldr	r2, [pc, #476]	@ (8002834 <HAL_ADC_Init+0x2ec>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d10f      	bne.n	800267c <HAL_ADC_Init+0x134>
 800265c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002660:	f7ff ff12 	bl	8002488 <LL_ADC_IsEnabled>
 8002664:	4604      	mov	r4, r0
 8002666:	4873      	ldr	r0, [pc, #460]	@ (8002834 <HAL_ADC_Init+0x2ec>)
 8002668:	f7ff ff0e 	bl	8002488 <LL_ADC_IsEnabled>
 800266c:	4603      	mov	r3, r0
 800266e:	4323      	orrs	r3, r4
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e012      	b.n	80026a2 <HAL_ADC_Init+0x15a>
 800267c:	486e      	ldr	r0, [pc, #440]	@ (8002838 <HAL_ADC_Init+0x2f0>)
 800267e:	f7ff ff03 	bl	8002488 <LL_ADC_IsEnabled>
 8002682:	4604      	mov	r4, r0
 8002684:	486d      	ldr	r0, [pc, #436]	@ (800283c <HAL_ADC_Init+0x2f4>)
 8002686:	f7ff feff 	bl	8002488 <LL_ADC_IsEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	431c      	orrs	r4, r3
 800268e:	486c      	ldr	r0, [pc, #432]	@ (8002840 <HAL_ADC_Init+0x2f8>)
 8002690:	f7ff fefa 	bl	8002488 <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	4323      	orrs	r3, r4
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d012      	beq.n	80026cc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ae:	d004      	beq.n	80026ba <HAL_ADC_Init+0x172>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002834 <HAL_ADC_Init+0x2ec>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Init+0x176>
 80026ba:	4a62      	ldr	r2, [pc, #392]	@ (8002844 <HAL_ADC_Init+0x2fc>)
 80026bc:	e000      	b.n	80026c0 <HAL_ADC_Init+0x178>
 80026be:	4a62      	ldr	r2, [pc, #392]	@ (8002848 <HAL_ADC_Init+0x300>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f7ff fcfa 	bl	80020c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7f5b      	ldrb	r3, [r3, #29]
 80026d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d106      	bne.n	8002708 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	045b      	lsls	r3, r3, #17
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b48      	ldr	r3, [pc, #288]	@ (800284c <HAL_ADC_Init+0x304>)
 800272c:	4013      	ands	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	430b      	orrs	r3, r1
 8002736:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fee5 	bl	8002522 <LL_ADC_INJ_IsConversionOngoing>
 8002758:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d17f      	bne.n	8002860 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d17c      	bne.n	8002860 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800276a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002772:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002782:	f023 0302 	bic.w	r3, r3, #2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	430b      	orrs	r3, r1
 800278e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d017      	beq.n	80027c8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80027a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6911      	ldr	r1, [r2, #16]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80027c6:	e013      	b.n	80027f0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027ec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d12a      	bne.n	8002850 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002810:	4311      	orrs	r1, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800281c:	430a      	orrs	r2, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	e019      	b.n	8002860 <HAL_ADC_Init+0x318>
 800282c:	20000000 	.word	0x20000000
 8002830:	053e2d63 	.word	0x053e2d63
 8002834:	50000100 	.word	0x50000100
 8002838:	50000400 	.word	0x50000400
 800283c:	50000500 	.word	0x50000500
 8002840:	50000600 	.word	0x50000600
 8002844:	50000300 	.word	0x50000300
 8002848:	50000700 	.word	0x50000700
 800284c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10c      	bne.n	8002882 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f023 010f 	bic.w	r1, r3, #15
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	1e5a      	subs	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002880:	e007      	b.n	8002892 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 020f 	bic.w	r2, r2, #15
 8002890:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028a2:	e007      	b.n	80028b4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	bf00      	nop

080028c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d4:	d004      	beq.n	80028e0 <HAL_ADC_Start_DMA+0x20>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a5a      	ldr	r2, [pc, #360]	@ (8002a44 <HAL_ADC_Start_DMA+0x184>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_Start_DMA+0x24>
 80028e0:	4b59      	ldr	r3, [pc, #356]	@ (8002a48 <HAL_ADC_Start_DMA+0x188>)
 80028e2:	e000      	b.n	80028e6 <HAL_ADC_Start_DMA+0x26>
 80028e4:	4b59      	ldr	r3, [pc, #356]	@ (8002a4c <HAL_ADC_Start_DMA+0x18c>)
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fd4a 	bl	8002380 <LL_ADC_GetMultimode>
 80028ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fe02 	bl	80024fc <LL_ADC_REG_IsConversionOngoing>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 809b 	bne.w	8002a36 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_Start_DMA+0x4e>
 800290a:	2302      	movs	r3, #2
 800290c:	e096      	b.n	8002a3c <HAL_ADC_Start_DMA+0x17c>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a50 <HAL_ADC_Start_DMA+0x190>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d008      	beq.n	8002932 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b05      	cmp	r3, #5
 800292a:	d002      	beq.n	8002932 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b09      	cmp	r3, #9
 8002930:	d17a      	bne.n	8002a28 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fcf6 	bl	8003324 <ADC_Enable>
 8002938:	4603      	mov	r3, r0
 800293a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d16d      	bne.n	8002a1e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002946:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a44 <HAL_ADC_Start_DMA+0x184>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_ADC_Start_DMA+0xb4>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a3b      	ldr	r2, [pc, #236]	@ (8002a54 <HAL_ADC_Start_DMA+0x194>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d002      	beq.n	8002970 <HAL_ADC_Start_DMA+0xb0>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e003      	b.n	8002978 <HAL_ADC_Start_DMA+0xb8>
 8002970:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_ADC_Start_DMA+0x198>)
 8002972:	e001      	b.n	8002978 <HAL_ADC_Start_DMA+0xb8>
 8002974:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	4293      	cmp	r3, r2
 800297e:	d002      	beq.n	8002986 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a2:	f023 0206 	bic.w	r2, r3, #6
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80029aa:	e002      	b.n	80029b2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	4a29      	ldr	r2, [pc, #164]	@ (8002a5c <HAL_ADC_Start_DMA+0x19c>)
 80029b8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029be:	4a28      	ldr	r2, [pc, #160]	@ (8002a60 <HAL_ADC_Start_DMA+0x1a0>)
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c6:	4a27      	ldr	r2, [pc, #156]	@ (8002a64 <HAL_ADC_Start_DMA+0x1a4>)
 80029c8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	221c      	movs	r2, #28
 80029d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0210 	orr.w	r2, r2, #16
 80029e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3340      	adds	r3, #64	@ 0x40
 8002a04:	4619      	mov	r1, r3
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f001 f989 	bl	8003d20 <HAL_DMA_Start_IT>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fd5c 	bl	80024d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a1c:	e00d      	b.n	8002a3a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002a26:	e008      	b.n	8002a3a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002a34:	e001      	b.n	8002a3a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	50000100 	.word	0x50000100
 8002a48:	50000300 	.word	0x50000300
 8002a4c:	50000700 	.word	0x50000700
 8002a50:	50000600 	.word	0x50000600
 8002a54:	50000500 	.word	0x50000500
 8002a58:	50000400 	.word	0x50000400
 8002a5c:	0800350f 	.word	0x0800350f
 8002a60:	080035e7 	.word	0x080035e7
 8002a64:	08003603 	.word	0x08003603

08002a68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0b6      	sub	sp, #216	@ 0xd8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d102      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x24>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f000 bc13 	b.w	80032ee <HAL_ADC_ConfigChannel+0x84a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fd11 	bl	80024fc <LL_ADC_REG_IsConversionOngoing>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 83f3 	bne.w	80032c8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f7ff fbcb 	bl	800228a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fcff 	bl	80024fc <LL_ADC_REG_IsConversionOngoing>
 8002afe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fd0b 	bl	8002522 <LL_ADC_INJ_IsConversionOngoing>
 8002b0c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 81d9 	bne.w	8002ecc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 81d4 	bne.w	8002ecc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b2c:	d10f      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7ff fbd2 	bl	80022e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fb79 	bl	800223e <LL_ADC_SetSamplingTimeCommonConfig>
 8002b4c:	e00e      	b.n	8002b6c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7ff fbc1 	bl	80022e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fb69 	bl	800223e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	08db      	lsrs	r3, r3, #3
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d022      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6919      	ldr	r1, [r3, #16]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b9e:	f7ff fac3 	bl	8002128 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6919      	ldr	r1, [r3, #16]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f7ff fb0f 	bl	80021d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d102      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x126>
 8002bc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bc8:	e000      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x128>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f7ff fb1b 	bl	8002208 <LL_ADC_SetOffsetSaturation>
 8002bd2:	e17b      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fac8 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x15c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fabd 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	f003 021f 	and.w	r2, r3, #31
 8002bfe:	e01e      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x19a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fab2 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e004      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x1b2>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	e018      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x1e4>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e004      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d106      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fa81 	bl	800219c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fa65 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x222>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fa5a 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	f003 021f 	and.w	r2, r3, #31
 8002cc4:	e01e      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x260>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fa4f 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002cf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x278>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	e018      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x2aa>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e004      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fa1e 	bl	800219c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2102      	movs	r1, #2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fa02 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x2e8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f9f7 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	f003 021f 	and.w	r2, r3, #31
 8002d8a:	e01e      	b.n	8002dca <HAL_ADC_ConfigChannel+0x326>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff f9ec 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e004      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x33e>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	e016      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x36c>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002df4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002df6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002e02:	2320      	movs	r3, #32
 8002e04:	e004      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f9bd 	bl	800219c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2103      	movs	r1, #3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f9a1 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x3aa>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f996 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	e017      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x3da>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2103      	movs	r1, #3
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f98b 	bl	8002170 <LL_ADC_GetOffsetChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e68:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x3f2>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	e011      	b.n	8002eba <HAL_ADC_ConfigChannel+0x416>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e003      	b.n	8002eba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d106      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2103      	movs	r1, #3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f968 	bl	800219c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fad9 	bl	8002488 <LL_ADC_IsEnabled>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 813d 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6819      	ldr	r1, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7ff fa24 	bl	8002338 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4aa2      	ldr	r2, [pc, #648]	@ (8003180 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	f040 812e 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x480>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0e9b      	lsrs	r3, r3, #26
 8002f12:	3301      	adds	r3, #1
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e019      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x4b4>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2b09      	cmp	r3, #9
 8002f50:	bf94      	ite	ls
 8002f52:	2301      	movls	r3, #1
 8002f54:	2300      	movhi	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d079      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x4d4>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	3301      	adds	r3, #1
 8002f70:	069b      	lsls	r3, r3, #26
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f76:	e015      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x500>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	069b      	lsls	r3, r3, #26
 8002fa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x520>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	e017      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x550>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e003      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	ea42 0103 	orr.w	r1, r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_ADC_ConfigChannel+0x576>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	051b      	lsls	r3, r3, #20
 8003018:	e018      	b.n	800304c <HAL_ADC_ConfigChannel+0x5a8>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800302c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003032:	2320      	movs	r3, #32
 8003034:	e003      	b.n	800303e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304c:	430b      	orrs	r3, r1
 800304e:	e07e      	b.n	800314e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_ADC_ConfigChannel+0x5c8>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	3301      	adds	r3, #1
 8003064:	069b      	lsls	r3, r3, #26
 8003066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800306a:	e015      	b.n	8003098 <HAL_ADC_ConfigChannel+0x5f4>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x614>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	3301      	adds	r3, #1
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2101      	movs	r1, #1
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	e017      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x644>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	61fb      	str	r3, [r7, #28]
  return result;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80030d0:	2320      	movs	r3, #32
 80030d2:	e003      	b.n	80030dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	ea42 0103 	orr.w	r1, r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x670>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	3b1e      	subs	r3, #30
 800310c:	051b      	lsls	r3, r3, #20
 800310e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003112:	e01b      	b.n	800314c <HAL_ADC_ConfigChannel+0x6a8>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	613b      	str	r3, [r7, #16]
  return result;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e003      	b.n	8003138 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f003 021f 	and.w	r2, r3, #31
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	3b1e      	subs	r3, #30
 8003146:	051b      	lsls	r3, r3, #20
 8003148:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800314c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003152:	4619      	mov	r1, r3
 8003154:	f7ff f8c5 	bl	80022e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_ADC_ConfigChannel+0x6e0>)
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80be 	beq.w	80032e2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800316e:	d004      	beq.n	800317a <HAL_ADC_ConfigChannel+0x6d6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <HAL_ADC_ConfigChannel+0x6e4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d10a      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x6ec>
 800317a:	4b04      	ldr	r3, [pc, #16]	@ (800318c <HAL_ADC_ConfigChannel+0x6e8>)
 800317c:	e009      	b.n	8003192 <HAL_ADC_ConfigChannel+0x6ee>
 800317e:	bf00      	nop
 8003180:	407f0000 	.word	0x407f0000
 8003184:	80080000 	.word	0x80080000
 8003188:	50000100 	.word	0x50000100
 800318c:	50000300 	.word	0x50000300
 8003190:	4b59      	ldr	r3, [pc, #356]	@ (80032f8 <HAL_ADC_ConfigChannel+0x854>)
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe ffba 	bl	800210c <LL_ADC_GetCommonPathInternalCh>
 8003198:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a56      	ldr	r2, [pc, #344]	@ (80032fc <HAL_ADC_ConfigChannel+0x858>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x70c>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a55      	ldr	r2, [pc, #340]	@ (8003300 <HAL_ADC_ConfigChannel+0x85c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d13a      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d134      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c4:	d005      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0x72e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003304 <HAL_ADC_ConfigChannel+0x860>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	f040 8085 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_ConfigChannel+0x742>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a49      	ldr	r2, [pc, #292]	@ (8003308 <HAL_ADC_ConfigChannel+0x864>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x746>
 80031e6:	4a49      	ldr	r2, [pc, #292]	@ (800330c <HAL_ADC_ConfigChannel+0x868>)
 80031e8:	e000      	b.n	80031ec <HAL_ADC_ConfigChannel+0x748>
 80031ea:	4a43      	ldr	r2, [pc, #268]	@ (80032f8 <HAL_ADC_ConfigChannel+0x854>)
 80031ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f7fe ff75 	bl	80020e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031fc:	4b44      	ldr	r3, [pc, #272]	@ (8003310 <HAL_ADC_ConfigChannel+0x86c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	4a44      	ldr	r2, [pc, #272]	@ (8003314 <HAL_ADC_ConfigChannel+0x870>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003216:	e002      	b.n	800321e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f9      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003224:	e05a      	b.n	80032dc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a3b      	ldr	r2, [pc, #236]	@ (8003318 <HAL_ADC_ConfigChannel+0x874>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d125      	bne.n	800327c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11f      	bne.n	800327c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a31      	ldr	r2, [pc, #196]	@ (8003308 <HAL_ADC_ConfigChannel+0x864>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d104      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x7ac>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a34      	ldr	r2, [pc, #208]	@ (800331c <HAL_ADC_ConfigChannel+0x878>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d047      	beq.n	80032e0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003258:	d004      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x7c0>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2a      	ldr	r2, [pc, #168]	@ (8003308 <HAL_ADC_ConfigChannel+0x864>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x7c4>
 8003264:	4a29      	ldr	r2, [pc, #164]	@ (800330c <HAL_ADC_ConfigChannel+0x868>)
 8003266:	e000      	b.n	800326a <HAL_ADC_ConfigChannel+0x7c6>
 8003268:	4a23      	ldr	r2, [pc, #140]	@ (80032f8 <HAL_ADC_ConfigChannel+0x854>)
 800326a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f7fe ff36 	bl	80020e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800327a:	e031      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a27      	ldr	r2, [pc, #156]	@ (8003320 <HAL_ADC_ConfigChannel+0x87c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d12d      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800328a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d127      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1c      	ldr	r2, [pc, #112]	@ (8003308 <HAL_ADC_ConfigChannel+0x864>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a4:	d004      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0x80c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a17      	ldr	r2, [pc, #92]	@ (8003308 <HAL_ADC_ConfigChannel+0x864>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x810>
 80032b0:	4a16      	ldr	r2, [pc, #88]	@ (800330c <HAL_ADC_ConfigChannel+0x868>)
 80032b2:	e000      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x812>
 80032b4:	4a10      	ldr	r2, [pc, #64]	@ (80032f8 <HAL_ADC_ConfigChannel+0x854>)
 80032b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7fe ff10 	bl	80020e6 <LL_ADC_SetCommonPathInternalCh>
 80032c6:	e00c      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80032da:	e002      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	37d8      	adds	r7, #216	@ 0xd8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	50000700 	.word	0x50000700
 80032fc:	c3210000 	.word	0xc3210000
 8003300:	90c00010 	.word	0x90c00010
 8003304:	50000600 	.word	0x50000600
 8003308:	50000100 	.word	0x50000100
 800330c:	50000300 	.word	0x50000300
 8003310:	20000000 	.word	0x20000000
 8003314:	053e2d63 	.word	0x053e2d63
 8003318:	c7520000 	.word	0xc7520000
 800331c:	50000500 	.word	0x50000500
 8003320:	cb840000 	.word	0xcb840000

08003324 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f8a7 	bl	8002488 <LL_ADC_IsEnabled>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d176      	bne.n	800342e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	4b3c      	ldr	r3, [pc, #240]	@ (8003438 <ADC_Enable+0x114>)
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003352:	f043 0210 	orr.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e062      	b.n	8003430 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f862 	bl	8002438 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800337c:	d004      	beq.n	8003388 <ADC_Enable+0x64>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2e      	ldr	r2, [pc, #184]	@ (800343c <ADC_Enable+0x118>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <ADC_Enable+0x68>
 8003388:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <ADC_Enable+0x11c>)
 800338a:	e000      	b.n	800338e <ADC_Enable+0x6a>
 800338c:	4b2d      	ldr	r3, [pc, #180]	@ (8003444 <ADC_Enable+0x120>)
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe febc 	bl	800210c <LL_ADC_GetCommonPathInternalCh>
 8003394:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800339a:	2b00      	cmp	r3, #0
 800339c:	d013      	beq.n	80033c6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800339e:	4b2a      	ldr	r3, [pc, #168]	@ (8003448 <ADC_Enable+0x124>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	4a29      	ldr	r2, [pc, #164]	@ (800344c <ADC_Enable+0x128>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033b8:	e002      	b.n	80033c0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f9      	bne.n	80033ba <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033c6:	f7fe fe4d 	bl	8002064 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033cc:	e028      	b.n	8003420 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff f858 	bl	8002488 <LL_ADC_IsEnabled>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f828 	bl	8002438 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033e8:	f7fe fe3c 	bl	8002064 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d914      	bls.n	8003420 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d00d      	beq.n	8003420 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f043 0210 	orr.w	r2, r3, #16
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e007      	b.n	8003430 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d1cf      	bne.n	80033ce <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	8000003f 	.word	0x8000003f
 800343c:	50000100 	.word	0x50000100
 8003440:	50000300 	.word	0x50000300
 8003444:	50000700 	.word	0x50000700
 8003448:	20000000 	.word	0x20000000
 800344c:	053e2d63 	.word	0x053e2d63

08003450 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff f826 	bl	80024ae <LL_ADC_IsDisableOngoing>
 8003462:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff f80d 	bl	8002488 <LL_ADC_IsEnabled>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d047      	beq.n	8003504 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d144      	bne.n	8003504 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030d 	and.w	r3, r3, #13
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10c      	bne.n	80034a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe ffe7 	bl	8002460 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2203      	movs	r2, #3
 8003498:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800349a:	f7fe fde3 	bl	8002064 <HAL_GetTick>
 800349e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034a0:	e029      	b.n	80034f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a6:	f043 0210 	orr.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e023      	b.n	8003506 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034be:	f7fe fdd1 	bl	8002064 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d914      	bls.n	80034f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e007      	b.n	8003506 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1dc      	bne.n	80034be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003520:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003524:	2b00      	cmp	r3, #0
 8003526:	d14b      	bne.n	80035c0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d021      	beq.n	8003586 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fe8c 	bl	8002264 <LL_ADC_REG_IsTriggerSourceSWStart>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d032      	beq.n	80035b8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d12b      	bne.n	80035b8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11f      	bne.n	80035b8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003584:	e018      	b.n	80035b8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d111      	bne.n	80035b8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff fa55 	bl	8002a68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035be:	e00e      	b.n	80035de <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff fa5f 	bl	8002a90 <HAL_ADC_ErrorCallback>
}
 80035d2:	e004      	b.n	80035de <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff fa41 	bl	8002a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	f043 0204 	orr.w	r2, r3, #4
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff fa31 	bl	8002a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <LL_ADC_IsEnabled>:
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <LL_ADC_IsEnabled+0x18>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <LL_ADC_IsEnabled+0x1a>
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_StartCalibration>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800366e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003678:	4313      	orrs	r3, r2
 800367a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	609a      	str	r2, [r3, #8]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <LL_ADC_IsCalibrationOnGoing>:
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800369e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036a2:	d101      	bne.n	80036a8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <LL_ADC_IsCalibrationOnGoing+0x1c>
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d101      	bne.n	80036ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_ADCEx_Calibration_Start+0x1c>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e04d      	b.n	8003794 <HAL_ADCEx_Calibration_Start+0xb8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fea5 	bl	8003450 <ADC_Disable>
 8003706:	4603      	mov	r3, r0
 8003708:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d136      	bne.n	800377e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003714:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003718:	f023 0302 	bic.w	r3, r3, #2
 800371c:	f043 0202 	orr.w	r2, r3, #2
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff96 	bl	800365c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003730:	e014      	b.n	800375c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3301      	adds	r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_ADCEx_Calibration_Start+0xc0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d90d      	bls.n	800375c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003744:	f023 0312 	bic.w	r3, r3, #18
 8003748:	f043 0210 	orr.w	r2, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e01b      	b.n	8003794 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff94 	bl	800368e <LL_ADC_IsCalibrationOnGoing>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e2      	bne.n	8003732 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	f023 0303 	bic.w	r3, r3, #3
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800377c:	e005      	b.n	800378a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003782:	f043 0210 	orr.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	0004de01 	.word	0x0004de01

080037a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b0a1      	sub	sp, #132	@ 0x84
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0e7      	b.n	800398e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80037c6:	2300      	movs	r3, #0
 80037c8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80037ca:	2300      	movs	r3, #0
 80037cc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d6:	d102      	bne.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	e009      	b.n	80037f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6e      	ldr	r2, [pc, #440]	@ (800399c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d102      	bne.n	80037ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80037e8:	4b6d      	ldr	r3, [pc, #436]	@ (80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	e001      	b.n	80037f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0be      	b.n	800398e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ff4f 	bl	80036b6 <LL_ADC_REG_IsConversionOngoing>
 8003818:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ff49 	bl	80036b6 <LL_ADC_REG_IsConversionOngoing>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 80a0 	bne.w	800396c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800382c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800382e:	2b00      	cmp	r3, #0
 8003830:	f040 809c 	bne.w	800396c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800383c:	d004      	beq.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a55      	ldr	r2, [pc, #340]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003848:	4b56      	ldr	r3, [pc, #344]	@ (80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800384a:	e000      	b.n	800384e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800384c:	4b56      	ldr	r3, [pc, #344]	@ (80039a8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800384e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d04b      	beq.n	80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003858:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800386a:	035b      	lsls	r3, r3, #13
 800386c:	430b      	orrs	r3, r1
 800386e:	431a      	orrs	r2, r3
 8003870:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003872:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800387c:	d004      	beq.n	8003888 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a45      	ldr	r2, [pc, #276]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10f      	bne.n	80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003888:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800388c:	f7ff fed3 	bl	8003636 <LL_ADC_IsEnabled>
 8003890:	4604      	mov	r4, r0
 8003892:	4841      	ldr	r0, [pc, #260]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003894:	f7ff fecf 	bl	8003636 <LL_ADC_IsEnabled>
 8003898:	4603      	mov	r3, r0
 800389a:	4323      	orrs	r3, r4
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e012      	b.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80038a8:	483c      	ldr	r0, [pc, #240]	@ (800399c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038aa:	f7ff fec4 	bl	8003636 <LL_ADC_IsEnabled>
 80038ae:	4604      	mov	r4, r0
 80038b0:	483b      	ldr	r0, [pc, #236]	@ (80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038b2:	f7ff fec0 	bl	8003636 <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	431c      	orrs	r4, r3
 80038ba:	483c      	ldr	r0, [pc, #240]	@ (80039ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80038bc:	f7ff febb 	bl	8003636 <LL_ADC_IsEnabled>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4323      	orrs	r3, r4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d056      	beq.n	8003980 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038da:	f023 030f 	bic.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	6811      	ldr	r1, [r2, #0]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	6892      	ldr	r2, [r2, #8]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	431a      	orrs	r2, r3
 80038ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038ee:	e047      	b.n	8003980 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003904:	d004      	beq.n	8003910 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a23      	ldr	r2, [pc, #140]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d10f      	bne.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003910:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003914:	f7ff fe8f 	bl	8003636 <LL_ADC_IsEnabled>
 8003918:	4604      	mov	r4, r0
 800391a:	481f      	ldr	r0, [pc, #124]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800391c:	f7ff fe8b 	bl	8003636 <LL_ADC_IsEnabled>
 8003920:	4603      	mov	r3, r0
 8003922:	4323      	orrs	r3, r4
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e012      	b.n	8003956 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003930:	481a      	ldr	r0, [pc, #104]	@ (800399c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003932:	f7ff fe80 	bl	8003636 <LL_ADC_IsEnabled>
 8003936:	4604      	mov	r4, r0
 8003938:	4819      	ldr	r0, [pc, #100]	@ (80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800393a:	f7ff fe7c 	bl	8003636 <LL_ADC_IsEnabled>
 800393e:	4603      	mov	r3, r0
 8003940:	431c      	orrs	r4, r3
 8003942:	481a      	ldr	r0, [pc, #104]	@ (80039ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003944:	f7ff fe77 	bl	8003636 <LL_ADC_IsEnabled>
 8003948:	4603      	mov	r3, r0
 800394a:	4323      	orrs	r3, r4
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d012      	beq.n	8003980 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800395a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003962:	f023 030f 	bic.w	r3, r3, #15
 8003966:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003968:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800396a:	e009      	b.n	8003980 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800397e:	e000      	b.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003980:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800398a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800398e:	4618      	mov	r0, r3
 8003990:	3784      	adds	r7, #132	@ 0x84
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}
 8003996:	bf00      	nop
 8003998:	50000100 	.word	0x50000100
 800399c:	50000400 	.word	0x50000400
 80039a0:	50000500 	.word	0x50000500
 80039a4:	50000300 	.word	0x50000300
 80039a8:	50000700 	.word	0x50000700
 80039ac:	50000600 	.word	0x50000600

080039b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c0:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	@ (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039fc:	4b04      	ldr	r3, [pc, #16]	@ (8003a10 <__NVIC_GetPriorityGrouping+0x18>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db0b      	blt.n	8003a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 021f 	and.w	r2, r3, #31
 8003a2c:	4907      	ldr	r1, [pc, #28]	@ (8003a4c <__NVIC_EnableIRQ+0x38>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2001      	movs	r0, #1
 8003a36:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0a      	blt.n	8003a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	490c      	ldr	r1, [pc, #48]	@ (8003a9c <__NVIC_SetPriority+0x4c>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	440b      	add	r3, r1
 8003a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a78:	e00a      	b.n	8003a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4908      	ldr	r1, [pc, #32]	@ (8003aa0 <__NVIC_SetPriority+0x50>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3b04      	subs	r3, #4
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	761a      	strb	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000e100 	.word	0xe000e100
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	@ 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f1c3 0307 	rsb	r3, r3, #7
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	bf28      	it	cs
 8003ac2:	2304      	movcs	r3, #4
 8003ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d902      	bls.n	8003ad4 <NVIC_EncodePriority+0x30>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3b03      	subs	r3, #3
 8003ad2:	e000      	b.n	8003ad6 <NVIC_EncodePriority+0x32>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	4313      	orrs	r3, r2
         );
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	@ 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b1c:	d301      	bcc.n	8003b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e00f      	b.n	8003b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b22:	4a0a      	ldr	r2, [pc, #40]	@ (8003b4c <SysTick_Config+0x40>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	f7ff ff8e 	bl	8003a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b34:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <SysTick_Config+0x40>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b3a:	4b04      	ldr	r3, [pc, #16]	@ (8003b4c <SysTick_Config+0x40>)
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000e010 	.word	0xe000e010

08003b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff29 	bl	80039b0 <__NVIC_SetPriorityGrouping>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b74:	f7ff ff40 	bl	80039f8 <__NVIC_GetPriorityGrouping>
 8003b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f7ff ff90 	bl	8003aa4 <NVIC_EncodePriority>
 8003b84:	4602      	mov	r2, r0
 8003b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff5f 	bl	8003a50 <__NVIC_SetPriority>
}
 8003b92:	bf00      	nop
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff33 	bl	8003a14 <__NVIC_EnableIRQ>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ffa4 	bl	8003b0c <SysTick_Config>
 8003bc4:	4603      	mov	r3, r0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e08d      	b.n	8003cfe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b47      	ldr	r3, [pc, #284]	@ (8003d08 <HAL_DMA_Init+0x138>)
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d80f      	bhi.n	8003c0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b45      	ldr	r3, [pc, #276]	@ (8003d0c <HAL_DMA_Init+0x13c>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a45      	ldr	r2, [pc, #276]	@ (8003d10 <HAL_DMA_Init+0x140>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	009a      	lsls	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a42      	ldr	r2, [pc, #264]	@ (8003d14 <HAL_DMA_Init+0x144>)
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c0c:	e00e      	b.n	8003c2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b40      	ldr	r3, [pc, #256]	@ (8003d18 <HAL_DMA_Init+0x148>)
 8003c16:	4413      	add	r3, r2
 8003c18:	4a3d      	ldr	r2, [pc, #244]	@ (8003d10 <HAL_DMA_Init+0x140>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	009a      	lsls	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a3c      	ldr	r2, [pc, #240]	@ (8003d1c <HAL_DMA_Init+0x14c>)
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9b6 	bl	8003ff0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8c:	d102      	bne.n	8003c94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ca8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d010      	beq.n	8003cd4 <HAL_DMA_Init+0x104>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d80c      	bhi.n	8003cd4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f9d6 	bl	800406c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	e008      	b.n	8003ce6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40020407 	.word	0x40020407
 8003d0c:	bffdfff8 	.word	0xbffdfff8
 8003d10:	cccccccd 	.word	0xcccccccd
 8003d14:	40020000 	.word	0x40020000
 8003d18:	bffdfbf8 	.word	0xbffdfbf8
 8003d1c:	40020400 	.word	0x40020400

08003d20 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_DMA_Start_IT+0x20>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e066      	b.n	8003e0e <HAL_DMA_Start_IT+0xee>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d155      	bne.n	8003e00 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f8fb 	bl	8003f74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 020e 	orr.w	r2, r2, #14
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e00f      	b.n	8003db8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 020a 	orr.w	r2, r2, #10
 8003db6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dd4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e005      	b.n	8003e0c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2204      	movs	r2, #4
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d026      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x7a>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d021      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0204 	bic.w	r2, r2, #4
 8003e68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f003 021f 	and.w	r2, r3, #31
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	2104      	movs	r1, #4
 8003e78:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d071      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e8e:	e06c      	b.n	8003f6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2202      	movs	r2, #2
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d02e      	beq.n	8003f02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d029      	beq.n	8003f02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 020a 	bic.w	r2, r2, #10
 8003eca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed8:	f003 021f 	and.w	r2, r3, #31
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d038      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f00:	e033      	b.n	8003f6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d02a      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d025      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 020e 	bic.w	r2, r2, #14
 8003f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f34:	f003 021f 	and.w	r2, r3, #31
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
}
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f003 021f 	and.w	r2, r3, #31
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d108      	bne.n	8003fd4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fd2:	e007      	b.n	8003fe4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	60da      	str	r2, [r3, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b16      	ldr	r3, [pc, #88]	@ (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004000:	429a      	cmp	r2, r3
 8004002:	d802      	bhi.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004004:	4b15      	ldr	r3, [pc, #84]	@ (800405c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e001      	b.n	800400e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800400a:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800400c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	3b08      	subs	r3, #8
 800401a:	4a12      	ldr	r2, [pc, #72]	@ (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	461a      	mov	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a0b      	ldr	r2, [pc, #44]	@ (8004068 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800403a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2201      	movs	r2, #1
 8004044:	409a      	lsls	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40020407 	.word	0x40020407
 800405c:	40020800 	.word	0x40020800
 8004060:	40020820 	.word	0x40020820
 8004064:	cccccccd 	.word	0xcccccccd
 8004068:	40020880 	.word	0x40020880

0800406c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a08      	ldr	r2, [pc, #32]	@ (80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800408e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3b01      	subs	r3, #1
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2201      	movs	r2, #1
 800409a:	409a      	lsls	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	1000823f 	.word	0x1000823f
 80040b0:	40020940 	.word	0x40020940

080040b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040c2:	e15a      	b.n	800437a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	2101      	movs	r1, #1
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 814c 	beq.w	8004374 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d005      	beq.n	80040f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d130      	bne.n	8004156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	2203      	movs	r2, #3
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800412a:	2201      	movs	r2, #1
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0201 	and.w	r2, r3, #1
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b03      	cmp	r3, #3
 8004160:	d017      	beq.n	8004192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d123      	bne.n	80041e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	08da      	lsrs	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3208      	adds	r2, #8
 80041e0:	6939      	ldr	r1, [r7, #16]
 80041e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	2203      	movs	r2, #3
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 0203 	and.w	r2, r3, #3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80a6 	beq.w	8004374 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004228:	4b5b      	ldr	r3, [pc, #364]	@ (8004398 <HAL_GPIO_Init+0x2e4>)
 800422a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422c:	4a5a      	ldr	r2, [pc, #360]	@ (8004398 <HAL_GPIO_Init+0x2e4>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6613      	str	r3, [r2, #96]	@ 0x60
 8004234:	4b58      	ldr	r3, [pc, #352]	@ (8004398 <HAL_GPIO_Init+0x2e4>)
 8004236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004240:	4a56      	ldr	r2, [pc, #344]	@ (800439c <HAL_GPIO_Init+0x2e8>)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	3302      	adds	r3, #2
 8004248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	220f      	movs	r2, #15
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4013      	ands	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800426a:	d01f      	beq.n	80042ac <HAL_GPIO_Init+0x1f8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a4c      	ldr	r2, [pc, #304]	@ (80043a0 <HAL_GPIO_Init+0x2ec>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d019      	beq.n	80042a8 <HAL_GPIO_Init+0x1f4>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a4b      	ldr	r2, [pc, #300]	@ (80043a4 <HAL_GPIO_Init+0x2f0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_GPIO_Init+0x1f0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a4a      	ldr	r2, [pc, #296]	@ (80043a8 <HAL_GPIO_Init+0x2f4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00d      	beq.n	80042a0 <HAL_GPIO_Init+0x1ec>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a49      	ldr	r2, [pc, #292]	@ (80043ac <HAL_GPIO_Init+0x2f8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d007      	beq.n	800429c <HAL_GPIO_Init+0x1e8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a48      	ldr	r2, [pc, #288]	@ (80043b0 <HAL_GPIO_Init+0x2fc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_GPIO_Init+0x1e4>
 8004294:	2305      	movs	r3, #5
 8004296:	e00a      	b.n	80042ae <HAL_GPIO_Init+0x1fa>
 8004298:	2306      	movs	r3, #6
 800429a:	e008      	b.n	80042ae <HAL_GPIO_Init+0x1fa>
 800429c:	2304      	movs	r3, #4
 800429e:	e006      	b.n	80042ae <HAL_GPIO_Init+0x1fa>
 80042a0:	2303      	movs	r3, #3
 80042a2:	e004      	b.n	80042ae <HAL_GPIO_Init+0x1fa>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e002      	b.n	80042ae <HAL_GPIO_Init+0x1fa>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_GPIO_Init+0x1fa>
 80042ac:	2300      	movs	r3, #0
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	f002 0203 	and.w	r2, r2, #3
 80042b4:	0092      	lsls	r2, r2, #2
 80042b6:	4093      	lsls	r3, r2
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042be:	4937      	ldr	r1, [pc, #220]	@ (800439c <HAL_GPIO_Init+0x2e8>)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	089b      	lsrs	r3, r3, #2
 80042c4:	3302      	adds	r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042cc:	4b39      	ldr	r3, [pc, #228]	@ (80043b4 <HAL_GPIO_Init+0x300>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042f0:	4a30      	ldr	r2, [pc, #192]	@ (80043b4 <HAL_GPIO_Init+0x300>)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042f6:	4b2f      	ldr	r3, [pc, #188]	@ (80043b4 <HAL_GPIO_Init+0x300>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	43db      	mvns	r3, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800431a:	4a26      	ldr	r2, [pc, #152]	@ (80043b4 <HAL_GPIO_Init+0x300>)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004320:	4b24      	ldr	r3, [pc, #144]	@ (80043b4 <HAL_GPIO_Init+0x300>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	43db      	mvns	r3, r3
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4013      	ands	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004344:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <HAL_GPIO_Init+0x300>)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800434a:	4b1a      	ldr	r3, [pc, #104]	@ (80043b4 <HAL_GPIO_Init+0x300>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	43db      	mvns	r3, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800436e:	4a11      	ldr	r2, [pc, #68]	@ (80043b4 <HAL_GPIO_Init+0x300>)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3301      	adds	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	f47f ae9d 	bne.w	80040c4 <HAL_GPIO_Init+0x10>
  }
}
 800438a:	bf00      	nop
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40021000 	.word	0x40021000
 800439c:	40010000 	.word	0x40010000
 80043a0:	48000400 	.word	0x48000400
 80043a4:	48000800 	.word	0x48000800
 80043a8:	48000c00 	.word	0x48000c00
 80043ac:	48001000 	.word	0x48001000
 80043b0:	48001400 	.word	0x48001400
 80043b4:	40010400 	.word	0x40010400

080043b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
 80043c4:	4613      	mov	r3, r2
 80043c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043c8:	787b      	ldrb	r3, [r7, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ce:	887a      	ldrh	r2, [r7, #2]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043d4:	e002      	b.n	80043dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043f2:	4b08      	ldr	r3, [pc, #32]	@ (8004414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d006      	beq.n	800440c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043fe:	4a05      	ldr	r2, [pc, #20]	@ (8004414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f806 	bl	8004418 <HAL_GPIO_EXTI_Callback>
  }
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40010400 	.word	0x40010400

08004418 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e08d      	b.n	800455c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fc ff85 	bl	8001364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2224      	movs	r2, #36	@ 0x24
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800447e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800448e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	e006      	b.n	80044b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d108      	bne.n	80044d0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	e007      	b.n	80044e0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004502:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69d9      	ldr	r1, [r3, #28]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b20      	cmp	r3, #32
 8004578:	d138      	bne.n	80045ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004584:	2302      	movs	r3, #2
 8004586:	e032      	b.n	80045ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	@ 0x24
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6819      	ldr	r1, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b20      	cmp	r3, #32
 800460e:	d139      	bne.n	8004684 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800461a:	2302      	movs	r3, #2
 800461c:	e033      	b.n	8004686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2224      	movs	r2, #36	@ 0x24
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800464c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d141      	bne.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046a2:	4b4b      	ldr	r3, [pc, #300]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ae:	d131      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b0:	4b47      	ldr	r3, [pc, #284]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046b6:	4a46      	ldr	r2, [pc, #280]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c0:	4b43      	ldr	r3, [pc, #268]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046c8:	4a41      	ldr	r2, [pc, #260]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046d0:	4b40      	ldr	r3, [pc, #256]	@ (80047d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2232      	movs	r2, #50	@ 0x32
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	4a3f      	ldr	r2, [pc, #252]	@ (80047d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	0c9b      	lsrs	r3, r3, #18
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e6:	e002      	b.n	80046ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ee:	4b38      	ldr	r3, [pc, #224]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d102      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f2      	bne.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004702:	4b33      	ldr	r3, [pc, #204]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470e:	d158      	bne.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e057      	b.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004714:	4b2e      	ldr	r3, [pc, #184]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471a:	4a2d      	ldr	r2, [pc, #180]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004720:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004724:	e04d      	b.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472c:	d141      	bne.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800472e:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473a:	d131      	bne.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800473c:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004742:	4a23      	ldr	r2, [pc, #140]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800474c:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004754:	4a1e      	ldr	r2, [pc, #120]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800475a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800475c:	4b1d      	ldr	r3, [pc, #116]	@ (80047d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2232      	movs	r2, #50	@ 0x32
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	4a1c      	ldr	r2, [pc, #112]	@ (80047d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	0c9b      	lsrs	r3, r3, #18
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004772:	e002      	b.n	800477a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3b01      	subs	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004786:	d102      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f2      	bne.n	8004774 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d112      	bne.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e011      	b.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a0:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a6:	4a0a      	ldr	r2, [pc, #40]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80047b0:	e007      	b.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047b2:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047ba:	4a05      	ldr	r2, [pc, #20]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40007000 	.word	0x40007000
 80047d4:	20000000 	.word	0x20000000
 80047d8:	431bde83 	.word	0x431bde83

080047dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047e0:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a04      	ldr	r2, [pc, #16]	@ (80047f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ea:	6093      	str	r3, [r2, #8]
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40007000 	.word	0x40007000

080047fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e2fe      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d075      	beq.n	8004906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481a:	4b97      	ldr	r3, [pc, #604]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004824:	4b94      	ldr	r3, [pc, #592]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d102      	bne.n	800483a <HAL_RCC_OscConfig+0x3e>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d002      	beq.n	8004840 <HAL_RCC_OscConfig+0x44>
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	4b8d      	ldr	r3, [pc, #564]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d05b      	beq.n	8004904 <HAL_RCC_OscConfig+0x108>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d157      	bne.n	8004904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e2d9      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004860:	d106      	bne.n	8004870 <HAL_RCC_OscConfig+0x74>
 8004862:	4b85      	ldr	r3, [pc, #532]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a84      	ldr	r2, [pc, #528]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e01d      	b.n	80048ac <HAL_RCC_OscConfig+0xb0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x98>
 800487a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b7c      	ldr	r3, [pc, #496]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e00b      	b.n	80048ac <HAL_RCC_OscConfig+0xb0>
 8004894:	4b78      	ldr	r3, [pc, #480]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a77      	ldr	r2, [pc, #476]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800489a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b75      	ldr	r3, [pc, #468]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a74      	ldr	r2, [pc, #464]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd fbd6 	bl	8002064 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fd fbd2 	bl	8002064 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	@ 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e29e      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0xc0>
 80048da:	e014      	b.n	8004906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd fbc2 	bl	8002064 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fd fbbe 	bl	8002064 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	@ 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e28a      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048f6:	4b60      	ldr	r3, [pc, #384]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0xe8>
 8004902:	e000      	b.n	8004906 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d075      	beq.n	80049fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004912:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491c:	4b56      	ldr	r3, [pc, #344]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d102      	bne.n	8004932 <HAL_RCC_OscConfig+0x136>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d002      	beq.n	8004938 <HAL_RCC_OscConfig+0x13c>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11f      	bne.n	8004978 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004938:	4b4f      	ldr	r3, [pc, #316]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_OscConfig+0x154>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e25d      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b49      	ldr	r3, [pc, #292]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	4946      	ldr	r1, [pc, #280]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004964:	4b45      	ldr	r3, [pc, #276]	@ (8004a7c <HAL_RCC_OscConfig+0x280>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fd fb2f 	bl	8001fcc <HAL_InitTick>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d043      	beq.n	80049fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e249      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d023      	beq.n	80049c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004980:	4b3d      	ldr	r3, [pc, #244]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3c      	ldr	r2, [pc, #240]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800498a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fd fb6a 	bl	8002064 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7fd fb66 	bl	8002064 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e232      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a6:	4b34      	ldr	r3, [pc, #208]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b2:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	061b      	lsls	r3, r3, #24
 80049c0:	492d      	ldr	r1, [pc, #180]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
 80049c6:	e01a      	b.n	80049fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fd fb46 	bl	8002064 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fd fb42 	bl	8002064 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e20e      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ee:	4b22      	ldr	r3, [pc, #136]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1e0>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d041      	beq.n	8004a8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a12:	4b19      	ldr	r3, [pc, #100]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a18:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fd fb1f 	bl	8002064 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fb1b 	bl	8002064 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1e7      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ef      	beq.n	8004a2a <HAL_RCC_OscConfig+0x22e>
 8004a4a:	e020      	b.n	8004a8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a52:	4a09      	ldr	r2, [pc, #36]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd fb02 	bl	8002064 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a62:	e00d      	b.n	8004a80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fd fafe 	bl	8002064 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d906      	bls.n	8004a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e1ca      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a80:	4b8c      	ldr	r3, [pc, #560]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ea      	bne.n	8004a64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80a6 	beq.w	8004be8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aa0:	4b84      	ldr	r3, [pc, #528]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2b4>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2b6>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aba:	4a7e      	ldr	r2, [pc, #504]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad2:	4b79      	ldr	r3, [pc, #484]	@ (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ade:	4b76      	ldr	r3, [pc, #472]	@ (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a75      	ldr	r2, [pc, #468]	@ (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fd fabb 	bl	8002064 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fd fab7 	bl	8002064 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e183      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b04:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d108      	bne.n	8004b2a <HAL_RCC_OscConfig+0x32e>
 8004b18:	4b66      	ldr	r3, [pc, #408]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	4a65      	ldr	r2, [pc, #404]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b28:	e024      	b.n	8004b74 <HAL_RCC_OscConfig+0x378>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d110      	bne.n	8004b54 <HAL_RCC_OscConfig+0x358>
 8004b32:	4b60      	ldr	r3, [pc, #384]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b38:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b42:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b48:	4a5a      	ldr	r2, [pc, #360]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b52:	e00f      	b.n	8004b74 <HAL_RCC_OscConfig+0x378>
 8004b54:	4b57      	ldr	r3, [pc, #348]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	4a56      	ldr	r2, [pc, #344]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b64:	4b53      	ldr	r3, [pc, #332]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	4a52      	ldr	r2, [pc, #328]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d016      	beq.n	8004baa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7fd fa72 	bl	8002064 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7fd fa6e 	bl	8002064 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e138      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	4b46      	ldr	r3, [pc, #280]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ed      	beq.n	8004b84 <HAL_RCC_OscConfig+0x388>
 8004ba8:	e015      	b.n	8004bd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fd fa5b 	bl	8002064 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fd fa57 	bl	8002064 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e121      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ed      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bdc:	4b35      	ldr	r3, [pc, #212]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be0:	4a34      	ldr	r2, [pc, #208]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d03c      	beq.n	8004c6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01c      	beq.n	8004c36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c02:	4a2c      	ldr	r2, [pc, #176]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fa2a 	bl	8002064 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c14:	f7fd fa26 	bl	8002064 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0f2      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c26:	4b23      	ldr	r3, [pc, #140]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ef      	beq.n	8004c14 <HAL_RCC_OscConfig+0x418>
 8004c34:	e01b      	b.n	8004c6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c36:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c46:	f7fd fa0d 	bl	8002064 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c4e:	f7fd fa09 	bl	8002064 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0d5      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c60:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ef      	bne.n	8004c4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80c9 	beq.w	8004e0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c78:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	f000 8083 	beq.w	8004d8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d15e      	bne.n	8004d4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8e:	4b09      	ldr	r3, [pc, #36]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a08      	ldr	r2, [pc, #32]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fd f9e3 	bl	8002064 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca0:	e00c      	b.n	8004cbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fd f9df 	bl	8002064 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d905      	bls.n	8004cbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0ab      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	4b55      	ldr	r3, [pc, #340]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ec      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc8:	4b52      	ldr	r3, [pc, #328]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4b52      	ldr	r3, [pc, #328]	@ (8004e18 <HAL_RCC_OscConfig+0x61c>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6a11      	ldr	r1, [r2, #32]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0112      	lsls	r2, r2, #4
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ce2:	0212      	lsls	r2, r2, #8
 8004ce4:	4311      	orrs	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0552      	lsls	r2, r2, #21
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cf6:	0852      	lsrs	r2, r2, #1
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0652      	lsls	r2, r2, #25
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d02:	06d2      	lsls	r2, r2, #27
 8004d04:	430a      	orrs	r2, r1
 8004d06:	4943      	ldr	r1, [pc, #268]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a40      	ldr	r2, [pc, #256]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d18:	4b3e      	ldr	r3, [pc, #248]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd f99e 	bl	8002064 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd f99a 	bl	8002064 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e066      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x530>
 8004d4a:	e05e      	b.n	8004e0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b31      	ldr	r3, [pc, #196]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a30      	ldr	r2, [pc, #192]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd f984 	bl	8002064 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd f980 	bl	8002064 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e04c      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d72:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d7e:	4b25      	ldr	r3, [pc, #148]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	4924      	ldr	r1, [pc, #144]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d84:	4b25      	ldr	r3, [pc, #148]	@ (8004e1c <HAL_RCC_OscConfig+0x620>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	60cb      	str	r3, [r1, #12]
 8004d8a:	e03e      	b.n	8004e0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e039      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0203 	and.w	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d12c      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	3b01      	subs	r3, #1
 8004db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d123      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d11b      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d113      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	3b01      	subs	r3, #1
 8004dec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d109      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d001      	beq.n	8004e0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40021000 	.word	0x40021000
 8004e18:	019f800c 	.word	0x019f800c
 8004e1c:	feeefffc 	.word	0xfeeefffc

08004e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e11e      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b91      	ldr	r3, [pc, #580]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d910      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b8e      	ldr	r3, [pc, #568]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 020f 	bic.w	r2, r3, #15
 8004e4e:	498c      	ldr	r1, [pc, #560]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b8a      	ldr	r3, [pc, #552]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e106      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d073      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d129      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7c:	4b81      	ldr	r3, [pc, #516]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0f4      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e8c:	f000 f99e 	bl	80051cc <RCC_GetSysClockFreqFromPLLSource>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4a7c      	ldr	r2, [pc, #496]	@ (8005088 <HAL_RCC_ClockConfig+0x268>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d93f      	bls.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d033      	beq.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12f      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eba:	4b72      	ldr	r3, [pc, #456]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ec2:	4a70      	ldr	r2, [pc, #448]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eca:	2380      	movs	r3, #128	@ 0x80
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e024      	b.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0c6      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee8:	4b66      	ldr	r3, [pc, #408]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0be      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ef8:	f000 f8ce 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4a61      	ldr	r2, [pc, #388]	@ (8005088 <HAL_RCC_ClockConfig+0x268>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d909      	bls.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f06:	4b5f      	ldr	r3, [pc, #380]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f1a:	4b5a      	ldr	r3, [pc, #360]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4957      	ldr	r1, [pc, #348]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2c:	f7fd f89a 	bl	8002064 <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f34:	f7fd f896 	bl	8002064 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e095      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 020c 	and.w	r2, r3, #12
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1eb      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f74:	4b43      	ldr	r3, [pc, #268]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f94:	4a3b      	ldr	r2, [pc, #236]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f9c:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4936      	ldr	r1, [pc, #216]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fb6:	4b33      	ldr	r3, [pc, #204]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4a32      	ldr	r2, [pc, #200]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004fbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d21d      	bcs.n	800500c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 020f 	bic.w	r2, r3, #15
 8004fd8:	4929      	ldr	r1, [pc, #164]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fe0:	f7fd f840 	bl	8002064 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe8:	f7fd f83c 	bl	8002064 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e03b      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b20      	ldr	r3, [pc, #128]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d1ed      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4b1a      	ldr	r3, [pc, #104]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4917      	ldr	r1, [pc, #92]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005036:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	490f      	ldr	r1, [pc, #60]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800504a:	f000 f825 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800504e:	4602      	mov	r2, r0
 8005050:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	490c      	ldr	r1, [pc, #48]	@ (800508c <HAL_RCC_ClockConfig+0x26c>)
 800505c:	5ccb      	ldrb	r3, [r1, r3]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	fa22 f303 	lsr.w	r3, r2, r3
 8005066:	4a0a      	ldr	r2, [pc, #40]	@ (8005090 <HAL_RCC_ClockConfig+0x270>)
 8005068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800506a:	4b0a      	ldr	r3, [pc, #40]	@ (8005094 <HAL_RCC_ClockConfig+0x274>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fc ffac 	bl	8001fcc <HAL_InitTick>
 8005074:	4603      	mov	r3, r0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40022000 	.word	0x40022000
 8005084:	40021000 	.word	0x40021000
 8005088:	04c4b400 	.word	0x04c4b400
 800508c:	0800788c 	.word	0x0800788c
 8005090:	20000000 	.word	0x20000000
 8005094:	20000004 	.word	0x20000004

08005098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800509e:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d102      	bne.n	80050b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e047      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050b0:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d102      	bne.n	80050c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050bc:	4b26      	ldr	r3, [pc, #152]	@ (8005158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e03e      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050c2:	4b23      	ldr	r3, [pc, #140]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b0c      	cmp	r3, #12
 80050cc:	d136      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ce:	4b20      	ldr	r3, [pc, #128]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3301      	adds	r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	4a16      	ldr	r2, [pc, #88]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f6:	68d2      	ldr	r2, [r2, #12]
 80050f8:	0a12      	lsrs	r2, r2, #8
 80050fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	617b      	str	r3, [r7, #20]
      break;
 8005104:	e00c      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005106:	4a13      	ldr	r2, [pc, #76]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	4a10      	ldr	r2, [pc, #64]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	0a12      	lsrs	r2, r2, #8
 8005114:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
      break;
 800511e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005120:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	0e5b      	lsrs	r3, r3, #25
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	3301      	adds	r3, #1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e001      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005140:	693b      	ldr	r3, [r7, #16]
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	00f42400 	.word	0x00f42400
 8005158:	016e3600 	.word	0x016e3600

0800515c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005160:	4b03      	ldr	r3, [pc, #12]	@ (8005170 <HAL_RCC_GetHCLKFreq+0x14>)
 8005162:	681b      	ldr	r3, [r3, #0]
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000000 	.word	0x20000000

08005174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005178:	f7ff fff0 	bl	800515c <HAL_RCC_GetHCLKFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	4904      	ldr	r1, [pc, #16]	@ (800519c <HAL_RCC_GetPCLK1Freq+0x28>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	0800789c 	.word	0x0800789c

080051a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051a4:	f7ff ffda 	bl	800515c <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0adb      	lsrs	r3, r3, #11
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4904      	ldr	r1, [pc, #16]	@ (80051c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800789c 	.word	0x0800789c

080051cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051d2:	4b1e      	ldr	r3, [pc, #120]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051dc:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d10c      	bne.n	800520a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f0:	4a17      	ldr	r2, [pc, #92]	@ (8005250 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	4a14      	ldr	r2, [pc, #80]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051fa:	68d2      	ldr	r2, [r2, #12]
 80051fc:	0a12      	lsrs	r2, r2, #8
 80051fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	617b      	str	r3, [r7, #20]
    break;
 8005208:	e00c      	b.n	8005224 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800520a:	4a12      	ldr	r2, [pc, #72]	@ (8005254 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	4a0e      	ldr	r2, [pc, #56]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005214:	68d2      	ldr	r2, [r2, #12]
 8005216:	0a12      	lsrs	r2, r2, #8
 8005218:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	617b      	str	r3, [r7, #20]
    break;
 8005222:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005224:	4b09      	ldr	r3, [pc, #36]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	0e5b      	lsrs	r3, r3, #25
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	3301      	adds	r3, #1
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800523e:	687b      	ldr	r3, [r7, #4]
}
 8005240:	4618      	mov	r0, r3
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40021000 	.word	0x40021000
 8005250:	016e3600 	.word	0x016e3600
 8005254:	00f42400 	.word	0x00f42400

08005258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005260:	2300      	movs	r3, #0
 8005262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005264:	2300      	movs	r3, #0
 8005266:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8098 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b43      	ldr	r3, [pc, #268]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	4b40      	ldr	r3, [pc, #256]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528a:	4a3f      	ldr	r2, [pc, #252]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005290:	6593      	str	r3, [r2, #88]	@ 0x58
 8005292:	4b3d      	ldr	r3, [pc, #244]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529e:	2301      	movs	r3, #1
 80052a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a2:	4b3a      	ldr	r3, [pc, #232]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a39      	ldr	r2, [pc, #228]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ae:	f7fc fed9 	bl	8002064 <HAL_GetTick>
 80052b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b4:	e009      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fc fed5 	bl	8002064 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d902      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	74fb      	strb	r3, [r7, #19]
        break;
 80052c8:	e005      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ca:	4b30      	ldr	r3, [pc, #192]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ef      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d159      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01e      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d019      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052f8:	4b23      	ldr	r3, [pc, #140]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005304:	4b20      	ldr	r3, [pc, #128]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005314:	4b1c      	ldr	r3, [pc, #112]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531a:	4a1b      	ldr	r2, [pc, #108]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005324:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fc fe95 	bl	8002064 <HAL_GetTick>
 800533a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533c:	e00b      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7fc fe91 	bl	8002064 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d902      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	74fb      	strb	r3, [r7, #19]
            break;
 8005354:	e006      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ec      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800536a:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005378:	4903      	ldr	r1, [pc, #12]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005380:	e008      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	74bb      	strb	r3, [r7, #18]
 8005386:	e005      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005394:	7c7b      	ldrb	r3, [r7, #17]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4ba7      	ldr	r3, [pc, #668]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539e:	4aa6      	ldr	r2, [pc, #664]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b2:	4ba1      	ldr	r3, [pc, #644]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f023 0203 	bic.w	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	499d      	ldr	r1, [pc, #628]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053d4:	4b98      	ldr	r3, [pc, #608]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f023 020c 	bic.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	4995      	ldr	r1, [pc, #596]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053f6:	4b90      	ldr	r3, [pc, #576]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	498c      	ldr	r1, [pc, #560]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005418:	4b87      	ldr	r3, [pc, #540]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	4984      	ldr	r1, [pc, #528]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800543a:	4b7f      	ldr	r3, [pc, #508]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	497b      	ldr	r1, [pc, #492]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800545c:	4b76      	ldr	r3, [pc, #472]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	4973      	ldr	r1, [pc, #460]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800547e:	4b6e      	ldr	r3, [pc, #440]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	496a      	ldr	r1, [pc, #424]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a0:	4b65      	ldr	r3, [pc, #404]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	4962      	ldr	r1, [pc, #392]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	4959      	ldr	r1, [pc, #356]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054e4:	4b54      	ldr	r3, [pc, #336]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f2:	4951      	ldr	r1, [pc, #324]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005506:	4b4c      	ldr	r3, [pc, #304]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	4948      	ldr	r1, [pc, #288]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005524:	2b00      	cmp	r3, #0
 8005526:	d015      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005528:	4b43      	ldr	r3, [pc, #268]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	4940      	ldr	r1, [pc, #256]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005546:	d105      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005548:	4b3b      	ldr	r3, [pc, #236]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a3a      	ldr	r2, [pc, #232]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005552:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800555c:	2b00      	cmp	r3, #0
 800555e:	d015      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005560:	4b35      	ldr	r3, [pc, #212]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556e:	4932      	ldr	r1, [pc, #200]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800557e:	d105      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005580:	4b2d      	ldr	r3, [pc, #180]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a2c      	ldr	r2, [pc, #176]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800558a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005598:	4b27      	ldr	r3, [pc, #156]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	4924      	ldr	r1, [pc, #144]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d0:	4b19      	ldr	r3, [pc, #100]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	4916      	ldr	r1, [pc, #88]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ee:	d105      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f0:	4b11      	ldr	r3, [pc, #68]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a10      	ldr	r2, [pc, #64]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d019      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	4908      	ldr	r1, [pc, #32]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005626:	d109      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005628:	4b03      	ldr	r3, [pc, #12]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a02      	ldr	r2, [pc, #8]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005632:	60d3      	str	r3, [r2, #12]
 8005634:	e002      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d015      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005648:	4b29      	ldr	r3, [pc, #164]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	4926      	ldr	r1, [pc, #152]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005668:	4b21      	ldr	r3, [pc, #132]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a20      	ldr	r2, [pc, #128]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800566e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005672:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005680:	4b1b      	ldr	r3, [pc, #108]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800568e:	4918      	ldr	r1, [pc, #96]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569e:	d105      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056a0:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056b8:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c6:	490a      	ldr	r1, [pc, #40]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d6:	d105      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a04      	ldr	r2, [pc, #16]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e049      	b.n	800579a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fc fa2a 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 fc3a 	bl	8005fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d001      	beq.n	80057bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e04c      	b.n	8005856 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a26      	ldr	r2, [pc, #152]	@ (8005864 <HAL_TIM_Base_Start+0xc0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d022      	beq.n	8005814 <HAL_TIM_Base_Start+0x70>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d6:	d01d      	beq.n	8005814 <HAL_TIM_Base_Start+0x70>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a22      	ldr	r2, [pc, #136]	@ (8005868 <HAL_TIM_Base_Start+0xc4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_TIM_Base_Start+0x70>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a21      	ldr	r2, [pc, #132]	@ (800586c <HAL_TIM_Base_Start+0xc8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_TIM_Base_Start+0x70>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005870 <HAL_TIM_Base_Start+0xcc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_TIM_Base_Start+0x70>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005874 <HAL_TIM_Base_Start+0xd0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_TIM_Base_Start+0x70>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <HAL_TIM_Base_Start+0xd4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_TIM_Base_Start+0x70>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_TIM_Base_Start+0xd8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d115      	bne.n	8005840 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	4b19      	ldr	r3, [pc, #100]	@ (8005880 <HAL_TIM_Base_Start+0xdc>)
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b06      	cmp	r3, #6
 8005824:	d015      	beq.n	8005852 <HAL_TIM_Base_Start+0xae>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800582c:	d011      	beq.n	8005852 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	e008      	b.n	8005852 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	e000      	b.n	8005854 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40000400 	.word	0x40000400
 800586c:	40000800 	.word	0x40000800
 8005870:	40000c00 	.word	0x40000c00
 8005874:	40013400 	.word	0x40013400
 8005878:	40014000 	.word	0x40014000
 800587c:	40015000 	.word	0x40015000
 8005880:	00010007 	.word	0x00010007

08005884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e049      	b.n	800592a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fc f9aa 	bl	8001c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f000 fb72 	bl	8005fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_TIM_PWM_Start+0x24>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e03c      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d109      	bne.n	8005972 <HAL_TIM_PWM_Start+0x3e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	bf14      	ite	ne
 800596a:	2301      	movne	r3, #1
 800596c:	2300      	moveq	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e02f      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d109      	bne.n	800598c <HAL_TIM_PWM_Start+0x58>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e022      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d109      	bne.n	80059a6 <HAL_TIM_PWM_Start+0x72>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b01      	cmp	r3, #1
 800599c:	bf14      	ite	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	2300      	moveq	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	e015      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d109      	bne.n	80059c0 <HAL_TIM_PWM_Start+0x8c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e008      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0a6      	b.n	8005b28 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xb6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059e8:	e023      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0xc6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059f8:	e01b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0xd6>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a08:	e013      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b0c      	cmp	r3, #12
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0xe6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a18:	e00b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d104      	bne.n	8005a2a <HAL_TIM_PWM_Start+0xf6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a28:	e003      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2201      	movs	r2, #1
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 ff30 	bl	80068a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a3a      	ldr	r2, [pc, #232]	@ (8005b30 <HAL_TIM_PWM_Start+0x1fc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a39      	ldr	r2, [pc, #228]	@ (8005b34 <HAL_TIM_PWM_Start+0x200>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a37      	ldr	r2, [pc, #220]	@ (8005b38 <HAL_TIM_PWM_Start+0x204>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a36      	ldr	r2, [pc, #216]	@ (8005b3c <HAL_TIM_PWM_Start+0x208>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a34      	ldr	r2, [pc, #208]	@ (8005b40 <HAL_TIM_PWM_Start+0x20c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a33      	ldr	r2, [pc, #204]	@ (8005b44 <HAL_TIM_PWM_Start+0x210>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_PWM_Start+0x14c>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <HAL_TIM_PWM_Start+0x14e>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a25      	ldr	r2, [pc, #148]	@ (8005b30 <HAL_TIM_PWM_Start+0x1fc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x1b2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x1b2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a26      	ldr	r2, [pc, #152]	@ (8005b48 <HAL_TIM_PWM_Start+0x214>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x1b2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a24      	ldr	r2, [pc, #144]	@ (8005b4c <HAL_TIM_PWM_Start+0x218>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x1b2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a23      	ldr	r2, [pc, #140]	@ (8005b50 <HAL_TIM_PWM_Start+0x21c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x1b2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a19      	ldr	r2, [pc, #100]	@ (8005b34 <HAL_TIM_PWM_Start+0x200>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x1b2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <HAL_TIM_PWM_Start+0x204>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x1b2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <HAL_TIM_PWM_Start+0x210>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d115      	bne.n	8005b12 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	4b19      	ldr	r3, [pc, #100]	@ (8005b54 <HAL_TIM_PWM_Start+0x220>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d015      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x1f0>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005afe:	d011      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b10:	e008      	b.n	8005b24 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0201 	orr.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e000      	b.n	8005b26 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40013400 	.word	0x40013400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800
 8005b44:	40015000 	.word	0x40015000
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800
 8005b50:	40000c00 	.word	0x40000c00
 8005b54:	00010007 	.word	0x00010007

08005b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e0ff      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b14      	cmp	r3, #20
 8005b82:	f200 80f0 	bhi.w	8005d66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b86:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005d67 	.word	0x08005d67
 8005b94:	08005d67 	.word	0x08005d67
 8005b98:	08005d67 	.word	0x08005d67
 8005b9c:	08005c21 	.word	0x08005c21
 8005ba0:	08005d67 	.word	0x08005d67
 8005ba4:	08005d67 	.word	0x08005d67
 8005ba8:	08005d67 	.word	0x08005d67
 8005bac:	08005c63 	.word	0x08005c63
 8005bb0:	08005d67 	.word	0x08005d67
 8005bb4:	08005d67 	.word	0x08005d67
 8005bb8:	08005d67 	.word	0x08005d67
 8005bbc:	08005ca3 	.word	0x08005ca3
 8005bc0:	08005d67 	.word	0x08005d67
 8005bc4:	08005d67 	.word	0x08005d67
 8005bc8:	08005d67 	.word	0x08005d67
 8005bcc:	08005ce5 	.word	0x08005ce5
 8005bd0:	08005d67 	.word	0x08005d67
 8005bd4:	08005d67 	.word	0x08005d67
 8005bd8:	08005d67 	.word	0x08005d67
 8005bdc:	08005d25 	.word	0x08005d25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fa94 	bl	8006114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0208 	orr.w	r2, r2, #8
 8005bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0204 	bic.w	r2, r2, #4
 8005c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6999      	ldr	r1, [r3, #24]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	619a      	str	r2, [r3, #24]
      break;
 8005c1e:	e0a5      	b.n	8005d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fb0e 	bl	8006248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6999      	ldr	r1, [r3, #24]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	619a      	str	r2, [r3, #24]
      break;
 8005c60:	e084      	b.n	8005d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fb81 	bl	8006370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0208 	orr.w	r2, r2, #8
 8005c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0204 	bic.w	r2, r2, #4
 8005c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69d9      	ldr	r1, [r3, #28]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	61da      	str	r2, [r3, #28]
      break;
 8005ca0:	e064      	b.n	8005d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fbf3 	bl	8006494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69d9      	ldr	r1, [r3, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	021a      	lsls	r2, r3, #8
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	61da      	str	r2, [r3, #28]
      break;
 8005ce2:	e043      	b.n	8005d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fc66 	bl	80065bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0208 	orr.w	r2, r2, #8
 8005cfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0204 	bic.w	r2, r2, #4
 8005d0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d22:	e023      	b.n	8005d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fcb0 	bl	8006690 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d64:	e002      	b.n	8005d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
      break;
 8005d6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop

08005d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_TIM_ConfigClockSource+0x1c>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e0f6      	b.n	8005f8a <HAL_TIM_ConfigClockSource+0x20a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005dba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a6f      	ldr	r2, [pc, #444]	@ (8005f94 <HAL_TIM_ConfigClockSource+0x214>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	f000 80c1 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005ddc:	4a6d      	ldr	r2, [pc, #436]	@ (8005f94 <HAL_TIM_ConfigClockSource+0x214>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	f200 80c6 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005de4:	4a6c      	ldr	r2, [pc, #432]	@ (8005f98 <HAL_TIM_ConfigClockSource+0x218>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	f000 80b9 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005dec:	4a6a      	ldr	r2, [pc, #424]	@ (8005f98 <HAL_TIM_ConfigClockSource+0x218>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	f200 80be 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005df4:	4a69      	ldr	r2, [pc, #420]	@ (8005f9c <HAL_TIM_ConfigClockSource+0x21c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	f000 80b1 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005dfc:	4a67      	ldr	r2, [pc, #412]	@ (8005f9c <HAL_TIM_ConfigClockSource+0x21c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	f200 80b6 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e04:	4a66      	ldr	r2, [pc, #408]	@ (8005fa0 <HAL_TIM_ConfigClockSource+0x220>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	f000 80a9 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005e0c:	4a64      	ldr	r2, [pc, #400]	@ (8005fa0 <HAL_TIM_ConfigClockSource+0x220>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	f200 80ae 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e14:	4a63      	ldr	r2, [pc, #396]	@ (8005fa4 <HAL_TIM_ConfigClockSource+0x224>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	f000 80a1 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005e1c:	4a61      	ldr	r2, [pc, #388]	@ (8005fa4 <HAL_TIM_ConfigClockSource+0x224>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	f200 80a6 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e24:	4a60      	ldr	r2, [pc, #384]	@ (8005fa8 <HAL_TIM_ConfigClockSource+0x228>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	f000 8099 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005e2c:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa8 <HAL_TIM_ConfigClockSource+0x228>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	f200 809e 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e38:	f000 8091 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005e3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e40:	f200 8096 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e48:	f000 8089 	beq.w	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005e4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e50:	f200 808e 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e58:	d03e      	beq.n	8005ed8 <HAL_TIM_ConfigClockSource+0x158>
 8005e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5e:	f200 8087 	bhi.w	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e66:	f000 8086 	beq.w	8005f76 <HAL_TIM_ConfigClockSource+0x1f6>
 8005e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6e:	d87f      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e70:	2b70      	cmp	r3, #112	@ 0x70
 8005e72:	d01a      	beq.n	8005eaa <HAL_TIM_ConfigClockSource+0x12a>
 8005e74:	2b70      	cmp	r3, #112	@ 0x70
 8005e76:	d87b      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e78:	2b60      	cmp	r3, #96	@ 0x60
 8005e7a:	d050      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x19e>
 8005e7c:	2b60      	cmp	r3, #96	@ 0x60
 8005e7e:	d877      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e80:	2b50      	cmp	r3, #80	@ 0x50
 8005e82:	d03c      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x17e>
 8005e84:	2b50      	cmp	r3, #80	@ 0x50
 8005e86:	d873      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e88:	2b40      	cmp	r3, #64	@ 0x40
 8005e8a:	d058      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x1be>
 8005e8c:	2b40      	cmp	r3, #64	@ 0x40
 8005e8e:	d86f      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e90:	2b30      	cmp	r3, #48	@ 0x30
 8005e92:	d064      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005e94:	2b30      	cmp	r3, #48	@ 0x30
 8005e96:	d86b      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d060      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d867      	bhi.n	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d05c      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d05a      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x1de>
 8005ea8:	e062      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eba:	f000 fcd1 	bl	8006860 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	609a      	str	r2, [r3, #8]
      break;
 8005ed6:	e04f      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ee8:	f000 fcba 	bl	8006860 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005efa:	609a      	str	r2, [r3, #8]
      break;
 8005efc:	e03c      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f000 fc2c 	bl	8006768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2150      	movs	r1, #80	@ 0x50
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fc85 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005f1c:	e02c      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 fc4b 	bl	80067c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2160      	movs	r1, #96	@ 0x60
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fc75 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e01c      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f000 fc0c 	bl	8006768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2140      	movs	r1, #64	@ 0x40
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fc65 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005f5c:	e00c      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f000 fc5c 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005f6e:	e003      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
      break;
 8005f74:	e000      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	00100070 	.word	0x00100070
 8005f98:	00100060 	.word	0x00100060
 8005f9c:	00100050 	.word	0x00100050
 8005fa0:	00100040 	.word	0x00100040
 8005fa4:	00100030 	.word	0x00100030
 8005fa8:	00100020 	.word	0x00100020

08005fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a4c      	ldr	r2, [pc, #304]	@ (80060f0 <TIM_Base_SetConfig+0x144>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d017      	beq.n	8005ff4 <TIM_Base_SetConfig+0x48>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	d013      	beq.n	8005ff4 <TIM_Base_SetConfig+0x48>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a49      	ldr	r2, [pc, #292]	@ (80060f4 <TIM_Base_SetConfig+0x148>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00f      	beq.n	8005ff4 <TIM_Base_SetConfig+0x48>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a48      	ldr	r2, [pc, #288]	@ (80060f8 <TIM_Base_SetConfig+0x14c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_Base_SetConfig+0x48>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a47      	ldr	r2, [pc, #284]	@ (80060fc <TIM_Base_SetConfig+0x150>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_Base_SetConfig+0x48>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a46      	ldr	r2, [pc, #280]	@ (8006100 <TIM_Base_SetConfig+0x154>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_Base_SetConfig+0x48>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a45      	ldr	r2, [pc, #276]	@ (8006104 <TIM_Base_SetConfig+0x158>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d108      	bne.n	8006006 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a39      	ldr	r2, [pc, #228]	@ (80060f0 <TIM_Base_SetConfig+0x144>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d023      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006014:	d01f      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a36      	ldr	r2, [pc, #216]	@ (80060f4 <TIM_Base_SetConfig+0x148>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01b      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a35      	ldr	r2, [pc, #212]	@ (80060f8 <TIM_Base_SetConfig+0x14c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d017      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a34      	ldr	r2, [pc, #208]	@ (80060fc <TIM_Base_SetConfig+0x150>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a33      	ldr	r2, [pc, #204]	@ (8006100 <TIM_Base_SetConfig+0x154>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00f      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a33      	ldr	r2, [pc, #204]	@ (8006108 <TIM_Base_SetConfig+0x15c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a32      	ldr	r2, [pc, #200]	@ (800610c <TIM_Base_SetConfig+0x160>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a31      	ldr	r2, [pc, #196]	@ (8006110 <TIM_Base_SetConfig+0x164>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0xaa>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2c      	ldr	r2, [pc, #176]	@ (8006104 <TIM_Base_SetConfig+0x158>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <TIM_Base_SetConfig+0x144>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <TIM_Base_SetConfig+0x110>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a1a      	ldr	r2, [pc, #104]	@ (8006100 <TIM_Base_SetConfig+0x154>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00f      	beq.n	80060bc <TIM_Base_SetConfig+0x110>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a1a      	ldr	r2, [pc, #104]	@ (8006108 <TIM_Base_SetConfig+0x15c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_Base_SetConfig+0x110>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a19      	ldr	r2, [pc, #100]	@ (800610c <TIM_Base_SetConfig+0x160>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_Base_SetConfig+0x110>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <TIM_Base_SetConfig+0x164>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0x110>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a13      	ldr	r2, [pc, #76]	@ (8006104 <TIM_Base_SetConfig+0x158>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d103      	bne.n	80060c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d105      	bne.n	80060e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f023 0201 	bic.w	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	611a      	str	r2, [r3, #16]
  }
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40000c00 	.word	0x40000c00
 8006100:	40013400 	.word	0x40013400
 8006104:	40015000 	.word	0x40015000
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800

08006114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f023 0201 	bic.w	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 0302 	bic.w	r3, r3, #2
 8006160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a30      	ldr	r2, [pc, #192]	@ (8006230 <TIM_OC1_SetConfig+0x11c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <TIM_OC1_SetConfig+0x88>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a2f      	ldr	r2, [pc, #188]	@ (8006234 <TIM_OC1_SetConfig+0x120>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00f      	beq.n	800619c <TIM_OC1_SetConfig+0x88>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a2e      	ldr	r2, [pc, #184]	@ (8006238 <TIM_OC1_SetConfig+0x124>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00b      	beq.n	800619c <TIM_OC1_SetConfig+0x88>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a2d      	ldr	r2, [pc, #180]	@ (800623c <TIM_OC1_SetConfig+0x128>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d007      	beq.n	800619c <TIM_OC1_SetConfig+0x88>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a2c      	ldr	r2, [pc, #176]	@ (8006240 <TIM_OC1_SetConfig+0x12c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <TIM_OC1_SetConfig+0x88>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a2b      	ldr	r2, [pc, #172]	@ (8006244 <TIM_OC1_SetConfig+0x130>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d10c      	bne.n	80061b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 0308 	bic.w	r3, r3, #8
 80061a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f023 0304 	bic.w	r3, r3, #4
 80061b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006230 <TIM_OC1_SetConfig+0x11c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <TIM_OC1_SetConfig+0xd2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006234 <TIM_OC1_SetConfig+0x120>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00f      	beq.n	80061e6 <TIM_OC1_SetConfig+0xd2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006238 <TIM_OC1_SetConfig+0x124>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00b      	beq.n	80061e6 <TIM_OC1_SetConfig+0xd2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a1a      	ldr	r2, [pc, #104]	@ (800623c <TIM_OC1_SetConfig+0x128>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_OC1_SetConfig+0xd2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a19      	ldr	r2, [pc, #100]	@ (8006240 <TIM_OC1_SetConfig+0x12c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_OC1_SetConfig+0xd2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a18      	ldr	r2, [pc, #96]	@ (8006244 <TIM_OC1_SetConfig+0x130>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d111      	bne.n	800620a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	621a      	str	r2, [r3, #32]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40013400 	.word	0x40013400
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800
 8006244:	40015000 	.word	0x40015000

08006248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	f023 0210 	bic.w	r2, r3, #16
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0320 	bic.w	r3, r3, #32
 8006296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006358 <TIM_OC2_SetConfig+0x110>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_OC2_SetConfig+0x74>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a2b      	ldr	r2, [pc, #172]	@ (800635c <TIM_OC2_SetConfig+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_OC2_SetConfig+0x74>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006360 <TIM_OC2_SetConfig+0x118>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d10d      	bne.n	80062d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1f      	ldr	r2, [pc, #124]	@ (8006358 <TIM_OC2_SetConfig+0x110>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <TIM_OC2_SetConfig+0xc0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1e      	ldr	r2, [pc, #120]	@ (800635c <TIM_OC2_SetConfig+0x114>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00f      	beq.n	8006308 <TIM_OC2_SetConfig+0xc0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006364 <TIM_OC2_SetConfig+0x11c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00b      	beq.n	8006308 <TIM_OC2_SetConfig+0xc0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006368 <TIM_OC2_SetConfig+0x120>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <TIM_OC2_SetConfig+0xc0>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a1c      	ldr	r2, [pc, #112]	@ (800636c <TIM_OC2_SetConfig+0x124>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_OC2_SetConfig+0xc0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a17      	ldr	r2, [pc, #92]	@ (8006360 <TIM_OC2_SetConfig+0x118>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d113      	bne.n	8006330 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800630e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40013400 	.word	0x40013400
 8006360:	40015000 	.word	0x40015000
 8006364:	40014000 	.word	0x40014000
 8006368:	40014400 	.word	0x40014400
 800636c:	40014800 	.word	0x40014800

08006370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800639e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2b      	ldr	r2, [pc, #172]	@ (800647c <TIM_OC3_SetConfig+0x10c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <TIM_OC3_SetConfig+0x72>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006480 <TIM_OC3_SetConfig+0x110>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_OC3_SetConfig+0x72>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a29      	ldr	r2, [pc, #164]	@ (8006484 <TIM_OC3_SetConfig+0x114>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10d      	bne.n	80063fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a1e      	ldr	r2, [pc, #120]	@ (800647c <TIM_OC3_SetConfig+0x10c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <TIM_OC3_SetConfig+0xbe>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1d      	ldr	r2, [pc, #116]	@ (8006480 <TIM_OC3_SetConfig+0x110>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00f      	beq.n	800642e <TIM_OC3_SetConfig+0xbe>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a1d      	ldr	r2, [pc, #116]	@ (8006488 <TIM_OC3_SetConfig+0x118>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00b      	beq.n	800642e <TIM_OC3_SetConfig+0xbe>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a1c      	ldr	r2, [pc, #112]	@ (800648c <TIM_OC3_SetConfig+0x11c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <TIM_OC3_SetConfig+0xbe>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a1b      	ldr	r2, [pc, #108]	@ (8006490 <TIM_OC3_SetConfig+0x120>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_OC3_SetConfig+0xbe>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a16      	ldr	r2, [pc, #88]	@ (8006484 <TIM_OC3_SetConfig+0x114>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d113      	bne.n	8006456 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800643c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40013400 	.word	0x40013400
 8006484:	40015000 	.word	0x40015000
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	031b      	lsls	r3, r3, #12
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a2c      	ldr	r2, [pc, #176]	@ (80065a4 <TIM_OC4_SetConfig+0x110>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <TIM_OC4_SetConfig+0x74>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a2b      	ldr	r2, [pc, #172]	@ (80065a8 <TIM_OC4_SetConfig+0x114>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_OC4_SetConfig+0x74>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a2a      	ldr	r2, [pc, #168]	@ (80065ac <TIM_OC4_SetConfig+0x118>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d10d      	bne.n	8006524 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800650e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	031b      	lsls	r3, r3, #12
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a1f      	ldr	r2, [pc, #124]	@ (80065a4 <TIM_OC4_SetConfig+0x110>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <TIM_OC4_SetConfig+0xc0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a1e      	ldr	r2, [pc, #120]	@ (80065a8 <TIM_OC4_SetConfig+0x114>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00f      	beq.n	8006554 <TIM_OC4_SetConfig+0xc0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a1e      	ldr	r2, [pc, #120]	@ (80065b0 <TIM_OC4_SetConfig+0x11c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00b      	beq.n	8006554 <TIM_OC4_SetConfig+0xc0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a1d      	ldr	r2, [pc, #116]	@ (80065b4 <TIM_OC4_SetConfig+0x120>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_OC4_SetConfig+0xc0>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a1c      	ldr	r2, [pc, #112]	@ (80065b8 <TIM_OC4_SetConfig+0x124>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC4_SetConfig+0xc0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a17      	ldr	r2, [pc, #92]	@ (80065ac <TIM_OC4_SetConfig+0x118>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d113      	bne.n	800657c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800655a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006562:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	019b      	lsls	r3, r3, #6
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	019b      	lsls	r3, r3, #6
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40013400 	.word	0x40013400
 80065ac:	40015000 	.word	0x40015000
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400
 80065b8:	40014800 	.word	0x40014800

080065bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006600:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a19      	ldr	r2, [pc, #100]	@ (8006678 <TIM_OC5_SetConfig+0xbc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <TIM_OC5_SetConfig+0x82>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a18      	ldr	r2, [pc, #96]	@ (800667c <TIM_OC5_SetConfig+0xc0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00f      	beq.n	800663e <TIM_OC5_SetConfig+0x82>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a17      	ldr	r2, [pc, #92]	@ (8006680 <TIM_OC5_SetConfig+0xc4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00b      	beq.n	800663e <TIM_OC5_SetConfig+0x82>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a16      	ldr	r2, [pc, #88]	@ (8006684 <TIM_OC5_SetConfig+0xc8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <TIM_OC5_SetConfig+0x82>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <TIM_OC5_SetConfig+0xcc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC5_SetConfig+0x82>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a14      	ldr	r2, [pc, #80]	@ (800668c <TIM_OC5_SetConfig+0xd0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d109      	bne.n	8006652 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006644:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	621a      	str	r2, [r3, #32]
}
 800666c:	bf00      	nop
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	40012c00 	.word	0x40012c00
 800667c:	40013400 	.word	0x40013400
 8006680:	40014000 	.word	0x40014000
 8006684:	40014400 	.word	0x40014400
 8006688:	40014800 	.word	0x40014800
 800668c:	40015000 	.word	0x40015000

08006690 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	051b      	lsls	r3, r3, #20
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006750 <TIM_OC6_SetConfig+0xc0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d013      	beq.n	8006714 <TIM_OC6_SetConfig+0x84>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a19      	ldr	r2, [pc, #100]	@ (8006754 <TIM_OC6_SetConfig+0xc4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00f      	beq.n	8006714 <TIM_OC6_SetConfig+0x84>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a18      	ldr	r2, [pc, #96]	@ (8006758 <TIM_OC6_SetConfig+0xc8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00b      	beq.n	8006714 <TIM_OC6_SetConfig+0x84>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a17      	ldr	r2, [pc, #92]	@ (800675c <TIM_OC6_SetConfig+0xcc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d007      	beq.n	8006714 <TIM_OC6_SetConfig+0x84>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a16      	ldr	r2, [pc, #88]	@ (8006760 <TIM_OC6_SetConfig+0xd0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC6_SetConfig+0x84>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a15      	ldr	r2, [pc, #84]	@ (8006764 <TIM_OC6_SetConfig+0xd4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d109      	bne.n	8006728 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	029b      	lsls	r3, r3, #10
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	621a      	str	r2, [r3, #32]
}
 8006742:	bf00      	nop
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40013400 	.word	0x40013400
 8006758:	40014000 	.word	0x40014000
 800675c:	40014400 	.word	0x40014400
 8006760:	40014800 	.word	0x40014800
 8006764:	40015000 	.word	0x40015000

08006768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f023 0201 	bic.w	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f023 030a 	bic.w	r3, r3, #10
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b087      	sub	sp, #28
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	f023 0210 	bic.w	r2, r3, #16
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	031b      	lsls	r3, r3, #12
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006802:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800683c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	f043 0307 	orr.w	r3, r3, #7
 800684c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	609a      	str	r2, [r3, #8]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800687a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	021a      	lsls	r2, r3, #8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	431a      	orrs	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4313      	orrs	r3, r2
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	609a      	str	r2, [r3, #8]
}
 8006894:	bf00      	nop
 8006896:	371c      	adds	r7, #28
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f003 031f 	and.w	r3, r3, #31
 80068b2:	2201      	movs	r2, #1
 80068b4:	fa02 f303 	lsl.w	r3, r2, r3
 80068b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1a      	ldr	r2, [r3, #32]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	401a      	ands	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1a      	ldr	r2, [r3, #32]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	fa01 f303 	lsl.w	r3, r1, r3
 80068d8:	431a      	orrs	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006900:	2302      	movs	r3, #2
 8006902:	e074      	b.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a34      	ldr	r2, [pc, #208]	@ (80069fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d009      	beq.n	8006942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a33      	ldr	r2, [pc, #204]	@ (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d004      	beq.n	8006942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a31      	ldr	r2, [pc, #196]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d108      	bne.n	8006954 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006948:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a21      	ldr	r2, [pc, #132]	@ (80069fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d022      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006984:	d01d      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1f      	ldr	r2, [pc, #124]	@ (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d018      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1d      	ldr	r2, [pc, #116]	@ (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1c      	ldr	r2, [pc, #112]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a15      	ldr	r2, [pc, #84]	@ (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a18      	ldr	r2, [pc, #96]	@ (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a11      	ldr	r2, [pc, #68]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10c      	bne.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40012c00 	.word	0x40012c00
 8006a00:	40013400 	.word	0x40013400
 8006a04:	40015000 	.word	0x40015000
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40014000 	.word	0x40014000

08006a18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e078      	b.n	8006b26 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8006b34 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1b      	ldr	r2, [pc, #108]	@ (8006b38 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a19      	ldr	r2, [pc, #100]	@ (8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d11c      	bne.n	8006b14 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae4:	051b      	lsls	r3, r3, #20
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40013400 	.word	0x40013400
 8006b3c:	40015000 	.word	0x40015000

08006b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e042      	b.n	8006bd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7fb f93b 	bl	8001de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2224      	movs	r2, #36	@ 0x24
 8006b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0201 	bic.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fb24 	bl	80071d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f825 	bl	8006be0 <UART_SetConfig>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e01b      	b.n	8006bd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fba3 	bl	800731c <UART_CheckIdleState>
 8006bd6:	4603      	mov	r3, r0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be4:	b08c      	sub	sp, #48	@ 0x30
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4baa      	ldr	r3, [pc, #680]	@ (8006eb8 <UART_SetConfig+0x2d8>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a9f      	ldr	r2, [pc, #636]	@ (8006ebc <UART_SetConfig+0x2dc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c56:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6a:	f023 010f 	bic.w	r1, r3, #15
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a90      	ldr	r2, [pc, #576]	@ (8006ec0 <UART_SetConfig+0x2e0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d125      	bne.n	8006cd0 <UART_SetConfig+0xf0>
 8006c84:	4b8f      	ldr	r3, [pc, #572]	@ (8006ec4 <UART_SetConfig+0x2e4>)
 8006c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d81a      	bhi.n	8006cc8 <UART_SetConfig+0xe8>
 8006c92:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <UART_SetConfig+0xb8>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cc1 	.word	0x08006cc1
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cae:	e116      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	e112      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	e10e      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	e10a      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cce:	e106      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec8 <UART_SetConfig+0x2e8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d138      	bne.n	8006d4c <UART_SetConfig+0x16c>
 8006cda:	4b7a      	ldr	r3, [pc, #488]	@ (8006ec4 <UART_SetConfig+0x2e4>)
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	d82d      	bhi.n	8006d44 <UART_SetConfig+0x164>
 8006ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <UART_SetConfig+0x110>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d25 	.word	0x08006d25
 8006cf4:	08006d45 	.word	0x08006d45
 8006cf8:	08006d45 	.word	0x08006d45
 8006cfc:	08006d45 	.word	0x08006d45
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d45 	.word	0x08006d45
 8006d0c:	08006d45 	.word	0x08006d45
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006d45 	.word	0x08006d45
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d3d 	.word	0x08006d3d
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2a:	e0d8      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d32:	e0d4      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d34:	2304      	movs	r3, #4
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d3a:	e0d0      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d42:	e0cc      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d4a:	e0c8      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a5e      	ldr	r2, [pc, #376]	@ (8006ecc <UART_SetConfig+0x2ec>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d125      	bne.n	8006da2 <UART_SetConfig+0x1c2>
 8006d56:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec4 <UART_SetConfig+0x2e4>)
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d60:	2b30      	cmp	r3, #48	@ 0x30
 8006d62:	d016      	beq.n	8006d92 <UART_SetConfig+0x1b2>
 8006d64:	2b30      	cmp	r3, #48	@ 0x30
 8006d66:	d818      	bhi.n	8006d9a <UART_SetConfig+0x1ba>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d00a      	beq.n	8006d82 <UART_SetConfig+0x1a2>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d814      	bhi.n	8006d9a <UART_SetConfig+0x1ba>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <UART_SetConfig+0x19a>
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d008      	beq.n	8006d8a <UART_SetConfig+0x1aa>
 8006d78:	e00f      	b.n	8006d9a <UART_SetConfig+0x1ba>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d80:	e0ad      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d82:	2302      	movs	r3, #2
 8006d84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d88:	e0a9      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d8a:	2304      	movs	r3, #4
 8006d8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d90:	e0a5      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d92:	2308      	movs	r3, #8
 8006d94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d98:	e0a1      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006d9a:	2310      	movs	r3, #16
 8006d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da0:	e09d      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a4a      	ldr	r2, [pc, #296]	@ (8006ed0 <UART_SetConfig+0x2f0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d125      	bne.n	8006df8 <UART_SetConfig+0x218>
 8006dac:	4b45      	ldr	r3, [pc, #276]	@ (8006ec4 <UART_SetConfig+0x2e4>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006db8:	d016      	beq.n	8006de8 <UART_SetConfig+0x208>
 8006dba:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dbc:	d818      	bhi.n	8006df0 <UART_SetConfig+0x210>
 8006dbe:	2b80      	cmp	r3, #128	@ 0x80
 8006dc0:	d00a      	beq.n	8006dd8 <UART_SetConfig+0x1f8>
 8006dc2:	2b80      	cmp	r3, #128	@ 0x80
 8006dc4:	d814      	bhi.n	8006df0 <UART_SetConfig+0x210>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <UART_SetConfig+0x1f0>
 8006dca:	2b40      	cmp	r3, #64	@ 0x40
 8006dcc:	d008      	beq.n	8006de0 <UART_SetConfig+0x200>
 8006dce:	e00f      	b.n	8006df0 <UART_SetConfig+0x210>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd6:	e082      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dde:	e07e      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006de0:	2304      	movs	r3, #4
 8006de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de6:	e07a      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dee:	e076      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006df0:	2310      	movs	r3, #16
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df6:	e072      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a35      	ldr	r2, [pc, #212]	@ (8006ed4 <UART_SetConfig+0x2f4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d12a      	bne.n	8006e58 <UART_SetConfig+0x278>
 8006e02:	4b30      	ldr	r3, [pc, #192]	@ (8006ec4 <UART_SetConfig+0x2e4>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e10:	d01a      	beq.n	8006e48 <UART_SetConfig+0x268>
 8006e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e16:	d81b      	bhi.n	8006e50 <UART_SetConfig+0x270>
 8006e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e1c:	d00c      	beq.n	8006e38 <UART_SetConfig+0x258>
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e22:	d815      	bhi.n	8006e50 <UART_SetConfig+0x270>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <UART_SetConfig+0x250>
 8006e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e2c:	d008      	beq.n	8006e40 <UART_SetConfig+0x260>
 8006e2e:	e00f      	b.n	8006e50 <UART_SetConfig+0x270>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e36:	e052      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3e:	e04e      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e46:	e04a      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4e:	e046      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e56:	e042      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a17      	ldr	r2, [pc, #92]	@ (8006ebc <UART_SetConfig+0x2dc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d13a      	bne.n	8006ed8 <UART_SetConfig+0x2f8>
 8006e62:	4b18      	ldr	r3, [pc, #96]	@ (8006ec4 <UART_SetConfig+0x2e4>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e70:	d01a      	beq.n	8006ea8 <UART_SetConfig+0x2c8>
 8006e72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e76:	d81b      	bhi.n	8006eb0 <UART_SetConfig+0x2d0>
 8006e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7c:	d00c      	beq.n	8006e98 <UART_SetConfig+0x2b8>
 8006e7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e82:	d815      	bhi.n	8006eb0 <UART_SetConfig+0x2d0>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <UART_SetConfig+0x2b0>
 8006e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e8c:	d008      	beq.n	8006ea0 <UART_SetConfig+0x2c0>
 8006e8e:	e00f      	b.n	8006eb0 <UART_SetConfig+0x2d0>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e96:	e022      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9e:	e01e      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea6:	e01a      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eae:	e016      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb6:	e012      	b.n	8006ede <UART_SetConfig+0x2fe>
 8006eb8:	cfff69f3 	.word	0xcfff69f3
 8006ebc:	40008000 	.word	0x40008000
 8006ec0:	40013800 	.word	0x40013800
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40004400 	.word	0x40004400
 8006ecc:	40004800 	.word	0x40004800
 8006ed0:	40004c00 	.word	0x40004c00
 8006ed4:	40005000 	.word	0x40005000
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4aae      	ldr	r2, [pc, #696]	@ (800719c <UART_SetConfig+0x5bc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	f040 8097 	bne.w	8007018 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006eee:	2b08      	cmp	r3, #8
 8006ef0:	d823      	bhi.n	8006f3a <UART_SetConfig+0x35a>
 8006ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <UART_SetConfig+0x318>)
 8006ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f3b 	.word	0x08006f3b
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f3b 	.word	0x08006f3b
 8006f08:	08006f2b 	.word	0x08006f2b
 8006f0c:	08006f3b 	.word	0x08006f3b
 8006f10:	08006f3b 	.word	0x08006f3b
 8006f14:	08006f3b 	.word	0x08006f3b
 8006f18:	08006f33 	.word	0x08006f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1c:	f7fe f92a 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8006f20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f22:	e010      	b.n	8006f46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f24:	4b9e      	ldr	r3, [pc, #632]	@ (80071a0 <UART_SetConfig+0x5c0>)
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f28:	e00d      	b.n	8006f46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2a:	f7fe f8b5 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8006f2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f38:	e005      	b.n	8006f46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8130 	beq.w	80071ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	4a94      	ldr	r2, [pc, #592]	@ (80071a4 <UART_SetConfig+0x5c4>)
 8006f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	4613      	mov	r3, r2
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	4413      	add	r3, r2
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d305      	bcc.n	8006f7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d903      	bls.n	8006f86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f84:	e113      	b.n	80071ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	2200      	movs	r2, #0
 8006f8a:	60bb      	str	r3, [r7, #8]
 8006f8c:	60fa      	str	r2, [r7, #12]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	4a84      	ldr	r2, [pc, #528]	@ (80071a4 <UART_SetConfig+0x5c4>)
 8006f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fa8:	f7f9 f956 	bl	8000258 <__aeabi_uldivmod>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	020b      	lsls	r3, r1, #8
 8006fbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fc2:	0202      	lsls	r2, r0, #8
 8006fc4:	6979      	ldr	r1, [r7, #20]
 8006fc6:	6849      	ldr	r1, [r1, #4]
 8006fc8:	0849      	lsrs	r1, r1, #1
 8006fca:	2000      	movs	r0, #0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	4605      	mov	r5, r0
 8006fd0:	eb12 0804 	adds.w	r8, r2, r4
 8006fd4:	eb43 0905 	adc.w	r9, r3, r5
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	469a      	mov	sl, r3
 8006fe0:	4693      	mov	fp, r2
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	465b      	mov	r3, fp
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	4649      	mov	r1, r9
 8006fea:	f7f9 f935 	bl	8000258 <__aeabi_uldivmod>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ffc:	d308      	bcc.n	8007010 <UART_SetConfig+0x430>
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007004:	d204      	bcs.n	8007010 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a3a      	ldr	r2, [r7, #32]
 800700c:	60da      	str	r2, [r3, #12]
 800700e:	e0ce      	b.n	80071ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007016:	e0ca      	b.n	80071ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007020:	d166      	bne.n	80070f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007022:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007026:	2b08      	cmp	r3, #8
 8007028:	d827      	bhi.n	800707a <UART_SetConfig+0x49a>
 800702a:	a201      	add	r2, pc, #4	@ (adr r2, 8007030 <UART_SetConfig+0x450>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007055 	.word	0x08007055
 8007034:	0800705d 	.word	0x0800705d
 8007038:	08007065 	.word	0x08007065
 800703c:	0800707b 	.word	0x0800707b
 8007040:	0800706b 	.word	0x0800706b
 8007044:	0800707b 	.word	0x0800707b
 8007048:	0800707b 	.word	0x0800707b
 800704c:	0800707b 	.word	0x0800707b
 8007050:	08007073 	.word	0x08007073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007054:	f7fe f88e 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8007058:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800705a:	e014      	b.n	8007086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800705c:	f7fe f8a0 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8007060:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007062:	e010      	b.n	8007086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007064:	4b4e      	ldr	r3, [pc, #312]	@ (80071a0 <UART_SetConfig+0x5c0>)
 8007066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007068:	e00d      	b.n	8007086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706a:	f7fe f815 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800706e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007070:	e009      	b.n	8007086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007078:	e005      	b.n	8007086 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8090 	beq.w	80071ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	4a44      	ldr	r2, [pc, #272]	@ (80071a4 <UART_SetConfig+0x5c4>)
 8007094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007098:	461a      	mov	r2, r3
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a0:	005a      	lsls	r2, r3, #1
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	085b      	lsrs	r3, r3, #1
 80070a8:	441a      	add	r2, r3
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	2b0f      	cmp	r3, #15
 80070b8:	d916      	bls.n	80070e8 <UART_SetConfig+0x508>
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c0:	d212      	bcs.n	80070e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f023 030f 	bic.w	r3, r3, #15
 80070ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	8bfb      	ldrh	r3, [r7, #30]
 80070da:	4313      	orrs	r3, r2
 80070dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	8bfa      	ldrh	r2, [r7, #30]
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	e062      	b.n	80071ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070ee:	e05e      	b.n	80071ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d828      	bhi.n	800714a <UART_SetConfig+0x56a>
 80070f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <UART_SetConfig+0x520>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007125 	.word	0x08007125
 8007104:	0800712d 	.word	0x0800712d
 8007108:	08007135 	.word	0x08007135
 800710c:	0800714b 	.word	0x0800714b
 8007110:	0800713b 	.word	0x0800713b
 8007114:	0800714b 	.word	0x0800714b
 8007118:	0800714b 	.word	0x0800714b
 800711c:	0800714b 	.word	0x0800714b
 8007120:	08007143 	.word	0x08007143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007124:	f7fe f826 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8007128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800712a:	e014      	b.n	8007156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800712c:	f7fe f838 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8007130:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007132:	e010      	b.n	8007156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007134:	4b1a      	ldr	r3, [pc, #104]	@ (80071a0 <UART_SetConfig+0x5c0>)
 8007136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007138:	e00d      	b.n	8007156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713a:	f7fd ffad 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800713e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007140:	e009      	b.n	8007156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007148:	e005      	b.n	8007156 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007154:	bf00      	nop
    }

    if (pclk != 0U)
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	d028      	beq.n	80071ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007160:	4a10      	ldr	r2, [pc, #64]	@ (80071a4 <UART_SetConfig+0x5c4>)
 8007162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007166:	461a      	mov	r2, r3
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	fbb3 f2f2 	udiv	r2, r3, r2
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	441a      	add	r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	fbb2 f3f3 	udiv	r3, r2, r3
 800717e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	2b0f      	cmp	r3, #15
 8007184:	d910      	bls.n	80071a8 <UART_SetConfig+0x5c8>
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800718c:	d20c      	bcs.n	80071a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	b29a      	uxth	r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60da      	str	r2, [r3, #12]
 8007198:	e009      	b.n	80071ae <UART_SetConfig+0x5ce>
 800719a:	bf00      	nop
 800719c:	40008000 	.word	0x40008000
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	080078a4 	.word	0x080078a4
      }
      else
      {
        ret = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2200      	movs	r2, #0
 80071c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2200      	movs	r2, #0
 80071c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80071ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3730      	adds	r7, #48	@ 0x30
 80071d2:	46bd      	mov	sp, r7
 80071d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	f003 0308 	and.w	r3, r3, #8
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01a      	beq.n	80072ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072d6:	d10a      	bne.n	80072ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	605a      	str	r2, [r3, #4]
  }
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b098      	sub	sp, #96	@ 0x60
 8007320:	af02      	add	r7, sp, #8
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800732c:	f7fa fe9a 	bl	8002064 <HAL_GetTick>
 8007330:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b08      	cmp	r3, #8
 800733e:	d12f      	bne.n	80073a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007340:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007348:	2200      	movs	r2, #0
 800734a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f88e 	bl	8007470 <UART_WaitOnFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d022      	beq.n	80073a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800736e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007378:	647b      	str	r3, [r7, #68]	@ 0x44
 800737a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800737e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e6      	bne.n	800735a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e063      	b.n	8007468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d149      	bne.n	8007442 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b6:	2200      	movs	r2, #0
 80073b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f857 	bl	8007470 <UART_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d03c      	beq.n	8007442 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	623b      	str	r3, [r7, #32]
   return(result);
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e6      	bne.n	80073c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	60fb      	str	r3, [r7, #12]
   return(result);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3308      	adds	r3, #8
 8007418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800741a:	61fa      	str	r2, [r7, #28]
 800741c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	69b9      	ldr	r1, [r7, #24]
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	617b      	str	r3, [r7, #20]
   return(result);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e5      	bne.n	80073fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e012      	b.n	8007468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3758      	adds	r7, #88	@ 0x58
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	4613      	mov	r3, r2
 800747e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007480:	e04f      	b.n	8007522 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d04b      	beq.n	8007522 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800748a:	f7fa fdeb 	bl	8002064 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	429a      	cmp	r2, r3
 8007498:	d302      	bcc.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e04e      	b.n	8007542 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d037      	beq.n	8007522 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b80      	cmp	r3, #128	@ 0x80
 80074b6:	d034      	beq.n	8007522 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b40      	cmp	r3, #64	@ 0x40
 80074bc:	d031      	beq.n	8007522 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d110      	bne.n	80074ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2208      	movs	r2, #8
 80074d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f838 	bl	800754a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2208      	movs	r2, #8
 80074de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e029      	b.n	8007542 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074fc:	d111      	bne.n	8007522 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 f81e 	bl	800754a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2220      	movs	r2, #32
 8007512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e00f      	b.n	8007542 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4013      	ands	r3, r2
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	429a      	cmp	r2, r3
 8007530:	bf0c      	ite	eq
 8007532:	2301      	moveq	r3, #1
 8007534:	2300      	movne	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	429a      	cmp	r2, r3
 800753e:	d0a0      	beq.n	8007482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800754a:	b480      	push	{r7}
 800754c:	b095      	sub	sp, #84	@ 0x54
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007570:	643b      	str	r3, [r7, #64]	@ 0x40
 8007572:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800757e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e6      	bne.n	8007552 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3308      	adds	r3, #8
 800758a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	61fb      	str	r3, [r7, #28]
   return(result);
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800759a:	f023 0301 	bic.w	r3, r3, #1
 800759e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3308      	adds	r3, #8
 80075a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e3      	bne.n	8007584 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d118      	bne.n	80075f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f023 0310 	bic.w	r3, r3, #16
 80075d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075e2:	61bb      	str	r3, [r7, #24]
 80075e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6979      	ldr	r1, [r7, #20]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	613b      	str	r3, [r7, #16]
   return(result);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e6      	bne.n	80075c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800760a:	bf00      	nop
 800760c:	3754      	adds	r7, #84	@ 0x54
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_UARTEx_DisableFifoMode+0x16>
 8007628:	2302      	movs	r3, #2
 800762a:	e027      	b.n	800767c <HAL_UARTEx_DisableFifoMode+0x66>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2224      	movs	r2, #36	@ 0x24
 8007638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0201 	bic.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800765a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800769c:	2302      	movs	r3, #2
 800769e:	e02d      	b.n	80076fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2224      	movs	r2, #36	@ 0x24
 80076ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f84f 	bl	8007780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007718:	2302      	movs	r3, #2
 800771a:	e02d      	b.n	8007778 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2224      	movs	r2, #36	@ 0x24
 8007728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0201 	bic.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f811 	bl	8007780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800778c:	2b00      	cmp	r3, #0
 800778e:	d108      	bne.n	80077a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077a0:	e031      	b.n	8007806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077a2:	2308      	movs	r3, #8
 80077a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077a6:	2308      	movs	r3, #8
 80077a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	0e5b      	lsrs	r3, r3, #25
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	0f5b      	lsrs	r3, r3, #29
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	7b3a      	ldrb	r2, [r7, #12]
 80077ce:	4911      	ldr	r1, [pc, #68]	@ (8007814 <UARTEx_SetNbDataToProcess+0x94>)
 80077d0:	5c8a      	ldrb	r2, [r1, r2]
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077d6:	7b3a      	ldrb	r2, [r7, #12]
 80077d8:	490f      	ldr	r1, [pc, #60]	@ (8007818 <UARTEx_SetNbDataToProcess+0x98>)
 80077da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	7b7a      	ldrb	r2, [r7, #13]
 80077ec:	4909      	ldr	r1, [pc, #36]	@ (8007814 <UARTEx_SetNbDataToProcess+0x94>)
 80077ee:	5c8a      	ldrb	r2, [r1, r2]
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077f4:	7b7a      	ldrb	r2, [r7, #13]
 80077f6:	4908      	ldr	r1, [pc, #32]	@ (8007818 <UARTEx_SetNbDataToProcess+0x98>)
 80077f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	080078bc 	.word	0x080078bc
 8007818:	080078c4 	.word	0x080078c4

0800781c <memset>:
 800781c:	4402      	add	r2, r0
 800781e:	4603      	mov	r3, r0
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <memset+0xa>
 8007824:	4770      	bx	lr
 8007826:	f803 1b01 	strb.w	r1, [r3], #1
 800782a:	e7f9      	b.n	8007820 <memset+0x4>

0800782c <__libc_init_array>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4d0d      	ldr	r5, [pc, #52]	@ (8007864 <__libc_init_array+0x38>)
 8007830:	4c0d      	ldr	r4, [pc, #52]	@ (8007868 <__libc_init_array+0x3c>)
 8007832:	1b64      	subs	r4, r4, r5
 8007834:	10a4      	asrs	r4, r4, #2
 8007836:	2600      	movs	r6, #0
 8007838:	42a6      	cmp	r6, r4
 800783a:	d109      	bne.n	8007850 <__libc_init_array+0x24>
 800783c:	4d0b      	ldr	r5, [pc, #44]	@ (800786c <__libc_init_array+0x40>)
 800783e:	4c0c      	ldr	r4, [pc, #48]	@ (8007870 <__libc_init_array+0x44>)
 8007840:	f000 f818 	bl	8007874 <_init>
 8007844:	1b64      	subs	r4, r4, r5
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	2600      	movs	r6, #0
 800784a:	42a6      	cmp	r6, r4
 800784c:	d105      	bne.n	800785a <__libc_init_array+0x2e>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	f855 3b04 	ldr.w	r3, [r5], #4
 8007854:	4798      	blx	r3
 8007856:	3601      	adds	r6, #1
 8007858:	e7ee      	b.n	8007838 <__libc_init_array+0xc>
 800785a:	f855 3b04 	ldr.w	r3, [r5], #4
 800785e:	4798      	blx	r3
 8007860:	3601      	adds	r6, #1
 8007862:	e7f2      	b.n	800784a <__libc_init_array+0x1e>
 8007864:	080078d4 	.word	0x080078d4
 8007868:	080078d4 	.word	0x080078d4
 800786c:	080078d4 	.word	0x080078d4
 8007870:	080078d8 	.word	0x080078d8

08007874 <_init>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	bf00      	nop
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr

08007880 <_fini>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr
