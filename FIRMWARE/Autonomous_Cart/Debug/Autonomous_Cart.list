
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b48  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d60  08007d60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d68  08007d68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000010  08007d80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08007d80  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d694  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b3f  00000000  00000000  0003d717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  00041258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136a  00000000  00000000  00042b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ac4  00000000  00000000  00043eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021603  00000000  00000000  0004796e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112467  00000000  00000000  00068f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a14  00000000  00000000  0017b3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00181dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d08 	.word	0x08007d08

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007d08 	.word	0x08007d08

08000218 <__aeabi_d2uiz>:
 8000218:	004a      	lsls	r2, r1, #1
 800021a:	d211      	bcs.n	8000240 <__aeabi_d2uiz+0x28>
 800021c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000220:	d211      	bcs.n	8000246 <__aeabi_d2uiz+0x2e>
 8000222:	d50d      	bpl.n	8000240 <__aeabi_d2uiz+0x28>
 8000224:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000228:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800022c:	d40e      	bmi.n	800024c <__aeabi_d2uiz+0x34>
 800022e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000236:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800023a:	fa23 f002 	lsr.w	r0, r3, r2
 800023e:	4770      	bx	lr
 8000240:	f04f 0000 	mov.w	r0, #0
 8000244:	4770      	bx	lr
 8000246:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800024a:	d102      	bne.n	8000252 <__aeabi_d2uiz+0x3a>
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	4770      	bx	lr
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	4770      	bx	lr

08000258 <__aeabi_uldivmod>:
 8000258:	b953      	cbnz	r3, 8000270 <__aeabi_uldivmod+0x18>
 800025a:	b94a      	cbnz	r2, 8000270 <__aeabi_uldivmod+0x18>
 800025c:	2900      	cmp	r1, #0
 800025e:	bf08      	it	eq
 8000260:	2800      	cmpeq	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	f04f 31ff 	movne.w	r1, #4294967295
 8000268:	f04f 30ff 	movne.w	r0, #4294967295
 800026c:	f000 b970 	b.w	8000550 <__aeabi_idiv0>
 8000270:	f1ad 0c08 	sub.w	ip, sp, #8
 8000274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000284:	b004      	add	sp, #16
 8000286:	4770      	bx	lr

08000288 <__udivmoddi4>:
 8000288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800028c:	9e08      	ldr	r6, [sp, #32]
 800028e:	460d      	mov	r5, r1
 8000290:	4604      	mov	r4, r0
 8000292:	460f      	mov	r7, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14a      	bne.n	800032e <__udivmoddi4+0xa6>
 8000298:	428a      	cmp	r2, r1
 800029a:	4694      	mov	ip, r2
 800029c:	d965      	bls.n	800036a <__udivmoddi4+0xe2>
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	b143      	cbz	r3, 80002b6 <__udivmoddi4+0x2e>
 80002a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a8:	f1c3 0220 	rsb	r2, r3, #32
 80002ac:	409f      	lsls	r7, r3
 80002ae:	fa20 f202 	lsr.w	r2, r0, r2
 80002b2:	4317      	orrs	r7, r2
 80002b4:	409c      	lsls	r4, r3
 80002b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ba:	fa1f f58c 	uxth.w	r5, ip
 80002be:	fbb7 f1fe 	udiv	r1, r7, lr
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002cc:	fb01 f005 	mul.w	r0, r1, r5
 80002d0:	4290      	cmp	r0, r2
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x62>
 80002d4:	eb1c 0202 	adds.w	r2, ip, r2
 80002d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002dc:	f080 811c 	bcs.w	8000518 <__udivmoddi4+0x290>
 80002e0:	4290      	cmp	r0, r2
 80002e2:	f240 8119 	bls.w	8000518 <__udivmoddi4+0x290>
 80002e6:	3902      	subs	r1, #2
 80002e8:	4462      	add	r2, ip
 80002ea:	1a12      	subs	r2, r2, r0
 80002ec:	b2a4      	uxth	r4, r4
 80002ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fa:	fb00 f505 	mul.w	r5, r0, r5
 80002fe:	42a5      	cmp	r5, r4
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x90>
 8000302:	eb1c 0404 	adds.w	r4, ip, r4
 8000306:	f100 32ff 	add.w	r2, r0, #4294967295
 800030a:	f080 8107 	bcs.w	800051c <__udivmoddi4+0x294>
 800030e:	42a5      	cmp	r5, r4
 8000310:	f240 8104 	bls.w	800051c <__udivmoddi4+0x294>
 8000314:	4464      	add	r4, ip
 8000316:	3802      	subs	r0, #2
 8000318:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	2100      	movs	r1, #0
 8000320:	b11e      	cbz	r6, 800032a <__udivmoddi4+0xa2>
 8000322:	40dc      	lsrs	r4, r3
 8000324:	2300      	movs	r3, #0
 8000326:	e9c6 4300 	strd	r4, r3, [r6]
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	428b      	cmp	r3, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000332:	2e00      	cmp	r6, #0
 8000334:	f000 80ed 	beq.w	8000512 <__udivmoddi4+0x28a>
 8000338:	2100      	movs	r1, #0
 800033a:	e9c6 0500 	strd	r0, r5, [r6]
 800033e:	4608      	mov	r0, r1
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	fab3 f183 	clz	r1, r3
 8000348:	2900      	cmp	r1, #0
 800034a:	d149      	bne.n	80003e0 <__udivmoddi4+0x158>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d302      	bcc.n	8000356 <__udivmoddi4+0xce>
 8000350:	4282      	cmp	r2, r0
 8000352:	f200 80f8 	bhi.w	8000546 <__udivmoddi4+0x2be>
 8000356:	1a84      	subs	r4, r0, r2
 8000358:	eb65 0203 	sbc.w	r2, r5, r3
 800035c:	2001      	movs	r0, #1
 800035e:	4617      	mov	r7, r2
 8000360:	2e00      	cmp	r6, #0
 8000362:	d0e2      	beq.n	800032a <__udivmoddi4+0xa2>
 8000364:	e9c6 4700 	strd	r4, r7, [r6]
 8000368:	e7df      	b.n	800032a <__udivmoddi4+0xa2>
 800036a:	b902      	cbnz	r2, 800036e <__udivmoddi4+0xe6>
 800036c:	deff      	udf	#255	; 0xff
 800036e:	fab2 f382 	clz	r3, r2
 8000372:	2b00      	cmp	r3, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x210>
 8000378:	1a8a      	subs	r2, r1, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2101      	movs	r1, #1
 8000384:	fbb2 f5f7 	udiv	r5, r2, r7
 8000388:	fb07 2015 	mls	r0, r7, r5, r2
 800038c:	0c22      	lsrs	r2, r4, #16
 800038e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000392:	fb0e f005 	mul.w	r0, lr, r5
 8000396:	4290      	cmp	r0, r2
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x124>
 800039a:	eb1c 0202 	adds.w	r2, ip, r2
 800039e:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x122>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2b8>
 80003aa:	4645      	mov	r5, r8
 80003ac:	1a12      	subs	r2, r2, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b4:	fb07 2210 	mls	r2, r7, r0, r2
 80003b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x14e>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x14c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2c2>
 80003d4:	4610      	mov	r0, r2
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003de:	e79f      	b.n	8000320 <__udivmoddi4+0x98>
 80003e0:	f1c1 0720 	rsb	r7, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa05 f401 	lsl.w	r4, r5, r1
 80003f2:	fa20 f307 	lsr.w	r3, r0, r7
 80003f6:	40fd      	lsrs	r5, r7
 80003f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	fb09 5518 	mls	r5, r9, r8, r5
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000410:	fb08 f50e 	mul.w	r5, r8, lr
 8000414:	42a5      	cmp	r5, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	fa00 f001 	lsl.w	r0, r0, r1
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b0>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2b4>
 800042c:	42a5      	cmp	r5, r4
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2b4>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4464      	add	r4, ip
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	b29d      	uxth	r5, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000448:	fb03 fe0e 	mul.w	lr, r3, lr
 800044c:	45a6      	cmp	lr, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1da>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f103 35ff 	add.w	r5, r3, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2ac>
 800045a:	45a6      	cmp	lr, r4
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2ac>
 800045e:	3b02      	subs	r3, #2
 8000460:	4464      	add	r4, ip
 8000462:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000466:	fba3 9502 	umull	r9, r5, r3, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	42ac      	cmp	r4, r5
 8000470:	46c8      	mov	r8, r9
 8000472:	46ae      	mov	lr, r5
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x29c>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x298>
 8000478:	b156      	cbz	r6, 8000490 <__udivmoddi4+0x208>
 800047a:	ebb0 0208 	subs.w	r2, r0, r8
 800047e:	eb64 040e 	sbc.w	r4, r4, lr
 8000482:	fa04 f707 	lsl.w	r7, r4, r7
 8000486:	40ca      	lsrs	r2, r1
 8000488:	40cc      	lsrs	r4, r1
 800048a:	4317      	orrs	r7, r2
 800048c:	e9c6 7400 	strd	r7, r4, [r6]
 8000490:	4618      	mov	r0, r3
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	f1c3 0120 	rsb	r1, r3, #32
 800049c:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a0:	fa20 f201 	lsr.w	r2, r0, r1
 80004a4:	fa25 f101 	lsr.w	r1, r5, r1
 80004a8:	409d      	lsls	r5, r3
 80004aa:	432a      	orrs	r2, r5
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b8:	fb07 1510 	mls	r5, r7, r0, r1
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004c2:	fb00 f50e 	mul.w	r5, r0, lr
 80004c6:	428d      	cmp	r5, r1
 80004c8:	fa04 f403 	lsl.w	r4, r4, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x258>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b0>
 80004d8:	428d      	cmp	r5, r1
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b0>
 80004dc:	3802      	subs	r0, #2
 80004de:	4461      	add	r1, ip
 80004e0:	1b49      	subs	r1, r1, r5
 80004e2:	b292      	uxth	r2, r2
 80004e4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f0:	fb05 f10e 	mul.w	r1, r5, lr
 80004f4:	4291      	cmp	r1, r2
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x282>
 80004f8:	eb1c 0202 	adds.w	r2, ip, r2
 80004fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2a8>
 8000502:	4291      	cmp	r1, r2
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2a8>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	1a52      	subs	r2, r2, r1
 800050c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0xfc>
 8000512:	4631      	mov	r1, r6
 8000514:	4630      	mov	r0, r6
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xa2>
 8000518:	4639      	mov	r1, r7
 800051a:	e6e6      	b.n	80002ea <__udivmoddi4+0x62>
 800051c:	4610      	mov	r0, r2
 800051e:	e6fb      	b.n	8000318 <__udivmoddi4+0x90>
 8000520:	4548      	cmp	r0, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f0>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb65 0e0c 	sbc.w	lr, r5, ip
 800052c:	3b01      	subs	r3, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f0>
 8000530:	4645      	mov	r5, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x282>
 8000534:	462b      	mov	r3, r5
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1da>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x258>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b0>
 8000540:	3d02      	subs	r5, #2
 8000542:	4462      	add	r2, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x124>
 8000546:	4608      	mov	r0, r1
 8000548:	e70a      	b.n	8000360 <__udivmoddi4+0xd8>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x14e>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <vPowerTrainSystemInit+0x20>)
 800055a:	f004 fdc9 	bl	80050f0 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 800055e:	2100      	movs	r1, #0
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <vPowerTrainSystemInit+0x20>)
 8000562:	f004 ff05 	bl	8005370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 8000566:	2104      	movs	r1, #4
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <vPowerTrainSystemInit+0x20>)
 800056a:	f004 ff01 	bl	8005370 <HAL_TIM_PWM_Start>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200004a4 	.word	0x200004a4

08000578 <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <vPowerTrainSystemSetMotorDirection+0x1c>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d01f      	beq.n	80005d2 <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000592:	e040      	b.n	8000616 <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10b      	bne.n	80005b2 <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005a2:	f003 fbaf 	bl	8003d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005ae:	f003 fba9 	bl	8003d04 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d12b      	bne.n	8000610 <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4818      	ldr	r0, [pc, #96]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005c0:	f003 fba0 	bl	8003d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005cc:	f003 fb9a 	bl	8003d04 <HAL_GPIO_WritePin>
			} break;
 80005d0:	e01e      	b.n	8000610 <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10b      	bne.n	80005f0 <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005de:	f003 fb91 	bl	8003d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f003 fb8a 	bl	8003d04 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10e      	bne.n	8000614 <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005fc:	f003 fb82 	bl	8003d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f003 fb7b 	bl	8003d04 <HAL_GPIO_WritePin>
			} break;
 800060e:	e001      	b.n	8000614 <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000614:	bf00      	nop
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	48000400 	.word	0x48000400

08000624 <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	ed87 0b00 	vstr	d0, [r7]
 8000630:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <vPowerTrainSystemSetMotorSpeed+0x1a>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d009      	beq.n	8000650 <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 800063c:	e011      	b.n	8000662 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000640:	681c      	ldr	r4, [r3, #0]
 8000642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000646:	f7ff fde7 	bl	8000218 <__aeabi_d2uiz>
 800064a:	4603      	mov	r3, r0
 800064c:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 800064e:	e008      	b.n	8000662 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000652:	681c      	ldr	r4, [r3, #0]
 8000654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000658:	f7ff fdde 	bl	8000218 <__aeabi_d2uiz>
 800065c:	4603      	mov	r3, r0
 800065e:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
 8000660:	bf00      	nop
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	200004a4 	.word	0x200004a4

08000670 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2220      	movs	r2, #32
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f007 fb11 	bl	8007cb0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000694:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800069c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006fa:	f001 ff8d 	bl	8002618 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000704:	f000 ffa8 	bl	8001658 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4619      	mov	r1, r3
 8000712:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000714:	f002 fda2 	bl	800325c <HAL_ADCEx_MultiModeConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 ff9b 	bl	8001658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_ADC1_Init+0xec>)
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000726:	2306      	movs	r3, #6
 8000728:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072e:	237f      	movs	r3, #127	; 0x7f
 8000730:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000732:	2304      	movs	r3, #4
 8000734:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000740:	f002 f926 	bl	8002990 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800074a:	f000 ff85 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3730      	adds	r7, #48	; 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000002c 	.word	0x2000002c
 800075c:	04300002 	.word	0x04300002

08000760 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fa9f 	bl	8007cb0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_ADC2_Init+0xdc>)
 8000774:	4a32      	ldr	r2, [pc, #200]	; (8000840 <MX_ADC2_Init+0xe0>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <MX_ADC2_Init+0xdc>)
 800077a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800077e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_ADC2_Init+0xdc>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_ADC2_Init+0xdc>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_ADC2_Init+0xdc>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_ADC2_Init+0xdc>)
 8000794:	2201      	movs	r2, #1
 8000796:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_ADC2_Init+0xdc>)
 800079a:	2204      	movs	r2, #4
 800079c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC2_Init+0xdc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_ADC2_Init+0xdc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_ADC2_Init+0xdc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ADC2_Init+0xdc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC2_Init+0xdc>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC2_Init+0xdc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_ADC2_Init+0xdc>)
 80007dc:	f001 ff1c 	bl	8002618 <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007e6:	f000 ff37 	bl	8001658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ADC2_Init+0xe4>)
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ee:	2306      	movs	r3, #6
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	237f      	movs	r3, #127	; 0x7f
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fa:	2304      	movs	r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_ADC2_Init+0xdc>)
 8000808:	f002 f8c2 	bl	8002990 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 ff21 	bl	8001658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_ADC2_Init+0xe8>)
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800081a:	230c      	movs	r3, #12
 800081c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_ADC2_Init+0xdc>)
 8000824:	f002 f8b4 	bl	8002990 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800082e:	f000 ff13 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000098 	.word	0x20000098
 8000840:	50000100 	.word	0x50000100
 8000844:	0c900008 	.word	0x0c900008
 8000848:	10c00010 	.word	0x10c00010

0800084c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2220      	movs	r2, #32
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f007 fa23 	bl	8007cb0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_ADC3_Init+0xe4>)
 800086c:	4a31      	ldr	r2, [pc, #196]	; (8000934 <MX_ADC3_Init+0xe8>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000872:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000876:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000878:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_ADC3_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC3_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000892:	2204      	movs	r2, #4
 8000894:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_ADC3_Init+0xe4>)
 800089e:	2201      	movs	r2, #1
 80008a0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008d4:	f001 fea0 	bl	8002618 <HAL_ADC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 febb 	bl	8001658 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008ee:	f002 fcb5 	bl	800325c <HAL_ADCEx_MultiModeConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008f8:	f000 feae 	bl	8001658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ADC3_Init+0xec>)
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000900:	2306      	movs	r3, #6
 8000902:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000904:	2302      	movs	r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000908:	237f      	movs	r3, #127	; 0x7f
 800090a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC3_Init+0xe4>)
 800091a:	f002 f839 	bl	8002990 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000924:	f000 fe98 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000104 	.word	0x20000104
 8000934:	50000400 	.word	0x50000400
 8000938:	14f00020 	.word	0x14f00020

0800093c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2220      	movs	r2, #32
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f007 f9b1 	bl	8007cb0 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <MX_ADC4_Init+0xc4>)
 8000952:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000956:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800095a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_ADC4_Init+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC4_Init+0xc0>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000976:	2204      	movs	r2, #4
 8000978:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC4_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000982:	2201      	movs	r2, #1
 8000984:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000988:	2201      	movs	r2, #1
 800098a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_ADC4_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_ADC4_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009b8:	f001 fe2e 	bl	8002618 <HAL_ADC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80009c2:	f000 fe49 	bl	8001658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_ADC4_Init+0xc8>)
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ca:	2306      	movs	r3, #6
 80009cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d2:	237f      	movs	r3, #127	; 0x7f
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d6:	2304      	movs	r3, #4
 80009d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009e4:	f001 ffd4 	bl	8002990 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80009ee:	f000 fe33 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000170 	.word	0x20000170
 8000a00:	50000500 	.word	0x50000500
 8000a04:	14f00020 	.word	0x14f00020

08000a08 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f007 f94b 	bl	8007cb0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <MX_ADC5_Init+0xc4>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a84:	f001 fdc8 	bl	8002618 <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000a8e:	f000 fde3 	bl	8001658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_ADC5_Init+0xc8>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9e:	237f      	movs	r3, #127	; 0x7f
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000ab0:	f001 ff6e 	bl	8002990 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000aba:	f000 fdcd 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200001dc 	.word	0x200001dc
 8000acc:	50000600 	.word	0x50000600
 8000ad0:	08600004 	.word	0x08600004

08000ad4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0a6      	sub	sp, #152	; 0x98
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af0:	2254      	movs	r2, #84	; 0x54
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 f8db 	bl	8007cb0 <memset>
  if(adcHandle->Instance==ADC1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b02:	d16c      	bne.n	8000bde <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 f845 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b20:	f000 fd9a 	bl	8001658 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b24:	4ba0      	ldr	r3, [pc, #640]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a9f      	ldr	r2, [pc, #636]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b2e:	4b9e      	ldr	r3, [pc, #632]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d10b      	bne.n	8000b4e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b36:	4b9d      	ldr	r3, [pc, #628]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a9c      	ldr	r2, [pc, #624]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b9a      	ldr	r3, [pc, #616]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b97      	ldr	r3, [pc, #604]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a96      	ldr	r2, [pc, #600]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b94      	ldr	r3, [pc, #592]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f002 ff3d 	bl	8003a00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b86:	4b8a      	ldr	r3, [pc, #552]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b88:	4a8a      	ldr	r2, [pc, #552]	; (8000db4 <HAL_ADC_MspInit+0x2e0>)
 8000b8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b8c:	4b88      	ldr	r3, [pc, #544]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b8e:	2205      	movs	r2, #5
 8000b90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b92:	4b87      	ldr	r3, [pc, #540]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b85      	ldr	r3, [pc, #532]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba4:	4b82      	ldr	r3, [pc, #520]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000baa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bac:	4b80      	ldr	r3, [pc, #512]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bb4:	4b7e      	ldr	r3, [pc, #504]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b7d      	ldr	r3, [pc, #500]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bc0:	487b      	ldr	r0, [pc, #492]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bc2:	f002 fd63 	bl	800368c <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000bcc:	f000 fd44 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a77      	ldr	r2, [pc, #476]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bd4:	655a      	str	r2, [r3, #84]	; 0x54
 8000bd6:	4a76      	ldr	r2, [pc, #472]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000bdc:	e1e0      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a75      	ldr	r2, [pc, #468]	; (8000db8 <HAL_ADC_MspInit+0x2e4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d16c      	bne.n	8000cc2 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bf2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 ffd3 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000c04:	f000 fd28 	bl	8001658 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c08:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a66      	ldr	r2, [pc, #408]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c12:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10b      	bne.n	8000c32 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c1a:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a63      	ldr	r2, [pc, #396]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b61      	ldr	r3, [pc, #388]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a5d      	ldr	r2, [pc, #372]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000c4a:	23c0      	movs	r3, #192	; 0xc0
 8000c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c50:	2303      	movs	r3, #3
 8000c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f002 fecb 	bl	8003a00 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000c6a:	4b54      	ldr	r3, [pc, #336]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c6c:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <HAL_ADC_MspInit+0x2ec>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c72:	2224      	movs	r2, #36	; 0x24
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c76:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c96:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ca4:	4845      	ldr	r0, [pc, #276]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000ca6:	f002 fcf1 	bl	800368c <HAL_DMA_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000cb0:	f000 fcd2 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000cb8:	655a      	str	r2, [r3, #84]	; 0x54
 8000cba:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000cc0:	e16e      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a3f      	ldr	r2, [pc, #252]	; (8000dc4 <HAL_ADC_MspInit+0x2f0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	f040 8085 	bne.w	8000dd8 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000cd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000cd8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 ff60 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000cea:	f000 fcb5 	bl	8001658 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a34      	ldr	r2, [pc, #208]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a29      	ldr	r2, [pc, #164]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a23      	ldr	r2, [pc, #140]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <HAL_ADC_MspInit+0x2f8>)
 8000d4c:	f002 fe58 	bl	8003a00 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_ADC_MspInit+0x300>)
 8000d54:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d58:	2225      	movs	r2, #37	; 0x25
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d8c:	f002 fc7e 	bl	800368c <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000d96:	f000 fc5f 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d9e:	655a      	str	r2, [r3, #84]	; 0x54
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000da6:	e0fb      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
 8000da8:	20000428 	.word	0x20000428
 8000dac:	40021000 	.word	0x40021000
 8000db0:	20000248 	.word	0x20000248
 8000db4:	40020008 	.word	0x40020008
 8000db8:	50000100 	.word	0x50000100
 8000dbc:	200002a8 	.word	0x200002a8
 8000dc0:	4002001c 	.word	0x4002001c
 8000dc4:	50000400 	.word	0x50000400
 8000dc8:	2000042c 	.word	0x2000042c
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	20000308 	.word	0x20000308
 8000dd4:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a72      	ldr	r2, [pc, #456]	; (8000fa8 <HAL_ADC_MspInit+0x4d4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d16c      	bne.n	8000ebc <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000de8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000dec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fed6 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000dfe:	f000 fc2b 	bl	8001658 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e02:	4b6a      	ldr	r3, [pc, #424]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	4a68      	ldr	r2, [pc, #416]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e0c:	4b67      	ldr	r3, [pc, #412]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10b      	bne.n	8000e2c <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000e14:	4b66      	ldr	r3, [pc, #408]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a65      	ldr	r2, [pc, #404]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4855      	ldr	r0, [pc, #340]	; (8000fb4 <HAL_ADC_MspInit+0x4e0>)
 8000e60:	f002 fdce 	bl	8003a00 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e66:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <HAL_ADC_MspInit+0x4e8>)
 8000e68:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e6c:	2226      	movs	r2, #38	; 0x26
 8000e6e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e76:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e8a:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000e92:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e94:	2220      	movs	r2, #32
 8000e96:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000e9e:	4846      	ldr	r0, [pc, #280]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000ea0:	f002 fbf4 	bl	800368c <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000eaa:	f000 fbd5 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a41      	ldr	r2, [pc, #260]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000eba:	e071      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <HAL_ADC_MspInit+0x4ec>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d16c      	bne.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ed0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fe64 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000ee2:	f000 fbb9 	bl	8001658 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000eee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10b      	bne.n	8000f10 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f002 fd5b 	bl	8003a00 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_ADC_MspInit+0x4f4>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f52:	2227      	movs	r2, #39	; 0x27
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f86:	f002 fb81 	bl	800368c <HAL_DMA_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000f90:	f000 fb62 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	3798      	adds	r7, #152	; 0x98
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	50000500 	.word	0x50000500
 8000fac:	2000042c 	.word	0x2000042c
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	20000368 	.word	0x20000368
 8000fbc:	40020044 	.word	0x40020044
 8000fc0:	50000600 	.word	0x50000600
 8000fc4:	200003c8 	.word	0x200003c8
 8000fc8:	40020058 	.word	0x40020058

08000fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_DMA_Init+0xb0>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <MX_DMA_Init+0xb0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6493      	str	r3, [r2, #72]	; 0x48
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_DMA_Init+0xb0>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_DMA_Init+0xb0>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_DMA_Init+0xb0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_DMA_Init+0xb0>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	200b      	movs	r0, #11
 8001008:	f002 fb0b 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800100c:	200b      	movs	r0, #11
 800100e:	f002 fb22 	bl	8003656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200c      	movs	r0, #12
 8001018:	f002 fb03 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800101c:	200c      	movs	r0, #12
 800101e:	f002 fb1a 	bl	8003656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200d      	movs	r0, #13
 8001028:	f002 fafb 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800102c:	200d      	movs	r0, #13
 800102e:	f002 fb12 	bl	8003656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	200e      	movs	r0, #14
 8001038:	f002 faf3 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800103c:	200e      	movs	r0, #14
 800103e:	f002 fb0a 	bl	8003656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200f      	movs	r0, #15
 8001048:	f002 faeb 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800104c:	200f      	movs	r0, #15
 800104e:	f002 fb02 	bl	8003656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2010      	movs	r0, #16
 8001058:	f002 fae3 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800105c:	2010      	movs	r0, #16
 800105e:	f002 fafa 	bl	8003656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2011      	movs	r0, #17
 8001068:	f002 fadb 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800106c:	2011      	movs	r0, #17
 800106e:	f002 faf2 	bl	8003656 <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <vEncoderSystemInit>:

int* pLeftMotorCount;
int* pRightMotorCount;

//void vEncoderSystemInit(int , int pRightMotorCount) {
void vEncoderSystemInit(int *leftMotorCount, int *rightMotorCount) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]

	pLeftMotorCount = leftMotorCount;
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <vEncoderSystemInit+0x30>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6013      	str	r3, [r2, #0]
	pRightMotorCount = rightMotorCount;
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <vEncoderSystemInit+0x34>)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	6013      	str	r3, [r2, #0]

	HAL_TIM_IC_Start_IT(&LEFT_ENCODER_TIM, ENCODER_CHANNEL);
 8001096:	2100      	movs	r1, #0
 8001098:	4807      	ldr	r0, [pc, #28]	; (80010b8 <vEncoderSystemInit+0x38>)
 800109a:	f004 fadd 	bl	8005658 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&RIGHT_ENCODER_TIM, ENCODER_CHANNEL);
 800109e:	2100      	movs	r1, #0
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <vEncoderSystemInit+0x3c>)
 80010a2:	f004 fad9 	bl	8005658 <HAL_TIM_IC_Start_IT>


}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000438 	.word	0x20000438
 80010b4:	2000043c 	.word	0x2000043c
 80010b8:	20000588 	.word	0x20000588
 80010bc:	200005d4 	.word	0x200005d4

080010c0 <vEncoderSystemExecuteMeasurement>:
void vEncoderSystemExecuteMeasurement(){
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	   // Tempo de amostragem em segundos
	    //float tempo_amostragem_s = tempo_amostragem_ms / 1000.0;

	    // Calcula o RPM
	    //motor 80:1 e sao duas pas logo para uma rotacao temos 160 do encoder
	    rpm_d = (contador_encoder * 60) / (160 * tempo_amostragem_s);
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <vEncoderSystemExecuteMeasurement+0x70>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4619      	mov	r1, r3
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <vEncoderSystemExecuteMeasurement+0x74>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	015b      	lsls	r3, r3, #5
 80010de:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <vEncoderSystemExecuteMeasurement+0x78>)
 80010e4:	6013      	str	r3, [r2, #0]
	    rpm_e = (contador_encoder2 * 60) / (160 * tempo_amostragem_s);
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <vEncoderSystemExecuteMeasurement+0x7c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4613      	mov	r3, r2
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4619      	mov	r1, r3
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <vEncoderSystemExecuteMeasurement+0x74>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	015b      	lsls	r3, r3, #5
 8001100:	fbb1 f3f3 	udiv	r3, r1, r3
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <vEncoderSystemExecuteMeasurement+0x80>)
 8001106:	6013      	str	r3, [r2, #0]
	    // Resetar o contador para a próxima amostragem
	    contador_encoder = 0;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <vEncoderSystemExecuteMeasurement+0x70>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
	    contador_encoder2 = 0;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <vEncoderSystemExecuteMeasurement+0x7c>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
	    *pLeftMotorCount = 0;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <vEncoderSystemExecuteMeasurement+0x84>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	    *pRightMotorCount = 0;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <vEncoderSystemExecuteMeasurement+0x88>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000494 	.word	0x20000494
 8001134:	20000000 	.word	0x20000000
 8001138:	20000430 	.word	0x20000430
 800113c:	20000498 	.word	0x20000498
 8001140:	20000434 	.word	0x20000434
 8001144:	20000438 	.word	0x20000438
 8001148:	2000043c 	.word	0x2000043c

0800114c <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b66      	ldr	r3, [pc, #408]	; (80012fc <MX_GPIO_Init+0x1b0>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a65      	ldr	r2, [pc, #404]	; (80012fc <MX_GPIO_Init+0x1b0>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b63      	ldr	r3, [pc, #396]	; (80012fc <MX_GPIO_Init+0x1b0>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117a:	4b60      	ldr	r3, [pc, #384]	; (80012fc <MX_GPIO_Init+0x1b0>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a5f      	ldr	r2, [pc, #380]	; (80012fc <MX_GPIO_Init+0x1b0>)
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <MX_GPIO_Init+0x1b0>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <MX_GPIO_Init+0x1b0>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a59      	ldr	r2, [pc, #356]	; (80012fc <MX_GPIO_Init+0x1b0>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <MX_GPIO_Init+0x1b0>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b54      	ldr	r3, [pc, #336]	; (80012fc <MX_GPIO_Init+0x1b0>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a53      	ldr	r2, [pc, #332]	; (80012fc <MX_GPIO_Init+0x1b0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b51      	ldr	r3, [pc, #324]	; (80012fc <MX_GPIO_Init+0x1b0>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	4b4e      	ldr	r3, [pc, #312]	; (80012fc <MX_GPIO_Init+0x1b0>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a4d      	ldr	r2, [pc, #308]	; (80012fc <MX_GPIO_Init+0x1b0>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <MX_GPIO_Init+0x1b0>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f002 fd8e 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 80011ee:	4844      	ldr	r0, [pc, #272]	; (8001300 <MX_GPIO_Init+0x1b4>)
 80011f0:	f002 fd88 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 80011f4:	f242 33a0 	movw	r3, #9120	; 0x23a0
 80011f8:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	483e      	ldr	r0, [pc, #248]	; (8001304 <MX_GPIO_Init+0x1b8>)
 800120c:	f002 fbf8 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8001210:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f002 fbe8 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 8001230:	2304      	movs	r3, #4
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001240:	2303      	movs	r3, #3
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	482d      	ldr	r0, [pc, #180]	; (8001300 <MX_GPIO_Init+0x1b4>)
 800124c:	f002 fbd8 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8001250:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001262:	2307      	movs	r3, #7
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4824      	ldr	r0, [pc, #144]	; (8001300 <MX_GPIO_Init+0x1b4>)
 800126e:	f002 fbc7 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 8001272:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	481d      	ldr	r0, [pc, #116]	; (8001300 <MX_GPIO_Init+0x1b4>)
 800128c:	f002 fbb8 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a0:	2302      	movs	r3, #2
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4816      	ldr	r0, [pc, #88]	; (8001304 <MX_GPIO_Init+0x1b8>)
 80012ac:	f002 fba8 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 80012b0:	2304      	movs	r3, #4
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MX_GPIO_Init+0x1bc>)
 80012c6:	f002 fb9b 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 80012ca:	2340      	movs	r3, #64	; 0x40
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4808      	ldr	r0, [pc, #32]	; (8001300 <MX_GPIO_Init+0x1b4>)
 80012e0:	f002 fb8e 	bl	8003a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2028      	movs	r0, #40	; 0x28
 80012ea:	f002 f99a 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ee:	2028      	movs	r0, #40	; 0x28
 80012f0:	f002 f9b1 	bl	8003656 <HAL_NVIC_EnableIRQ>

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00

0800130c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_I2C2_Init+0x74>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <MX_I2C2_Init+0x78>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_I2C2_Init+0x74>)
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <MX_I2C2_Init+0x7c>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_I2C2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_I2C2_Init+0x74>)
 8001324:	2201      	movs	r2, #1
 8001326:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_I2C2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_I2C2_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_I2C2_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_I2C2_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_I2C2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001346:	480e      	ldr	r0, [pc, #56]	; (8001380 <MX_I2C2_Init+0x74>)
 8001348:	f002 fd17 	bl	8003d7a <HAL_I2C_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001352:	f000 f981 	bl	8001658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <MX_I2C2_Init+0x74>)
 800135a:	f002 fda9 	bl	8003eb0 <HAL_I2CEx_ConfigAnalogFilter>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001364:	f000 f978 	bl	8001658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_I2C2_Init+0x74>)
 800136c:	f002 fdeb 	bl	8003f46 <HAL_I2CEx_ConfigDigitalFilter>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001376:	f000 f96f 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000440 	.word	0x20000440
 8001384:	40005800 	.word	0x40005800
 8001388:	30a0a7fb 	.word	0x30a0a7fb

0800138c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0a0      	sub	sp, #128	; 0x80
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	2254      	movs	r2, #84	; 0x54
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f006 fc7f 	bl	8007cb0 <memset>
  if(i2cHandle->Instance==I2C2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a2d      	ldr	r2, [pc, #180]	; (800146c <HAL_I2C_MspInit+0xe0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d153      	bne.n	8001464 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fbeb 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013d4:	f000 f940 	bl	8001658 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 8001408:	2310      	movs	r3, #16
 800140a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001418:	2304      	movs	r3, #4
 800141a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001420:	4619      	mov	r1, r3
 8001422:	4814      	ldr	r0, [pc, #80]	; (8001474 <HAL_I2C_MspInit+0xe8>)
 8001424:	f002 faec 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142e:	2312      	movs	r3, #18
 8001430:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800143a:	2304      	movs	r3, #4
 800143c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f002 fada 	bl	8003a00 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 8001452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001456:	6593      	str	r3, [r2, #88]	; 0x58
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_I2C_MspInit+0xe4>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001464:	bf00      	nop
 8001466:	3780      	adds	r7, #128	; 0x80
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40005800 	.word	0x40005800
 8001470:	40021000 	.word	0x40021000
 8001474:	48000800 	.word	0x48000800

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f000 fe63 	bl	8002146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f858 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f7ff fe62 	bl	800114c <MX_GPIO_Init>
  MX_DMA_Init();
 8001488:	f7ff fda0 	bl	8000fcc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800148c:	f000 fd34 	bl	8001ef8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001490:	f7ff f8ee 	bl	8000670 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001494:	f7ff f964 	bl	8000760 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001498:	f7ff f9d8 	bl	800084c <MX_ADC3_Init>
  MX_TIM1_Init();
 800149c:	f000 f9b6 	bl	800180c <MX_TIM1_Init>
  MX_TIM16_Init();
 80014a0:	f000 fb54 	bl	8001b4c <MX_TIM16_Init>
  MX_TIM4_Init();
 80014a4:	f000 fa6e 	bl	8001984 <MX_TIM4_Init>
  MX_ADC4_Init();
 80014a8:	f7ff fa48 	bl	800093c <MX_ADC4_Init>
  MX_ADC5_Init();
 80014ac:	f7ff faac 	bl	8000a08 <MX_ADC5_Init>
  MX_I2C2_Init();
 80014b0:	f7ff ff2c 	bl	800130c <MX_I2C2_Init>
  MX_TIM8_Init();
 80014b4:	f000 fab6 	bl	8001a24 <MX_TIM8_Init>
  MX_TIM17_Init();
 80014b8:	f000 fb92 	bl	8001be0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERNAL_CLOCK);
 80014bc:	481a      	ldr	r0, [pc, #104]	; (8001528 <main+0xb0>)
 80014be:	f003 fe87 	bl	80051d0 <HAL_TIM_Base_Start_IT>
  vPowerTrainSystemInit();
 80014c2:	f7ff f847 	bl	8000554 <vPowerTrainSystemInit>
 // vEncoderSystemInit();
  vEncoderSystemInit(&leftMotorCount, &rightMotorCount);
 80014c6:	4919      	ldr	r1, [pc, #100]	; (800152c <main+0xb4>)
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <main+0xb8>)
 80014ca:	f7ff fdd9 	bl	8001080 <vEncoderSystemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 80014ce:	2100      	movs	r1, #0
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff f851 	bl	8000578 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR,CLOCKWISE);
 80014d6:	2100      	movs	r1, #0
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff f84d 	bl	8000578 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 1000);
 80014de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001518 <main+0xa0>
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff f89e 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR, 1000);
 80014e8:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001518 <main+0xa0>
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff f899 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(60000);
 80014f2:	f64e 2060 	movw	r0, #60000	; 0xea60
 80014f6:	f000 fe97 	bl	8002228 <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 0);
 80014fa:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001520 <main+0xa8>
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff f890 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 8001504:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001520 <main+0xa8>
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff f88b 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(10000);
 800150e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001512:	f000 fe89 	bl	8002228 <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001516:	e7da      	b.n	80014ce <main+0x56>
 8001518:	00000000 	.word	0x00000000
 800151c:	408f4000 	.word	0x408f4000
	...
 8001528:	200004f0 	.word	0x200004f0
 800152c:	200004a0 	.word	0x200004a0
 8001530:	2000049c 	.word	0x2000049c

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b094      	sub	sp, #80	; 0x50
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	2238      	movs	r2, #56	; 0x38
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f006 fbb4 	bl	8007cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001556:	2000      	movs	r0, #0
 8001558:	f002 fd42 	bl	8003fe0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001566:	2340      	movs	r3, #64	; 0x40
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156e:	2302      	movs	r3, #2
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001572:	2304      	movs	r3, #4
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001576:	2355      	movs	r3, #85	; 0x55
 8001578:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157a:	2302      	movs	r3, #2
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800157e:	2302      	movs	r3, #2
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001582:	2302      	movs	r3, #2
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fddc 	bl	8004148 <HAL_RCC_OscConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001596:	f000 f85f 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	230f      	movs	r3, #15
 800159c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159e:	2303      	movs	r3, #3
 80015a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2104      	movs	r1, #4
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 f8da 	bl	800476c <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015be:	f000 f84b 	bl	8001658 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3750      	adds	r7, #80	; 0x50
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a10      	ldr	r2, [pc, #64]	; (800161c <HAL_TIM_IC_CaptureCallback+0x50>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d109      	bne.n	80015f2 <HAL_TIM_IC_CaptureCallback+0x26>
    	(*pRightMotorCount)++;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x54>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	3201      	adds	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
        contador_encoder++;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_TIM_IC_CaptureCallback+0x58>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_TIM_IC_CaptureCallback+0x58>)
 80015f0:	6013      	str	r3, [r2, #0]
    } if (htim->Instance == TIM16) {
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d109      	bne.n	8001610 <HAL_TIM_IC_CaptureCallback+0x44>
    	(*pLeftMotorCount)++;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_TIM_IC_CaptureCallback+0x60>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	3201      	adds	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
    	contador_encoder2++;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_TIM_IC_CaptureCallback+0x64>)
 800160e:	6013      	str	r3, [r2, #0]
    }
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40014800 	.word	0x40014800
 8001620:	2000043c 	.word	0x2000043c
 8001624:	20000494 	.word	0x20000494
 8001628:	40014400 	.word	0x40014400
 800162c:	20000438 	.word	0x20000438
 8001630:	20000498 	.word	0x20000498

08001634 <HAL_TIM_PeriodElapsedCallback>:
// chama a funcao de calcular o rpm a cada 1 min
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_TIM_PeriodElapsedCallback+0x16>
    	vEncoderSystemExecuteMeasurement();
 8001646:	f7ff fd3b 	bl	80010c0 <vEncoderSystemExecuteMeasurement>
    }
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40000800 	.word	0x40000800

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_MspInit+0x44>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_MspInit+0x44>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6613      	str	r3, [r2, #96]	; 0x60
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_MspInit+0x44>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x44>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x44>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6593      	str	r3, [r2, #88]	; 0x58
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x44>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800169a:	f002 fd45 	bl	8004128 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 fd78 	bl	80021ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Channel1_IRQHandler+0x10>)
 8001706:	f002 f869 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000248 	.word	0x20000248

08001714 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA1_Channel2_IRQHandler+0x10>)
 800171a:	f002 f85f 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200002a8 	.word	0x200002a8

08001728 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <DMA1_Channel3_IRQHandler+0x10>)
 800172e:	f002 f855 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000308 	.word	0x20000308

0800173c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA1_Channel4_IRQHandler+0x10>)
 8001742:	f002 f84b 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000368 	.word	0x20000368

08001750 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA1_Channel5_IRQHandler+0x10>)
 8001756:	f002 f841 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200003c8 	.word	0x200003c8

08001764 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA1_Channel6_IRQHandler+0x10>)
 800176a:	f002 f837 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200006b4 	.word	0x200006b4

08001778 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <DMA1_Channel7_IRQHandler+0x10>)
 800177e:	f002 f82d 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000714 	.word	0x20000714

0800178c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001792:	f004 f8b1 	bl	80058f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001798:	f004 f8ae 	bl	80058f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200004a4 	.word	0x200004a4
 80017a4:	20000588 	.word	0x20000588

080017a8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80017ae:	f004 f8a3 	bl	80058f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80017b4:	f004 f8a0 	bl	80058f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200004a4 	.word	0x200004a4
 80017c0:	200005d4 	.word	0x200005d4

080017c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM4_IRQHandler+0x10>)
 80017ca:	f004 f895 	bl	80058f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200004f0 	.word	0x200004f0

080017d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017e0:	f002 faa8 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b09c      	sub	sp, #112	; 0x70
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2234      	movs	r2, #52	; 0x34
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f006 fa32 	bl	8007cb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <MX_TIM1_Init+0x170>)
 800184e:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <MX_TIM1_Init+0x174>)
 8001850:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8001852:	4b4a      	ldr	r3, [pc, #296]	; (800197c <MX_TIM1_Init+0x170>)
 8001854:	2210      	movs	r2, #16
 8001856:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001858:	4b48      	ldr	r3, [pc, #288]	; (800197c <MX_TIM1_Init+0x170>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <MX_TIM1_Init+0x170>)
 8001860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <MX_TIM1_Init+0x170>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800186c:	4b43      	ldr	r3, [pc, #268]	; (800197c <MX_TIM1_Init+0x170>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <MX_TIM1_Init+0x170>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001878:	4840      	ldr	r0, [pc, #256]	; (800197c <MX_TIM1_Init+0x170>)
 800187a:	f003 fbe1 	bl	8005040 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001884:	f7ff fee8 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001892:	4619      	mov	r1, r3
 8001894:	4839      	ldr	r0, [pc, #228]	; (800197c <MX_TIM1_Init+0x170>)
 8001896:	f004 fb2f 	bl	8005ef8 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018a0:	f7ff feda 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a4:	4835      	ldr	r0, [pc, #212]	; (800197c <MX_TIM1_Init+0x170>)
 80018a6:	f003 fd0b 	bl	80052c0 <HAL_TIM_PWM_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018b0:	f7ff fed2 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018c4:	4619      	mov	r1, r3
 80018c6:	482d      	ldr	r0, [pc, #180]	; (800197c <MX_TIM1_Init+0x170>)
 80018c8:	f005 fa14 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018d2:	f7ff fec1 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d6:	2360      	movs	r3, #96	; 0x60
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018de:	2300      	movs	r3, #0
 80018e0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4820      	ldr	r0, [pc, #128]	; (800197c <MX_TIM1_Init+0x170>)
 80018fc:	f004 f9e8 	bl	8005cd0 <HAL_TIM_PWM_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001906:	f7ff fea7 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800190a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800190e:	2204      	movs	r2, #4
 8001910:	4619      	mov	r1, r3
 8001912:	481a      	ldr	r0, [pc, #104]	; (800197c <MX_TIM1_Init+0x170>)
 8001914:	f004 f9dc 	bl	8005cd0 <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800191e:	f7ff fe9b 	bl	8001658 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4619      	mov	r1, r3
 800195e:	4807      	ldr	r0, [pc, #28]	; (800197c <MX_TIM1_Init+0x170>)
 8001960:	f005 fa5e 	bl	8006e20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800196a:	f7ff fe75 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800196e:	4803      	ldr	r0, [pc, #12]	; (800197c <MX_TIM1_Init+0x170>)
 8001970:	f000 fa64 	bl	8001e3c <HAL_TIM_MspPostInit>

}
 8001974:	bf00      	nop
 8001976:	3770      	adds	r7, #112	; 0x70
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200004a4 	.word	0x200004a4
 8001980:	40012c00 	.word	0x40012c00

08001984 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_TIM4_Init+0x98>)
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <MX_TIM4_Init+0x9c>)
 80019a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2599;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_TIM4_Init+0x98>)
 80019aa:	f640 2227 	movw	r2, #2599	; 0xa27
 80019ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_TIM4_Init+0x98>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65383;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_TIM4_Init+0x98>)
 80019b8:	f64f 7267 	movw	r2, #65383	; 0xff67
 80019bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_TIM4_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <MX_TIM4_Init+0x98>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <MX_TIM4_Init+0x98>)
 80019cc:	f003 fb38 	bl	8005040 <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80019d6:	f7ff fe3f 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_TIM4_Init+0x98>)
 80019e8:	f004 fa86 	bl	8005ef8 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80019f2:	f7ff fe31 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_TIM4_Init+0x98>)
 8001a04:	f005 f976 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001a0e:	f7ff fe23 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200004f0 	.word	0x200004f0
 8001a20:	40000800 	.word	0x40000800

08001a24 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b098      	sub	sp, #96	; 0x60
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2234      	movs	r2, #52	; 0x34
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f006 f92d 	bl	8007cb0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a56:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001a58:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <MX_TIM8_Init+0x124>)
 8001a5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a5c:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a76:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a82:	4830      	ldr	r0, [pc, #192]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001a84:	f003 fc1c 	bl	80052c0 <HAL_TIM_PWM_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001a8e:	f7ff fde3 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4827      	ldr	r0, [pc, #156]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001aa6:	f005 f925 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001ab0:	f7ff fdd2 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab4:	2360      	movs	r3, #96	; 0x60
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001abc:	2300      	movs	r3, #0
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481a      	ldr	r0, [pc, #104]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001ada:	f004 f8f9 	bl	8005cd0 <HAL_TIM_PWM_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ae4:	f7ff fdb8 	bl	8001658 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001b26:	f005 f97b 	bl	8006e20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001b30:	f7ff fd92 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <MX_TIM8_Init+0x120>)
 8001b36:	f000 f981 	bl	8001e3c <HAL_TIM_MspPostInit>

}
 8001b3a:	bf00      	nop
 8001b3c:	3760      	adds	r7, #96	; 0x60
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000053c 	.word	0x2000053c
 8001b48:	40013400 	.word	0x40013400

08001b4c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b52:	463b      	mov	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b60:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <MX_TIM16_Init+0x90>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b66:	22a9      	movs	r2, #169	; 0xa9
 8001b68:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b72:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b8a:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b8c:	f003 fa58 	bl	8005040 <HAL_TIM_Base_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8001b96:	f7ff fd5f 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001b9a:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001b9c:	f003 fcfa 	bl	8005594 <HAL_TIM_IC_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001ba6:	f7ff fd57 	bl	8001658 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_TIM16_Init+0x8c>)
 8001bc2:	f003 ffe8 	bl	8005b96 <HAL_TIM_IC_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001bcc:	f7ff fd44 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000588 	.word	0x20000588
 8001bdc:	40014400 	.word	0x40014400

08001be0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <MX_TIM17_Init+0x90>)
 8001bf6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001bfa:	22a9      	movs	r2, #169	; 0xa9
 8001bfc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001c06:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c0a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c1e:	4813      	ldr	r0, [pc, #76]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001c20:	f003 fa0e 	bl	8005040 <HAL_TIM_Base_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8001c2a:	f7ff fd15 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001c2e:	480f      	ldr	r0, [pc, #60]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001c30:	f003 fcb0 	bl	8005594 <HAL_TIM_IC_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001c3a:	f7ff fd0d 	bl	8001658 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c42:	2301      	movs	r3, #1
 8001c44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_TIM17_Init+0x8c>)
 8001c56:	f003 ff9e 	bl	8005b96 <HAL_TIM_IC_ConfigChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8001c60:	f7ff fcfa 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200005d4 	.word	0x200005d4
 8001c70:	40014800 	.word	0x40014800

08001c74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a54      	ldr	r2, [pc, #336]	; (8001de4 <HAL_TIM_Base_MspInit+0x170>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d11c      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c96:	4b54      	ldr	r3, [pc, #336]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	4a53      	ldr	r2, [pc, #332]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca2:	4b51      	ldr	r3, [pc, #324]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001caa:	623b      	str	r3, [r7, #32]
 8001cac:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2019      	movs	r0, #25
 8001cb4:	f001 fcb5 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cb8:	2019      	movs	r0, #25
 8001cba:	f001 fccc 	bl	8003656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201a      	movs	r0, #26
 8001cc4:	f001 fcad 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001cc8:	201a      	movs	r0, #26
 8001cca:	f001 fcc4 	bl	8003656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001cce:	e084      	b.n	8001dda <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a45      	ldr	r2, [pc, #276]	; (8001dec <HAL_TIM_Base_MspInit+0x178>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d114      	bne.n	8001d04 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	201e      	movs	r0, #30
 8001cf8:	f001 fc93 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cfc:	201e      	movs	r0, #30
 8001cfe:	f001 fcaa 	bl	8003656 <HAL_NVIC_EnableIRQ>
}
 8001d02:	e06a      	b.n	8001dda <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM16)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a39      	ldr	r2, [pc, #228]	; (8001df0 <HAL_TIM_Base_MspInit+0x17c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d130      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d0e:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	4a35      	ldr	r2, [pc, #212]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d56:	4619      	mov	r1, r3
 8001d58:	4826      	ldr	r0, [pc, #152]	; (8001df4 <HAL_TIM_Base_MspInit+0x180>)
 8001d5a:	f001 fe51 	bl	8003a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	2019      	movs	r0, #25
 8001d64:	f001 fc5d 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d68:	2019      	movs	r0, #25
 8001d6a:	f001 fc74 	bl	8003656 <HAL_NVIC_EnableIRQ>
}
 8001d6e:	e034      	b.n	8001dda <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM17)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a20      	ldr	r2, [pc, #128]	; (8001df8 <HAL_TIM_Base_MspInit+0x184>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12f      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d84:	6613      	str	r3, [r2, #96]	; 0x60
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_TIM_Base_MspInit+0x174>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8001daa:	2320      	movs	r3, #32
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001dba:	230a      	movs	r3, #10
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480b      	ldr	r0, [pc, #44]	; (8001df4 <HAL_TIM_Base_MspInit+0x180>)
 8001dc6:	f001 fe1b 	bl	8003a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	201a      	movs	r0, #26
 8001dd0:	f001 fc27 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001dd4:	201a      	movs	r0, #26
 8001dd6:	f001 fc3e 	bl	8003656 <HAL_NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40012c00 	.word	0x40012c00
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40000800 	.word	0x40000800
 8001df0:	40014400 	.word	0x40014400
 8001df4:	48000400 	.word	0x48000400
 8001df8:	40014800 	.word	0x40014800

08001dfc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_TIM_PWM_MspInit+0x38>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10b      	bne.n	8001e26 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e18:	6613      	str	r3, [r2, #96]	; 0x60
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40013400 	.word	0x40013400
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <HAL_TIM_MspPostInit+0xac>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d11c      	bne.n	8001e98 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_TIM_MspPostInit+0xb0>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_TIM_MspPostInit+0xb0>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_TIM_MspPostInit+0xb0>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001e76:	2303      	movs	r3, #3
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e86:	2302      	movs	r3, #2
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4817      	ldr	r0, [pc, #92]	; (8001ef0 <HAL_TIM_MspPostInit+0xb4>)
 8001e92:	f001 fdb5 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e96:	e022      	b.n	8001ede <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <HAL_TIM_MspPostInit+0xb8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d11d      	bne.n	8001ede <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_TIM_MspPostInit+0xb0>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a11      	ldr	r2, [pc, #68]	; (8001eec <HAL_TIM_MspPostInit+0xb0>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_TIM_MspPostInit+0xb0>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f001 fd91 	bl	8003a00 <HAL_GPIO_Init>
}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40012c00 	.word	0x40012c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	40013400 	.word	0x40013400

08001ef8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001efe:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <MX_LPUART1_UART_Init+0x90>)
 8001f00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f3c:	f005 f84a 	bl	8006fd4 <HAL_UART_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f46:	f7ff fb87 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f4e:	f005 fde5 	bl	8007b1c <HAL_UARTEx_SetTxFifoThreshold>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f58:	f7ff fb7e 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4809      	ldr	r0, [pc, #36]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f60:	f005 fe1a 	bl	8007b98 <HAL_UARTEx_SetRxFifoThreshold>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001f6a:	f7ff fb75 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_LPUART1_UART_Init+0x8c>)
 8001f70:	f005 fd9b 	bl	8007aaa <HAL_UARTEx_DisableFifoMode>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001f7a:	f7ff fb6d 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000620 	.word	0x20000620
 8001f88:	40008000 	.word	0x40008000

08001f8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b09e      	sub	sp, #120	; 0x78
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	2254      	movs	r2, #84	; 0x54
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f005 fe7f 	bl	8007cb0 <memset>
  if(uartHandle->Instance==LPUART1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a49      	ldr	r2, [pc, #292]	; (80020dc <HAL_UART_MspInit+0x150>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	f040 808a 	bne.w	80020d2 <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 fdea 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001fd6:	f7ff fb3f 	bl	8001658 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_UART_MspInit+0x154>)
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <HAL_UART_MspInit+0x154>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <HAL_UART_MspInit+0x154>)
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_UART_MspInit+0x154>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	4a3a      	ldr	r2, [pc, #232]	; (80020e0 <HAL_UART_MspInit+0x154>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffe:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <HAL_UART_MspInit+0x154>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800200a:	230c      	movs	r3, #12
 800200c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800201a:	230c      	movs	r3, #12
 800201c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002028:	f001 fcea 	bl	8003a00 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_UART_MspInit+0x158>)
 800202e:	4a2e      	ldr	r2, [pc, #184]	; (80020e8 <HAL_UART_MspInit+0x15c>)
 8002030:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_UART_MspInit+0x158>)
 8002034:	2222      	movs	r2, #34	; 0x22
 8002036:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_UART_MspInit+0x158>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_UART_MspInit+0x158>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_UART_MspInit+0x158>)
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_UART_MspInit+0x158>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_UART_MspInit+0x158>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_UART_MspInit+0x158>)
 8002058:	2200      	movs	r2, #0
 800205a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_UART_MspInit+0x158>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002062:	4820      	ldr	r0, [pc, #128]	; (80020e4 <HAL_UART_MspInit+0x158>)
 8002064:	f001 fb12 	bl	800368c <HAL_DMA_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800206e:	f7ff faf3 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_UART_MspInit+0x158>)
 8002076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800207a:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_UART_MspInit+0x158>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_UART_MspInit+0x160>)
 8002082:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8002084:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_UART_MspInit+0x160>)
 8002088:	2223      	movs	r2, #35	; 0x23
 800208a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_UART_MspInit+0x160>)
 800208e:	2210      	movs	r2, #16
 8002090:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_UART_MspInit+0x160>)
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_UART_MspInit+0x160>)
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_UART_MspInit+0x160>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_UART_MspInit+0x160>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_UART_MspInit+0x160>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_UART_MspInit+0x160>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <HAL_UART_MspInit+0x160>)
 80020b8:	f001 fae8 	bl	800368c <HAL_DMA_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80020c2:	f7ff fac9 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_UART_MspInit+0x160>)
 80020ca:	67da      	str	r2, [r3, #124]	; 0x7c
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_UART_MspInit+0x160>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80020d2:	bf00      	nop
 80020d4:	3778      	adds	r7, #120	; 0x78
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40008000 	.word	0x40008000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	200006b4 	.word	0x200006b4
 80020e8:	4002006c 	.word	0x4002006c
 80020ec:	20000714 	.word	0x20000714
 80020f0:	40020080 	.word	0x40020080

080020f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020f4:	480d      	ldr	r0, [pc, #52]	; (800212c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f8:	f7ff fb76 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <LoopForever+0x6>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <LoopForever+0xe>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <LoopForever+0x16>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f005 fdcd 	bl	8007cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002126:	f7ff f9a7 	bl	8001478 <main>

0800212a <LoopForever>:

LoopForever:
    b LoopForever
 800212a:	e7fe      	b.n	800212a <LoopForever>
  ldr   r0, =_estack
 800212c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002138:	08007d70 	.word	0x08007d70
  ldr r2, =_sbss
 800213c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002140:	20000778 	.word	0x20000778

08002144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC1_2_IRQHandler>

08002146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f001 fa5b 	bl	800360c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002156:	2000      	movs	r0, #0
 8002158:	f000 f80e 	bl	8002178 <HAL_InitTick>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	e001      	b.n	800216c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002168:	f7ff fa7c 	bl	8001664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800216c:	79fb      	ldrb	r3, [r7, #7]

}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002184:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_InitTick+0x68>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d022      	beq.n	80021d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_InitTick+0x6c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_InitTick+0x68>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002198:	fbb1 f3f3 	udiv	r3, r1, r3
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 fa66 	bl	8003672 <HAL_SYSTICK_Config>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10f      	bne.n	80021cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	d809      	bhi.n	80021c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b2:	2200      	movs	r2, #0
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	f04f 30ff 	mov.w	r0, #4294967295
 80021ba:	f001 fa32 	bl	8003622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_InitTick+0x70>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e007      	b.n	80021d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	e004      	b.n	80021d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e001      	b.n	80021d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000000c 	.word	0x2000000c
 80021e4:	20000004 	.word	0x20000004
 80021e8:	20000008 	.word	0x20000008

080021ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_IncTick+0x1c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_IncTick+0x20>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a03      	ldr	r2, [pc, #12]	; (8002208 <HAL_IncTick+0x1c>)
 80021fc:	6013      	str	r3, [r2, #0]
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	20000774 	.word	0x20000774
 800220c:	2000000c 	.word	0x2000000c

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000774 	.word	0x20000774

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d004      	beq.n	800224c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_Delay+0x40>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800224c:	bf00      	nop
 800224e:	f7ff ffdf 	bl	8002210 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	429a      	cmp	r2, r3
 800225c:	d8f7      	bhi.n	800224e <HAL_Delay+0x26>
  {
  }
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2000000c 	.word	0x2000000c

0800226c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3360      	adds	r3, #96	; 0x60
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <LL_ADC_SetOffset+0x44>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	4313      	orrs	r3, r2
 8002304:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	03fff000 	.word	0x03fff000

0800231c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	461a      	mov	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3360      	adds	r3, #96	; 0x60
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	431a      	orrs	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800237e:	b480      	push	{r7}
 8002380:	b087      	sub	sp, #28
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3360      	adds	r3, #96	; 0x60
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3360      	adds	r3, #96	; 0x60
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	431a      	orrs	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	615a      	str	r2, [r3, #20]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3330      	adds	r3, #48	; 0x30
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	4413      	add	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	211f      	movs	r1, #31
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	401a      	ands	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	f003 011f 	and.w	r1, r3, #31
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	431a      	orrs	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3314      	adds	r3, #20
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	0e5b      	lsrs	r3, r3, #25
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	4413      	add	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0d1b      	lsrs	r3, r3, #20
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2107      	movs	r1, #7
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	401a      	ands	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	0d1b      	lsrs	r3, r3, #20
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	431a      	orrs	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	43db      	mvns	r3, r3
 80024da:	401a      	ands	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0318 	and.w	r3, r3, #24
 80024e2:	4908      	ldr	r1, [pc, #32]	; (8002504 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024e4:	40d9      	lsrs	r1, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	400b      	ands	r3, r1
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	431a      	orrs	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	0007ffff 	.word	0x0007ffff

08002508 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6093      	str	r3, [r2, #8]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800253c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002540:	d101      	bne.n	8002546 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002564:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002568:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002590:	d101      	bne.n	8002596 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <LL_ADC_IsEnabled+0x18>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <LL_ADC_IsEnabled+0x1a>
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d101      	bne.n	80025e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b08      	cmp	r3, #8
 8002602:	d101      	bne.n	8002608 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1a9      	b.n	8002986 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7fe fa47 	bl	8000ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff67 	bl	800252c <LL_ADC_IsDeepPowerDownEnabled>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff4d 	bl	8002508 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff82 	bl	800257c <LL_ADC_IsInternalRegulatorEnabled>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d115      	bne.n	80026aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff66 	bl	8002554 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002688:	4b9c      	ldr	r3, [pc, #624]	; (80028fc <HAL_ADC_Init+0x2e4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	4a9c      	ldr	r2, [pc, #624]	; (8002900 <HAL_ADC_Init+0x2e8>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800269c:	e002      	b.n	80026a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f9      	bne.n	800269e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff64 	bl	800257c <LL_ADC_IsInternalRegulatorEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	f043 0210 	orr.w	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff75 	bl	80025ca <LL_ADC_REG_IsConversionOngoing>
 80026e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8142 	bne.w	8002974 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 813e 	bne.w	8002974 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002700:	f043 0202 	orr.w	r2, r3, #2
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff49 	bl	80025a4 <LL_ADC_IsEnabled>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d141      	bne.n	800279c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002720:	d004      	beq.n	800272c <HAL_ADC_Init+0x114>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_ADC_Init+0x2ec>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d10f      	bne.n	800274c <HAL_ADC_Init+0x134>
 800272c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002730:	f7ff ff38 	bl	80025a4 <LL_ADC_IsEnabled>
 8002734:	4604      	mov	r4, r0
 8002736:	4873      	ldr	r0, [pc, #460]	; (8002904 <HAL_ADC_Init+0x2ec>)
 8002738:	f7ff ff34 	bl	80025a4 <LL_ADC_IsEnabled>
 800273c:	4603      	mov	r3, r0
 800273e:	4323      	orrs	r3, r4
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	e012      	b.n	8002772 <HAL_ADC_Init+0x15a>
 800274c:	486e      	ldr	r0, [pc, #440]	; (8002908 <HAL_ADC_Init+0x2f0>)
 800274e:	f7ff ff29 	bl	80025a4 <LL_ADC_IsEnabled>
 8002752:	4604      	mov	r4, r0
 8002754:	486d      	ldr	r0, [pc, #436]	; (800290c <HAL_ADC_Init+0x2f4>)
 8002756:	f7ff ff25 	bl	80025a4 <LL_ADC_IsEnabled>
 800275a:	4603      	mov	r3, r0
 800275c:	431c      	orrs	r4, r3
 800275e:	486c      	ldr	r0, [pc, #432]	; (8002910 <HAL_ADC_Init+0x2f8>)
 8002760:	f7ff ff20 	bl	80025a4 <LL_ADC_IsEnabled>
 8002764:	4603      	mov	r3, r0
 8002766:	4323      	orrs	r3, r4
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277e:	d004      	beq.n	800278a <HAL_ADC_Init+0x172>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5f      	ldr	r2, [pc, #380]	; (8002904 <HAL_ADC_Init+0x2ec>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_ADC_Init+0x176>
 800278a:	4a62      	ldr	r2, [pc, #392]	; (8002914 <HAL_ADC_Init+0x2fc>)
 800278c:	e000      	b.n	8002790 <HAL_ADC_Init+0x178>
 800278e:	4a62      	ldr	r2, [pc, #392]	; (8002918 <HAL_ADC_Init+0x300>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f7ff fd68 	bl	800226c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7f5b      	ldrb	r3, [r3, #29]
 80027a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d106      	bne.n	80027d8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	045b      	lsls	r3, r3, #17
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	4b48      	ldr	r3, [pc, #288]	; (800291c <HAL_ADC_Init+0x304>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	69b9      	ldr	r1, [r7, #24]
 8002804:	430b      	orrs	r3, r1
 8002806:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fee4 	bl	80025f0 <LL_ADC_INJ_IsConversionOngoing>
 8002828:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d17f      	bne.n	8002930 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d17c      	bne.n	8002930 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800283a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002842:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002852:	f023 0302 	bic.w	r3, r3, #2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	430b      	orrs	r3, r1
 800285e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002876:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002880:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002884:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6911      	ldr	r1, [r2, #16]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	430b      	orrs	r3, r1
 8002892:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002896:	e013      	b.n	80028c0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d12a      	bne.n	8002920 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028e0:	4311      	orrs	r1, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028e6:	4311      	orrs	r1, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028ec:	430a      	orrs	r2, r1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e019      	b.n	8002930 <HAL_ADC_Init+0x318>
 80028fc:	20000004 	.word	0x20000004
 8002900:	053e2d63 	.word	0x053e2d63
 8002904:	50000100 	.word	0x50000100
 8002908:	50000400 	.word	0x50000400
 800290c:	50000500 	.word	0x50000500
 8002910:	50000600 	.word	0x50000600
 8002914:	50000300 	.word	0x50000300
 8002918:	50000700 	.word	0x50000700
 800291c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10c      	bne.n	8002952 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f023 010f 	bic.w	r1, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	1e5a      	subs	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
 8002950:	e007      	b.n	8002962 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 020f 	bic.w	r2, r2, #15
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	65da      	str	r2, [r3, #92]	; 0x5c
 8002972:	e007      	b.n	8002984 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002984:	7ffb      	ldrb	r3, [r7, #31]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
 800298e:	bf00      	nop

08002990 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0b6      	sub	sp, #216	; 0xd8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x24>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f000 bc13 	b.w	80031da <HAL_ADC_ConfigChannel+0x84a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fe02 	bl	80025ca <LL_ADC_REG_IsConversionOngoing>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 83f3 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	f7ff fd18 	bl	8002410 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fdf0 	bl	80025ca <LL_ADC_REG_IsConversionOngoing>
 80029ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fdfc 	bl	80025f0 <LL_ADC_INJ_IsConversionOngoing>
 80029f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 81d9 	bne.w	8002db8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 81d4 	bne.w	8002db8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a18:	d10f      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	4619      	mov	r1, r3
 8002a26:	f7ff fd1f 	bl	8002468 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fcd9 	bl	80023ea <LL_ADC_SetSamplingTimeCommonConfig>
 8002a38:	e00e      	b.n	8002a58 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f7ff fd0e 	bl	8002468 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fcc9 	bl	80023ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d022      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6919      	ldr	r1, [r3, #16]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a8a:	f7ff fc23 	bl	80022d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f7ff fc6f 	bl	800237e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x126>
 8002ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab4:	e000      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x128>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f7ff fc7b 	bl	80023b4 <LL_ADC_SetOffsetSaturation>
 8002abe:	e17b      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc28 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x15c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fc1d 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	e01e      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x19a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fc12 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e004      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x1b2>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	e018      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x1e4>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e004      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d106      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fbe1 	bl	8002348 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fbc5 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x222>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fbba 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	e01e      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x260>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fbaf 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002bd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e004      	b.n	8002bee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x278>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	e018      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x2aa>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e004      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d106      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fb7e 	bl	8002348 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2102      	movs	r1, #2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fb62 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x2e8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fb57 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	e01e      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x326>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fb4c 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e004      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x33e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	e016      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x36c>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ce0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ce2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e004      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d106      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2102      	movs	r1, #2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fb1d 	bl	8002348 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2103      	movs	r1, #3
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fb01 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x3aa>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2103      	movs	r1, #3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff faf6 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	e017      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x3da>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2103      	movs	r1, #3
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff faeb 	bl	800231c <LL_ADC_GetOffsetChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d54:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x3f2>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	e011      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x416>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e003      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d106      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2103      	movs	r1, #3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fac8 	bl	8002348 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fbf1 	bl	80025a4 <LL_ADC_IsEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 813d 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f7ff fb72 	bl	80024c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4aa2      	ldr	r2, [pc, #648]	; (800306c <HAL_ADC_ConfigChannel+0x6dc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	f040 812e 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x480>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e019      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x4b4>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	e003      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2b09      	cmp	r3, #9
 8002e3c:	bf94      	ite	ls
 8002e3e:	2301      	movls	r3, #1
 8002e40:	2300      	movhi	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d079      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x4d4>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e62:	e015      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x500>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	069b      	lsls	r3, r3, #26
 8002e8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x520>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	e017      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x550>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	ea42 0103 	orr.w	r1, r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x576>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	051b      	lsls	r3, r3, #20
 8002f04:	e018      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x5a8>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e003      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	e07e      	b.n	800303a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x5c8>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	069b      	lsls	r3, r3, #26
 8002f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f56:	e015      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x5f4>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x614>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	e017      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x644>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e003      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10d      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x670>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b1e      	subs	r3, #30
 8002ff8:	051b      	lsls	r3, r3, #20
 8002ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	e01b      	b.n	8003038 <HAL_ADC_ConfigChannel+0x6a8>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	613b      	str	r3, [r7, #16]
  return result;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e003      	b.n	8003024 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	3b1e      	subs	r3, #30
 8003032:	051b      	lsls	r3, r3, #20
 8003034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003038:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303e:	4619      	mov	r1, r3
 8003040:	f7ff fa12 	bl	8002468 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_ADC_ConfigChannel+0x6e0>)
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80be 	beq.w	80031ce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305a:	d004      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x6d6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_ADC_ConfigChannel+0x6e4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10a      	bne.n	800307c <HAL_ADC_ConfigChannel+0x6ec>
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <HAL_ADC_ConfigChannel+0x6e8>)
 8003068:	e009      	b.n	800307e <HAL_ADC_ConfigChannel+0x6ee>
 800306a:	bf00      	nop
 800306c:	407f0000 	.word	0x407f0000
 8003070:	80080000 	.word	0x80080000
 8003074:	50000100 	.word	0x50000100
 8003078:	50000300 	.word	0x50000300
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_ADC_ConfigChannel+0x854>)
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff f91a 	bl	80022b8 <LL_ADC_GetCommonPathInternalCh>
 8003084:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a56      	ldr	r2, [pc, #344]	; (80031e8 <HAL_ADC_ConfigChannel+0x858>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_ADC_ConfigChannel+0x70c>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a55      	ldr	r2, [pc, #340]	; (80031ec <HAL_ADC_ConfigChannel+0x85c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d13a      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800309c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d134      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b0:	d005      	beq.n	80030be <HAL_ADC_ConfigChannel+0x72e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a4e      	ldr	r2, [pc, #312]	; (80031f0 <HAL_ADC_ConfigChannel+0x860>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f040 8085 	bne.w	80031c8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c6:	d004      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x742>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a49      	ldr	r2, [pc, #292]	; (80031f4 <HAL_ADC_ConfigChannel+0x864>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x746>
 80030d2:	4a49      	ldr	r2, [pc, #292]	; (80031f8 <HAL_ADC_ConfigChannel+0x868>)
 80030d4:	e000      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x748>
 80030d6:	4a43      	ldr	r2, [pc, #268]	; (80031e4 <HAL_ADC_ConfigChannel+0x854>)
 80030d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f7ff f8d5 	bl	8002292 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e8:	4b44      	ldr	r3, [pc, #272]	; (80031fc <HAL_ADC_ConfigChannel+0x86c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	4a44      	ldr	r2, [pc, #272]	; (8003200 <HAL_ADC_ConfigChannel+0x870>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003102:	e002      	b.n	800310a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b01      	subs	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f9      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003110:	e05a      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <HAL_ADC_ConfigChannel+0x874>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d125      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800311c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11f      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_ADC_ConfigChannel+0x864>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d104      	bne.n	800313c <HAL_ADC_ConfigChannel+0x7ac>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a34      	ldr	r2, [pc, #208]	; (8003208 <HAL_ADC_ConfigChannel+0x878>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d047      	beq.n	80031cc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003144:	d004      	beq.n	8003150 <HAL_ADC_ConfigChannel+0x7c0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2a      	ldr	r2, [pc, #168]	; (80031f4 <HAL_ADC_ConfigChannel+0x864>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x7c4>
 8003150:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <HAL_ADC_ConfigChannel+0x868>)
 8003152:	e000      	b.n	8003156 <HAL_ADC_ConfigChannel+0x7c6>
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_ADC_ConfigChannel+0x854>)
 8003156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7ff f896 	bl	8002292 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003166:	e031      	b.n	80031cc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a27      	ldr	r2, [pc, #156]	; (800320c <HAL_ADC_ConfigChannel+0x87c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d12d      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d127      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_ADC_ConfigChannel+0x864>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003190:	d004      	beq.n	800319c <HAL_ADC_ConfigChannel+0x80c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <HAL_ADC_ConfigChannel+0x864>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x810>
 800319c:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <HAL_ADC_ConfigChannel+0x868>)
 800319e:	e000      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x812>
 80031a0:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <HAL_ADC_ConfigChannel+0x854>)
 80031a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7ff f870 	bl	8002292 <LL_ADC_SetCommonPathInternalCh>
 80031b2:	e00c      	b.n	80031ce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031c6:	e002      	b.n	80031ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c8:	bf00      	nop
 80031ca:	e000      	b.n	80031ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	37d8      	adds	r7, #216	; 0xd8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	50000700 	.word	0x50000700
 80031e8:	c3210000 	.word	0xc3210000
 80031ec:	90c00010 	.word	0x90c00010
 80031f0:	50000600 	.word	0x50000600
 80031f4:	50000100 	.word	0x50000100
 80031f8:	50000300 	.word	0x50000300
 80031fc:	20000004 	.word	0x20000004
 8003200:	053e2d63 	.word	0x053e2d63
 8003204:	c7520000 	.word	0xc7520000
 8003208:	50000500 	.word	0x50000500
 800320c:	cb840000 	.word	0xcb840000

08003210 <LL_ADC_IsEnabled>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <LL_ADC_IsEnabled+0x18>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_ADC_IsEnabled+0x1a>
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_ADC_REG_IsConversionOngoing>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d101      	bne.n	800324e <LL_ADC_REG_IsConversionOngoing+0x18>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b0a1      	sub	sp, #132	; 0x84
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003276:	2302      	movs	r3, #2
 8003278:	e0e7      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003282:	2300      	movs	r3, #0
 8003284:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003286:	2300      	movs	r3, #0
 8003288:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003292:	d102      	bne.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003294:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	e009      	b.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d102      	bne.n	80032aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032a4:	4b6d      	ldr	r3, [pc, #436]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	e001      	b.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0be      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ffb1 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 80032d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ffab 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 80a0 	bne.w	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80032e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 809c 	bne.w	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f8:	d004      	beq.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a55      	ldr	r2, [pc, #340]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003304:	4b56      	ldr	r3, [pc, #344]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003306:	e000      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003308:	4b56      	ldr	r3, [pc, #344]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800330a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d04b      	beq.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003326:	035b      	lsls	r3, r3, #13
 8003328:	430b      	orrs	r3, r1
 800332a:	431a      	orrs	r2, r3
 800332c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003338:	d004      	beq.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a45      	ldr	r2, [pc, #276]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10f      	bne.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003344:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003348:	f7ff ff62 	bl	8003210 <LL_ADC_IsEnabled>
 800334c:	4604      	mov	r4, r0
 800334e:	4841      	ldr	r0, [pc, #260]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003350:	f7ff ff5e 	bl	8003210 <LL_ADC_IsEnabled>
 8003354:	4603      	mov	r3, r0
 8003356:	4323      	orrs	r3, r4
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e012      	b.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003364:	483c      	ldr	r0, [pc, #240]	; (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003366:	f7ff ff53 	bl	8003210 <LL_ADC_IsEnabled>
 800336a:	4604      	mov	r4, r0
 800336c:	483b      	ldr	r0, [pc, #236]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800336e:	f7ff ff4f 	bl	8003210 <LL_ADC_IsEnabled>
 8003372:	4603      	mov	r3, r0
 8003374:	431c      	orrs	r4, r3
 8003376:	483c      	ldr	r0, [pc, #240]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003378:	f7ff ff4a 	bl	8003210 <LL_ADC_IsEnabled>
 800337c:	4603      	mov	r3, r0
 800337e:	4323      	orrs	r3, r4
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d056      	beq.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800338e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003396:	f023 030f 	bic.w	r3, r3, #15
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	6811      	ldr	r1, [r2, #0]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	6892      	ldr	r2, [r2, #8]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	431a      	orrs	r2, r3
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033aa:	e047      	b.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c0:	d004      	beq.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a23      	ldr	r2, [pc, #140]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10f      	bne.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80033cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033d0:	f7ff ff1e 	bl	8003210 <LL_ADC_IsEnabled>
 80033d4:	4604      	mov	r4, r0
 80033d6:	481f      	ldr	r0, [pc, #124]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033d8:	f7ff ff1a 	bl	8003210 <LL_ADC_IsEnabled>
 80033dc:	4603      	mov	r3, r0
 80033de:	4323      	orrs	r3, r4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	e012      	b.n	8003412 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80033ec:	481a      	ldr	r0, [pc, #104]	; (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033ee:	f7ff ff0f 	bl	8003210 <LL_ADC_IsEnabled>
 80033f2:	4604      	mov	r4, r0
 80033f4:	4819      	ldr	r0, [pc, #100]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033f6:	f7ff ff0b 	bl	8003210 <LL_ADC_IsEnabled>
 80033fa:	4603      	mov	r3, r0
 80033fc:	431c      	orrs	r4, r3
 80033fe:	481a      	ldr	r0, [pc, #104]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003400:	f7ff ff06 	bl	8003210 <LL_ADC_IsEnabled>
 8003404:	4603      	mov	r3, r0
 8003406:	4323      	orrs	r3, r4
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d012      	beq.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800341e:	f023 030f 	bic.w	r3, r3, #15
 8003422:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003424:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003426:	e009      	b.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800343a:	e000      	b.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800343c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003446:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800344a:	4618      	mov	r0, r3
 800344c:	3784      	adds	r7, #132	; 0x84
 800344e:	46bd      	mov	sp, r7
 8003450:	bd90      	pop	{r4, r7, pc}
 8003452:	bf00      	nop
 8003454:	50000100 	.word	0x50000100
 8003458:	50000400 	.word	0x50000400
 800345c:	50000500 	.word	0x50000500
 8003460:	50000300 	.word	0x50000300
 8003464:	50000700 	.word	0x50000700
 8003468:	50000600 	.word	0x50000600

0800346c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003488:	4013      	ands	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <__NVIC_GetPriorityGrouping+0x18>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	f003 0307 	and.w	r3, r3, #7
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db0b      	blt.n	80034fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <__NVIC_EnableIRQ+0x38>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2001      	movs	r0, #1
 80034f2:	fa00 f202 	lsl.w	r2, r0, r2
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000e100 	.word	0xe000e100

0800350c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	6039      	str	r1, [r7, #0]
 8003516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db0a      	blt.n	8003536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	490c      	ldr	r1, [pc, #48]	; (8003558 <__NVIC_SetPriority+0x4c>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	0112      	lsls	r2, r2, #4
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	440b      	add	r3, r1
 8003530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003534:	e00a      	b.n	800354c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4908      	ldr	r1, [pc, #32]	; (800355c <__NVIC_SetPriority+0x50>)
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	3b04      	subs	r3, #4
 8003544:	0112      	lsls	r2, r2, #4
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	440b      	add	r3, r1
 800354a:	761a      	strb	r2, [r3, #24]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000e100 	.word	0xe000e100
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f1c3 0307 	rsb	r3, r3, #7
 800357a:	2b04      	cmp	r3, #4
 800357c:	bf28      	it	cs
 800357e:	2304      	movcs	r3, #4
 8003580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3304      	adds	r3, #4
 8003586:	2b06      	cmp	r3, #6
 8003588:	d902      	bls.n	8003590 <NVIC_EncodePriority+0x30>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3b03      	subs	r3, #3
 800358e:	e000      	b.n	8003592 <NVIC_EncodePriority+0x32>
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	43d9      	mvns	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	4313      	orrs	r3, r2
         );
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3724      	adds	r7, #36	; 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d8:	d301      	bcc.n	80035de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035da:	2301      	movs	r3, #1
 80035dc:	e00f      	b.n	80035fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <SysTick_Config+0x40>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035e6:	210f      	movs	r1, #15
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	f7ff ff8e 	bl	800350c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <SysTick_Config+0x40>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <SysTick_Config+0x40>)
 80035f8:	2207      	movs	r2, #7
 80035fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	e000e010 	.word	0xe000e010

0800360c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff29 	bl	800346c <__NVIC_SetPriorityGrouping>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003630:	f7ff ff40 	bl	80034b4 <__NVIC_GetPriorityGrouping>
 8003634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	6978      	ldr	r0, [r7, #20]
 800363c:	f7ff ff90 	bl	8003560 <NVIC_EncodePriority>
 8003640:	4602      	mov	r2, r0
 8003642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff5f 	bl	800350c <__NVIC_SetPriority>
}
 800364e:	bf00      	nop
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	4603      	mov	r3, r0
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff33 	bl	80034d0 <__NVIC_EnableIRQ>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ffa4 	bl	80035c8 <SysTick_Config>
 8003680:	4603      	mov	r3, r0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e08d      	b.n	80037ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_DMA_Init+0x138>)
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d80f      	bhi.n	80036ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b45      	ldr	r3, [pc, #276]	; (80037c8 <HAL_DMA_Init+0x13c>)
 80036b2:	4413      	add	r3, r2
 80036b4:	4a45      	ldr	r2, [pc, #276]	; (80037cc <HAL_DMA_Init+0x140>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	009a      	lsls	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a42      	ldr	r2, [pc, #264]	; (80037d0 <HAL_DMA_Init+0x144>)
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40
 80036c8:	e00e      	b.n	80036e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <HAL_DMA_Init+0x148>)
 80036d2:	4413      	add	r3, r2
 80036d4:	4a3d      	ldr	r2, [pc, #244]	; (80037cc <HAL_DMA_Init+0x140>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a3c      	ldr	r2, [pc, #240]	; (80037d8 <HAL_DMA_Init+0x14c>)
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800370c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8fe 	bl	800393c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003748:	d102      	bne.n	8003750 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003764:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <HAL_DMA_Init+0x104>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b04      	cmp	r3, #4
 8003774:	d80c      	bhi.n	8003790 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f91e 	bl	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e008      	b.n	80037a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40020407 	.word	0x40020407
 80037c8:	bffdfff8 	.word	0xbffdfff8
 80037cc:	cccccccd 	.word	0xcccccccd
 80037d0:	40020000 	.word	0x40020000
 80037d4:	bffdfbf8 	.word	0xbffdfbf8
 80037d8:	40020400 	.word	0x40020400

080037dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2204      	movs	r2, #4
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d026      	beq.n	8003856 <HAL_DMA_IRQHandler+0x7a>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d021      	beq.n	8003856 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	2104      	movs	r1, #4
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	2b00      	cmp	r3, #0
 800384a:	d071      	beq.n	8003930 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003854:	e06c      	b.n	8003930 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2202      	movs	r2, #2
 8003860:	409a      	lsls	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02e      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d029      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 020a 	bic.w	r2, r2, #10
 8003890:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f003 021f 	and.w	r2, r3, #31
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2102      	movs	r1, #2
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d038      	beq.n	8003930 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038c6:	e033      	b.n	8003930 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2208      	movs	r2, #8
 80038d2:	409a      	lsls	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02a      	beq.n	8003932 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d025      	beq.n	8003932 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 020e 	bic.w	r2, r2, #14
 80038f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f003 021f 	and.w	r2, r3, #31
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003930:	bf00      	nop
 8003932:	bf00      	nop
}
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d802      	bhi.n	8003956 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e001      	b.n	800395a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003958:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3b08      	subs	r3, #8
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	009a      	lsls	r2, r3, #2
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	461a      	mov	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003986:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2201      	movs	r2, #1
 8003990:	409a      	lsls	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40020407 	.word	0x40020407
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020820 	.word	0x40020820
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	40020880 	.word	0x40020880

080039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039da:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	1000823f 	.word	0x1000823f
 80039fc:	40020940 	.word	0x40020940

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a0e:	e15a      	b.n	8003cc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 814c 	beq.w	8003cc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d005      	beq.n	8003a40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d130      	bne.n	8003aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a76:	2201      	movs	r2, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 0201 	and.w	r2, r3, #1
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d017      	beq.n	8003ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d123      	bne.n	8003b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	08da      	lsrs	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	08da      	lsrs	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3208      	adds	r2, #8
 8003b2c:	6939      	ldr	r1, [r7, #16]
 8003b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80a6 	beq.w	8003cc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b74:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b78:	4a5a      	ldr	r2, [pc, #360]	; (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b80:	4b58      	ldr	r3, [pc, #352]	; (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8c:	4a56      	ldr	r2, [pc, #344]	; (8003ce8 <HAL_GPIO_Init+0x2e8>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bb6:	d01f      	beq.n	8003bf8 <HAL_GPIO_Init+0x1f8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a4c      	ldr	r2, [pc, #304]	; (8003cec <HAL_GPIO_Init+0x2ec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d019      	beq.n	8003bf4 <HAL_GPIO_Init+0x1f4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <HAL_GPIO_Init+0x2f0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_GPIO_Init+0x1f0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <HAL_GPIO_Init+0x2f4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00d      	beq.n	8003bec <HAL_GPIO_Init+0x1ec>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a49      	ldr	r2, [pc, #292]	; (8003cf8 <HAL_GPIO_Init+0x2f8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x1e8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a48      	ldr	r2, [pc, #288]	; (8003cfc <HAL_GPIO_Init+0x2fc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_GPIO_Init+0x1e4>
 8003be0:	2305      	movs	r3, #5
 8003be2:	e00a      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003be4:	2306      	movs	r3, #6
 8003be6:	e008      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003be8:	2304      	movs	r3, #4
 8003bea:	e006      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bec:	2303      	movs	r3, #3
 8003bee:	e004      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e002      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	f002 0203 	and.w	r2, r2, #3
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	4093      	lsls	r3, r2
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c0a:	4937      	ldr	r1, [pc, #220]	; (8003ce8 <HAL_GPIO_Init+0x2e8>)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3302      	adds	r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c18:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c3c:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c42:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c66:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c6c:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cba:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f ae9d 	bne.w	8003a10 <HAL_GPIO_Init+0x10>
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	48000400 	.word	0x48000400
 8003cf0:	48000800 	.word	0x48000800
 8003cf4:	48000c00 	.word	0x48000c00
 8003cf8:	48001000 	.word	0x48001000
 8003cfc:	48001400 	.word	0x48001400
 8003d00:	40010400 	.word	0x40010400

08003d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
 8003d10:	4613      	mov	r3, r2
 8003d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d14:	787b      	ldrb	r3, [r7, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f806 	bl	8003d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e08d      	b.n	8003ea8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fd faf3 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2224      	movs	r2, #36	; 0x24
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	e006      	b.n	8003e02 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d108      	bne.n	8003e1c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	e007      	b.n	8003e2c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69d9      	ldr	r1, [r3, #28]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d138      	bne.n	8003f38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e032      	b.n	8003f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2224      	movs	r2, #36	; 0x24
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d139      	bne.n	8003fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e033      	b.n	8003fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2224      	movs	r2, #36	; 0x24
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d141      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fee:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d131      	bne.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ffc:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004002:	4a46      	ldr	r2, [pc, #280]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800400c:	4b43      	ldr	r3, [pc, #268]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004014:	4a41      	ldr	r2, [pc, #260]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800401a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800401c:	4b40      	ldr	r3, [pc, #256]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2232      	movs	r2, #50	; 0x32
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	4a3f      	ldr	r2, [pc, #252]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	0c9b      	lsrs	r3, r3, #18
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004032:	e002      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d102      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f2      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404e:	4b33      	ldr	r3, [pc, #204]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d158      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e057      	b.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004060:	4b2e      	ldr	r3, [pc, #184]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004066:	4a2d      	ldr	r2, [pc, #180]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004070:	e04d      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d141      	bne.n	80040fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004086:	d131      	bne.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800408e:	4a23      	ldr	r2, [pc, #140]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004098:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040a0:	4a1e      	ldr	r2, [pc, #120]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2232      	movs	r2, #50	; 0x32
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	0c9b      	lsrs	r3, r3, #18
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040be:	e002      	b.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d102      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f2      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e6:	d112      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e011      	b.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f2:	4a0a      	ldr	r2, [pc, #40]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040fc:	e007      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004106:	4a05      	ldr	r2, [pc, #20]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40007000 	.word	0x40007000
 8004120:	20000004 	.word	0x20000004
 8004124:	431bde83 	.word	0x431bde83

08004128 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004136:	6093      	str	r3, [r2, #8]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40007000 	.word	0x40007000

08004148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e2fe      	b.n	8004758 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d075      	beq.n	8004252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004166:	4b97      	ldr	r3, [pc, #604]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004170:	4b94      	ldr	r3, [pc, #592]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d102      	bne.n	8004186 <HAL_RCC_OscConfig+0x3e>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d002      	beq.n	800418c <HAL_RCC_OscConfig+0x44>
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b8d      	ldr	r3, [pc, #564]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05b      	beq.n	8004250 <HAL_RCC_OscConfig+0x108>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d157      	bne.n	8004250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e2d9      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x74>
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a84      	ldr	r2, [pc, #528]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7e      	ldr	r2, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b7c      	ldr	r3, [pc, #496]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7b      	ldr	r2, [pc, #492]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041e0:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a74      	ldr	r2, [pc, #464]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fe f806 	bl	8002210 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fe f802 	bl	8002210 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e29e      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xc0>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fff2 	bl	8002210 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd ffee 	bl	8002210 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e28a      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004242:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0xe8>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d075      	beq.n	800434a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425e:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004268:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d102      	bne.n	800427e <HAL_RCC_OscConfig+0x136>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d002      	beq.n	8004284 <HAL_RCC_OscConfig+0x13c>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d11f      	bne.n	80042c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004284:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_OscConfig+0x154>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e25d      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	4946      	ldr	r1, [pc, #280]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042b0:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <HAL_RCC_OscConfig+0x280>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd ff5f 	bl	8002178 <HAL_InitTick>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d043      	beq.n	8004348 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e249      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d023      	beq.n	8004314 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3c      	ldr	r2, [pc, #240]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fd ff9a 	bl	8002210 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fd ff96 	bl	8002210 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e232      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	492d      	ldr	r1, [pc, #180]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
 8004312:	e01a      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800431a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd ff76 	bl	8002210 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004328:	f7fd ff72 	bl	8002210 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e20e      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1e0>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d041      	beq.n	80043da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01c      	beq.n	8004398 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fd ff4f 	bl	8002210 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004376:	f7fd ff4b 	bl	8002210 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e1e7      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ef      	beq.n	8004376 <HAL_RCC_OscConfig+0x22e>
 8004396:	e020      	b.n	80043da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439e:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fd ff32 	bl	8002210 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043ae:	e00d      	b.n	80043cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fd ff2e 	bl	8002210 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d906      	bls.n	80043cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1ca      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043cc:	4b8c      	ldr	r3, [pc, #560]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ea      	bne.n	80043b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80a6 	beq.w	8004534 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ec:	4b84      	ldr	r3, [pc, #528]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_OscConfig+0x2b4>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x2b6>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	4b7f      	ldr	r3, [pc, #508]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	4a7e      	ldr	r2, [pc, #504]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440c:	6593      	str	r3, [r2, #88]	; 0x58
 800440e:	4b7c      	ldr	r3, [pc, #496]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800441a:	2301      	movs	r3, #1
 800441c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441e:	4b79      	ldr	r3, [pc, #484]	; (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d118      	bne.n	800445c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800442a:	4b76      	ldr	r3, [pc, #472]	; (8004604 <HAL_RCC_OscConfig+0x4bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a75      	ldr	r2, [pc, #468]	; (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004436:	f7fd feeb 	bl	8002210 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fd fee7 	bl	8002210 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e183      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004450:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d108      	bne.n	8004476 <HAL_RCC_OscConfig+0x32e>
 8004464:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	4a65      	ldr	r2, [pc, #404]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004474:	e024      	b.n	80044c0 <HAL_RCC_OscConfig+0x378>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d110      	bne.n	80044a0 <HAL_RCC_OscConfig+0x358>
 800447e:	4b60      	ldr	r3, [pc, #384]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	4a5e      	ldr	r2, [pc, #376]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800448e:	4b5c      	ldr	r3, [pc, #368]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	4a5a      	ldr	r2, [pc, #360]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800449e:	e00f      	b.n	80044c0 <HAL_RCC_OscConfig+0x378>
 80044a0:	4b57      	ldr	r3, [pc, #348]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	4a56      	ldr	r2, [pc, #344]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b0:	4b53      	ldr	r3, [pc, #332]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fd fea2 	bl	8002210 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fd fe9e 	bl	8002210 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e138      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ed      	beq.n	80044d0 <HAL_RCC_OscConfig+0x388>
 80044f4:	e015      	b.n	8004522 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fd fe8b 	bl	8002210 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fd fe87 	bl	8002210 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	; 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e121      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ed      	bne.n	80044fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004522:	7ffb      	ldrb	r3, [r7, #31]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	4a34      	ldr	r2, [pc, #208]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d03c      	beq.n	80045ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01c      	beq.n	8004582 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800454e:	4a2c      	ldr	r2, [pc, #176]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd fe5a 	bl	8002210 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004560:	f7fd fe56 	bl	8002210 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e0f2      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004572:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <HAL_RCC_OscConfig+0x418>
 8004580:	e01b      	b.n	80045ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004582:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004592:	f7fd fe3d 	bl	8002210 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459a:	f7fd fe39 	bl	8002210 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0d5      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ef      	bne.n	800459a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80c9 	beq.w	8004756 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	f000 8083 	beq.w	80046d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d15e      	bne.n	8004698 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a08      	ldr	r2, [pc, #32]	; (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd fe13 	bl	8002210 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ec:	e00c      	b.n	8004608 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd fe0f 	bl	8002210 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d905      	bls.n	8004608 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0ab      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
 8004600:	40021000 	.word	0x40021000
 8004604:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004608:	4b55      	ldr	r3, [pc, #340]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ec      	bne.n	80045ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004614:	4b52      	ldr	r3, [pc, #328]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4b52      	ldr	r3, [pc, #328]	; (8004764 <HAL_RCC_OscConfig+0x61c>)
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6a11      	ldr	r1, [r2, #32]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004624:	3a01      	subs	r2, #1
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	4311      	orrs	r1, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800462e:	0212      	lsls	r2, r2, #8
 8004630:	4311      	orrs	r1, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004636:	0852      	lsrs	r2, r2, #1
 8004638:	3a01      	subs	r2, #1
 800463a:	0552      	lsls	r2, r2, #21
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004642:	0852      	lsrs	r2, r2, #1
 8004644:	3a01      	subs	r2, #1
 8004646:	0652      	lsls	r2, r2, #25
 8004648:	4311      	orrs	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800464e:	06d2      	lsls	r2, r2, #27
 8004650:	430a      	orrs	r2, r1
 8004652:	4943      	ldr	r1, [pc, #268]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 8004654:	4313      	orrs	r3, r2
 8004656:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b41      	ldr	r3, [pc, #260]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a40      	ldr	r2, [pc, #256]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800465e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd fdce 	bl	8002210 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd fdca 	bl	8002210 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e066      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468a:	4b35      	ldr	r3, [pc, #212]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x530>
 8004696:	e05e      	b.n	8004756 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a30      	ldr	r2, [pc, #192]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fdb4 	bl	8002210 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd fdb0 	bl	8002210 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e04c      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046ca:	4b25      	ldr	r3, [pc, #148]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	4924      	ldr	r1, [pc, #144]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0x620>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]
 80046d6:	e03e      	b.n	8004756 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e039      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046e4:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_RCC_OscConfig+0x618>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d12c      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	3b01      	subs	r3, #1
 8004704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d123      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d11b      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d113      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d109      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d001      	beq.n	8004756 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	019f800c 	.word	0x019f800c
 8004768:	feeefffc 	.word	0xfeeefffc

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e11e      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b91      	ldr	r3, [pc, #580]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d910      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b8e      	ldr	r3, [pc, #568]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 020f 	bic.w	r2, r3, #15
 800479a:	498c      	ldr	r1, [pc, #560]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b8a      	ldr	r3, [pc, #552]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e106      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d073      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d129      	bne.n	800481c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c8:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0f4      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047d8:	f000 f99e 	bl	8004b18 <RCC_GetSysClockFreqFromPLLSource>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4a7c      	ldr	r2, [pc, #496]	; (80049d4 <HAL_RCC_ClockConfig+0x268>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d93f      	bls.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047e6:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d033      	beq.n	8004866 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004802:	2b00      	cmp	r3, #0
 8004804:	d12f      	bne.n	8004866 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004806:	4b72      	ldr	r3, [pc, #456]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480e:	4a70      	ldr	r2, [pc, #448]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004814:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e024      	b.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d107      	bne.n	8004834 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004824:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0c6      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004834:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0be      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004844:	f000 f8ce 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8004848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a61      	ldr	r2, [pc, #388]	; (80049d4 <HAL_RCC_ClockConfig+0x268>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d909      	bls.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004852:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485a:	4a5d      	ldr	r2, [pc, #372]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b5a      	ldr	r3, [pc, #360]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4957      	ldr	r1, [pc, #348]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004878:	f7fd fcca 	bl	8002210 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fd fcc6 	bl	8002210 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e095      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d023      	beq.n	80048fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a42      	ldr	r2, [pc, #264]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048d8:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048e0:	4a3b      	ldr	r2, [pc, #236]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4936      	ldr	r1, [pc, #216]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
 80048fa:	e008      	b.n	800490e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d105      	bne.n	800490e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004902:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4a32      	ldr	r2, [pc, #200]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800490e:	4b2f      	ldr	r3, [pc, #188]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d21d      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 020f 	bic.w	r2, r3, #15
 8004924:	4929      	ldr	r1, [pc, #164]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800492c:	f7fd fc70 	bl	8002210 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fd fc6c 	bl	8002210 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e03b      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d1ed      	bne.n	8004934 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4917      	ldr	r1, [pc, #92]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004982:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490f      	ldr	r1, [pc, #60]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004996:	f000 f825 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490c      	ldr	r1, [pc, #48]	; (80049d8 <HAL_RCC_ClockConfig+0x26c>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_RCC_ClockConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fbdc 	bl	8002178 <HAL_InitTick>
 80049c0:	4603      	mov	r3, r0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40021000 	.word	0x40021000
 80049d4:	04c4b400 	.word	0x04c4b400
 80049d8:	08007d20 	.word	0x08007d20
 80049dc:	20000004 	.word	0x20000004
 80049e0:	20000008 	.word	0x20000008

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049ea:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d102      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e047      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d102      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a08:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	e03e      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a0e:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d136      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a38:	4a1a      	ldr	r2, [pc, #104]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a42:	68d2      	ldr	r2, [r2, #12]
 8004a44:	0a12      	lsrs	r2, r2, #8
 8004a46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	617b      	str	r3, [r7, #20]
      break;
 8004a50:	e00c      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	0a12      	lsrs	r2, r2, #8
 8004a60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]
      break;
 8004a6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	0e5b      	lsrs	r3, r3, #25
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	3301      	adds	r3, #1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e001      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a8c:	693b      	ldr	r3, [r7, #16]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	016e3600 	.word	0x016e3600

08004aa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000004 	.word	0x20000004

08004ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ac4:	f7ff fff0 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	08007d30 	.word	0x08007d30

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004af0:	f7ff ffda 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0adb      	lsrs	r3, r3, #11
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4904      	ldr	r1, [pc, #16]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	08007d30 	.word	0x08007d30

08004b18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d10c      	bne.n	8004b56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b46:	68d2      	ldr	r2, [r2, #12]
 8004b48:	0a12      	lsrs	r2, r2, #8
 8004b4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	617b      	str	r3, [r7, #20]
    break;
 8004b54:	e00c      	b.n	8004b70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	4a0e      	ldr	r2, [pc, #56]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	0a12      	lsrs	r2, r2, #8
 8004b64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
    break;
 8004b6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0e5b      	lsrs	r3, r3, #25
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b8a:	687b      	ldr	r3, [r7, #4]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	016e3600 	.word	0x016e3600
 8004ba0:	00f42400 	.word	0x00f42400

08004ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bac:	2300      	movs	r3, #0
 8004bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8098 	beq.w	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc6:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	4a3f      	ldr	r2, [pc, #252]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bde:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bea:	2301      	movs	r3, #1
 8004bec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bee:	4b3a      	ldr	r3, [pc, #232]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a39      	ldr	r2, [pc, #228]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfa:	f7fd fb09 	bl	8002210 <HAL_GetTick>
 8004bfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c00:	e009      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fd fb05 	bl	8002210 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d902      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	74fb      	strb	r3, [r7, #19]
        break;
 8004c14:	e005      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ef      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d159      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c28:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01e      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d019      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c44:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c50:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c60:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c70:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fd fac5 	bl	8002210 <HAL_GetTick>
 8004c86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c88:	e00b      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fd fac1 	bl	8002210 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d902      	bls.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ec      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	74bb      	strb	r3, [r7, #18]
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce0:	7c7b      	ldrb	r3, [r7, #17]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d105      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce6:	4ba7      	ldr	r3, [pc, #668]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	4aa6      	ldr	r2, [pc, #664]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cfe:	4ba1      	ldr	r3, [pc, #644]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f023 0203 	bic.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	499d      	ldr	r1, [pc, #628]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d20:	4b98      	ldr	r3, [pc, #608]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f023 020c 	bic.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4995      	ldr	r1, [pc, #596]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d42:	4b90      	ldr	r3, [pc, #576]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	498c      	ldr	r1, [pc, #560]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d64:	4b87      	ldr	r3, [pc, #540]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	4984      	ldr	r1, [pc, #528]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d86:	4b7f      	ldr	r3, [pc, #508]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	497b      	ldr	r1, [pc, #492]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da8:	4b76      	ldr	r3, [pc, #472]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4973      	ldr	r1, [pc, #460]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dca:	4b6e      	ldr	r3, [pc, #440]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	496a      	ldr	r1, [pc, #424]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dec:	4b65      	ldr	r3, [pc, #404]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	4962      	ldr	r1, [pc, #392]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	4959      	ldr	r1, [pc, #356]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e30:	4b54      	ldr	r3, [pc, #336]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	4951      	ldr	r1, [pc, #324]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e52:	4b4c      	ldr	r3, [pc, #304]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	4948      	ldr	r1, [pc, #288]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4940      	ldr	r1, [pc, #256]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e94:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a3a      	ldr	r2, [pc, #232]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eac:	4b35      	ldr	r3, [pc, #212]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	4932      	ldr	r1, [pc, #200]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a2c      	ldr	r2, [pc, #176]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ed6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ee4:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	4924      	ldr	r1, [pc, #144]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b1f      	ldr	r3, [pc, #124]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	4916      	ldr	r1, [pc, #88]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d019      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4908      	ldr	r1, [pc, #32]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f72:	d109      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a02      	ldr	r2, [pc, #8]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
 8004f80:	e002      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f94:	4b29      	ldr	r3, [pc, #164]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	4926      	ldr	r1, [pc, #152]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fb4:	4b21      	ldr	r3, [pc, #132]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a20      	ldr	r2, [pc, #128]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fda:	4918      	ldr	r1, [pc, #96]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fec:	4b13      	ldr	r3, [pc, #76]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a12      	ldr	r2, [pc, #72]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d015      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005006:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800500a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	490a      	ldr	r1, [pc, #40]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005022:	d105      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800502e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005030:	7cbb      	ldrb	r3, [r7, #18]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e049      	b.n	80050e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc fe04 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f001 f86e 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	d001      	beq.n	8005108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e04c      	b.n	80051a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <HAL_TIM_Base_Start+0xc0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d01d      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <HAL_TIM_Base_Start+0xc4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <HAL_TIM_Base_Start+0xc8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <HAL_TIM_Base_Start+0xcc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <HAL_TIM_Base_Start+0xd0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <HAL_TIM_Base_Start+0xd4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_TIM_Base_Start+0x70>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <HAL_TIM_Base_Start+0xd8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d115      	bne.n	800518c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_TIM_Base_Start+0xdc>)
 8005168:	4013      	ands	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b06      	cmp	r3, #6
 8005170:	d015      	beq.n	800519e <HAL_TIM_Base_Start+0xae>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005178:	d011      	beq.n	800519e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518a:	e008      	b.n	800519e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e000      	b.n	80051a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40015000 	.word	0x40015000
 80051cc:	00010007 	.word	0x00010007

080051d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d001      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e054      	b.n	8005292 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005212:	d01d      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a22      	ldr	r2, [pc, #136]	; (80052a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a21      	ldr	r2, [pc, #132]	; (80052a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <HAL_TIM_Base_Start_IT+0xdc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d115      	bne.n	800527c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	4b19      	ldr	r3, [pc, #100]	; (80052bc <HAL_TIM_Base_Start_IT+0xec>)
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b06      	cmp	r3, #6
 8005260:	d015      	beq.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d011      	beq.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	e008      	b.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e000      	b.n	8005290 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40013400 	.word	0x40013400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40015000 	.word	0x40015000
 80052bc:	00010007 	.word	0x00010007

080052c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e049      	b.n	8005366 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fd88 	bl	8001dfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 ff2e 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d109      	bne.n	8005394 <HAL_TIM_PWM_Start+0x24>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e03c      	b.n	800540e <HAL_TIM_PWM_Start+0x9e>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b04      	cmp	r3, #4
 8005398:	d109      	bne.n	80053ae <HAL_TIM_PWM_Start+0x3e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e02f      	b.n	800540e <HAL_TIM_PWM_Start+0x9e>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d109      	bne.n	80053c8 <HAL_TIM_PWM_Start+0x58>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e022      	b.n	800540e <HAL_TIM_PWM_Start+0x9e>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d109      	bne.n	80053e2 <HAL_TIM_PWM_Start+0x72>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	bf14      	ite	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	2300      	moveq	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	e015      	b.n	800540e <HAL_TIM_PWM_Start+0x9e>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d109      	bne.n	80053fc <HAL_TIM_PWM_Start+0x8c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	bf14      	ite	ne
 80053f4:	2301      	movne	r3, #1
 80053f6:	2300      	moveq	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e008      	b.n	800540e <HAL_TIM_PWM_Start+0x9e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e0a6      	b.n	8005564 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d104      	bne.n	8005426 <HAL_TIM_PWM_Start+0xb6>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005424:	e023      	b.n	800546e <HAL_TIM_PWM_Start+0xfe>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b04      	cmp	r3, #4
 800542a:	d104      	bne.n	8005436 <HAL_TIM_PWM_Start+0xc6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005434:	e01b      	b.n	800546e <HAL_TIM_PWM_Start+0xfe>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b08      	cmp	r3, #8
 800543a:	d104      	bne.n	8005446 <HAL_TIM_PWM_Start+0xd6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005444:	e013      	b.n	800546e <HAL_TIM_PWM_Start+0xfe>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d104      	bne.n	8005456 <HAL_TIM_PWM_Start+0xe6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005454:	e00b      	b.n	800546e <HAL_TIM_PWM_Start+0xfe>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b10      	cmp	r3, #16
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Start+0xf6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005464:	e003      	b.n	800546e <HAL_TIM_PWM_Start+0xfe>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2202      	movs	r2, #2
 800546a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2201      	movs	r2, #1
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f001 fc16 	bl	8006ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a3a      	ldr	r2, [pc, #232]	; (800556c <HAL_TIM_PWM_Start+0x1fc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d018      	beq.n	80054b8 <HAL_TIM_PWM_Start+0x148>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a39      	ldr	r2, [pc, #228]	; (8005570 <HAL_TIM_PWM_Start+0x200>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <HAL_TIM_PWM_Start+0x148>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a37      	ldr	r2, [pc, #220]	; (8005574 <HAL_TIM_PWM_Start+0x204>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00e      	beq.n	80054b8 <HAL_TIM_PWM_Start+0x148>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a36      	ldr	r2, [pc, #216]	; (8005578 <HAL_TIM_PWM_Start+0x208>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d009      	beq.n	80054b8 <HAL_TIM_PWM_Start+0x148>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a34      	ldr	r2, [pc, #208]	; (800557c <HAL_TIM_PWM_Start+0x20c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_TIM_PWM_Start+0x148>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a33      	ldr	r2, [pc, #204]	; (8005580 <HAL_TIM_PWM_Start+0x210>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d101      	bne.n	80054bc <HAL_TIM_PWM_Start+0x14c>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <HAL_TIM_PWM_Start+0x14e>
 80054bc:	2300      	movs	r3, #0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <HAL_TIM_PWM_Start+0x1fc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1b2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d01d      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1b2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_TIM_PWM_Start+0x214>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1b2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a24      	ldr	r2, [pc, #144]	; (8005588 <HAL_TIM_PWM_Start+0x218>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1b2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a23      	ldr	r2, [pc, #140]	; (800558c <HAL_TIM_PWM_Start+0x21c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1b2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <HAL_TIM_PWM_Start+0x200>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1b2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_TIM_PWM_Start+0x204>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1b2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <HAL_TIM_PWM_Start+0x210>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d115      	bne.n	800554e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_TIM_PWM_Start+0x220>)
 800552a:	4013      	ands	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b06      	cmp	r3, #6
 8005532:	d015      	beq.n	8005560 <HAL_TIM_PWM_Start+0x1f0>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553a:	d011      	beq.n	8005560 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554c:	e008      	b.n	8005560 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e000      	b.n	8005562 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005560:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40015000 	.word	0x40015000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	00010007 	.word	0x00010007

08005594 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e049      	b.n	800563a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f841 	bl	8005642 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fdc4 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <HAL_TIM_IC_Start_IT+0x1e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e023      	b.n	80056be <HAL_TIM_IC_Start_IT+0x66>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b04      	cmp	r3, #4
 800567a:	d104      	bne.n	8005686 <HAL_TIM_IC_Start_IT+0x2e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005682:	b2db      	uxtb	r3, r3
 8005684:	e01b      	b.n	80056be <HAL_TIM_IC_Start_IT+0x66>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d104      	bne.n	8005696 <HAL_TIM_IC_Start_IT+0x3e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005692:	b2db      	uxtb	r3, r3
 8005694:	e013      	b.n	80056be <HAL_TIM_IC_Start_IT+0x66>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b0c      	cmp	r3, #12
 800569a:	d104      	bne.n	80056a6 <HAL_TIM_IC_Start_IT+0x4e>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e00b      	b.n	80056be <HAL_TIM_IC_Start_IT+0x66>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d104      	bne.n	80056b6 <HAL_TIM_IC_Start_IT+0x5e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	e003      	b.n	80056be <HAL_TIM_IC_Start_IT+0x66>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <HAL_TIM_IC_Start_IT+0x78>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	e013      	b.n	80056f8 <HAL_TIM_IC_Start_IT+0xa0>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d104      	bne.n	80056e0 <HAL_TIM_IC_Start_IT+0x88>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	e00b      	b.n	80056f8 <HAL_TIM_IC_Start_IT+0xa0>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d104      	bne.n	80056f0 <HAL_TIM_IC_Start_IT+0x98>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e003      	b.n	80056f8 <HAL_TIM_IC_Start_IT+0xa0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d102      	bne.n	8005706 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005700:	7b7b      	ldrb	r3, [r7, #13]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d001      	beq.n	800570a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e0e2      	b.n	80058d0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <HAL_TIM_IC_Start_IT+0xc2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005718:	e023      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x10a>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b04      	cmp	r3, #4
 800571e:	d104      	bne.n	800572a <HAL_TIM_IC_Start_IT+0xd2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005728:	e01b      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x10a>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b08      	cmp	r3, #8
 800572e:	d104      	bne.n	800573a <HAL_TIM_IC_Start_IT+0xe2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005738:	e013      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x10a>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d104      	bne.n	800574a <HAL_TIM_IC_Start_IT+0xf2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005748:	e00b      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x10a>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b10      	cmp	r3, #16
 800574e:	d104      	bne.n	800575a <HAL_TIM_IC_Start_IT+0x102>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005758:	e003      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x10a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <HAL_TIM_IC_Start_IT+0x11a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005770:	e013      	b.n	800579a <HAL_TIM_IC_Start_IT+0x142>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b04      	cmp	r3, #4
 8005776:	d104      	bne.n	8005782 <HAL_TIM_IC_Start_IT+0x12a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005780:	e00b      	b.n	800579a <HAL_TIM_IC_Start_IT+0x142>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d104      	bne.n	8005792 <HAL_TIM_IC_Start_IT+0x13a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005790:	e003      	b.n	800579a <HAL_TIM_IC_Start_IT+0x142>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2202      	movs	r2, #2
 8005796:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d841      	bhi.n	8005824 <HAL_TIM_IC_Start_IT+0x1cc>
 80057a0:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <HAL_TIM_IC_Start_IT+0x150>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057dd 	.word	0x080057dd
 80057ac:	08005825 	.word	0x08005825
 80057b0:	08005825 	.word	0x08005825
 80057b4:	08005825 	.word	0x08005825
 80057b8:	080057ef 	.word	0x080057ef
 80057bc:	08005825 	.word	0x08005825
 80057c0:	08005825 	.word	0x08005825
 80057c4:	08005825 	.word	0x08005825
 80057c8:	08005801 	.word	0x08005801
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005825 	.word	0x08005825
 80057d4:	08005825 	.word	0x08005825
 80057d8:	08005813 	.word	0x08005813
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0202 	orr.w	r2, r2, #2
 80057ea:	60da      	str	r2, [r3, #12]
      break;
 80057ec:	e01d      	b.n	800582a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0204 	orr.w	r2, r2, #4
 80057fc:	60da      	str	r2, [r3, #12]
      break;
 80057fe:	e014      	b.n	800582a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0208 	orr.w	r2, r2, #8
 800580e:	60da      	str	r2, [r3, #12]
      break;
 8005810:	e00b      	b.n	800582a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0210 	orr.w	r2, r2, #16
 8005820:	60da      	str	r2, [r3, #12]
      break;
 8005822:	e002      	b.n	800582a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      break;
 8005828:	bf00      	nop
  }

  if (status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d14e      	bne.n	80058ce <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2201      	movs	r2, #1
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f001 fa35 	bl	8006ca8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a25      	ldr	r2, [pc, #148]	; (80058d8 <HAL_TIM_IC_Start_IT+0x280>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x236>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005850:	d01d      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x236>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a21      	ldr	r2, [pc, #132]	; (80058dc <HAL_TIM_IC_Start_IT+0x284>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d018      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x236>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <HAL_TIM_IC_Start_IT+0x288>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x236>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <HAL_TIM_IC_Start_IT+0x28c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x236>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <HAL_TIM_IC_Start_IT+0x290>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x236>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <HAL_TIM_IC_Start_IT+0x294>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x236>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_TIM_IC_Start_IT+0x298>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d115      	bne.n	80058ba <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <HAL_TIM_IC_Start_IT+0x29c>)
 8005896:	4013      	ands	r3, r2
 8005898:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b06      	cmp	r3, #6
 800589e:	d015      	beq.n	80058cc <HAL_TIM_IC_Start_IT+0x274>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a6:	d011      	beq.n	80058cc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	e008      	b.n	80058cc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e000      	b.n	80058ce <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40013400 	.word	0x40013400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40015000 	.word	0x40015000
 80058f4:	00010007 	.word	0x00010007

080058f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0202 	mvn.w	r2, #2
 800592c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fb fe42 	bl	80015cc <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fbea 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fbf1 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d020      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0204 	mvn.w	r2, #4
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fb fe1c 	bl	80015cc <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fbc4 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fbcb 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d020      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01b      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0208 	mvn.w	r2, #8
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb fdf6 	bl	80015cc <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fb9e 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fba5 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d020      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01b      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2208      	movs	r2, #8
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fb fdd0 	bl	80015cc <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fb78 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fb7f 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0201 	mvn.w	r2, #1
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb fde8 	bl	8001634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fa65 	bl	8006f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 fa5d 	bl	8006f70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fb39 	bl	800614c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f06f 0220 	mvn.w	r2, #32
 8005af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f001 fa25 	bl	8006f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00c      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 fa31 	bl	8006f84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00c      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 fa29 	bl	8006f98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00c      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fa21 	bl	8006fac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00c      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 fa19 	bl	8006fc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e088      	b.n	8005cc6 <HAL_TIM_IC_ConfigChannel+0x130>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d11b      	bne.n	8005bfa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005bd2:	f000 fea3 	bl	800691c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 020c 	bic.w	r2, r2, #12
 8005be4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6999      	ldr	r1, [r3, #24]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	619a      	str	r2, [r3, #24]
 8005bf8:	e060      	b.n	8005cbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d11c      	bne.n	8005c3a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005c10:	f000 ff27 	bl	8006a62 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c22:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6999      	ldr	r1, [r3, #24]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	619a      	str	r2, [r3, #24]
 8005c38:	e040      	b.n	8005cbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d11b      	bne.n	8005c78 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c50:	f000 ff74 	bl	8006b3c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69da      	ldr	r2, [r3, #28]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 020c 	bic.w	r2, r2, #12
 8005c62:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69d9      	ldr	r1, [r3, #28]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	61da      	str	r2, [r3, #28]
 8005c76:	e021      	b.n	8005cbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b0c      	cmp	r3, #12
 8005c7c:	d11c      	bne.n	8005cb8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c8e:	f000 ff91 	bl	8006bb4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ca0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69d9      	ldr	r1, [r3, #28]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	021a      	lsls	r2, r3, #8
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	61da      	str	r2, [r3, #28]
 8005cb6:	e001      	b.n	8005cbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e0ff      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b14      	cmp	r3, #20
 8005cfa:	f200 80f0 	bhi.w	8005ede <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005edf 	.word	0x08005edf
 8005d0c:	08005edf 	.word	0x08005edf
 8005d10:	08005edf 	.word	0x08005edf
 8005d14:	08005d99 	.word	0x08005d99
 8005d18:	08005edf 	.word	0x08005edf
 8005d1c:	08005edf 	.word	0x08005edf
 8005d20:	08005edf 	.word	0x08005edf
 8005d24:	08005ddb 	.word	0x08005ddb
 8005d28:	08005edf 	.word	0x08005edf
 8005d2c:	08005edf 	.word	0x08005edf
 8005d30:	08005edf 	.word	0x08005edf
 8005d34:	08005e1b 	.word	0x08005e1b
 8005d38:	08005edf 	.word	0x08005edf
 8005d3c:	08005edf 	.word	0x08005edf
 8005d40:	08005edf 	.word	0x08005edf
 8005d44:	08005e5d 	.word	0x08005e5d
 8005d48:	08005edf 	.word	0x08005edf
 8005d4c:	08005edf 	.word	0x08005edf
 8005d50:	08005edf 	.word	0x08005edf
 8005d54:	08005e9d 	.word	0x08005e9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fab2 	bl	80062c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0208 	orr.w	r2, r2, #8
 8005d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0204 	bic.w	r2, r2, #4
 8005d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6999      	ldr	r1, [r3, #24]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	619a      	str	r2, [r3, #24]
      break;
 8005d96:	e0a5      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb2c 	bl	80063fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6999      	ldr	r1, [r3, #24]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	021a      	lsls	r2, r3, #8
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	619a      	str	r2, [r3, #24]
      break;
 8005dd8:	e084      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fb9f 	bl	8006524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0208 	orr.w	r2, r2, #8
 8005df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0204 	bic.w	r2, r2, #4
 8005e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69d9      	ldr	r1, [r3, #28]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	61da      	str	r2, [r3, #28]
      break;
 8005e18:	e064      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fc11 	bl	8006648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69d9      	ldr	r1, [r3, #28]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	021a      	lsls	r2, r3, #8
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	61da      	str	r2, [r3, #28]
      break;
 8005e5a:	e043      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fc84 	bl	8006770 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0208 	orr.w	r2, r2, #8
 8005e76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0204 	bic.w	r2, r2, #4
 8005e86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e9a:	e023      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fcce 	bl	8006844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	021a      	lsls	r2, r3, #8
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005edc:	e002      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop

08005ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_TIM_ConfigClockSource+0x1c>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e0f6      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x20a>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005f32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a6f      	ldr	r2, [pc, #444]	; (800610c <HAL_TIM_ConfigClockSource+0x214>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	f000 80c1 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8005f54:	4a6d      	ldr	r2, [pc, #436]	; (800610c <HAL_TIM_ConfigClockSource+0x214>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	f200 80c6 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f5c:	4a6c      	ldr	r2, [pc, #432]	; (8006110 <HAL_TIM_ConfigClockSource+0x218>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	f000 80b9 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8005f64:	4a6a      	ldr	r2, [pc, #424]	; (8006110 <HAL_TIM_ConfigClockSource+0x218>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	f200 80be 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f6c:	4a69      	ldr	r2, [pc, #420]	; (8006114 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	f000 80b1 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8005f74:	4a67      	ldr	r2, [pc, #412]	; (8006114 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	f200 80b6 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f7c:	4a66      	ldr	r2, [pc, #408]	; (8006118 <HAL_TIM_ConfigClockSource+0x220>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	f000 80a9 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8005f84:	4a64      	ldr	r2, [pc, #400]	; (8006118 <HAL_TIM_ConfigClockSource+0x220>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	f200 80ae 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f8c:	4a63      	ldr	r2, [pc, #396]	; (800611c <HAL_TIM_ConfigClockSource+0x224>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	f000 80a1 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8005f94:	4a61      	ldr	r2, [pc, #388]	; (800611c <HAL_TIM_ConfigClockSource+0x224>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	f200 80a6 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f9c:	4a60      	ldr	r2, [pc, #384]	; (8006120 <HAL_TIM_ConfigClockSource+0x228>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	f000 8099 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8005fa4:	4a5e      	ldr	r2, [pc, #376]	; (8006120 <HAL_TIM_ConfigClockSource+0x228>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	f200 809e 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fb0:	f000 8091 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8005fb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fb8:	f200 8096 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc0:	f000 8089 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8005fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc8:	f200 808e 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd0:	d03e      	beq.n	8006050 <HAL_TIM_ConfigClockSource+0x158>
 8005fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd6:	f200 8087 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	f000 8086 	beq.w	80060ee <HAL_TIM_ConfigClockSource+0x1f6>
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe6:	d87f      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fe8:	2b70      	cmp	r3, #112	; 0x70
 8005fea:	d01a      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x12a>
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d87b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ff0:	2b60      	cmp	r3, #96	; 0x60
 8005ff2:	d050      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x19e>
 8005ff4:	2b60      	cmp	r3, #96	; 0x60
 8005ff6:	d877      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ff8:	2b50      	cmp	r3, #80	; 0x50
 8005ffa:	d03c      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x17e>
 8005ffc:	2b50      	cmp	r3, #80	; 0x50
 8005ffe:	d873      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d058      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0x1be>
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d86f      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006008:	2b30      	cmp	r3, #48	; 0x30
 800600a:	d064      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 800600c:	2b30      	cmp	r3, #48	; 0x30
 800600e:	d86b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d060      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d867      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05c      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 800601c:	2b10      	cmp	r3, #16
 800601e:	d05a      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x1de>
 8006020:	e062      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006032:	f000 fe19 	bl	8006c68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	609a      	str	r2, [r3, #8]
      break;
 800604e:	e04f      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006060:	f000 fe02 	bl	8006c68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006072:	609a      	str	r2, [r3, #8]
      break;
 8006074:	e03c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006082:	461a      	mov	r2, r3
 8006084:	f000 fcbe 	bl	8006a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2150      	movs	r1, #80	; 0x50
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fdcd 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 8006094:	e02c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a2:	461a      	mov	r2, r3
 80060a4:	f000 fd1a 	bl	8006adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2160      	movs	r1, #96	; 0x60
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fdbd 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 80060b4:	e01c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c2:	461a      	mov	r2, r3
 80060c4:	f000 fc9e 	bl	8006a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2140      	movs	r1, #64	; 0x40
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fdad 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 80060d4:	e00c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f000 fda4 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 80060e6:	e003      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e000      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80060ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	00100070 	.word	0x00100070
 8006110:	00100060 	.word	0x00100060
 8006114:	00100050 	.word	0x00100050
 8006118:	00100040 	.word	0x00100040
 800611c:	00100030 	.word	0x00100030
 8006120:	00100020 	.word	0x00100020

08006124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a4c      	ldr	r2, [pc, #304]	; (80062a4 <TIM_Base_SetConfig+0x144>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d017      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d013      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a49      	ldr	r2, [pc, #292]	; (80062a8 <TIM_Base_SetConfig+0x148>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00f      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a48      	ldr	r2, [pc, #288]	; (80062ac <TIM_Base_SetConfig+0x14c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00b      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a47      	ldr	r2, [pc, #284]	; (80062b0 <TIM_Base_SetConfig+0x150>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d007      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a46      	ldr	r2, [pc, #280]	; (80062b4 <TIM_Base_SetConfig+0x154>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_Base_SetConfig+0x48>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a45      	ldr	r2, [pc, #276]	; (80062b8 <TIM_Base_SetConfig+0x158>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d108      	bne.n	80061ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a39      	ldr	r2, [pc, #228]	; (80062a4 <TIM_Base_SetConfig+0x144>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d023      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c8:	d01f      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a36      	ldr	r2, [pc, #216]	; (80062a8 <TIM_Base_SetConfig+0x148>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01b      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a35      	ldr	r2, [pc, #212]	; (80062ac <TIM_Base_SetConfig+0x14c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d017      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a34      	ldr	r2, [pc, #208]	; (80062b0 <TIM_Base_SetConfig+0x150>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a33      	ldr	r2, [pc, #204]	; (80062b4 <TIM_Base_SetConfig+0x154>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a33      	ldr	r2, [pc, #204]	; (80062bc <TIM_Base_SetConfig+0x15c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a32      	ldr	r2, [pc, #200]	; (80062c0 <TIM_Base_SetConfig+0x160>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a31      	ldr	r2, [pc, #196]	; (80062c4 <TIM_Base_SetConfig+0x164>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0xaa>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	; (80062b8 <TIM_Base_SetConfig+0x158>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <TIM_Base_SetConfig+0x144>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <TIM_Base_SetConfig+0x154>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00f      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <TIM_Base_SetConfig+0x15c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00b      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a19      	ldr	r2, [pc, #100]	; (80062c0 <TIM_Base_SetConfig+0x160>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a18      	ldr	r2, [pc, #96]	; (80062c4 <TIM_Base_SetConfig+0x164>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0x110>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a13      	ldr	r2, [pc, #76]	; (80062b8 <TIM_Base_SetConfig+0x158>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d103      	bne.n	8006278 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	611a      	str	r2, [r3, #16]
  }
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40000c00 	.word	0x40000c00
 80062b4:	40013400 	.word	0x40013400
 80062b8:	40015000 	.word	0x40015000
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40014400 	.word	0x40014400
 80062c4:	40014800 	.word	0x40014800

080062c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f023 0201 	bic.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 0302 	bic.w	r3, r3, #2
 8006314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a30      	ldr	r2, [pc, #192]	; (80063e4 <TIM_OC1_SetConfig+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a2f      	ldr	r2, [pc, #188]	; (80063e8 <TIM_OC1_SetConfig+0x120>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00f      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a2e      	ldr	r2, [pc, #184]	; (80063ec <TIM_OC1_SetConfig+0x124>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00b      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a2d      	ldr	r2, [pc, #180]	; (80063f0 <TIM_OC1_SetConfig+0x128>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d007      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a2c      	ldr	r2, [pc, #176]	; (80063f4 <TIM_OC1_SetConfig+0x12c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_OC1_SetConfig+0x88>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <TIM_OC1_SetConfig+0x130>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10c      	bne.n	800636a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0308 	bic.w	r3, r3, #8
 8006356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0304 	bic.w	r3, r3, #4
 8006368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <TIM_OC1_SetConfig+0x11c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <TIM_OC1_SetConfig+0x120>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <TIM_OC1_SetConfig+0x124>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <TIM_OC1_SetConfig+0x128>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <TIM_OC1_SetConfig+0x12c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_OC1_SetConfig+0xd2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <TIM_OC1_SetConfig+0x130>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d111      	bne.n	80063be <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800
 80063f8:	40015000 	.word	0x40015000

080063fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f023 0210 	bic.w	r2, r3, #16
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a2c      	ldr	r2, [pc, #176]	; (800650c <TIM_OC2_SetConfig+0x110>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d007      	beq.n	8006470 <TIM_OC2_SetConfig+0x74>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <TIM_OC2_SetConfig+0x114>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_OC2_SetConfig+0x74>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <TIM_OC2_SetConfig+0x118>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d10d      	bne.n	800648c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1f      	ldr	r2, [pc, #124]	; (800650c <TIM_OC2_SetConfig+0x110>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <TIM_OC2_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a1e      	ldr	r2, [pc, #120]	; (8006518 <TIM_OC2_SetConfig+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <TIM_OC2_SetConfig+0x120>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <TIM_OC2_SetConfig+0x124>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC2_SetConfig+0xc0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a17      	ldr	r2, [pc, #92]	; (8006514 <TIM_OC2_SetConfig+0x118>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d113      	bne.n	80064e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40013400 	.word	0x40013400
 8006514:	40015000 	.word	0x40015000
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800

08006524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2b      	ldr	r2, [pc, #172]	; (8006630 <TIM_OC3_SetConfig+0x10c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <TIM_OC3_SetConfig+0x72>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2a      	ldr	r2, [pc, #168]	; (8006634 <TIM_OC3_SetConfig+0x110>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_OC3_SetConfig+0x72>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a29      	ldr	r2, [pc, #164]	; (8006638 <TIM_OC3_SetConfig+0x114>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10d      	bne.n	80065b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800659c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <TIM_OC3_SetConfig+0x10c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <TIM_OC3_SetConfig+0x110>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00f      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1d      	ldr	r2, [pc, #116]	; (800663c <TIM_OC3_SetConfig+0x118>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00b      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <TIM_OC3_SetConfig+0x11c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d007      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a1b      	ldr	r2, [pc, #108]	; (8006644 <TIM_OC3_SetConfig+0x120>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_OC3_SetConfig+0xbe>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a16      	ldr	r2, [pc, #88]	; (8006638 <TIM_OC3_SetConfig+0x114>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d113      	bne.n	800660a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	621a      	str	r2, [r3, #32]
}
 8006624:	bf00      	nop
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40013400 	.word	0x40013400
 8006638:	40015000 	.word	0x40015000
 800663c:	40014000 	.word	0x40014000
 8006640:	40014400 	.word	0x40014400
 8006644:	40014800 	.word	0x40014800

08006648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	031b      	lsls	r3, r3, #12
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a2c      	ldr	r2, [pc, #176]	; (8006758 <TIM_OC4_SetConfig+0x110>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <TIM_OC4_SetConfig+0x74>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a2b      	ldr	r2, [pc, #172]	; (800675c <TIM_OC4_SetConfig+0x114>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC4_SetConfig+0x74>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <TIM_OC4_SetConfig+0x118>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10d      	bne.n	80066d8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	031b      	lsls	r3, r3, #12
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <TIM_OC4_SetConfig+0x110>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d013      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a1e      	ldr	r2, [pc, #120]	; (800675c <TIM_OC4_SetConfig+0x114>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00f      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <TIM_OC4_SetConfig+0x11c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00b      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <TIM_OC4_SetConfig+0x120>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a1c      	ldr	r2, [pc, #112]	; (800676c <TIM_OC4_SetConfig+0x124>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_OC4_SetConfig+0xc0>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a17      	ldr	r2, [pc, #92]	; (8006760 <TIM_OC4_SetConfig+0x118>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d113      	bne.n	8006730 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800670e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006716:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	019b      	lsls	r3, r3, #6
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40013400 	.word	0x40013400
 8006760:	40015000 	.word	0x40015000
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800

08006770 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a19      	ldr	r2, [pc, #100]	; (800682c <TIM_OC5_SetConfig+0xbc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d013      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <TIM_OC5_SetConfig+0xc0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00f      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a17      	ldr	r2, [pc, #92]	; (8006834 <TIM_OC5_SetConfig+0xc4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00b      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <TIM_OC5_SetConfig+0xc8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a15      	ldr	r2, [pc, #84]	; (800683c <TIM_OC5_SetConfig+0xcc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC5_SetConfig+0x82>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a14      	ldr	r2, [pc, #80]	; (8006840 <TIM_OC5_SetConfig+0xd0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d109      	bne.n	8006806 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40013400 	.word	0x40013400
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800
 8006840:	40015000 	.word	0x40015000

08006844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800688a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	051b      	lsls	r3, r3, #20
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1a      	ldr	r2, [pc, #104]	; (8006904 <TIM_OC6_SetConfig+0xc0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a19      	ldr	r2, [pc, #100]	; (8006908 <TIM_OC6_SetConfig+0xc4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00f      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a18      	ldr	r2, [pc, #96]	; (800690c <TIM_OC6_SetConfig+0xc8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a17      	ldr	r2, [pc, #92]	; (8006910 <TIM_OC6_SetConfig+0xcc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a16      	ldr	r2, [pc, #88]	; (8006914 <TIM_OC6_SetConfig+0xd0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC6_SetConfig+0x84>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a15      	ldr	r2, [pc, #84]	; (8006918 <TIM_OC6_SetConfig+0xd4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d109      	bne.n	80068dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40013400 	.word	0x40013400
 800690c:	40014000 	.word	0x40014000
 8006910:	40014400 	.word	0x40014400
 8006914:	40014800 	.word	0x40014800
 8006918:	40015000 	.word	0x40015000

0800691c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f023 0201 	bic.w	r2, r3, #1
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4a28      	ldr	r2, [pc, #160]	; (80069e8 <TIM_TI1_SetConfig+0xcc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01b      	beq.n	8006982 <TIM_TI1_SetConfig+0x66>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006950:	d017      	beq.n	8006982 <TIM_TI1_SetConfig+0x66>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4a25      	ldr	r2, [pc, #148]	; (80069ec <TIM_TI1_SetConfig+0xd0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <TIM_TI1_SetConfig+0x66>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <TIM_TI1_SetConfig+0xd4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_TI1_SetConfig+0x66>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <TIM_TI1_SetConfig+0xd8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_TI1_SetConfig+0x66>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <TIM_TI1_SetConfig+0xdc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_TI1_SetConfig+0x66>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a21      	ldr	r2, [pc, #132]	; (80069fc <TIM_TI1_SetConfig+0xe0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_TI1_SetConfig+0x66>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4a20      	ldr	r2, [pc, #128]	; (8006a00 <TIM_TI1_SetConfig+0xe4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d101      	bne.n	8006986 <TIM_TI1_SetConfig+0x6a>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <TIM_TI1_SetConfig+0x6c>
 8006986:	2300      	movs	r3, #0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 0303 	bic.w	r3, r3, #3
 8006992:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	e003      	b.n	80069a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f023 030a 	bic.w	r3, r3, #10
 80069c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f003 030a 	and.w	r3, r3, #10
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40013400 	.word	0x40013400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40015000 	.word	0x40015000

08006a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0201 	bic.w	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f023 030a 	bic.w	r3, r3, #10
 8006a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b087      	sub	sp, #28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 0210 	bic.w	r2, r3, #16
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	031b      	lsls	r3, r3, #12
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	621a      	str	r2, [r3, #32]
}
 8006ad0:	bf00      	nop
 8006ad2:	371c      	adds	r7, #28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0210 	bic.w	r2, r3, #16
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	031b      	lsls	r3, r3, #12
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f023 0303 	bic.w	r3, r3, #3
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b78:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	031b      	lsls	r3, r3, #12
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c06:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	031b      	lsls	r3, r3, #12
 8006c0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f043 0307 	orr.w	r3, r3, #7
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	609a      	str	r2, [r3, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	021a      	lsls	r2, r3, #8
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	609a      	str	r2, [r3, #8]
}
 8006c9c:	bf00      	nop
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2201      	movs	r2, #1
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1a      	ldr	r2, [r3, #32]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	401a      	ands	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1a      	ldr	r2, [r3, #32]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	621a      	str	r2, [r3, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e074      	b.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a34      	ldr	r2, [pc, #208]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a33      	ldr	r2, [pc, #204]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a31      	ldr	r2, [pc, #196]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d108      	bne.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a21      	ldr	r2, [pc, #132]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d022      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8c:	d01d      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d018      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1c      	ldr	r2, [pc, #112]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a11      	ldr	r2, [pc, #68]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10c      	bne.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40013400 	.word	0x40013400
 8006e0c:	40015000 	.word	0x40015000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40000c00 	.word	0x40000c00
 8006e1c:	40014000 	.word	0x40014000

08006e20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	e078      	b.n	8006f2e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	041b      	lsls	r3, r3, #16
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d009      	beq.n	8006ee2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1b      	ldr	r2, [pc, #108]	; (8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d11c      	bne.n	8006f1c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eec:	051b      	lsls	r3, r3, #20
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40013400 	.word	0x40013400
 8006f44:	40015000 	.word	0x40015000

08006f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e042      	b.n	800706c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fa ffc7 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2224      	movs	r2, #36	; 0x24
 8007002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0201 	bic.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb24 	bl	800766c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f825 	bl	8007074 <UART_SetConfig>
 800702a:	4603      	mov	r3, r0
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e01b      	b.n	800706c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fba3 	bl	80077b0 <UART_CheckIdleState>
 800706a:	4603      	mov	r3, r0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007078:	b08c      	sub	sp, #48	; 0x30
 800707a:	af00      	add	r7, sp, #0
 800707c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	431a      	orrs	r2, r3
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	431a      	orrs	r2, r3
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	4313      	orrs	r3, r2
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4baa      	ldr	r3, [pc, #680]	; (800734c <UART_SetConfig+0x2d8>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a9f      	ldr	r2, [pc, #636]	; (8007350 <UART_SetConfig+0x2dc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070dc:	4313      	orrs	r3, r2
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80070ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070f4:	430b      	orrs	r3, r1
 80070f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	f023 010f 	bic.w	r1, r3, #15
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a90      	ldr	r2, [pc, #576]	; (8007354 <UART_SetConfig+0x2e0>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d125      	bne.n	8007164 <UART_SetConfig+0xf0>
 8007118:	4b8f      	ldr	r3, [pc, #572]	; (8007358 <UART_SetConfig+0x2e4>)
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b03      	cmp	r3, #3
 8007124:	d81a      	bhi.n	800715c <UART_SetConfig+0xe8>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <UART_SetConfig+0xb8>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	0800713d 	.word	0x0800713d
 8007130:	0800714d 	.word	0x0800714d
 8007134:	08007145 	.word	0x08007145
 8007138:	08007155 	.word	0x08007155
 800713c:	2301      	movs	r3, #1
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007142:	e116      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007144:	2302      	movs	r3, #2
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714a:	e112      	b.n	8007372 <UART_SetConfig+0x2fe>
 800714c:	2304      	movs	r3, #4
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007152:	e10e      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007154:	2308      	movs	r3, #8
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e10a      	b.n	8007372 <UART_SetConfig+0x2fe>
 800715c:	2310      	movs	r3, #16
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e106      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a7c      	ldr	r2, [pc, #496]	; (800735c <UART_SetConfig+0x2e8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d138      	bne.n	80071e0 <UART_SetConfig+0x16c>
 800716e:	4b7a      	ldr	r3, [pc, #488]	; (8007358 <UART_SetConfig+0x2e4>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	f003 030c 	and.w	r3, r3, #12
 8007178:	2b0c      	cmp	r3, #12
 800717a:	d82d      	bhi.n	80071d8 <UART_SetConfig+0x164>
 800717c:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <UART_SetConfig+0x110>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	080071b9 	.word	0x080071b9
 8007188:	080071d9 	.word	0x080071d9
 800718c:	080071d9 	.word	0x080071d9
 8007190:	080071d9 	.word	0x080071d9
 8007194:	080071c9 	.word	0x080071c9
 8007198:	080071d9 	.word	0x080071d9
 800719c:	080071d9 	.word	0x080071d9
 80071a0:	080071d9 	.word	0x080071d9
 80071a4:	080071c1 	.word	0x080071c1
 80071a8:	080071d9 	.word	0x080071d9
 80071ac:	080071d9 	.word	0x080071d9
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071d1 	.word	0x080071d1
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071be:	e0d8      	b.n	8007372 <UART_SetConfig+0x2fe>
 80071c0:	2302      	movs	r3, #2
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c6:	e0d4      	b.n	8007372 <UART_SetConfig+0x2fe>
 80071c8:	2304      	movs	r3, #4
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ce:	e0d0      	b.n	8007372 <UART_SetConfig+0x2fe>
 80071d0:	2308      	movs	r3, #8
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d6:	e0cc      	b.n	8007372 <UART_SetConfig+0x2fe>
 80071d8:	2310      	movs	r3, #16
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071de:	e0c8      	b.n	8007372 <UART_SetConfig+0x2fe>
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a5e      	ldr	r2, [pc, #376]	; (8007360 <UART_SetConfig+0x2ec>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d125      	bne.n	8007236 <UART_SetConfig+0x1c2>
 80071ea:	4b5b      	ldr	r3, [pc, #364]	; (8007358 <UART_SetConfig+0x2e4>)
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071f4:	2b30      	cmp	r3, #48	; 0x30
 80071f6:	d016      	beq.n	8007226 <UART_SetConfig+0x1b2>
 80071f8:	2b30      	cmp	r3, #48	; 0x30
 80071fa:	d818      	bhi.n	800722e <UART_SetConfig+0x1ba>
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d00a      	beq.n	8007216 <UART_SetConfig+0x1a2>
 8007200:	2b20      	cmp	r3, #32
 8007202:	d814      	bhi.n	800722e <UART_SetConfig+0x1ba>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <UART_SetConfig+0x19a>
 8007208:	2b10      	cmp	r3, #16
 800720a:	d008      	beq.n	800721e <UART_SetConfig+0x1aa>
 800720c:	e00f      	b.n	800722e <UART_SetConfig+0x1ba>
 800720e:	2300      	movs	r3, #0
 8007210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007214:	e0ad      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007216:	2302      	movs	r3, #2
 8007218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721c:	e0a9      	b.n	8007372 <UART_SetConfig+0x2fe>
 800721e:	2304      	movs	r3, #4
 8007220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007224:	e0a5      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007226:	2308      	movs	r3, #8
 8007228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722c:	e0a1      	b.n	8007372 <UART_SetConfig+0x2fe>
 800722e:	2310      	movs	r3, #16
 8007230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007234:	e09d      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a4a      	ldr	r2, [pc, #296]	; (8007364 <UART_SetConfig+0x2f0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d125      	bne.n	800728c <UART_SetConfig+0x218>
 8007240:	4b45      	ldr	r3, [pc, #276]	; (8007358 <UART_SetConfig+0x2e4>)
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007246:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800724a:	2bc0      	cmp	r3, #192	; 0xc0
 800724c:	d016      	beq.n	800727c <UART_SetConfig+0x208>
 800724e:	2bc0      	cmp	r3, #192	; 0xc0
 8007250:	d818      	bhi.n	8007284 <UART_SetConfig+0x210>
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d00a      	beq.n	800726c <UART_SetConfig+0x1f8>
 8007256:	2b80      	cmp	r3, #128	; 0x80
 8007258:	d814      	bhi.n	8007284 <UART_SetConfig+0x210>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <UART_SetConfig+0x1f0>
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d008      	beq.n	8007274 <UART_SetConfig+0x200>
 8007262:	e00f      	b.n	8007284 <UART_SetConfig+0x210>
 8007264:	2300      	movs	r3, #0
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e082      	b.n	8007372 <UART_SetConfig+0x2fe>
 800726c:	2302      	movs	r3, #2
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007272:	e07e      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727a:	e07a      	b.n	8007372 <UART_SetConfig+0x2fe>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e076      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728a:	e072      	b.n	8007372 <UART_SetConfig+0x2fe>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a35      	ldr	r2, [pc, #212]	; (8007368 <UART_SetConfig+0x2f4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d12a      	bne.n	80072ec <UART_SetConfig+0x278>
 8007296:	4b30      	ldr	r3, [pc, #192]	; (8007358 <UART_SetConfig+0x2e4>)
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a4:	d01a      	beq.n	80072dc <UART_SetConfig+0x268>
 80072a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072aa:	d81b      	bhi.n	80072e4 <UART_SetConfig+0x270>
 80072ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b0:	d00c      	beq.n	80072cc <UART_SetConfig+0x258>
 80072b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b6:	d815      	bhi.n	80072e4 <UART_SetConfig+0x270>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <UART_SetConfig+0x250>
 80072bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c0:	d008      	beq.n	80072d4 <UART_SetConfig+0x260>
 80072c2:	e00f      	b.n	80072e4 <UART_SetConfig+0x270>
 80072c4:	2300      	movs	r3, #0
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ca:	e052      	b.n	8007372 <UART_SetConfig+0x2fe>
 80072cc:	2302      	movs	r3, #2
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d2:	e04e      	b.n	8007372 <UART_SetConfig+0x2fe>
 80072d4:	2304      	movs	r3, #4
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072da:	e04a      	b.n	8007372 <UART_SetConfig+0x2fe>
 80072dc:	2308      	movs	r3, #8
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e046      	b.n	8007372 <UART_SetConfig+0x2fe>
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e042      	b.n	8007372 <UART_SetConfig+0x2fe>
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a17      	ldr	r2, [pc, #92]	; (8007350 <UART_SetConfig+0x2dc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d13a      	bne.n	800736c <UART_SetConfig+0x2f8>
 80072f6:	4b18      	ldr	r3, [pc, #96]	; (8007358 <UART_SetConfig+0x2e4>)
 80072f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007300:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007304:	d01a      	beq.n	800733c <UART_SetConfig+0x2c8>
 8007306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800730a:	d81b      	bhi.n	8007344 <UART_SetConfig+0x2d0>
 800730c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007310:	d00c      	beq.n	800732c <UART_SetConfig+0x2b8>
 8007312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007316:	d815      	bhi.n	8007344 <UART_SetConfig+0x2d0>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <UART_SetConfig+0x2b0>
 800731c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007320:	d008      	beq.n	8007334 <UART_SetConfig+0x2c0>
 8007322:	e00f      	b.n	8007344 <UART_SetConfig+0x2d0>
 8007324:	2300      	movs	r3, #0
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732a:	e022      	b.n	8007372 <UART_SetConfig+0x2fe>
 800732c:	2302      	movs	r3, #2
 800732e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007332:	e01e      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007334:	2304      	movs	r3, #4
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733a:	e01a      	b.n	8007372 <UART_SetConfig+0x2fe>
 800733c:	2308      	movs	r3, #8
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007342:	e016      	b.n	8007372 <UART_SetConfig+0x2fe>
 8007344:	2310      	movs	r3, #16
 8007346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734a:	e012      	b.n	8007372 <UART_SetConfig+0x2fe>
 800734c:	cfff69f3 	.word	0xcfff69f3
 8007350:	40008000 	.word	0x40008000
 8007354:	40013800 	.word	0x40013800
 8007358:	40021000 	.word	0x40021000
 800735c:	40004400 	.word	0x40004400
 8007360:	40004800 	.word	0x40004800
 8007364:	40004c00 	.word	0x40004c00
 8007368:	40005000 	.word	0x40005000
 800736c:	2310      	movs	r3, #16
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4aae      	ldr	r2, [pc, #696]	; (8007630 <UART_SetConfig+0x5bc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	f040 8097 	bne.w	80074ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800737e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007382:	2b08      	cmp	r3, #8
 8007384:	d823      	bhi.n	80073ce <UART_SetConfig+0x35a>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0x318>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073cf 	.word	0x080073cf
 8007394:	080073b9 	.word	0x080073b9
 8007398:	080073cf 	.word	0x080073cf
 800739c:	080073bf 	.word	0x080073bf
 80073a0:	080073cf 	.word	0x080073cf
 80073a4:	080073cf 	.word	0x080073cf
 80073a8:	080073cf 	.word	0x080073cf
 80073ac:	080073c7 	.word	0x080073c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b0:	f7fd fb86 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 80073b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073b6:	e010      	b.n	80073da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b8:	4b9e      	ldr	r3, [pc, #632]	; (8007634 <UART_SetConfig+0x5c0>)
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073bc:	e00d      	b.n	80073da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073be:	f7fd fb11 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80073c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073c4:	e009      	b.n	80073da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073cc:	e005      	b.n	80073da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8130 	beq.w	8007642 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	4a94      	ldr	r2, [pc, #592]	; (8007638 <UART_SetConfig+0x5c4>)
 80073e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	4613      	mov	r3, r2
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	4413      	add	r3, r2
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	429a      	cmp	r2, r3
 8007404:	d305      	bcc.n	8007412 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	429a      	cmp	r2, r3
 8007410:	d903      	bls.n	800741a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007418:	e113      	b.n	8007642 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	2200      	movs	r2, #0
 800741e:	60bb      	str	r3, [r7, #8]
 8007420:	60fa      	str	r2, [r7, #12]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	4a84      	ldr	r2, [pc, #528]	; (8007638 <UART_SetConfig+0x5c4>)
 8007428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800742c:	b29b      	uxth	r3, r3
 800742e:	2200      	movs	r2, #0
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007438:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800743c:	f7f8 ff0c 	bl	8000258 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4610      	mov	r0, r2
 8007446:	4619      	mov	r1, r3
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	020b      	lsls	r3, r1, #8
 8007452:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007456:	0202      	lsls	r2, r0, #8
 8007458:	6979      	ldr	r1, [r7, #20]
 800745a:	6849      	ldr	r1, [r1, #4]
 800745c:	0849      	lsrs	r1, r1, #1
 800745e:	2000      	movs	r0, #0
 8007460:	460c      	mov	r4, r1
 8007462:	4605      	mov	r5, r0
 8007464:	eb12 0804 	adds.w	r8, r2, r4
 8007468:	eb43 0905 	adc.w	r9, r3, r5
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	469a      	mov	sl, r3
 8007474:	4693      	mov	fp, r2
 8007476:	4652      	mov	r2, sl
 8007478:	465b      	mov	r3, fp
 800747a:	4640      	mov	r0, r8
 800747c:	4649      	mov	r1, r9
 800747e:	f7f8 feeb 	bl	8000258 <__aeabi_uldivmod>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4613      	mov	r3, r2
 8007488:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007490:	d308      	bcc.n	80074a4 <UART_SetConfig+0x430>
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007498:	d204      	bcs.n	80074a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6a3a      	ldr	r2, [r7, #32]
 80074a0:	60da      	str	r2, [r3, #12]
 80074a2:	e0ce      	b.n	8007642 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074aa:	e0ca      	b.n	8007642 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b4:	d166      	bne.n	8007584 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80074b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d827      	bhi.n	800750e <UART_SetConfig+0x49a>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x450>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	080074f1 	.word	0x080074f1
 80074cc:	080074f9 	.word	0x080074f9
 80074d0:	0800750f 	.word	0x0800750f
 80074d4:	080074ff 	.word	0x080074ff
 80074d8:	0800750f 	.word	0x0800750f
 80074dc:	0800750f 	.word	0x0800750f
 80074e0:	0800750f 	.word	0x0800750f
 80074e4:	08007507 	.word	0x08007507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e8:	f7fd faea 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 80074ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074ee:	e014      	b.n	800751a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f0:	f7fd fafc 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074f6:	e010      	b.n	800751a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f8:	4b4e      	ldr	r3, [pc, #312]	; (8007634 <UART_SetConfig+0x5c0>)
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074fc:	e00d      	b.n	800751a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fe:	f7fd fa71 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8007502:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007504:	e009      	b.n	800751a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800750c:	e005      	b.n	800751a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8090 	beq.w	8007642 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	4a44      	ldr	r2, [pc, #272]	; (8007638 <UART_SetConfig+0x5c4>)
 8007528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800752c:	461a      	mov	r2, r3
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	fbb3 f3f2 	udiv	r3, r3, r2
 8007534:	005a      	lsls	r2, r3, #1
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	085b      	lsrs	r3, r3, #1
 800753c:	441a      	add	r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	fbb2 f3f3 	udiv	r3, r2, r3
 8007546:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	2b0f      	cmp	r3, #15
 800754c:	d916      	bls.n	800757c <UART_SetConfig+0x508>
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007554:	d212      	bcs.n	800757c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f023 030f 	bic.w	r3, r3, #15
 800755e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	b29b      	uxth	r3, r3
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	b29a      	uxth	r2, r3
 800756c:	8bfb      	ldrh	r3, [r7, #30]
 800756e:	4313      	orrs	r3, r2
 8007570:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	8bfa      	ldrh	r2, [r7, #30]
 8007578:	60da      	str	r2, [r3, #12]
 800757a:	e062      	b.n	8007642 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007582:	e05e      	b.n	8007642 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007584:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007588:	2b08      	cmp	r3, #8
 800758a:	d828      	bhi.n	80075de <UART_SetConfig+0x56a>
 800758c:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <UART_SetConfig+0x520>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075b9 	.word	0x080075b9
 8007598:	080075c1 	.word	0x080075c1
 800759c:	080075c9 	.word	0x080075c9
 80075a0:	080075df 	.word	0x080075df
 80075a4:	080075cf 	.word	0x080075cf
 80075a8:	080075df 	.word	0x080075df
 80075ac:	080075df 	.word	0x080075df
 80075b0:	080075df 	.word	0x080075df
 80075b4:	080075d7 	.word	0x080075d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b8:	f7fd fa82 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 80075bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075be:	e014      	b.n	80075ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c0:	f7fd fa94 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 80075c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075c6:	e010      	b.n	80075ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075c8:	4b1a      	ldr	r3, [pc, #104]	; (8007634 <UART_SetConfig+0x5c0>)
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075cc:	e00d      	b.n	80075ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ce:	f7fd fa09 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80075d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075d4:	e009      	b.n	80075ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075dc:	e005      	b.n	80075ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075e8:	bf00      	nop
    }

    if (pclk != 0U)
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d028      	beq.n	8007642 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	4a10      	ldr	r2, [pc, #64]	; (8007638 <UART_SetConfig+0x5c4>)
 80075f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fa:	461a      	mov	r2, r3
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	441a      	add	r2, r3
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007612:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b0f      	cmp	r3, #15
 8007618:	d910      	bls.n	800763c <UART_SetConfig+0x5c8>
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007620:	d20c      	bcs.n	800763c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	b29a      	uxth	r2, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60da      	str	r2, [r3, #12]
 800762c:	e009      	b.n	8007642 <UART_SetConfig+0x5ce>
 800762e:	bf00      	nop
 8007630:	40008000 	.word	0x40008000
 8007634:	00f42400 	.word	0x00f42400
 8007638:	08007d38 	.word	0x08007d38
      }
      else
      {
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2201      	movs	r2, #1
 8007646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2201      	movs	r2, #1
 800764e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2200      	movs	r2, #0
 800765c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800765e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007662:	4618      	mov	r0, r3
 8007664:	3730      	adds	r7, #48	; 0x30
 8007666:	46bd      	mov	sp, r7
 8007668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800766c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01a      	beq.n	8007782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776a:	d10a      	bne.n	8007782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b098      	sub	sp, #96	; 0x60
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077c0:	f7fa fd26 	bl	8002210 <HAL_GetTick>
 80077c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d12f      	bne.n	8007834 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077dc:	2200      	movs	r2, #0
 80077de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f88e 	bl	8007904 <UART_WaitOnFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d022      	beq.n	8007834 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007802:	653b      	str	r3, [r7, #80]	; 0x50
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800780c:	647b      	str	r3, [r7, #68]	; 0x44
 800780e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800781a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e6      	bne.n	80077ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e063      	b.n	80078fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0304 	and.w	r3, r3, #4
 800783e:	2b04      	cmp	r3, #4
 8007840:	d149      	bne.n	80078d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007842:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800784a:	2200      	movs	r2, #0
 800784c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f857 	bl	8007904 <UART_WaitOnFlagUntilTimeout>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d03c      	beq.n	80078d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	623b      	str	r3, [r7, #32]
   return(result);
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787a:	633b      	str	r3, [r7, #48]	; 0x30
 800787c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e6      	bne.n	800785c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	60fb      	str	r3, [r7, #12]
   return(result);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f023 0301 	bic.w	r3, r3, #1
 80078a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3308      	adds	r3, #8
 80078ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ae:	61fa      	str	r2, [r7, #28]
 80078b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	69b9      	ldr	r1, [r7, #24]
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	617b      	str	r3, [r7, #20]
   return(result);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e5      	bne.n	800788e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e012      	b.n	80078fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3758      	adds	r7, #88	; 0x58
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007914:	e04f      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d04b      	beq.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791e:	f7fa fc77 	bl	8002210 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	429a      	cmp	r2, r3
 800792c:	d302      	bcc.n	8007934 <UART_WaitOnFlagUntilTimeout+0x30>
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e04e      	b.n	80079d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0304 	and.w	r3, r3, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d037      	beq.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b80      	cmp	r3, #128	; 0x80
 800794a:	d034      	beq.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	d031      	beq.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b08      	cmp	r3, #8
 800795e:	d110      	bne.n	8007982 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2208      	movs	r2, #8
 8007966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f838 	bl	80079de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2208      	movs	r2, #8
 8007972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e029      	b.n	80079d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007990:	d111      	bne.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800799a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f81e 	bl	80079de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e00f      	b.n	80079d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4013      	ands	r3, r2
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	bf0c      	ite	eq
 80079c6:	2301      	moveq	r3, #1
 80079c8:	2300      	movne	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d0a0      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079de:	b480      	push	{r7}
 80079e0:	b095      	sub	sp, #84	; 0x54
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a04:	643b      	str	r3, [r7, #64]	; 0x40
 8007a06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e6      	bne.n	80079e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e3      	bne.n	8007a18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d118      	bne.n	8007a8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6979      	ldr	r1, [r7, #20]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	613b      	str	r3, [r7, #16]
   return(result);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e6      	bne.n	8007a58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a9e:	bf00      	nop
 8007aa0:	3754      	adds	r7, #84	; 0x54
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b085      	sub	sp, #20
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_UARTEx_DisableFifoMode+0x16>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e027      	b.n	8007b10 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2224      	movs	r2, #36	; 0x24
 8007acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0201 	bic.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007aee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e02d      	b.n	8007b90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2224      	movs	r2, #36	; 0x24
 8007b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f84f 	bl	8007c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e02d      	b.n	8007c0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2224      	movs	r2, #36	; 0x24
 8007bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f811 	bl	8007c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d108      	bne.n	8007c36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c34:	e031      	b.n	8007c9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c36:	2308      	movs	r3, #8
 8007c38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	0e5b      	lsrs	r3, r3, #25
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	0f5b      	lsrs	r3, r3, #29
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	7b3a      	ldrb	r2, [r7, #12]
 8007c62:	4911      	ldr	r1, [pc, #68]	; (8007ca8 <UARTEx_SetNbDataToProcess+0x94>)
 8007c64:	5c8a      	ldrb	r2, [r1, r2]
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c6a:	7b3a      	ldrb	r2, [r7, #12]
 8007c6c:	490f      	ldr	r1, [pc, #60]	; (8007cac <UARTEx_SetNbDataToProcess+0x98>)
 8007c6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c70:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	7b7a      	ldrb	r2, [r7, #13]
 8007c80:	4909      	ldr	r1, [pc, #36]	; (8007ca8 <UARTEx_SetNbDataToProcess+0x94>)
 8007c82:	5c8a      	ldrb	r2, [r1, r2]
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c88:	7b7a      	ldrb	r2, [r7, #13]
 8007c8a:	4908      	ldr	r1, [pc, #32]	; (8007cac <UARTEx_SetNbDataToProcess+0x98>)
 8007c8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	08007d50 	.word	0x08007d50
 8007cac:	08007d58 	.word	0x08007d58

08007cb0 <memset>:
 8007cb0:	4402      	add	r2, r0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d100      	bne.n	8007cba <memset+0xa>
 8007cb8:	4770      	bx	lr
 8007cba:	f803 1b01 	strb.w	r1, [r3], #1
 8007cbe:	e7f9      	b.n	8007cb4 <memset+0x4>

08007cc0 <__libc_init_array>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	4d0d      	ldr	r5, [pc, #52]	; (8007cf8 <__libc_init_array+0x38>)
 8007cc4:	4c0d      	ldr	r4, [pc, #52]	; (8007cfc <__libc_init_array+0x3c>)
 8007cc6:	1b64      	subs	r4, r4, r5
 8007cc8:	10a4      	asrs	r4, r4, #2
 8007cca:	2600      	movs	r6, #0
 8007ccc:	42a6      	cmp	r6, r4
 8007cce:	d109      	bne.n	8007ce4 <__libc_init_array+0x24>
 8007cd0:	4d0b      	ldr	r5, [pc, #44]	; (8007d00 <__libc_init_array+0x40>)
 8007cd2:	4c0c      	ldr	r4, [pc, #48]	; (8007d04 <__libc_init_array+0x44>)
 8007cd4:	f000 f818 	bl	8007d08 <_init>
 8007cd8:	1b64      	subs	r4, r4, r5
 8007cda:	10a4      	asrs	r4, r4, #2
 8007cdc:	2600      	movs	r6, #0
 8007cde:	42a6      	cmp	r6, r4
 8007ce0:	d105      	bne.n	8007cee <__libc_init_array+0x2e>
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce8:	4798      	blx	r3
 8007cea:	3601      	adds	r6, #1
 8007cec:	e7ee      	b.n	8007ccc <__libc_init_array+0xc>
 8007cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf2:	4798      	blx	r3
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	e7f2      	b.n	8007cde <__libc_init_array+0x1e>
 8007cf8:	08007d68 	.word	0x08007d68
 8007cfc:	08007d68 	.word	0x08007d68
 8007d00:	08007d68 	.word	0x08007d68
 8007d04:	08007d6c 	.word	0x08007d6c

08007d08 <_init>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr

08007d14 <_fini>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	bf00      	nop
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr
