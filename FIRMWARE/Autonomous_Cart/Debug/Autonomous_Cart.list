
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008660  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008878  08008878  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008880  08008880  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  20000010  08008898  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  08008898  0002077c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dfe1  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cfb  00000000  00000000  0003e064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00041d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001389  00000000  00000000  00043678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029959  00000000  00000000  00044a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f00  00000000  00000000  0006e35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112538  00000000  00000000  0009025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ba8  00000000  00000000  001a2794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001a933c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008820 	.word	0x08008820

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008820 	.word	0x08008820

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b970 	b.w	8000d8c <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	460d      	mov	r5, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	460f      	mov	r7, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0xe2>
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	b143      	cbz	r3, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	f1c3 0220 	rsb	r2, r3, #32
 8000ae8:	409f      	lsls	r7, r3
 8000aea:	fa20 f202 	lsr.w	r2, r0, r2
 8000aee:	4317      	orrs	r7, r2
 8000af0:	409c      	lsls	r4, r3
 8000af2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000af6:	fa1f f58c 	uxth.w	r5, ip
 8000afa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b08:	fb01 f005 	mul.w	r0, r1, r5
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	d90a      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b10:	eb1c 0202 	adds.w	r2, ip, r2
 8000b14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b18:	f080 811c 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	f240 8119 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b22:	3902      	subs	r1, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b36:	fb00 f505 	mul.w	r5, r0, r5
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	d90a      	bls.n	8000b54 <__udivmoddi4+0x90>
 8000b3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b46:	f080 8107 	bcs.w	8000d58 <__udivmoddi4+0x294>
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	f240 8104 	bls.w	8000d58 <__udivmoddi4+0x294>
 8000b50:	4464      	add	r4, ip
 8000b52:	3802      	subs	r0, #2
 8000b54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11e      	cbz	r6, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40dc      	lsrs	r4, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	e9c6 4300 	strd	r4, r3, [r6]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0xbc>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80ed 	beq.w	8000d4e <__udivmoddi4+0x28a>
 8000b74:	2100      	movs	r1, #0
 8000b76:	e9c6 0500 	strd	r0, r5, [r6]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b80:	fab3 f183 	clz	r1, r3
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d149      	bne.n	8000c1c <__udivmoddi4+0x158>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	d302      	bcc.n	8000b92 <__udivmoddi4+0xce>
 8000b8c:	4282      	cmp	r2, r0
 8000b8e:	f200 80f8 	bhi.w	8000d82 <__udivmoddi4+0x2be>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d0e2      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ba4:	e7df      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba6:	b902      	cbnz	r2, 8000baa <__udivmoddi4+0xe6>
 8000ba8:	deff      	udf	#255	; 0xff
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8090 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc8:	0c22      	lsrs	r2, r4, #16
 8000bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bce:	fb0e f005 	mul.w	r0, lr, r5
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2b8>
 8000be6:	4645      	mov	r5, r8
 8000be8:	1a12      	subs	r2, r2, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x14e>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x14c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2c2>
 8000c10:	4610      	mov	r0, r2
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c1a:	e79f      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c1c:	f1c1 0720 	rsb	r7, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	40fd      	lsrs	r5, r7
 8000c34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	fb09 5518 	mls	r5, r9, r8, r5
 8000c46:	0c1c      	lsrs	r4, r3, #16
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	fa00 f001 	lsl.w	r0, r0, r1
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2b4>
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2b4>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4464      	add	r4, ip
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	b29d      	uxth	r5, r3
 8000c78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2ac>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2ac>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	4464      	add	r4, ip
 8000c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ca6:	eba4 040e 	sub.w	r4, r4, lr
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46ae      	mov	lr, r5
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x29c>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x298>
 8000cb4:	b156      	cbz	r6, 8000ccc <__udivmoddi4+0x208>
 8000cb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cba:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc2:	40ca      	lsrs	r2, r1
 8000cc4:	40cc      	lsrs	r4, r1
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	f1c3 0120 	rsb	r1, r3, #32
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ce4:	409d      	lsls	r5, r3
 8000ce6:	432a      	orrs	r2, r5
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf8:	0c11      	lsrs	r1, r2, #16
 8000cfa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cfe:	fb00 f50e 	mul.w	r5, r0, lr
 8000d02:	428d      	cmp	r5, r1
 8000d04:	fa04 f403 	lsl.w	r4, r4, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x258>
 8000d0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d14:	428d      	cmp	r5, r1
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4461      	add	r1, ip
 8000d1c:	1b49      	subs	r1, r1, r5
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d24:	fb07 1115 	mls	r1, r7, r5, r1
 8000d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d30:	4291      	cmp	r1, r2
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x282>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000d3e:	4291      	cmp	r1, r2
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000d42:	3d02      	subs	r5, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a52      	subs	r2, r2, r1
 8000d48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0xfc>
 8000d4e:	4631      	mov	r1, r6
 8000d50:	4630      	mov	r0, r6
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000d54:	4639      	mov	r1, r7
 8000d56:	e6e6      	b.n	8000b26 <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e6fb      	b.n	8000b54 <__udivmoddi4+0x90>
 8000d5c:	4548      	cmp	r0, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6c:	4645      	mov	r5, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d70:	462b      	mov	r3, r5
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x258>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7c:	3d02      	subs	r5, #2
 8000d7e:	4462      	add	r2, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e70a      	b.n	8000b9c <__udivmoddi4+0xd8>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x14e>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <vBatterySystemInit>:
uint32_t fAdcValue;
uint32_t *pAdcValue = &fAdcValue;
float fTempValue;
unsigned long int adcValues[2];

void vBatterySystemInit(float *pBatteryCharge){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(&BATTERY_AD, ADC_SINGLE_ENDED);
 8000d98:	217f      	movs	r1, #127	; 0x7f
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <vBatterySystemInit+0x18>)
 8000d9c:	f002 ff88 	bl	8003cb0 <HAL_ADCEx_Calibration_Start>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200000a0 	.word	0x200000a0

08000dac <vBatterySystemComputeMeasurement>:

void vBatterySystemComputeMeasurement(){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	//fAdcValue = HAL_ADC_GetValue(&BATTERY_AD);

	// Aguardar a conversão do primeiro canal (IN3)

	    adcValues[0] = HAL_ADC_GetValue(&hadc2);
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <vBatterySystemComputeMeasurement+0x20>)
 8000db2:	f002 fa7d 	bl	80032b0 <HAL_ADC_GetValue>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <vBatterySystemComputeMeasurement+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]

	    // Ler o valor convertido do canal IN4 (Rank 2)
	    adcValues[1] = HAL_ADC_GetValue(&hadc2);
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <vBatterySystemComputeMeasurement+0x20>)
 8000dbe:	f002 fa77 	bl	80032b0 <HAL_ADC_GetValue>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a02      	ldr	r2, [pc, #8]	; (8000dd0 <vBatterySystemComputeMeasurement+0x24>)
 8000dc6:	6053      	str	r3, [r2, #4]

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000a0 	.word	0x200000a0
 8000dd0:	2000002c 	.word	0x2000002c

08000dd4 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <vPowerTrainSystemInit+0x20>)
 8000dda:	f004 ff15 	bl	8005c08 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 8000dde:	2100      	movs	r1, #0
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <vPowerTrainSystemInit+0x20>)
 8000de2:	f005 f851 	bl	8005e88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 8000de6:	2104      	movs	r1, #4
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <vPowerTrainSystemInit+0x20>)
 8000dea:	f005 f84d 	bl	8005e88 <HAL_TIM_PWM_Start>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200004a8 	.word	0x200004a8

08000df8 <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	4613      	mov	r3, r2
 8000e06:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <vPowerTrainSystemSetMotorDirection+0x1c>
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d01f      	beq.n	8000e52 <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000e12:	e040      	b.n	8000e96 <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10b      	bne.n	8000e32 <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e20:	481f      	ldr	r0, [pc, #124]	; (8000ea0 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e22:	f003 fcfb 	bl	800481c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2c:	481c      	ldr	r0, [pc, #112]	; (8000ea0 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e2e:	f003 fcf5 	bl	800481c <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d12b      	bne.n	8000e90 <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e40:	f003 fcec 	bl	800481c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4a:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e4c:	f003 fce6 	bl	800481c <HAL_GPIO_WritePin>
			} break;
 8000e50:	e01e      	b.n	8000e90 <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10b      	bne.n	8000e70 <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e5e:	f003 fcdd 	bl	800481c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f003 fcd6 	bl	800481c <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d10e      	bne.n	8000e94 <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000e7c:	f003 fcce 	bl	800481c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f003 fcc7 	bl	800481c <HAL_GPIO_WritePin>
			} break;
 8000e8e:	e001      	b.n	8000e94 <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000e90:	bf00      	nop
 8000e92:	e000      	b.n	8000e96 <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000e94:	bf00      	nop
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	ed87 0b00 	vstr	d0, [r7]
 8000eb0:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <vPowerTrainSystemSetMotorSpeed+0x1a>
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d009      	beq.n	8000ed0 <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 8000ebc:	e011      	b.n	8000ee2 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000ec0:	681c      	ldr	r4, [r3, #0]
 8000ec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ec6:	f7ff fd75 	bl	80009b4 <__aeabi_d2uiz>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 8000ece:	e008      	b.n	8000ee2 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000ed2:	681c      	ldr	r4, [r3, #0]
 8000ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ed8:	f7ff fd6c 	bl	80009b4 <__aeabi_d2uiz>
 8000edc:	4603      	mov	r3, r0
 8000ede:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
 8000ee0:	bf00      	nop
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd90      	pop	{r4, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200004a8 	.word	0x200004a8

08000ef0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2220      	movs	r2, #32
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 fc5d 	bl	80087c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f38:	2204      	movs	r2, #4
 8000f3a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f78:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f7a:	f001 ffdd 	bl	8002f38 <HAL_ADC_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f84:	f000 ffd2 	bl	8001f2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f94:	f002 feee 	bl	8003d74 <HAL_ADCEx_MultiModeConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f9e:	f000 ffc5 	bl	8001f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_ADC1_Init+0xec>)
 8000fa4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000faa:	2302      	movs	r3, #2
 8000fac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fae:	237f      	movs	r3, #127	; 0x7f
 8000fb0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000fc0:	f002 f984 	bl	80032cc <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fca:	f000 ffaf 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3730      	adds	r7, #48	; 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000034 	.word	0x20000034
 8000fdc:	04300002 	.word	0x04300002

08000fe0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2220      	movs	r2, #32
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 fbeb 	bl	80087c8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <MX_ADC2_Init+0xdc>)
 8000ff4:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <MX_ADC2_Init+0xe0>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <MX_ADC2_Init+0xdc>)
 8000ffa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ffe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <MX_ADC2_Init+0xdc>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001014:	2201      	movs	r2, #1
 8001016:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <MX_ADC2_Init+0xdc>)
 800101a:	2204      	movs	r2, #4
 800101c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800101e:	4b27      	ldr	r3, [pc, #156]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001020:	2200      	movs	r2, #0
 8001022:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001026:	2201      	movs	r2, #1
 8001028:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <MX_ADC2_Init+0xdc>)
 800102c:	2202      	movs	r2, #2
 800102e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_ADC2_Init+0xdc>)
 800103a:	2200      	movs	r2, #0
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001040:	2200      	movs	r2, #0
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_ADC2_Init+0xdc>)
 800104e:	2200      	movs	r2, #0
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <MX_ADC2_Init+0xdc>)
 800105c:	f001 ff6c 	bl	8002f38 <HAL_ADC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001066:	f000 ff61 	bl	8001f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_ADC2_Init+0xe4>)
 800106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001072:	2302      	movs	r3, #2
 8001074:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	237f      	movs	r3, #127	; 0x7f
 8001078:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_ADC2_Init+0xdc>)
 8001088:	f002 f920 	bl	80032cc <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001092:	f000 ff4b 	bl	8001f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_ADC2_Init+0xe8>)
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800109a:	230c      	movs	r3, #12
 800109c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_ADC2_Init+0xdc>)
 80010a4:	f002 f912 	bl	80032cc <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80010ae:	f000 ff3d 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200000a0 	.word	0x200000a0
 80010c0:	50000100 	.word	0x50000100
 80010c4:	0c900008 	.word	0x0c900008
 80010c8:	10c00010 	.word	0x10c00010

080010cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2220      	movs	r2, #32
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 fb6f 	bl	80087c8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <MX_ADC3_Init+0xe4>)
 80010ec:	4a31      	ldr	r2, [pc, #196]	; (80011b4 <MX_ADC3_Init+0xe8>)
 80010ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <MX_ADC3_Init+0xe4>)
 80010f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <MX_ADC3_Init+0xe4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <MX_ADC3_Init+0xe4>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001112:	2204      	movs	r2, #4
 8001114:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <MX_ADC3_Init+0xe4>)
 800111e:	2201      	movs	r2, #1
 8001120:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001124:	2201      	movs	r2, #1
 8001126:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <MX_ADC3_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001132:	2200      	movs	r2, #0
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_ADC3_Init+0xe4>)
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001146:	2200      	movs	r2, #0
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_ADC3_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001152:	4817      	ldr	r0, [pc, #92]	; (80011b0 <MX_ADC3_Init+0xe4>)
 8001154:	f001 fef0 	bl	8002f38 <HAL_ADC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800115e:	f000 fee5 	bl	8001f2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	4810      	ldr	r0, [pc, #64]	; (80011b0 <MX_ADC3_Init+0xe4>)
 800116e:	f002 fe01 	bl	8003d74 <HAL_ADCEx_MultiModeConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001178:	f000 fed8 	bl	8001f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_ADC3_Init+0xec>)
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001180:	2306      	movs	r3, #6
 8001182:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001184:	2302      	movs	r3, #2
 8001186:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001188:	237f      	movs	r3, #127	; 0x7f
 800118a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800118c:	2304      	movs	r3, #4
 800118e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_ADC3_Init+0xe4>)
 800119a:	f002 f897 	bl	80032cc <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80011a4:	f000 fec2 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3730      	adds	r7, #48	; 0x30
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000010c 	.word	0x2000010c
 80011b4:	50000400 	.word	0x50000400
 80011b8:	14f00020 	.word	0x14f00020

080011bc <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2220      	movs	r2, #32
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f007 fafd 	bl	80087c8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <MX_ADC4_Init+0xc0>)
 80011d0:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <MX_ADC4_Init+0xc4>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <MX_ADC4_Init+0xc0>)
 80011d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011da:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <MX_ADC4_Init+0xc0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_ADC4_Init+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <MX_ADC4_Init+0xc0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_ADC4_Init+0xc0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_ADC4_Init+0xc0>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_ADC4_Init+0xc0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_ADC4_Init+0xc0>)
 8001202:	2201      	movs	r2, #1
 8001204:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_ADC4_Init+0xc0>)
 8001208:	2201      	movs	r2, #1
 800120a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_ADC4_Init+0xc0>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_ADC4_Init+0xc0>)
 8001216:	2200      	movs	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_ADC4_Init+0xc0>)
 800121c:	2200      	movs	r2, #0
 800121e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_ADC4_Init+0xc0>)
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_ADC4_Init+0xc0>)
 800122a:	2200      	movs	r2, #0
 800122c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_ADC4_Init+0xc0>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_ADC4_Init+0xc0>)
 8001238:	f001 fe7e 	bl	8002f38 <HAL_ADC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8001242:	f000 fe73 	bl	8001f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_ADC4_Init+0xc8>)
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124a:	2306      	movs	r3, #6
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800124e:	2302      	movs	r3, #2
 8001250:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001252:	237f      	movs	r3, #127	; 0x7f
 8001254:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001256:	2304      	movs	r3, #4
 8001258:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_ADC4_Init+0xc0>)
 8001264:	f002 f832 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800126e:	f000 fe5d 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000178 	.word	0x20000178
 8001280:	50000500 	.word	0x50000500
 8001284:	14f00020 	.word	0x14f00020

08001288 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2220      	movs	r2, #32
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f007 fa97 	bl	80087c8 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800129a:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <MX_ADC5_Init+0xc0>)
 800129c:	4a2b      	ldr	r2, [pc, #172]	; (800134c <MX_ADC5_Init+0xc4>)
 800129e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012a6:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012c2:	2204      	movs	r2, #4
 80012c4:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_ADC5_Init+0xc0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001302:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_ADC5_Init+0xc0>)
 8001304:	f001 fe18 	bl	8002f38 <HAL_ADC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 fe0d 	bl	8001f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_ADC5_Init+0xc8>)
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001316:	2306      	movs	r3, #6
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800131a:	2302      	movs	r3, #2
 800131c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131e:	237f      	movs	r3, #127	; 0x7f
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001322:	2304      	movs	r3, #4
 8001324:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_ADC5_Init+0xc0>)
 8001330:	f001 ffcc 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800133a:	f000 fdf7 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001e4 	.word	0x200001e4
 800134c:	50000600 	.word	0x50000600
 8001350:	08600004 	.word	0x08600004

08001354 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0a6      	sub	sp, #152	; 0x98
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001370:	2254      	movs	r2, #84	; 0x54
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f007 fa27 	bl	80087c8 <memset>
  if(adcHandle->Instance==ADC1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001382:	d16c      	bne.n	800145e <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800138a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800138e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001394:	4618      	mov	r0, r3
 8001396:	f004 f991 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013a0:	f000 fdc4 	bl	8001f2c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013a4:	4ba0      	ldr	r3, [pc, #640]	; (8001628 <HAL_ADC_MspInit+0x2d4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a9f      	ldr	r2, [pc, #636]	; (8001628 <HAL_ADC_MspInit+0x2d4>)
 80013ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ae:	4b9e      	ldr	r3, [pc, #632]	; (8001628 <HAL_ADC_MspInit+0x2d4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10b      	bne.n	80013ce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013b6:	4b9d      	ldr	r3, [pc, #628]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a9c      	ldr	r2, [pc, #624]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80013bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b9a      	ldr	r3, [pc, #616]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b97      	ldr	r3, [pc, #604]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a96      	ldr	r2, [pc, #600]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b94      	ldr	r3, [pc, #592]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f003 f889 	bl	8004518 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001406:	4b8a      	ldr	r3, [pc, #552]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 8001408:	4a8a      	ldr	r2, [pc, #552]	; (8001634 <HAL_ADC_MspInit+0x2e0>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 800140e:	2205      	movs	r2, #5
 8001410:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001412:	4b87      	ldr	r3, [pc, #540]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b85      	ldr	r3, [pc, #532]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b84      	ldr	r3, [pc, #528]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001424:	4b82      	ldr	r3, [pc, #520]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 8001426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800142c:	4b80      	ldr	r3, [pc, #512]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 800142e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001432:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001434:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 8001436:	2220      	movs	r2, #32
 8001438:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001440:	487b      	ldr	r0, [pc, #492]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 8001442:	f002 feaf 	bl	80041a4 <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800144c:	f000 fd6e 	bl	8001f2c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a77      	ldr	r2, [pc, #476]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
 8001456:	4a76      	ldr	r2, [pc, #472]	; (8001630 <HAL_ADC_MspInit+0x2dc>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800145c:	e1e0      	b.n	8001820 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a75      	ldr	r2, [pc, #468]	; (8001638 <HAL_ADC_MspInit+0x2e4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d16c      	bne.n	8001542 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800146e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001472:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001478:	4618      	mov	r0, r3
 800147a:	f004 f91f 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8001484:	f000 fd52 	bl	8001f2c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001488:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_ADC_MspInit+0x2d4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a66      	ldr	r2, [pc, #408]	; (8001628 <HAL_ADC_MspInit+0x2d4>)
 8001490:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001492:	4b65      	ldr	r3, [pc, #404]	; (8001628 <HAL_ADC_MspInit+0x2d4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10b      	bne.n	80014b2 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800149a:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80014a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b61      	ldr	r3, [pc, #388]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b5e      	ldr	r3, [pc, #376]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a5d      	ldr	r2, [pc, #372]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 80014ca:	23c0      	movs	r3, #192	; 0xc0
 80014cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f003 f817 	bl	8004518 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80014ea:	4b54      	ldr	r3, [pc, #336]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 80014ec:	4a54      	ldr	r2, [pc, #336]	; (8001640 <HAL_ADC_MspInit+0x2ec>)
 80014ee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014f0:	4b52      	ldr	r3, [pc, #328]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 80014f2:	2224      	movs	r2, #36	; 0x24
 80014f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f6:	4b51      	ldr	r3, [pc, #324]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fc:	4b4f      	ldr	r3, [pc, #316]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001508:	4b4c      	ldr	r3, [pc, #304]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 800150a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001510:	4b4a      	ldr	r3, [pc, #296]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 8001512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001516:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001518:	4b48      	ldr	r3, [pc, #288]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 800151a:	2220      	movs	r2, #32
 800151c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001524:	4845      	ldr	r0, [pc, #276]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 8001526:	f002 fe3d 	bl	80041a4 <HAL_DMA_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8001530:	f000 fcfc 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a41      	ldr	r2, [pc, #260]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
 800153a:	4a40      	ldr	r2, [pc, #256]	; (800163c <HAL_ADC_MspInit+0x2e8>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001540:	e16e      	b.n	8001820 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a3f      	ldr	r2, [pc, #252]	; (8001644 <HAL_ADC_MspInit+0x2f0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	f040 8085 	bne.w	8001658 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800154e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001554:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001558:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155e:	4618      	mov	r0, r3
 8001560:	f004 f8ac 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 800156a:	f000 fcdf 	bl	8001f2c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a34      	ldr	r2, [pc, #208]	; (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001576:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001578:	4b33      	ldr	r3, [pc, #204]	; (8001648 <HAL_ADC_MspInit+0x2f4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d10b      	bne.n	8001598 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	4a29      	ldr	r2, [pc, #164]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	4a23      	ldr	r2, [pc, #140]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_ADC_MspInit+0x2d8>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 80015b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015c8:	4619      	mov	r1, r3
 80015ca:	4820      	ldr	r0, [pc, #128]	; (800164c <HAL_ADC_MspInit+0x2f8>)
 80015cc:	f002 ffa4 	bl	8004518 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 80015d2:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_ADC_MspInit+0x300>)
 80015d4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 80015d8:	2225      	movs	r2, #37	; 0x25
 80015da:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 80015f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 80015f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 8001600:	2220      	movs	r2, #32
 8001602:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800160a:	4811      	ldr	r0, [pc, #68]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 800160c:	f002 fdca 	bl	80041a4 <HAL_DMA_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8001616:	f000 fc89 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_ADC_MspInit+0x2fc>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001626:	e0fb      	b.n	8001820 <HAL_ADC_MspInit+0x4cc>
 8001628:	20000430 	.word	0x20000430
 800162c:	40021000 	.word	0x40021000
 8001630:	20000250 	.word	0x20000250
 8001634:	40020008 	.word	0x40020008
 8001638:	50000100 	.word	0x50000100
 800163c:	200002b0 	.word	0x200002b0
 8001640:	4002001c 	.word	0x4002001c
 8001644:	50000400 	.word	0x50000400
 8001648:	20000434 	.word	0x20000434
 800164c:	48000400 	.word	0x48000400
 8001650:	20000310 	.word	0x20000310
 8001654:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a72      	ldr	r2, [pc, #456]	; (8001828 <HAL_ADC_MspInit+0x4d4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d16c      	bne.n	800173c <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800166c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001672:	4618      	mov	r0, r3
 8001674:	f004 f822 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 800167e:	f000 fc55 	bl	8001f2c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001682:	4b6a      	ldr	r3, [pc, #424]	; (800182c <HAL_ADC_MspInit+0x4d8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a68      	ldr	r2, [pc, #416]	; (800182c <HAL_ADC_MspInit+0x4d8>)
 800168a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800168c:	4b67      	ldr	r3, [pc, #412]	; (800182c <HAL_ADC_MspInit+0x4d8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d10b      	bne.n	80016ac <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001694:	4b66      	ldr	r3, [pc, #408]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b60      	ldr	r3, [pc, #384]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a5f      	ldr	r2, [pc, #380]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b5d      	ldr	r3, [pc, #372]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 80016c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016dc:	4619      	mov	r1, r3
 80016de:	4855      	ldr	r0, [pc, #340]	; (8001834 <HAL_ADC_MspInit+0x4e0>)
 80016e0:	f002 ff1a 	bl	8004518 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 80016e4:	4b54      	ldr	r3, [pc, #336]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 80016e6:	4a55      	ldr	r2, [pc, #340]	; (800183c <HAL_ADC_MspInit+0x4e8>)
 80016e8:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80016ea:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 80016ec:	2226      	movs	r2, #38	; 0x26
 80016ee:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f0:	4b51      	ldr	r3, [pc, #324]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f6:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80016fc:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 8001704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001708:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800170a:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 800170c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001710:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 8001714:	2220      	movs	r2, #32
 8001716:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800171e:	4846      	ldr	r0, [pc, #280]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 8001720:	f002 fd40 	bl	80041a4 <HAL_DMA_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 800172a:	f000 fbff 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a41      	ldr	r2, [pc, #260]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
 8001734:	4a40      	ldr	r2, [pc, #256]	; (8001838 <HAL_ADC_MspInit+0x4e4>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6293      	str	r3, [r2, #40]	; 0x28
}
 800173a:	e071      	b.n	8001820 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a3f      	ldr	r2, [pc, #252]	; (8001840 <HAL_ADC_MspInit+0x4ec>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d16c      	bne.n	8001820 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800174c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001750:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001756:	4618      	mov	r0, r3
 8001758:	f003 ffb0 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8001762:	f000 fbe3 	bl	8001f2c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_ADC_MspInit+0x4d8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	4a2f      	ldr	r2, [pc, #188]	; (800182c <HAL_ADC_MspInit+0x4d8>)
 800176e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_ADC_MspInit+0x4d8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d10b      	bne.n	8001790 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	4a2c      	ldr	r2, [pc, #176]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_ADC_MspInit+0x4dc>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 80017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f002 fea7 	bl	8004518 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <HAL_ADC_MspInit+0x4f4>)
 80017ce:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 80017d2:	2227      	movs	r2, #39	; 0x27
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 80017ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ee:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 80017f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f6:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 80017fa:	2220      	movs	r2, #32
 80017fc:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001804:	480f      	ldr	r0, [pc, #60]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 8001806:	f002 fccd 	bl	80041a4 <HAL_DMA_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8001810:	f000 fb8c 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_ADC_MspInit+0x4f0>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001820:	bf00      	nop
 8001822:	3798      	adds	r7, #152	; 0x98
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	50000500 	.word	0x50000500
 800182c:	20000434 	.word	0x20000434
 8001830:	40021000 	.word	0x40021000
 8001834:	48000400 	.word	0x48000400
 8001838:	20000370 	.word	0x20000370
 800183c:	40020044 	.word	0x40020044
 8001840:	50000600 	.word	0x50000600
 8001844:	200003d0 	.word	0x200003d0
 8001848:	40020058 	.word	0x40020058

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <MX_DMA_Init+0xb0>)
 8001854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001856:	4a29      	ldr	r2, [pc, #164]	; (80018fc <MX_DMA_Init+0xb0>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6493      	str	r3, [r2, #72]	; 0x48
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <MX_DMA_Init+0xb0>)
 8001860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <MX_DMA_Init+0xb0>)
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <MX_DMA_Init+0xb0>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6493      	str	r3, [r2, #72]	; 0x48
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <MX_DMA_Init+0xb0>)
 8001878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	200b      	movs	r0, #11
 8001888:	f002 fc57 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800188c:	200b      	movs	r0, #11
 800188e:	f002 fc6e 	bl	800416e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	200c      	movs	r0, #12
 8001898:	f002 fc4f 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800189c:	200c      	movs	r0, #12
 800189e:	f002 fc66 	bl	800416e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	200d      	movs	r0, #13
 80018a8:	f002 fc47 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018ac:	200d      	movs	r0, #13
 80018ae:	f002 fc5e 	bl	800416e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	200e      	movs	r0, #14
 80018b8:	f002 fc3f 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018bc:	200e      	movs	r0, #14
 80018be:	f002 fc56 	bl	800416e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	200f      	movs	r0, #15
 80018c8:	f002 fc37 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018cc:	200f      	movs	r0, #15
 80018ce:	f002 fc4e 	bl	800416e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2010      	movs	r0, #16
 80018d8:	f002 fc2f 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018dc:	2010      	movs	r0, #16
 80018de:	f002 fc46 	bl	800416e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2011      	movs	r0, #17
 80018e8:	f002 fc27 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018ec:	2011      	movs	r0, #17
 80018ee:	f002 fc3e 	bl	800416e <HAL_NVIC_EnableIRQ>

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <vEncoderSystemInit>:
static float* pRightMotorRPM;

static unsigned long int uiRightMotorPulseCounter, uiLeftMotorPulseCounter;


void vEncoderSystemInit(float *leftMotorCount, float *rightMotorCount) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]

	pLeftMotorRPM = leftMotorCount;
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <vEncoderSystemInit+0x30>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6013      	str	r3, [r2, #0]
	pRightMotorRPM = rightMotorCount;
 8001910:	4a08      	ldr	r2, [pc, #32]	; (8001934 <vEncoderSystemInit+0x34>)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6013      	str	r3, [r2, #0]

	HAL_TIM_IC_Start_IT(&LEFT_ENCODER_TIM, ENCODER_CHANNEL);
 8001916:	2100      	movs	r1, #0
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <vEncoderSystemInit+0x38>)
 800191a:	f004 fc29 	bl	8006170 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&RIGHT_ENCODER_TIM, ENCODER_CHANNEL);
 800191e:	2100      	movs	r1, #0
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <vEncoderSystemInit+0x3c>)
 8001922:	f004 fc25 	bl	8006170 <HAL_TIM_IC_Start_IT>


}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000438 	.word	0x20000438
 8001934:	2000043c 	.word	0x2000043c
 8001938:	2000058c 	.word	0x2000058c
 800193c:	200005d8 	.word	0x200005d8

08001940 <vEncoderSystemCounterUpdate>:
void vEncoderSystemCounterUpdate(TIM_HandleTypeDef *htim){
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM17) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <vEncoderSystemCounterUpdate+0x40>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d105      	bne.n	800195e <vEncoderSystemCounterUpdate+0x1e>

    	uiRightMotorPulseCounter++;
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <vEncoderSystemCounterUpdate+0x44>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <vEncoderSystemCounterUpdate+0x44>)
 800195a:	6013      	str	r3, [r2, #0]

    }else if (htim->Instance == TIM16) {

    	uiLeftMotorPulseCounter++;
    }
}
 800195c:	e009      	b.n	8001972 <vEncoderSystemCounterUpdate+0x32>
    }else if (htim->Instance == TIM16) {
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <vEncoderSystemCounterUpdate+0x48>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d104      	bne.n	8001972 <vEncoderSystemCounterUpdate+0x32>
    	uiLeftMotorPulseCounter++;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <vEncoderSystemCounterUpdate+0x4c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <vEncoderSystemCounterUpdate+0x4c>)
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40014800 	.word	0x40014800
 8001984:	20000440 	.word	0x20000440
 8001988:	40014400 	.word	0x40014400
 800198c:	20000444 	.word	0x20000444

08001990 <vEncoderSystemExecuteMeasurement>:

void vEncoderSystemExecuteMeasurement(){
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	af00      	add	r7, sp, #0
	    // Calcula o RPM
		*pRightMotorRPM = (uiRightMotorPulseCounter * 60.0) / (160.0 * uiTimeSample);
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <vEncoderSystemExecuteMeasurement+0xb4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fd7f 	bl	800049c <__aeabi_ui2d>
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <vEncoderSystemExecuteMeasurement+0xb8>)
 80019a4:	f7fe fdf4 	bl	8000590 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4614      	mov	r4, r2
 80019ae:	461d      	mov	r5, r3
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <vEncoderSystemExecuteMeasurement+0xbc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd71 	bl	800049c <__aeabi_ui2d>
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <vEncoderSystemExecuteMeasurement+0xc0>)
 80019c0:	f7fe fde6 	bl	8000590 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe ff0a 	bl	80007e4 <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	491f      	ldr	r1, [pc, #124]	; (8001a54 <vEncoderSystemExecuteMeasurement+0xc4>)
 80019d6:	680c      	ldr	r4, [r1, #0]
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f80a 	bl	80009f4 <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	6023      	str	r3, [r4, #0]
	    *pLeftMotorRPM = (uiLeftMotorPulseCounter * 60.0) / (160.0 * uiTimeSample);
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <vEncoderSystemExecuteMeasurement+0xc8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd57 	bl	800049c <__aeabi_ui2d>
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <vEncoderSystemExecuteMeasurement+0xb8>)
 80019f4:	f7fe fdcc 	bl	8000590 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	461d      	mov	r5, r3
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <vEncoderSystemExecuteMeasurement+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd49 	bl	800049c <__aeabi_ui2d>
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <vEncoderSystemExecuteMeasurement+0xc0>)
 8001a10:	f7fe fdbe 	bl	8000590 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fee2 	bl	80007e4 <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	490d      	ldr	r1, [pc, #52]	; (8001a5c <vEncoderSystemExecuteMeasurement+0xcc>)
 8001a26:	680c      	ldr	r4, [r1, #0]
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7fe ffe2 	bl	80009f4 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	6023      	str	r3, [r4, #0]
	    // Resetar o contador para a próxima amostragem
	    uiRightMotorPulseCounter = 0;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <vEncoderSystemExecuteMeasurement+0xb4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
	    uiLeftMotorPulseCounter = 0;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <vEncoderSystemExecuteMeasurement+0xc8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	bf00      	nop
 8001a42:	bdb0      	pop	{r4, r5, r7, pc}
 8001a44:	20000440 	.word	0x20000440
 8001a48:	404e0000 	.word	0x404e0000
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	40640000 	.word	0x40640000
 8001a54:	2000043c 	.word	0x2000043c
 8001a58:	20000444 	.word	0x20000444
 8001a5c:	20000438 	.word	0x20000438

08001a60 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a76:	4b66      	ldr	r3, [pc, #408]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	4a65      	ldr	r2, [pc, #404]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a8e:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a5f      	ldr	r2, [pc, #380]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001a94:	f043 0320 	orr.w	r3, r3, #32
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b5a      	ldr	r3, [pc, #360]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a59      	ldr	r2, [pc, #356]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a53      	ldr	r2, [pc, #332]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b51      	ldr	r3, [pc, #324]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a4d      	ldr	r2, [pc, #308]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <MX_GPIO_Init+0x1b0>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f002 fe90 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8001b02:	4844      	ldr	r0, [pc, #272]	; (8001c14 <MX_GPIO_Init+0x1b4>)
 8001b04:	f002 fe8a 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 8001b08:	f242 33a0 	movw	r3, #9120	; 0x23a0
 8001b0c:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	483e      	ldr	r0, [pc, #248]	; (8001c18 <MX_GPIO_Init+0x1b8>)
 8001b20:	f002 fcfa 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8001b24:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f002 fcea 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 8001b44:	2304      	movs	r3, #4
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001b54:	2303      	movs	r3, #3
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482d      	ldr	r0, [pc, #180]	; (8001c14 <MX_GPIO_Init+0x1b4>)
 8001b60:	f002 fcda 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8001b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b76:	2307      	movs	r3, #7
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4824      	ldr	r0, [pc, #144]	; (8001c14 <MX_GPIO_Init+0x1b4>)
 8001b82:	f002 fcc9 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 8001b86:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481d      	ldr	r0, [pc, #116]	; (8001c14 <MX_GPIO_Init+0x1b4>)
 8001ba0:	f002 fcba 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8001ba4:	2340      	movs	r3, #64	; 0x40
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4816      	ldr	r0, [pc, #88]	; (8001c18 <MX_GPIO_Init+0x1b8>)
 8001bc0:	f002 fcaa 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4810      	ldr	r0, [pc, #64]	; (8001c1c <MX_GPIO_Init+0x1bc>)
 8001bda:	f002 fc9d 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8001bde:	2340      	movs	r3, #64	; 0x40
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4808      	ldr	r0, [pc, #32]	; (8001c14 <MX_GPIO_Init+0x1b4>)
 8001bf4:	f002 fc90 	bl	8004518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2028      	movs	r0, #40	; 0x28
 8001bfe:	f002 fa9c 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c02:	2028      	movs	r0, #40	; 0x28
 8001c04:	f002 fab3 	bl	800416e <HAL_NVIC_EnableIRQ>

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	48000c00 	.word	0x48000c00

08001c20 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c26:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <MX_I2C2_Init+0x78>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <MX_I2C2_Init+0x7c>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c5a:	480e      	ldr	r0, [pc, #56]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c5c:	f002 fe19 	bl	8004892 <HAL_I2C_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c66:	f000 f961 	bl	8001f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c6e:	f002 feab 	bl	80049c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c78:	f000 f958 	bl	8001f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_I2C2_Init+0x74>)
 8001c80:	f002 feed 	bl	8004a5e <HAL_I2CEx_ConfigDigitalFilter>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c8a:	f000 f94f 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000448 	.word	0x20000448
 8001c98:	40005800 	.word	0x40005800
 8001c9c:	30a0a7fb 	.word	0x30a0a7fb

08001ca0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0a0      	sub	sp, #128	; 0x80
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb8:	f107 0318 	add.w	r3, r7, #24
 8001cbc:	2254      	movs	r2, #84	; 0x54
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f006 fd81 	bl	80087c8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2d      	ldr	r2, [pc, #180]	; (8001d80 <HAL_I2C_MspInit+0xe0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d153      	bne.n	8001d78 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 fced 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ce8:	f000 f920 	bl	8001f2c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d20:	2312      	movs	r3, #18
 8001d22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d34:	4619      	mov	r1, r3
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <HAL_I2C_MspInit+0xe8>)
 8001d38:	f002 fbee 	bl	8004518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8001d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d40:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d42:	2312      	movs	r3, #18
 8001d44:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5c:	f002 fbdc 	bl	8004518 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001d66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_I2C_MspInit+0xe4>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3780      	adds	r7, #128	; 0x80
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40005800 	.word	0x40005800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	00000000 	.word	0x00000000

08001d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d94:	f000 fe41 	bl	8002a1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d98:	f000 f85e 	bl	8001e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d9c:	f7ff fe60 	bl	8001a60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001da0:	f7ff fd54 	bl	800184c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001da4:	f000 fd12 	bl	80027cc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001da8:	f7ff f8a2 	bl	8000ef0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001dac:	f7ff f918 	bl	8000fe0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001db0:	f7ff f98c 	bl	80010cc <MX_ADC3_Init>
  MX_TIM1_Init();
 8001db4:	f000 f994 	bl	80020e0 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001db8:	f000 fb32 	bl	8002420 <MX_TIM16_Init>
  MX_TIM4_Init();
 8001dbc:	f000 fa4c 	bl	8002258 <MX_TIM4_Init>
  MX_ADC4_Init();
 8001dc0:	f7ff f9fc 	bl	80011bc <MX_ADC4_Init>
  MX_ADC5_Init();
 8001dc4:	f7ff fa60 	bl	8001288 <MX_ADC5_Init>
  MX_I2C2_Init();
 8001dc8:	f7ff ff2a 	bl	8001c20 <MX_I2C2_Init>
  MX_TIM8_Init();
 8001dcc:	f000 fa94 	bl	80022f8 <MX_TIM8_Init>
  MX_TIM17_Init();
 8001dd0:	f000 fb70 	bl	80024b4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERNAL_CLOCK);
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <main+0xb8>)
 8001dd6:	f003 ff87 	bl	8005ce8 <HAL_TIM_Base_Start_IT>
  vPowerTrainSystemInit();
 8001dda:	f7fe fffb 	bl	8000dd4 <vPowerTrainSystemInit>
  vBatterySystemInit(&BatteryCharge);
 8001dde:	481b      	ldr	r0, [pc, #108]	; (8001e4c <main+0xbc>)
 8001de0:	f7fe ffd6 	bl	8000d90 <vBatterySystemInit>
  vEncoderSystemInit(&leftMotorCount, &rightMotorCount);
 8001de4:	491a      	ldr	r1, [pc, #104]	; (8001e50 <main+0xc0>)
 8001de6:	481b      	ldr	r0, [pc, #108]	; (8001e54 <main+0xc4>)
 8001de8:	f7ff fd8a 	bl	8001900 <vEncoderSystemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001dec:	2100      	movs	r1, #0
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff f802 	bl	8000df8 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR,CLOCKWISE);
 8001df4:	2100      	movs	r1, #0
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7fe fffe 	bl	8000df8 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 1000);
 8001dfc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001e38 <main+0xa8>
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff f84f 	bl	8000ea4 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR, 1000);
 8001e06:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001e38 <main+0xa8>
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f84a 	bl	8000ea4 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(60000);
 8001e10:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001e14:	f000 fe72 	bl	8002afc <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 0);
 8001e18:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001e40 <main+0xb0>
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff f841 	bl	8000ea4 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 8001e22:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001e40 <main+0xb0>
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff f83c 	bl	8000ea4 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(10000);
 8001e2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e30:	f000 fe64 	bl	8002afc <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001e34:	e7da      	b.n	8001dec <main+0x5c>
 8001e36:	bf00      	nop
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	408f4000 	.word	0x408f4000
	...
 8001e48:	200004f4 	.word	0x200004f4
 8001e4c:	200004a4 	.word	0x200004a4
 8001e50:	200004a0 	.word	0x200004a0
 8001e54:	2000049c 	.word	0x2000049c

08001e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b094      	sub	sp, #80	; 0x50
 8001e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5e:	f107 0318 	add.w	r3, r7, #24
 8001e62:	2238      	movs	r2, #56	; 0x38
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f006 fcae 	bl	80087c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f002 fe3c 	bl	8004af8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e8a:	2340      	movs	r3, #64	; 0x40
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e92:	2302      	movs	r3, #2
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e96:	2304      	movs	r3, #4
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e9a:	2355      	movs	r3, #85	; 0x55
 8001e9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fed6 	bl	8004c60 <HAL_RCC_OscConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001eba:	f000 f837 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ebe:	230f      	movs	r3, #15
 8001ec0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 f9d4 	bl	8005284 <HAL_RCC_ClockConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ee2:	f000 f823 	bl	8001f2c <Error_Handler>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3750      	adds	r7, #80	; 0x50
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	vEncoderSystemCounterUpdate(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fd22 	bl	8001940 <vEncoderSystemCounterUpdate>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_PeriodElapsedCallback>:
// chama a funcao de calcular o rpm a cada 1 min
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d103      	bne.n	8001f1e <HAL_TIM_PeriodElapsedCallback+0x1a>
    	vEncoderSystemExecuteMeasurement();
 8001f16:	f7ff fd3b 	bl	8001990 <vEncoderSystemExecuteMeasurement>
    	vBatterySystemComputeMeasurement();
 8001f1a:	f7fe ff47 	bl	8000dac <vBatterySystemComputeMeasurement>
    }
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40000800 	.word	0x40000800

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <Error_Handler+0x8>
	...

08001f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_MspInit+0x44>)
 8001f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f42:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_MspInit+0x44>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_MspInit+0x44>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_MspInit+0x44>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_MspInit+0x44>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6593      	str	r3, [r2, #88]	; 0x58
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_MspInit+0x44>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f6e:	f002 fe67 	bl	8004c40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f84:	e7fe      	b.n	8001f84 <NMI_Handler+0x4>

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f000 fd78 	bl	8002ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <DMA1_Channel1_IRQHandler+0x10>)
 8001fda:	f002 f98b 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000250 	.word	0x20000250

08001fe8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <DMA1_Channel2_IRQHandler+0x10>)
 8001fee:	f002 f981 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200002b0 	.word	0x200002b0

08001ffc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA1_Channel3_IRQHandler+0x10>)
 8002002:	f002 f977 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000310 	.word	0x20000310

08002010 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA1_Channel4_IRQHandler+0x10>)
 8002016:	f002 f96d 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000370 	.word	0x20000370

08002024 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <DMA1_Channel5_IRQHandler+0x10>)
 800202a:	f002 f963 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200003d0 	.word	0x200003d0

08002038 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <DMA1_Channel6_IRQHandler+0x10>)
 800203e:	f002 f959 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200006b8 	.word	0x200006b8

0800204c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <DMA1_Channel7_IRQHandler+0x10>)
 8002052:	f002 f94f 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000718 	.word	0x20000718

08002060 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002066:	f004 f9d3 	bl	8006410 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800206c:	f004 f9d0 	bl	8006410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200004a8 	.word	0x200004a8
 8002078:	2000058c 	.word	0x2000058c

0800207c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002082:	f004 f9c5 	bl	8006410 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002088:	f004 f9c2 	bl	8006410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200004a8 	.word	0x200004a8
 8002094:	200005d8 	.word	0x200005d8

08002098 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM4_IRQHandler+0x10>)
 800209e:	f004 f9b7 	bl	8006410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200004f4 	.word	0x200004f4

080020ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020b4:	f002 fbca 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <SystemInit+0x20>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <SystemInit+0x20>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b09c      	sub	sp, #112	; 0x70
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002100:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
 8002110:	615a      	str	r2, [r3, #20]
 8002112:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2234      	movs	r2, #52	; 0x34
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f006 fb54 	bl	80087c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <MX_TIM1_Init+0x170>)
 8002122:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <MX_TIM1_Init+0x174>)
 8002124:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <MX_TIM1_Init+0x170>)
 8002128:	2210      	movs	r2, #16
 800212a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212c:	4b48      	ldr	r3, [pc, #288]	; (8002250 <MX_TIM1_Init+0x170>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <MX_TIM1_Init+0x170>)
 8002134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002138:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213a:	4b45      	ldr	r3, [pc, #276]	; (8002250 <MX_TIM1_Init+0x170>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <MX_TIM1_Init+0x170>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <MX_TIM1_Init+0x170>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800214c:	4840      	ldr	r0, [pc, #256]	; (8002250 <MX_TIM1_Init+0x170>)
 800214e:	f003 fd03 	bl	8005b58 <HAL_TIM_Base_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002158:	f7ff fee8 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002160:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002162:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002166:	4619      	mov	r1, r3
 8002168:	4839      	ldr	r0, [pc, #228]	; (8002250 <MX_TIM1_Init+0x170>)
 800216a:	f004 fc51 	bl	8006a10 <HAL_TIM_ConfigClockSource>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002174:	f7ff feda 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002178:	4835      	ldr	r0, [pc, #212]	; (8002250 <MX_TIM1_Init+0x170>)
 800217a:	f003 fe2d 	bl	8005dd8 <HAL_TIM_PWM_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002184:	f7ff fed2 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002194:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002198:	4619      	mov	r1, r3
 800219a:	482d      	ldr	r0, [pc, #180]	; (8002250 <MX_TIM1_Init+0x170>)
 800219c:	f005 fb36 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80021a6:	f7ff fec1 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021aa:	2360      	movs	r3, #96	; 0x60
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b2:	2300      	movs	r3, #0
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021b6:	2300      	movs	r3, #0
 80021b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	4820      	ldr	r0, [pc, #128]	; (8002250 <MX_TIM1_Init+0x170>)
 80021d0:	f004 fb0a 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80021da:	f7ff fea7 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021e2:	2204      	movs	r2, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	481a      	ldr	r0, [pc, #104]	; (8002250 <MX_TIM1_Init+0x170>)
 80021e8:	f004 fafe 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80021f2:	f7ff fe9b 	bl	8001f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800220a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800221c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002226:	2300      	movs	r3, #0
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4807      	ldr	r0, [pc, #28]	; (8002250 <MX_TIM1_Init+0x170>)
 8002234:	f005 fb80 	bl	8007938 <HAL_TIMEx_ConfigBreakDeadTime>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800223e:	f7ff fe75 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002242:	4803      	ldr	r0, [pc, #12]	; (8002250 <MX_TIM1_Init+0x170>)
 8002244:	f000 fa64 	bl	8002710 <HAL_TIM_MspPostInit>

}
 8002248:	bf00      	nop
 800224a:	3770      	adds	r7, #112	; 0x70
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200004a8 	.word	0x200004a8
 8002254:	40012c00 	.word	0x40012c00

08002258 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <MX_TIM4_Init+0x98>)
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <MX_TIM4_Init+0x9c>)
 800227a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2599;
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <MX_TIM4_Init+0x98>)
 800227e:	f640 2227 	movw	r2, #2599	; 0xa27
 8002282:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <MX_TIM4_Init+0x98>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65383;
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <MX_TIM4_Init+0x98>)
 800228c:	f64f 7267 	movw	r2, #65383	; 0xff67
 8002290:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <MX_TIM4_Init+0x98>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <MX_TIM4_Init+0x98>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800229e:	4814      	ldr	r0, [pc, #80]	; (80022f0 <MX_TIM4_Init+0x98>)
 80022a0:	f003 fc5a 	bl	8005b58 <HAL_TIM_Base_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80022aa:	f7ff fe3f 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	4619      	mov	r1, r3
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <MX_TIM4_Init+0x98>)
 80022bc:	f004 fba8 	bl	8006a10 <HAL_TIM_ConfigClockSource>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80022c6:	f7ff fe31 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4806      	ldr	r0, [pc, #24]	; (80022f0 <MX_TIM4_Init+0x98>)
 80022d8:	f005 fa98 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80022e2:	f7ff fe23 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200004f4 	.word	0x200004f4
 80022f4:	40000800 	.word	0x40000800

080022f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b098      	sub	sp, #96	; 0x60
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]
 800231a:	615a      	str	r2, [r3, #20]
 800231c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2234      	movs	r2, #52	; 0x34
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f006 fa4f 	bl	80087c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <MX_TIM8_Init+0x120>)
 800232c:	4a3b      	ldr	r2, [pc, #236]	; (800241c <MX_TIM8_Init+0x124>)
 800232e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002330:	4b39      	ldr	r3, [pc, #228]	; (8002418 <MX_TIM8_Init+0x120>)
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <MX_TIM8_Init+0x120>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800233c:	4b36      	ldr	r3, [pc, #216]	; (8002418 <MX_TIM8_Init+0x120>)
 800233e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002342:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002344:	4b34      	ldr	r3, [pc, #208]	; (8002418 <MX_TIM8_Init+0x120>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <MX_TIM8_Init+0x120>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <MX_TIM8_Init+0x120>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002356:	4830      	ldr	r0, [pc, #192]	; (8002418 <MX_TIM8_Init+0x120>)
 8002358:	f003 fd3e 	bl	8005dd8 <HAL_TIM_PWM_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8002362:	f7ff fde3 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002372:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002376:	4619      	mov	r1, r3
 8002378:	4827      	ldr	r0, [pc, #156]	; (8002418 <MX_TIM8_Init+0x120>)
 800237a:	f005 fa47 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002384:	f7ff fdd2 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002388:	2360      	movs	r3, #96	; 0x60
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002390:	2300      	movs	r3, #0
 8002392:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002394:	2300      	movs	r3, #0
 8002396:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a8:	2200      	movs	r2, #0
 80023aa:	4619      	mov	r1, r3
 80023ac:	481a      	ldr	r0, [pc, #104]	; (8002418 <MX_TIM8_Init+0x120>)
 80023ae:	f004 fa1b 	bl	80067e8 <HAL_TIM_PWM_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80023b8:	f7ff fdb8 	bl	8001f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023ec:	2300      	movs	r3, #0
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <MX_TIM8_Init+0x120>)
 80023fa:	f005 fa9d 	bl	8007938 <HAL_TIMEx_ConfigBreakDeadTime>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002404:	f7ff fd92 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <MX_TIM8_Init+0x120>)
 800240a:	f000 f981 	bl	8002710 <HAL_TIM_MspPostInit>

}
 800240e:	bf00      	nop
 8002410:	3760      	adds	r7, #96	; 0x60
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000540 	.word	0x20000540
 800241c:	40013400 	.word	0x40013400

08002420 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002426:	463b      	mov	r3, r7
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <MX_TIM16_Init+0x8c>)
 8002434:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <MX_TIM16_Init+0x90>)
 8002436:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002438:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <MX_TIM16_Init+0x8c>)
 800243a:	22a9      	movs	r2, #169	; 0xa9
 800243c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <MX_TIM16_Init+0x8c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <MX_TIM16_Init+0x8c>)
 8002446:	f242 7210 	movw	r2, #10000	; 0x2710
 800244a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <MX_TIM16_Init+0x8c>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <MX_TIM16_Init+0x8c>)
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <MX_TIM16_Init+0x8c>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800245e:	4813      	ldr	r0, [pc, #76]	; (80024ac <MX_TIM16_Init+0x8c>)
 8002460:	f003 fb7a 	bl	8005b58 <HAL_TIM_Base_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 800246a:	f7ff fd5f 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800246e:	480f      	ldr	r0, [pc, #60]	; (80024ac <MX_TIM16_Init+0x8c>)
 8002470:	f003 fe1c 	bl	80060ac <HAL_TIM_IC_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800247a:	f7ff fd57 	bl	8001f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002482:	2301      	movs	r3, #1
 8002484:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800248e:	463b      	mov	r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_TIM16_Init+0x8c>)
 8002496:	f004 f90a 	bl	80066ae <HAL_TIM_IC_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80024a0:	f7ff fd44 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2000058c 	.word	0x2000058c
 80024b0:	40014400 	.word	0x40014400

080024b4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80024ba:	463b      	mov	r3, r7
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <MX_TIM17_Init+0x8c>)
 80024c8:	4a1e      	ldr	r2, [pc, #120]	; (8002544 <MX_TIM17_Init+0x90>)
 80024ca:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <MX_TIM17_Init+0x8c>)
 80024ce:	22a9      	movs	r2, #169	; 0xa9
 80024d0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <MX_TIM17_Init+0x8c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <MX_TIM17_Init+0x8c>)
 80024da:	f242 7210 	movw	r2, #10000	; 0x2710
 80024de:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <MX_TIM17_Init+0x8c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <MX_TIM17_Init+0x8c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <MX_TIM17_Init+0x8c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80024f2:	4813      	ldr	r0, [pc, #76]	; (8002540 <MX_TIM17_Init+0x8c>)
 80024f4:	f003 fb30 	bl	8005b58 <HAL_TIM_Base_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 80024fe:	f7ff fd15 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8002502:	480f      	ldr	r0, [pc, #60]	; (8002540 <MX_TIM17_Init+0x8c>)
 8002504:	f003 fdd2 	bl	80060ac <HAL_TIM_IC_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800250e:	f7ff fd0d 	bl	8001f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002516:	2301      	movs	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002522:	463b      	mov	r3, r7
 8002524:	2200      	movs	r2, #0
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_TIM17_Init+0x8c>)
 800252a:	f004 f8c0 	bl	80066ae <HAL_TIM_IC_ConfigChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8002534:	f7ff fcfa 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200005d8 	.word	0x200005d8
 8002544:	40014800 	.word	0x40014800

08002548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08e      	sub	sp, #56	; 0x38
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_TIM_Base_MspInit+0x170>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d11c      	bne.n	80025a4 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800256a:	4b54      	ldr	r3, [pc, #336]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256e:	4a53      	ldr	r2, [pc, #332]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 8002570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002574:	6613      	str	r3, [r2, #96]	; 0x60
 8002576:	4b51      	ldr	r3, [pc, #324]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	2019      	movs	r0, #25
 8002588:	f001 fdd7 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800258c:	2019      	movs	r0, #25
 800258e:	f001 fdee 	bl	800416e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	201a      	movs	r0, #26
 8002598:	f001 fdcf 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800259c:	201a      	movs	r0, #26
 800259e:	f001 fde6 	bl	800416e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80025a2:	e084      	b.n	80026ae <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a45      	ldr	r2, [pc, #276]	; (80026c0 <HAL_TIM_Base_MspInit+0x178>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d114      	bne.n	80025d8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	4a42      	ldr	r2, [pc, #264]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6593      	str	r3, [r2, #88]	; 0x58
 80025ba:	4b40      	ldr	r3, [pc, #256]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	201e      	movs	r0, #30
 80025cc:	f001 fdb5 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025d0:	201e      	movs	r0, #30
 80025d2:	f001 fdcc 	bl	800416e <HAL_NVIC_EnableIRQ>
}
 80025d6:	e06a      	b.n	80026ae <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM16)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a39      	ldr	r2, [pc, #228]	; (80026c4 <HAL_TIM_Base_MspInit+0x17c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d130      	bne.n	8002644 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 80025e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e6:	4a35      	ldr	r2, [pc, #212]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	6613      	str	r3, [r2, #96]	; 0x60
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8002612:	2310      	movs	r3, #16
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002622:	2301      	movs	r3, #1
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262a:	4619      	mov	r1, r3
 800262c:	4826      	ldr	r0, [pc, #152]	; (80026c8 <HAL_TIM_Base_MspInit+0x180>)
 800262e:	f001 ff73 	bl	8004518 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2019      	movs	r0, #25
 8002638:	f001 fd7f 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800263c:	2019      	movs	r0, #25
 800263e:	f001 fd96 	bl	800416e <HAL_NVIC_EnableIRQ>
}
 8002642:	e034      	b.n	80026ae <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM17)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a20      	ldr	r2, [pc, #128]	; (80026cc <HAL_TIM_Base_MspInit+0x184>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12f      	bne.n	80026ae <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002658:	6613      	str	r3, [r2, #96]	; 0x60
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_TIM_Base_MspInit+0x174>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 800267e:	2320      	movs	r3, #32
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800268e:	230a      	movs	r3, #10
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002696:	4619      	mov	r1, r3
 8002698:	480b      	ldr	r0, [pc, #44]	; (80026c8 <HAL_TIM_Base_MspInit+0x180>)
 800269a:	f001 ff3d 	bl	8004518 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	201a      	movs	r0, #26
 80026a4:	f001 fd49 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80026a8:	201a      	movs	r0, #26
 80026aa:	f001 fd60 	bl	800416e <HAL_NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3738      	adds	r7, #56	; 0x38
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40000800 	.word	0x40000800
 80026c4:	40014400 	.word	0x40014400
 80026c8:	48000400 	.word	0x48000400
 80026cc:	40014800 	.word	0x40014800

080026d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_TIM_PWM_MspInit+0x38>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10b      	bne.n	80026fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_TIM_PWM_MspInit+0x3c>)
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_TIM_PWM_MspInit+0x3c>)
 80026e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026ec:	6613      	str	r3, [r2, #96]	; 0x60
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_TIM_PWM_MspInit+0x3c>)
 80026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40013400 	.word	0x40013400
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_TIM_MspPostInit+0xac>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d11c      	bne.n	800276c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_TIM_MspPostInit+0xb0>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_TIM_MspPostInit+0xb0>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_TIM_MspPostInit+0xb0>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 800274a:	2303      	movs	r3, #3
 800274c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800275a:	2302      	movs	r3, #2
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	4817      	ldr	r0, [pc, #92]	; (80027c4 <HAL_TIM_MspPostInit+0xb4>)
 8002766:	f001 fed7 	bl	8004518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800276a:	e022      	b.n	80027b2 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_TIM_MspPostInit+0xb8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d11d      	bne.n	80027b2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_TIM_MspPostInit+0xb0>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <HAL_TIM_MspPostInit+0xb0>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_TIM_MspPostInit+0xb0>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 800278e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80027a0:	2302      	movs	r3, #2
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ae:	f001 feb3 	bl	8004518 <HAL_GPIO_Init>
}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	48000800 	.word	0x48000800
 80027c8:	40013400 	.word	0x40013400

080027cc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 80027d2:	4a22      	ldr	r2, [pc, #136]	; (800285c <MX_LPUART1_UART_Init+0x90>)
 80027d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 80027d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80027e4:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 80027f2:	220c      	movs	r2, #12
 80027f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 8002804:	2200      	movs	r2, #0
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 800280a:	2200      	movs	r2, #0
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800280e:	4812      	ldr	r0, [pc, #72]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 8002810:	f005 f96c 	bl	8007aec <HAL_UART_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800281a:	f7ff fb87 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800281e:	2100      	movs	r1, #0
 8002820:	480d      	ldr	r0, [pc, #52]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 8002822:	f005 ff07 	bl	8008634 <HAL_UARTEx_SetTxFifoThreshold>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800282c:	f7ff fb7e 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002830:	2100      	movs	r1, #0
 8002832:	4809      	ldr	r0, [pc, #36]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 8002834:	f005 ff3c 	bl	80086b0 <HAL_UARTEx_SetRxFifoThreshold>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800283e:	f7ff fb75 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <MX_LPUART1_UART_Init+0x8c>)
 8002844:	f005 febd 	bl	80085c2 <HAL_UARTEx_DisableFifoMode>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800284e:	f7ff fb6d 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000624 	.word	0x20000624
 800285c:	40008000 	.word	0x40008000

08002860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b09e      	sub	sp, #120	; 0x78
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	2254      	movs	r2, #84	; 0x54
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f005 ffa1 	bl	80087c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_UART_MspInit+0x150>)
 800288c:	4293      	cmp	r3, r2
 800288e:	f040 808a 	bne.w	80029a6 <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002892:	2320      	movs	r3, #32
 8002894:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 ff0c 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028aa:	f7ff fb3f 	bl	8001f2c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <HAL_UART_MspInit+0x154>)
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	4a40      	ldr	r2, [pc, #256]	; (80029b4 <HAL_UART_MspInit+0x154>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <HAL_UART_MspInit+0x154>)
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_UART_MspInit+0x154>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <HAL_UART_MspInit+0x154>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d2:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <HAL_UART_MspInit+0x154>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80028de:	230c      	movs	r3, #12
 80028e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80028ee:	230c      	movs	r3, #12
 80028f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028f6:	4619      	mov	r1, r3
 80028f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fc:	f001 fe0c 	bl	8004518 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_UART_MspInit+0x158>)
 8002902:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <HAL_UART_MspInit+0x15c>)
 8002904:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_UART_MspInit+0x158>)
 8002908:	2222      	movs	r2, #34	; 0x22
 800290a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_UART_MspInit+0x158>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_UART_MspInit+0x158>)
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_UART_MspInit+0x158>)
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_UART_MspInit+0x158>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_UART_MspInit+0x158>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_UART_MspInit+0x158>)
 800292c:	2200      	movs	r2, #0
 800292e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_UART_MspInit+0x158>)
 8002932:	2200      	movs	r2, #0
 8002934:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002936:	4820      	ldr	r0, [pc, #128]	; (80029b8 <HAL_UART_MspInit+0x158>)
 8002938:	f001 fc34 	bl	80041a4 <HAL_DMA_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002942:	f7ff faf3 	bl	8001f2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_UART_MspInit+0x158>)
 800294a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_UART_MspInit+0x158>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_UART_MspInit+0x160>)
 8002956:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_UART_MspInit+0x164>)
 8002958:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800295a:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_UART_MspInit+0x160>)
 800295c:	2223      	movs	r2, #35	; 0x23
 800295e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_UART_MspInit+0x160>)
 8002962:	2210      	movs	r2, #16
 8002964:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_UART_MspInit+0x160>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_UART_MspInit+0x160>)
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_UART_MspInit+0x160>)
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_UART_MspInit+0x160>)
 800297a:	2200      	movs	r2, #0
 800297c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_UART_MspInit+0x160>)
 8002980:	2200      	movs	r2, #0
 8002982:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_UART_MspInit+0x160>)
 8002986:	2200      	movs	r2, #0
 8002988:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800298a:	480d      	ldr	r0, [pc, #52]	; (80029c0 <HAL_UART_MspInit+0x160>)
 800298c:	f001 fc0a 	bl	80041a4 <HAL_DMA_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002996:	f7ff fac9 	bl	8001f2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <HAL_UART_MspInit+0x160>)
 800299e:	67da      	str	r2, [r3, #124]	; 0x7c
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_UART_MspInit+0x160>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80029a6:	bf00      	nop
 80029a8:	3778      	adds	r7, #120	; 0x78
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40008000 	.word	0x40008000
 80029b4:	40021000 	.word	0x40021000
 80029b8:	200006b8 	.word	0x200006b8
 80029bc:	4002006c 	.word	0x4002006c
 80029c0:	20000718 	.word	0x20000718
 80029c4:	40020080 	.word	0x40020080

080029c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029c8:	480d      	ldr	r0, [pc, #52]	; (8002a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029cc:	f7ff fb76 	bl	80020bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d0:	480c      	ldr	r0, [pc, #48]	; (8002a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80029d2:	490d      	ldr	r1, [pc, #52]	; (8002a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <LoopForever+0xe>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029d8:	e002      	b.n	80029e0 <LoopCopyDataInit>

080029da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029de:	3304      	adds	r3, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e4:	d3f9      	bcc.n	80029da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029e8:	4c0a      	ldr	r4, [pc, #40]	; (8002a14 <LoopForever+0x16>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ec:	e001      	b.n	80029f2 <LoopFillZerobss>

080029ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f0:	3204      	adds	r2, #4

080029f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f4:	d3fb      	bcc.n	80029ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029f6:	f005 feef 	bl	80087d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029fa:	f7ff f9c9 	bl	8001d90 <main>

080029fe <LoopForever>:

LoopForever:
    b LoopForever
 80029fe:	e7fe      	b.n	80029fe <LoopForever>
  ldr   r0, =_estack
 8002a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002a0c:	08008888 	.word	0x08008888
  ldr r2, =_sbss
 8002a10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a14:	2000077c 	.word	0x2000077c

08002a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC1_2_IRQHandler>

08002a1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a24:	2003      	movs	r0, #3
 8002a26:	f001 fb7d 	bl	8004124 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f000 f80e 	bl	8002a4c <HAL_InitTick>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	71fb      	strb	r3, [r7, #7]
 8002a3a:	e001      	b.n	8002a40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a3c:	f7ff fa7c 	bl	8001f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a40:	79fb      	ldrb	r3, [r7, #7]

}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_InitTick+0x68>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d022      	beq.n	8002aa6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_InitTick+0x6c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_InitTick+0x68>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 fb88 	bl	800418a <HAL_SYSTICK_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b0f      	cmp	r3, #15
 8002a84:	d809      	bhi.n	8002a9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a86:	2200      	movs	r2, #0
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8e:	f001 fb54 	bl	800413a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_InitTick+0x70>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e007      	b.n	8002aaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	e004      	b.n	8002aaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	e001      	b.n	8002aaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000000c 	.word	0x2000000c
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	20000008 	.word	0x20000008

08002ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_IncTick+0x1c>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_IncTick+0x20>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	4a03      	ldr	r2, [pc, #12]	; (8002adc <HAL_IncTick+0x1c>)
 8002ad0:	6013      	str	r3, [r2, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	20000778 	.word	0x20000778
 8002ae0:	2000000c 	.word	0x2000000c

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000778 	.word	0x20000778

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d004      	beq.n	8002b20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_Delay+0x40>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b20:	bf00      	nop
 8002b22:	f7ff ffdf 	bl	8002ae4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d8f7      	bhi.n	8002b22 <HAL_Delay+0x26>
  {
  }
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	2000000c 	.word	0x2000000c

08002b40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3360      	adds	r3, #96	; 0x60
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <LL_ADC_SetOffset+0x44>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	03fff000 	.word	0x03fff000

08002bf0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3360      	adds	r3, #96	; 0x60
 8002bfe:	461a      	mov	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3360      	adds	r3, #96	; 0x60
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b087      	sub	sp, #28
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3360      	adds	r3, #96	; 0x60
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3360      	adds	r3, #96	; 0x60
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	615a      	str	r2, [r3, #20]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3330      	adds	r3, #48	; 0x30
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	4413      	add	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	211f      	movs	r1, #31
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 011f 	and.w	r1, r3, #31
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3314      	adds	r3, #20
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	0e5b      	lsrs	r3, r3, #25
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	4413      	add	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	0d1b      	lsrs	r3, r3, #20
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	2107      	movs	r1, #7
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	401a      	ands	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	0d1b      	lsrs	r3, r3, #20
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	431a      	orrs	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0318 	and.w	r3, r3, #24
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002db8:	40d9      	lsrs	r1, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	0007ffff 	.word	0x0007ffff

08002ddc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002dec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6093      	str	r3, [r2, #8]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e14:	d101      	bne.n	8002e1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e64:	d101      	bne.n	8002e6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e8c:	f043 0202 	orr.w	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <LL_ADC_IsEnabled+0x18>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <LL_ADC_IsEnabled+0x1a>
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d101      	bne.n	8002ede <LL_ADC_IsDisableOngoing+0x18>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <LL_ADC_IsDisableOngoing+0x1a>
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d101      	bne.n	8002f04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d101      	bne.n	8002f2a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e1a9      	b.n	80032a6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7fe f9f7 	bl	8001354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff41 	bl	8002e00 <LL_ADC_IsDeepPowerDownEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff27 	bl	8002ddc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff5c 	bl	8002e50 <LL_ADC_IsInternalRegulatorEnabled>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d115      	bne.n	8002fca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff40 	bl	8002e28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa8:	4b9c      	ldr	r3, [pc, #624]	; (800321c <HAL_ADC_Init+0x2e4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	4a9c      	ldr	r2, [pc, #624]	; (8003220 <HAL_ADC_Init+0x2e8>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fbc:	e002      	b.n	8002fc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f9      	bne.n	8002fbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff3e 	bl	8002e50 <LL_ADC_IsInternalRegulatorEnabled>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	f043 0210 	orr.w	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff76 	bl	8002eec <LL_ADC_REG_IsConversionOngoing>
 8003000:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 8142 	bne.w	8003294 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 813e 	bne.w	8003294 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003020:	f043 0202 	orr.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff37 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d141      	bne.n	80030bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003040:	d004      	beq.n	800304c <HAL_ADC_Init+0x114>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a77      	ldr	r2, [pc, #476]	; (8003224 <HAL_ADC_Init+0x2ec>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d10f      	bne.n	800306c <HAL_ADC_Init+0x134>
 800304c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003050:	f7ff ff26 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003054:	4604      	mov	r4, r0
 8003056:	4873      	ldr	r0, [pc, #460]	; (8003224 <HAL_ADC_Init+0x2ec>)
 8003058:	f7ff ff22 	bl	8002ea0 <LL_ADC_IsEnabled>
 800305c:	4603      	mov	r3, r0
 800305e:	4323      	orrs	r3, r4
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e012      	b.n	8003092 <HAL_ADC_Init+0x15a>
 800306c:	486e      	ldr	r0, [pc, #440]	; (8003228 <HAL_ADC_Init+0x2f0>)
 800306e:	f7ff ff17 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003072:	4604      	mov	r4, r0
 8003074:	486d      	ldr	r0, [pc, #436]	; (800322c <HAL_ADC_Init+0x2f4>)
 8003076:	f7ff ff13 	bl	8002ea0 <LL_ADC_IsEnabled>
 800307a:	4603      	mov	r3, r0
 800307c:	431c      	orrs	r4, r3
 800307e:	486c      	ldr	r0, [pc, #432]	; (8003230 <HAL_ADC_Init+0x2f8>)
 8003080:	f7ff ff0e 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003084:	4603      	mov	r3, r0
 8003086:	4323      	orrs	r3, r4
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309e:	d004      	beq.n	80030aa <HAL_ADC_Init+0x172>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5f      	ldr	r2, [pc, #380]	; (8003224 <HAL_ADC_Init+0x2ec>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Init+0x176>
 80030aa:	4a62      	ldr	r2, [pc, #392]	; (8003234 <HAL_ADC_Init+0x2fc>)
 80030ac:	e000      	b.n	80030b0 <HAL_ADC_Init+0x178>
 80030ae:	4a62      	ldr	r2, [pc, #392]	; (8003238 <HAL_ADC_Init+0x300>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f7ff fd42 	bl	8002b40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7f5b      	ldrb	r3, [r3, #29]
 80030c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80030cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80030d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d106      	bne.n	80030f8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	045b      	lsls	r3, r3, #17
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	4b48      	ldr	r3, [pc, #288]	; (800323c <HAL_ADC_Init+0x304>)
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	430b      	orrs	r3, r1
 8003126:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fee5 	bl	8002f12 <LL_ADC_INJ_IsConversionOngoing>
 8003148:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d17f      	bne.n	8003250 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d17c      	bne.n	8003250 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800315a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003162:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003172:	f023 0302 	bic.w	r3, r3, #2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69b9      	ldr	r1, [r7, #24]
 800317c:	430b      	orrs	r3, r1
 800317e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d017      	beq.n	80031b8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003196:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6911      	ldr	r1, [r2, #16]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80031b6:	e013      	b.n	80031e0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d12a      	bne.n	8003240 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003200:	4311      	orrs	r1, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800320c:	430a      	orrs	r2, r1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	611a      	str	r2, [r3, #16]
 800321a:	e019      	b.n	8003250 <HAL_ADC_Init+0x318>
 800321c:	20000004 	.word	0x20000004
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	50000100 	.word	0x50000100
 8003228:	50000400 	.word	0x50000400
 800322c:	50000500 	.word	0x50000500
 8003230:	50000600 	.word	0x50000600
 8003234:	50000300 	.word	0x50000300
 8003238:	50000700 	.word	0x50000700
 800323c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d10c      	bne.n	8003272 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f023 010f 	bic.w	r1, r3, #15
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
 8003270:	e007      	b.n	8003282 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 020f 	bic.w	r2, r2, #15
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	65da      	str	r2, [r3, #92]	; 0x5c
 8003292:	e007      	b.n	80032a4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	f043 0210 	orr.w	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}
 80032ae:	bf00      	nop

080032b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b0b6      	sub	sp, #216	; 0xd8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x24>
 80032ea:	2302      	movs	r3, #2
 80032ec:	f000 bc13 	b.w	8003b16 <HAL_ADC_ConfigChannel+0x84a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fdf5 	bl	8002eec <LL_ADC_REG_IsConversionOngoing>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 83f3 	bne.w	8003af0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	f7ff fce4 	bl	8002ce4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fde3 	bl	8002eec <LL_ADC_REG_IsConversionOngoing>
 8003326:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fdef 	bl	8002f12 <LL_ADC_INJ_IsConversionOngoing>
 8003334:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003338:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 81d9 	bne.w	80036f4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 81d4 	bne.w	80036f4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003354:	d10f      	bne.n	8003376 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	4619      	mov	r1, r3
 8003362:	f7ff fceb 	bl	8002d3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fca5 	bl	8002cbe <LL_ADC_SetSamplingTimeCommonConfig>
 8003374:	e00e      	b.n	8003394 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	461a      	mov	r2, r3
 8003384:	f7ff fcda 	bl	8002d3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fc95 	bl	8002cbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d022      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6919      	ldr	r1, [r3, #16]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033c6:	f7ff fbef 	bl	8002ba8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6919      	ldr	r1, [r3, #16]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f7ff fc3b 	bl	8002c52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d102      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x126>
 80033ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f0:	e000      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x128>
 80033f2:	2300      	movs	r3, #0
 80033f4:	461a      	mov	r2, r3
 80033f6:	f7ff fc47 	bl	8002c88 <LL_ADC_SetOffsetSaturation>
 80033fa:	e17b      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fbf4 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8003408:	4603      	mov	r3, r0
 800340a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x15c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fbe9 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 800341e:	4603      	mov	r3, r0
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	f003 021f 	and.w	r2, r3, #31
 8003426:	e01e      	b.n	8003466 <HAL_ADC_ConfigChannel+0x19a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fbde 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800344a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800344e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e004      	b.n	8003464 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800345a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <HAL_ADC_ConfigChannel+0x1b2>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	0e9b      	lsrs	r3, r3, #26
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	e018      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x1e4>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800349a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e004      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80034a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d106      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fbad 	bl	8002c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2101      	movs	r1, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fb91 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x222>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fb86 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	e01e      	b.n	800352c <HAL_ADC_ConfigChannel+0x260>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fb7b 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800350c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e004      	b.n	800352a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x278>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e9b      	lsrs	r3, r3, #26
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	e018      	b.n	8003576 <HAL_ADC_ConfigChannel+0x2aa>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003558:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800355c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	e004      	b.n	8003576 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800356c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003576:	429a      	cmp	r2, r3
 8003578:	d106      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fb4a 	bl	8002c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2102      	movs	r1, #2
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fb2e 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8003594:	4603      	mov	r3, r0
 8003596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x2e8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2102      	movs	r1, #2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fb23 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 80035aa:	4603      	mov	r3, r0
 80035ac:	0e9b      	lsrs	r3, r3, #26
 80035ae:	f003 021f 	and.w	r2, r3, #31
 80035b2:	e01e      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x326>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fb18 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035e2:	2320      	movs	r3, #32
 80035e4:	e004      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_ADC_ConfigChannel+0x33e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	e016      	b.n	8003638 <HAL_ADC_ConfigChannel+0x36c>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800361c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800361e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800362a:	2320      	movs	r3, #32
 800362c:	e004      	b.n	8003638 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800362e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003638:	429a      	cmp	r2, r3
 800363a:	d106      	bne.n	800364a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fae9 	bl	8002c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2103      	movs	r1, #3
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff facd 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x3aa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2103      	movs	r1, #3
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fac2 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	e017      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x3da>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2103      	movs	r1, #3
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fab7 	bl	8002bf0 <LL_ADC_GetOffsetChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800368e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003690:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e003      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800369c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_ADC_ConfigChannel+0x3f2>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0e9b      	lsrs	r3, r3, #26
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	e011      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x416>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e003      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d106      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	2103      	movs	r1, #3
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fa94 	bl	8002c1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fbd1 	bl	8002ea0 <LL_ADC_IsEnabled>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	f040 813d 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	461a      	mov	r2, r3
 8003714:	f7ff fb3e 	bl	8002d94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4aa2      	ldr	r2, [pc, #648]	; (80039a8 <HAL_ADC_ConfigChannel+0x6dc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	f040 812e 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_ADC_ConfigChannel+0x480>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	3301      	adds	r3, #1
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2b09      	cmp	r3, #9
 8003742:	bf94      	ite	ls
 8003744:	2301      	movls	r3, #1
 8003746:	2300      	movhi	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e019      	b.n	8003780 <HAL_ADC_ConfigChannel+0x4b4>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800375a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800375e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003764:	2320      	movs	r3, #32
 8003766:	e003      	b.n	8003770 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2b09      	cmp	r3, #9
 8003778:	bf94      	ite	ls
 800377a:	2301      	movls	r3, #1
 800377c:	2300      	movhi	r3, #0
 800377e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	2b00      	cmp	r3, #0
 8003782:	d079      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x4d4>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	3301      	adds	r3, #1
 8003798:	069b      	lsls	r3, r3, #26
 800379a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800379e:	e015      	b.n	80037cc <HAL_ADC_ConfigChannel+0x500>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	069b      	lsls	r3, r3, #26
 80037c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x520>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	3301      	adds	r3, #1
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	e017      	b.n	800381c <HAL_ADC_ConfigChannel+0x550>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e003      	b.n	8003810 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	ea42 0103 	orr.w	r1, r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x576>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	3301      	adds	r3, #1
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	051b      	lsls	r3, r3, #20
 8003840:	e018      	b.n	8003874 <HAL_ADC_ConfigChannel+0x5a8>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800385a:	2320      	movs	r3, #32
 800385c:	e003      	b.n	8003866 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003874:	430b      	orrs	r3, r1
 8003876:	e07e      	b.n	8003976 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	2b00      	cmp	r3, #0
 8003882:	d107      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x5c8>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	3301      	adds	r3, #1
 800388c:	069b      	lsls	r3, r3, #26
 800388e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003892:	e015      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x5f4>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80038ac:	2320      	movs	r3, #32
 80038ae:	e003      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	069b      	lsls	r3, r3, #26
 80038bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x614>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	0e9b      	lsrs	r3, r3, #26
 80038d2:	3301      	adds	r3, #1
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	e017      	b.n	8003910 <HAL_ADC_ConfigChannel+0x644>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	fa93 f3a3 	rbit	r3, r3
 80038ec:	61fb      	str	r3, [r7, #28]
  return result;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038f8:	2320      	movs	r3, #32
 80038fa:	e003      	b.n	8003904 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	3301      	adds	r3, #1
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	ea42 0103 	orr.w	r1, r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10d      	bne.n	800393c <HAL_ADC_ConfigChannel+0x670>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	0e9b      	lsrs	r3, r3, #26
 8003926:	3301      	adds	r3, #1
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	3b1e      	subs	r3, #30
 8003934:	051b      	lsls	r3, r3, #20
 8003936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800393a:	e01b      	b.n	8003974 <HAL_ADC_ConfigChannel+0x6a8>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	613b      	str	r3, [r7, #16]
  return result;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003954:	2320      	movs	r3, #32
 8003956:	e003      	b.n	8003960 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f003 021f 	and.w	r2, r3, #31
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	3b1e      	subs	r3, #30
 800396e:	051b      	lsls	r3, r3, #20
 8003970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003974:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397a:	4619      	mov	r1, r3
 800397c:	f7ff f9de 	bl	8002d3c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_ADC_ConfigChannel+0x6e0>)
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80be 	beq.w	8003b0a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003996:	d004      	beq.n	80039a2 <HAL_ADC_ConfigChannel+0x6d6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <HAL_ADC_ConfigChannel+0x6e4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d10a      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x6ec>
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_ADC_ConfigChannel+0x6e8>)
 80039a4:	e009      	b.n	80039ba <HAL_ADC_ConfigChannel+0x6ee>
 80039a6:	bf00      	nop
 80039a8:	407f0000 	.word	0x407f0000
 80039ac:	80080000 	.word	0x80080000
 80039b0:	50000100 	.word	0x50000100
 80039b4:	50000300 	.word	0x50000300
 80039b8:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <HAL_ADC_ConfigChannel+0x854>)
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f8e6 	bl	8002b8c <LL_ADC_GetCommonPathInternalCh>
 80039c0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a56      	ldr	r2, [pc, #344]	; (8003b24 <HAL_ADC_ConfigChannel+0x858>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x70c>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a55      	ldr	r2, [pc, #340]	; (8003b28 <HAL_ADC_ConfigChannel+0x85c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d13a      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d134      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ec:	d005      	beq.n	80039fa <HAL_ADC_ConfigChannel+0x72e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4e      	ldr	r2, [pc, #312]	; (8003b2c <HAL_ADC_ConfigChannel+0x860>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f040 8085 	bne.w	8003b04 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a02:	d004      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x742>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a49      	ldr	r2, [pc, #292]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x746>
 8003a0e:	4a49      	ldr	r2, [pc, #292]	; (8003b34 <HAL_ADC_ConfigChannel+0x868>)
 8003a10:	e000      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x748>
 8003a12:	4a43      	ldr	r2, [pc, #268]	; (8003b20 <HAL_ADC_ConfigChannel+0x854>)
 8003a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7ff f8a1 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a24:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_ADC_ConfigChannel+0x86c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <HAL_ADC_ConfigChannel+0x870>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a3e:	e002      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f9      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a4c:	e05a      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <HAL_ADC_ConfigChannel+0x874>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d125      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d11f      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a31      	ldr	r2, [pc, #196]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d104      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x7ac>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <HAL_ADC_ConfigChannel+0x878>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d047      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a80:	d004      	beq.n	8003a8c <HAL_ADC_ConfigChannel+0x7c0>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x7c4>
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <HAL_ADC_ConfigChannel+0x868>)
 8003a8e:	e000      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x7c6>
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_ADC_ConfigChannel+0x854>)
 8003a92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f7ff f862 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa2:	e031      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <HAL_ADC_ConfigChannel+0x87c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d12d      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d127      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003acc:	d004      	beq.n	8003ad8 <HAL_ADC_ConfigChannel+0x80c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x810>
 8003ad8:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <HAL_ADC_ConfigChannel+0x868>)
 8003ada:	e000      	b.n	8003ade <HAL_ADC_ConfigChannel+0x812>
 8003adc:	4a10      	ldr	r2, [pc, #64]	; (8003b20 <HAL_ADC_ConfigChannel+0x854>)
 8003ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7ff f83c 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
 8003aee:	e00c      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b02:	e002      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b04:	bf00      	nop
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	37d8      	adds	r7, #216	; 0xd8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	50000700 	.word	0x50000700
 8003b24:	c3210000 	.word	0xc3210000
 8003b28:	90c00010 	.word	0x90c00010
 8003b2c:	50000600 	.word	0x50000600
 8003b30:	50000100 	.word	0x50000100
 8003b34:	50000300 	.word	0x50000300
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	053e2d63 	.word	0x053e2d63
 8003b40:	c7520000 	.word	0xc7520000
 8003b44:	50000500 	.word	0x50000500
 8003b48:	cb840000 	.word	0xcb840000

08003b4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f9b4 	bl	8002ec6 <LL_ADC_IsDisableOngoing>
 8003b5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff f99b 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d047      	beq.n	8003c00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d144      	bne.n	8003c00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030d 	and.w	r3, r3, #13
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10c      	bne.n	8003b9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f975 	bl	8002e78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2203      	movs	r2, #3
 8003b94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b96:	f7fe ffa5 	bl	8002ae4 <HAL_GetTick>
 8003b9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b9c:	e029      	b.n	8003bf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	f043 0210 	orr.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	f043 0201 	orr.w	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e023      	b.n	8003c02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bba:	f7fe ff93 	bl	8002ae4 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d914      	bls.n	8003bf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	f043 0210 	orr.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e007      	b.n	8003c02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1dc      	bne.n	8003bba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <LL_ADC_IsEnabled>:
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <LL_ADC_IsEnabled+0x18>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <LL_ADC_IsEnabled+0x1a>
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_ADC_StartCalibration>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003c42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	609a      	str	r2, [r3, #8]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c76:	d101      	bne.n	8003c7c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d101      	bne.n	8003ca2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADCEx_Calibration_Start+0x1c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e04d      	b.n	8003d68 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff39 	bl	8003b4c <ADC_Disable>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d136      	bne.n	8003d52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cec:	f023 0302 	bic.w	r3, r3, #2
 8003cf0:	f043 0202 	orr.w	r2, r3, #2
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ff96 	bl	8003c30 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d04:	e014      	b.n	8003d30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d90d      	bls.n	8003d30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	f023 0312 	bic.w	r3, r3, #18
 8003d1c:	f043 0210 	orr.w	r2, r3, #16
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e01b      	b.n	8003d68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff94 	bl	8003c62 <LL_ADC_IsCalibrationOnGoing>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e2      	bne.n	8003d06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	f023 0303 	bic.w	r3, r3, #3
 8003d48:	f043 0201 	orr.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d50:	e005      	b.n	8003d5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d56:	f043 0210 	orr.w	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	0004de01 	.word	0x0004de01

08003d74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b0a1      	sub	sp, #132	; 0x84
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e0e7      	b.n	8003f62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003daa:	d102      	bne.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003dac:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	e009      	b.n	8003dc6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a6e      	ldr	r2, [pc, #440]	; (8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d102      	bne.n	8003dc2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003dbc:	4b6d      	ldr	r3, [pc, #436]	; (8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	e001      	b.n	8003dc6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10b      	bne.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0be      	b.n	8003f62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff4f 	bl	8003c8a <LL_ADC_REG_IsConversionOngoing>
 8003dec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ff49 	bl	8003c8a <LL_ADC_REG_IsConversionOngoing>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f040 80a0 	bne.w	8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 809c 	bne.w	8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e10:	d004      	beq.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a55      	ldr	r2, [pc, #340]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e1c:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e1e:	e000      	b.n	8003e22 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e20:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003e22:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d04b      	beq.n	8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e3e:	035b      	lsls	r3, r3, #13
 8003e40:	430b      	orrs	r3, r1
 8003e42:	431a      	orrs	r2, r3
 8003e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e50:	d004      	beq.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a45      	ldr	r2, [pc, #276]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10f      	bne.n	8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e60:	f7ff fed3 	bl	8003c0a <LL_ADC_IsEnabled>
 8003e64:	4604      	mov	r4, r0
 8003e66:	4841      	ldr	r0, [pc, #260]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e68:	f7ff fecf 	bl	8003c0a <LL_ADC_IsEnabled>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4323      	orrs	r3, r4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	e012      	b.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e7c:	483c      	ldr	r0, [pc, #240]	; (8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e7e:	f7ff fec4 	bl	8003c0a <LL_ADC_IsEnabled>
 8003e82:	4604      	mov	r4, r0
 8003e84:	483b      	ldr	r0, [pc, #236]	; (8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e86:	f7ff fec0 	bl	8003c0a <LL_ADC_IsEnabled>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	431c      	orrs	r4, r3
 8003e8e:	483c      	ldr	r0, [pc, #240]	; (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e90:	f7ff febb 	bl	8003c0a <LL_ADC_IsEnabled>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4323      	orrs	r3, r4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d056      	beq.n	8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003eae:	f023 030f 	bic.w	r3, r3, #15
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	6811      	ldr	r1, [r2, #0]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	6892      	ldr	r2, [r2, #8]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ec2:	e047      	b.n	8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ece:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed8:	d004      	beq.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10f      	bne.n	8003f04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ee4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ee8:	f7ff fe8f 	bl	8003c0a <LL_ADC_IsEnabled>
 8003eec:	4604      	mov	r4, r0
 8003eee:	481f      	ldr	r0, [pc, #124]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ef0:	f7ff fe8b 	bl	8003c0a <LL_ADC_IsEnabled>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4323      	orrs	r3, r4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	e012      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f04:	481a      	ldr	r0, [pc, #104]	; (8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f06:	f7ff fe80 	bl	8003c0a <LL_ADC_IsEnabled>
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4819      	ldr	r0, [pc, #100]	; (8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f0e:	f7ff fe7c 	bl	8003c0a <LL_ADC_IsEnabled>
 8003f12:	4603      	mov	r3, r0
 8003f14:	431c      	orrs	r4, r3
 8003f16:	481a      	ldr	r0, [pc, #104]	; (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f18:	f7ff fe77 	bl	8003c0a <LL_ADC_IsEnabled>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4323      	orrs	r3, r4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d012      	beq.n	8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f36:	f023 030f 	bic.w	r3, r3, #15
 8003f3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f3e:	e009      	b.n	8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	f043 0220 	orr.w	r2, r3, #32
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f52:	e000      	b.n	8003f56 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3784      	adds	r7, #132	; 0x84
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	50000100 	.word	0x50000100
 8003f70:	50000400 	.word	0x50000400
 8003f74:	50000500 	.word	0x50000500
 8003f78:	50000300 	.word	0x50000300
 8003f7c:	50000700 	.word	0x50000700
 8003f80:	50000600 	.word	0x50000600

08003f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	60d3      	str	r3, [r2, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	f003 0307 	and.w	r3, r3, #7
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	db0b      	blt.n	8004012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	4907      	ldr	r1, [pc, #28]	; (8004020 <__NVIC_EnableIRQ+0x38>)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2001      	movs	r0, #1
 800400a:	fa00 f202 	lsl.w	r2, r0, r2
 800400e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000e100 	.word	0xe000e100

08004024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	2b00      	cmp	r3, #0
 8004036:	db0a      	blt.n	800404e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	490c      	ldr	r1, [pc, #48]	; (8004070 <__NVIC_SetPriority+0x4c>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	0112      	lsls	r2, r2, #4
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	440b      	add	r3, r1
 8004048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800404c:	e00a      	b.n	8004064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4908      	ldr	r1, [pc, #32]	; (8004074 <__NVIC_SetPriority+0x50>)
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	3b04      	subs	r3, #4
 800405c:	0112      	lsls	r2, r2, #4
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	440b      	add	r3, r1
 8004062:	761a      	strb	r2, [r3, #24]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f1c3 0307 	rsb	r3, r3, #7
 8004092:	2b04      	cmp	r3, #4
 8004094:	bf28      	it	cs
 8004096:	2304      	movcs	r3, #4
 8004098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3304      	adds	r3, #4
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d902      	bls.n	80040a8 <NVIC_EncodePriority+0x30>
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3b03      	subs	r3, #3
 80040a6:	e000      	b.n	80040aa <NVIC_EncodePriority+0x32>
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43da      	mvns	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	401a      	ands	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c0:	f04f 31ff 	mov.w	r1, #4294967295
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ca:	43d9      	mvns	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	4313      	orrs	r3, r2
         );
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	; 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f0:	d301      	bcc.n	80040f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040f2:	2301      	movs	r3, #1
 80040f4:	e00f      	b.n	8004116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <SysTick_Config+0x40>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040fe:	210f      	movs	r1, #15
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	f7ff ff8e 	bl	8004024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <SysTick_Config+0x40>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <SysTick_Config+0x40>)
 8004110:	2207      	movs	r2, #7
 8004112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	e000e010 	.word	0xe000e010

08004124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff29 	bl	8003f84 <__NVIC_SetPriorityGrouping>
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004148:	f7ff ff40 	bl	8003fcc <__NVIC_GetPriorityGrouping>
 800414c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	6978      	ldr	r0, [r7, #20]
 8004154:	f7ff ff90 	bl	8004078 <NVIC_EncodePriority>
 8004158:	4602      	mov	r2, r0
 800415a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff5f 	bl	8004024 <__NVIC_SetPriority>
}
 8004166:	bf00      	nop
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff33 	bl	8003fe8 <__NVIC_EnableIRQ>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ffa4 	bl	80040e0 <SysTick_Config>
 8004198:	4603      	mov	r3, r0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e08d      	b.n	80042d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_DMA_Init+0x138>)
 80041be:	429a      	cmp	r2, r3
 80041c0:	d80f      	bhi.n	80041e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <HAL_DMA_Init+0x13c>)
 80041ca:	4413      	add	r3, r2
 80041cc:	4a45      	ldr	r2, [pc, #276]	; (80042e4 <HAL_DMA_Init+0x140>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	009a      	lsls	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a42      	ldr	r2, [pc, #264]	; (80042e8 <HAL_DMA_Init+0x144>)
 80041de:	641a      	str	r2, [r3, #64]	; 0x40
 80041e0:	e00e      	b.n	8004200 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	4b40      	ldr	r3, [pc, #256]	; (80042ec <HAL_DMA_Init+0x148>)
 80041ea:	4413      	add	r3, r2
 80041ec:	4a3d      	ldr	r2, [pc, #244]	; (80042e4 <HAL_DMA_Init+0x140>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	009a      	lsls	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a3c      	ldr	r2, [pc, #240]	; (80042f0 <HAL_DMA_Init+0x14c>)
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8fe 	bl	8004454 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004260:	d102      	bne.n	8004268 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800427c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d010      	beq.n	80042a8 <HAL_DMA_Init+0x104>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d80c      	bhi.n	80042a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f91e 	bl	80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	e008      	b.n	80042ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40020407 	.word	0x40020407
 80042e0:	bffdfff8 	.word	0xbffdfff8
 80042e4:	cccccccd 	.word	0xcccccccd
 80042e8:	40020000 	.word	0x40020000
 80042ec:	bffdfbf8 	.word	0xbffdfbf8
 80042f0:	40020400 	.word	0x40020400

080042f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2204      	movs	r2, #4
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d026      	beq.n	800436e <HAL_DMA_IRQHandler+0x7a>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d021      	beq.n	800436e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0204 	bic.w	r2, r2, #4
 8004346:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	2104      	movs	r1, #4
 8004356:	fa01 f202 	lsl.w	r2, r1, r2
 800435a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b00      	cmp	r3, #0
 8004362:	d071      	beq.n	8004448 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800436c:	e06c      	b.n	8004448 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2202      	movs	r2, #2
 8004378:	409a      	lsls	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02e      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d029      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 020a 	bic.w	r2, r2, #10
 80043a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f003 021f 	and.w	r2, r3, #31
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2102      	movs	r1, #2
 80043c0:	fa01 f202 	lsl.w	r2, r1, r2
 80043c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d038      	beq.n	8004448 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043de:	e033      	b.n	8004448 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2208      	movs	r2, #8
 80043ea:	409a      	lsls	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d02a      	beq.n	800444a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d025      	beq.n	800444a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 020e 	bic.w	r2, r2, #14
 800440c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f003 021f 	and.w	r2, r3, #31
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f202 	lsl.w	r2, r1, r2
 8004420:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004448:	bf00      	nop
 800444a:	bf00      	nop
}
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	4b16      	ldr	r3, [pc, #88]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004464:	429a      	cmp	r2, r3
 8004466:	d802      	bhi.n	800446e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e001      	b.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004470:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	3b08      	subs	r3, #8
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	461a      	mov	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800449e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	2201      	movs	r2, #1
 80044a8:	409a      	lsls	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40020407 	.word	0x40020407
 80044c0:	40020800 	.word	0x40020800
 80044c4:	40020820 	.word	0x40020820
 80044c8:	cccccccd 	.word	0xcccccccd
 80044cc:	40020880 	.word	0x40020880

080044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a08      	ldr	r2, [pc, #32]	; (8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044f2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2201      	movs	r2, #1
 80044fe:	409a      	lsls	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	1000823f 	.word	0x1000823f
 8004514:	40020940 	.word	0x40020940

08004518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004526:	e15a      	b.n	80047de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2101      	movs	r1, #1
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 814c 	beq.w	80047d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d005      	beq.n	8004558 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004554:	2b02      	cmp	r3, #2
 8004556:	d130      	bne.n	80045ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2203      	movs	r2, #3
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800458e:	2201      	movs	r2, #1
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4013      	ands	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f003 0201 	and.w	r2, r3, #1
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d017      	beq.n	80045f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	2203      	movs	r2, #3
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d123      	bne.n	800464a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	08da      	lsrs	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3208      	adds	r2, #8
 800460a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	220f      	movs	r2, #15
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	08da      	lsrs	r2, r3, #3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3208      	adds	r2, #8
 8004644:	6939      	ldr	r1, [r7, #16]
 8004646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	2203      	movs	r2, #3
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0203 	and.w	r2, r3, #3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80a6 	beq.w	80047d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468c:	4b5b      	ldr	r3, [pc, #364]	; (80047fc <HAL_GPIO_Init+0x2e4>)
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	4a5a      	ldr	r2, [pc, #360]	; (80047fc <HAL_GPIO_Init+0x2e4>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6613      	str	r3, [r2, #96]	; 0x60
 8004698:	4b58      	ldr	r3, [pc, #352]	; (80047fc <HAL_GPIO_Init+0x2e4>)
 800469a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046a4:	4a56      	ldr	r2, [pc, #344]	; (8004800 <HAL_GPIO_Init+0x2e8>)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	3302      	adds	r3, #2
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	220f      	movs	r2, #15
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046ce:	d01f      	beq.n	8004710 <HAL_GPIO_Init+0x1f8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a4c      	ldr	r2, [pc, #304]	; (8004804 <HAL_GPIO_Init+0x2ec>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d019      	beq.n	800470c <HAL_GPIO_Init+0x1f4>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a4b      	ldr	r2, [pc, #300]	; (8004808 <HAL_GPIO_Init+0x2f0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <HAL_GPIO_Init+0x1f0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a4a      	ldr	r2, [pc, #296]	; (800480c <HAL_GPIO_Init+0x2f4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00d      	beq.n	8004704 <HAL_GPIO_Init+0x1ec>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a49      	ldr	r2, [pc, #292]	; (8004810 <HAL_GPIO_Init+0x2f8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <HAL_GPIO_Init+0x1e8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a48      	ldr	r2, [pc, #288]	; (8004814 <HAL_GPIO_Init+0x2fc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_GPIO_Init+0x1e4>
 80046f8:	2305      	movs	r3, #5
 80046fa:	e00a      	b.n	8004712 <HAL_GPIO_Init+0x1fa>
 80046fc:	2306      	movs	r3, #6
 80046fe:	e008      	b.n	8004712 <HAL_GPIO_Init+0x1fa>
 8004700:	2304      	movs	r3, #4
 8004702:	e006      	b.n	8004712 <HAL_GPIO_Init+0x1fa>
 8004704:	2303      	movs	r3, #3
 8004706:	e004      	b.n	8004712 <HAL_GPIO_Init+0x1fa>
 8004708:	2302      	movs	r3, #2
 800470a:	e002      	b.n	8004712 <HAL_GPIO_Init+0x1fa>
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <HAL_GPIO_Init+0x1fa>
 8004710:	2300      	movs	r3, #0
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	f002 0203 	and.w	r2, r2, #3
 8004718:	0092      	lsls	r2, r2, #2
 800471a:	4093      	lsls	r3, r2
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004722:	4937      	ldr	r1, [pc, #220]	; (8004800 <HAL_GPIO_Init+0x2e8>)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	3302      	adds	r3, #2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004730:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_GPIO_Init+0x300>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	43db      	mvns	r3, r3
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004754:	4a30      	ldr	r2, [pc, #192]	; (8004818 <HAL_GPIO_Init+0x300>)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_GPIO_Init+0x300>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	43db      	mvns	r3, r3
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800477e:	4a26      	ldr	r2, [pc, #152]	; (8004818 <HAL_GPIO_Init+0x300>)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_GPIO_Init+0x300>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	43db      	mvns	r3, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047a8:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_GPIO_Init+0x300>)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047ae:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <HAL_GPIO_Init+0x300>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4013      	ands	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047d2:	4a11      	ldr	r2, [pc, #68]	; (8004818 <HAL_GPIO_Init+0x300>)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3301      	adds	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f47f ae9d 	bne.w	8004528 <HAL_GPIO_Init+0x10>
  }
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40021000 	.word	0x40021000
 8004800:	40010000 	.word	0x40010000
 8004804:	48000400 	.word	0x48000400
 8004808:	48000800 	.word	0x48000800
 800480c:	48000c00 	.word	0x48000c00
 8004810:	48001000 	.word	0x48001000
 8004814:	48001400 	.word	0x48001400
 8004818:	40010400 	.word	0x40010400

0800481c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800482c:	787b      	ldrb	r3, [r7, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004838:	e002      	b.n	8004840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004862:	4a05      	ldr	r2, [pc, #20]	; (8004878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f806 	bl	800487c <HAL_GPIO_EXTI_Callback>
  }
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40010400 	.word	0x40010400

0800487c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e08d      	b.n	80049c0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fd f9f1 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2224      	movs	r2, #36	; 0x24
 80048c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d107      	bne.n	800490c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004908:	609a      	str	r2, [r3, #8]
 800490a:	e006      	b.n	800491a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004918:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d108      	bne.n	8004934 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	e007      	b.n	8004944 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004942:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004956:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004966:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69d9      	ldr	r1, [r3, #28]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1a      	ldr	r2, [r3, #32]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d138      	bne.n	8004a50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e032      	b.n	8004a52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2224      	movs	r2, #36	; 0x24
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0201 	bic.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6819      	ldr	r1, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b085      	sub	sp, #20
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d139      	bne.n	8004ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e033      	b.n	8004aea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2224      	movs	r2, #36	; 0x24
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ab0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e000      	b.n	8004aea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
  }
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d141      	bne.n	8004b8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b06:	4b4b      	ldr	r3, [pc, #300]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d131      	bne.n	8004b78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b14:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1a:	4a46      	ldr	r2, [pc, #280]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b24:	4b43      	ldr	r3, [pc, #268]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b2c:	4a41      	ldr	r2, [pc, #260]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b34:	4b40      	ldr	r3, [pc, #256]	; (8004c38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2232      	movs	r2, #50	; 0x32
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	4a3f      	ldr	r2, [pc, #252]	; (8004c3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	0c9b      	lsrs	r3, r3, #18
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4a:	e002      	b.n	8004b52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b52:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5e:	d102      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f2      	bne.n	8004b4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b66:	4b33      	ldr	r3, [pc, #204]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b72:	d158      	bne.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e057      	b.n	8004c28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b78:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b7e:	4a2d      	ldr	r2, [pc, #180]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b88:	e04d      	b.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b90:	d141      	bne.n	8004c16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b92:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d131      	bne.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ba0:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba6:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb0:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2232      	movs	r2, #50	; 0x32
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	0c9b      	lsrs	r3, r3, #18
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bd6:	e002      	b.n	8004bde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bea:	d102      	bne.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f2      	bne.n	8004bd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfe:	d112      	bne.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e011      	b.n	8004c28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c14:	e007      	b.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c1e:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40007000 	.word	0x40007000
 8004c38:	20000004 	.word	0x20000004
 8004c3c:	431bde83 	.word	0x431bde83

08004c40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c4e:	6093      	str	r3, [r2, #8]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40007000 	.word	0x40007000

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e2fe      	b.n	8005270 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d075      	beq.n	8004d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c7e:	4b97      	ldr	r3, [pc, #604]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c88:	4b94      	ldr	r3, [pc, #592]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d102      	bne.n	8004c9e <HAL_RCC_OscConfig+0x3e>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d002      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x44>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	4b8d      	ldr	r3, [pc, #564]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x108>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d157      	bne.n	8004d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e2d9      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x74>
 8004cc6:	4b85      	ldr	r3, [pc, #532]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a84      	ldr	r2, [pc, #528]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e01d      	b.n	8004d10 <HAL_RCC_OscConfig+0xb0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x98>
 8004cde:	4b7f      	ldr	r3, [pc, #508]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a7e      	ldr	r2, [pc, #504]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b7c      	ldr	r3, [pc, #496]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a7b      	ldr	r2, [pc, #492]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0xb0>
 8004cf8:	4b78      	ldr	r3, [pc, #480]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a77      	ldr	r2, [pc, #476]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b75      	ldr	r3, [pc, #468]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a74      	ldr	r2, [pc, #464]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd fee4 	bl	8002ae4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fd fee0 	bl	8002ae4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e29e      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d32:	4b6a      	ldr	r3, [pc, #424]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0xc0>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fed0 	bl	8002ae4 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd fecc 	bl	8002ae4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e28a      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d5a:	4b60      	ldr	r3, [pc, #384]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0xe8>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d075      	beq.n	8004e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d76:	4b59      	ldr	r3, [pc, #356]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d80:	4b56      	ldr	r3, [pc, #344]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	d102      	bne.n	8004d96 <HAL_RCC_OscConfig+0x136>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d002      	beq.n	8004d9c <HAL_RCC_OscConfig+0x13c>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d11f      	bne.n	8004ddc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d9c:	4b4f      	ldr	r3, [pc, #316]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_OscConfig+0x154>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e25d      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db4:	4b49      	ldr	r3, [pc, #292]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	061b      	lsls	r3, r3, #24
 8004dc2:	4946      	ldr	r1, [pc, #280]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dc8:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd fe3d 	bl	8002a4c <HAL_InitTick>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d043      	beq.n	8004e60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e249      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d023      	beq.n	8004e2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de4:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3c      	ldr	r2, [pc, #240]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fd fe78 	bl	8002ae4 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df8:	f7fd fe74 	bl	8002ae4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e232      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e0a:	4b34      	ldr	r3, [pc, #208]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4b31      	ldr	r3, [pc, #196]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	492d      	ldr	r1, [pc, #180]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	604b      	str	r3, [r1, #4]
 8004e2a:	e01a      	b.n	8004e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fd fe54 	bl	8002ae4 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e40:	f7fd fe50 	bl	8002ae4 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e20e      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f0      	bne.n	8004e40 <HAL_RCC_OscConfig+0x1e0>
 8004e5e:	e000      	b.n	8004e62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d041      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01c      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e76:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e86:	f7fd fe2d 	bl	8002ae4 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e8e:	f7fd fe29 	bl	8002ae4 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1e7      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ea0:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0ef      	beq.n	8004e8e <HAL_RCC_OscConfig+0x22e>
 8004eae:	e020      	b.n	8004ef2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb6:	4a09      	ldr	r2, [pc, #36]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fd fe10 	bl	8002ae4 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ec6:	e00d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec8:	f7fd fe0c 	bl	8002ae4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d906      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1ca      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee4:	4b8c      	ldr	r3, [pc, #560]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1ea      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80a6 	beq.w	800504c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f00:	2300      	movs	r3, #0
 8004f02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f04:	4b84      	ldr	r3, [pc, #528]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_OscConfig+0x2b4>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x2b6>
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	4b7f      	ldr	r3, [pc, #508]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	4a7e      	ldr	r2, [pc, #504]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6593      	str	r3, [r2, #88]	; 0x58
 8004f26:	4b7c      	ldr	r3, [pc, #496]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f36:	4b79      	ldr	r3, [pc, #484]	; (800511c <HAL_RCC_OscConfig+0x4bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d118      	bne.n	8004f74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f42:	4b76      	ldr	r3, [pc, #472]	; (800511c <HAL_RCC_OscConfig+0x4bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a75      	ldr	r2, [pc, #468]	; (800511c <HAL_RCC_OscConfig+0x4bc>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4e:	f7fd fdc9 	bl	8002ae4 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fd fdc5 	bl	8002ae4 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e183      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f68:	4b6c      	ldr	r3, [pc, #432]	; (800511c <HAL_RCC_OscConfig+0x4bc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d108      	bne.n	8004f8e <HAL_RCC_OscConfig+0x32e>
 8004f7c:	4b66      	ldr	r3, [pc, #408]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	4a65      	ldr	r2, [pc, #404]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f8c:	e024      	b.n	8004fd8 <HAL_RCC_OscConfig+0x378>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d110      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x358>
 8004f96:	4b60      	ldr	r3, [pc, #384]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9c:	4a5e      	ldr	r2, [pc, #376]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa6:	4b5c      	ldr	r3, [pc, #368]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	4a5a      	ldr	r2, [pc, #360]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fb6:	e00f      	b.n	8004fd8 <HAL_RCC_OscConfig+0x378>
 8004fb8:	4b57      	ldr	r3, [pc, #348]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	4a56      	ldr	r2, [pc, #344]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc8:	4b53      	ldr	r3, [pc, #332]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	4a52      	ldr	r2, [pc, #328]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d016      	beq.n	800500e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe0:	f7fd fd80 	bl	8002ae4 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe8:	f7fd fd7c 	bl	8002ae4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e138      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ffe:	4b46      	ldr	r3, [pc, #280]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0ed      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x388>
 800500c:	e015      	b.n	800503a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fd fd69 	bl	8002ae4 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fd fd65 	bl	8002ae4 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e121      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800502c:	4b3a      	ldr	r3, [pc, #232]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ed      	bne.n	8005016 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800503a:	7ffb      	ldrb	r3, [r7, #31]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005040:	4b35      	ldr	r3, [pc, #212]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	4a34      	ldr	r2, [pc, #208]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d03c      	beq.n	80050d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01c      	beq.n	800509a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005060:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8005062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005066:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7fd fd38 	bl	8002ae4 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005078:	f7fd fd34 	bl	8002ae4 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0f2      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 800508c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ef      	beq.n	8005078 <HAL_RCC_OscConfig+0x418>
 8005098:	e01b      	b.n	80050d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800509a:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 800509c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a0:	4a1d      	ldr	r2, [pc, #116]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050aa:	f7fd fd1b 	bl	8002ae4 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050b2:	f7fd fd17 	bl	8002ae4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e0d5      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050c4:	4b14      	ldr	r3, [pc, #80]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 80050c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1ef      	bne.n	80050b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80c9 	beq.w	800526e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	f000 8083 	beq.w	80051f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d15e      	bne.n	80051b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a08      	ldr	r2, [pc, #32]	; (8005118 <HAL_RCC_OscConfig+0x4b8>)
 80050f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fe:	f7fd fcf1 	bl	8002ae4 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005104:	e00c      	b.n	8005120 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005106:	f7fd fced 	bl	8002ae4 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d905      	bls.n	8005120 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0ab      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
 8005118:	40021000 	.word	0x40021000
 800511c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005120:	4b55      	ldr	r3, [pc, #340]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ec      	bne.n	8005106 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512c:	4b52      	ldr	r3, [pc, #328]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	4b52      	ldr	r3, [pc, #328]	; (800527c <HAL_RCC_OscConfig+0x61c>)
 8005132:	4013      	ands	r3, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6a11      	ldr	r1, [r2, #32]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513c:	3a01      	subs	r2, #1
 800513e:	0112      	lsls	r2, r2, #4
 8005140:	4311      	orrs	r1, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005146:	0212      	lsls	r2, r2, #8
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800514e:	0852      	lsrs	r2, r2, #1
 8005150:	3a01      	subs	r2, #1
 8005152:	0552      	lsls	r2, r2, #21
 8005154:	4311      	orrs	r1, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800515a:	0852      	lsrs	r2, r2, #1
 800515c:	3a01      	subs	r2, #1
 800515e:	0652      	lsls	r2, r2, #25
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005166:	06d2      	lsls	r2, r2, #27
 8005168:	430a      	orrs	r2, r1
 800516a:	4943      	ldr	r1, [pc, #268]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 800516c:	4313      	orrs	r3, r2
 800516e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005170:	4b41      	ldr	r3, [pc, #260]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a40      	ldr	r2, [pc, #256]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 8005176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800517c:	4b3e      	ldr	r3, [pc, #248]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4a3d      	ldr	r2, [pc, #244]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 8005182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005186:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd fcac 	bl	8002ae4 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005190:	f7fd fca8 	bl	8002ae4 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e066      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a2:	4b35      	ldr	r3, [pc, #212]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0x530>
 80051ae:	e05e      	b.n	800526e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b0:	4b31      	ldr	r3, [pc, #196]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a30      	ldr	r2, [pc, #192]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 80051b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051bc:	f7fd fc92 	bl	8002ae4 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fd fc8e 	bl	8002ae4 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e04c      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d6:	4b28      	ldr	r3, [pc, #160]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051e2:	4b25      	ldr	r3, [pc, #148]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	4924      	ldr	r1, [pc, #144]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 80051e8:	4b25      	ldr	r3, [pc, #148]	; (8005280 <HAL_RCC_OscConfig+0x620>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	60cb      	str	r3, [r1, #12]
 80051ee:	e03e      	b.n	800526e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e039      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051fc:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <HAL_RCC_OscConfig+0x618>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 0203 	and.w	r2, r3, #3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	429a      	cmp	r2, r3
 800520e:	d12c      	bne.n	800526a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	3b01      	subs	r3, #1
 800521c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d123      	bne.n	800526a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d11b      	bne.n	800526a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d113      	bne.n	800526a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	3b01      	subs	r3, #1
 8005250:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d109      	bne.n	800526a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	3b01      	subs	r3, #1
 8005264:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d001      	beq.n	800526e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40021000 	.word	0x40021000
 800527c:	019f800c 	.word	0x019f800c
 8005280:	feeefffc 	.word	0xfeeefffc

08005284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e11e      	b.n	80054da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800529c:	4b91      	ldr	r3, [pc, #580]	; (80054e4 <HAL_RCC_ClockConfig+0x260>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d910      	bls.n	80052cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b8e      	ldr	r3, [pc, #568]	; (80054e4 <HAL_RCC_ClockConfig+0x260>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 020f 	bic.w	r2, r3, #15
 80052b2:	498c      	ldr	r1, [pc, #560]	; (80054e4 <HAL_RCC_ClockConfig+0x260>)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b8a      	ldr	r3, [pc, #552]	; (80054e4 <HAL_RCC_ClockConfig+0x260>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e106      	b.n	80054da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d073      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d129      	bne.n	8005334 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e0:	4b81      	ldr	r3, [pc, #516]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0f4      	b.n	80054da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052f0:	f000 f99e 	bl	8005630 <RCC_GetSysClockFreqFromPLLSource>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4a7c      	ldr	r2, [pc, #496]	; (80054ec <HAL_RCC_ClockConfig+0x268>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d93f      	bls.n	800537e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052fe:	4b7a      	ldr	r3, [pc, #488]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005312:	2b00      	cmp	r3, #0
 8005314:	d033      	beq.n	800537e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800531a:	2b00      	cmp	r3, #0
 800531c:	d12f      	bne.n	800537e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005326:	4a70      	ldr	r2, [pc, #448]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 8005328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e024      	b.n	800537e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d107      	bne.n	800534c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533c:	4b6a      	ldr	r3, [pc, #424]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0c6      	b.n	80054da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800534c:	4b66      	ldr	r3, [pc, #408]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0be      	b.n	80054da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800535c:	f000 f8ce 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 8005360:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4a61      	ldr	r2, [pc, #388]	; (80054ec <HAL_RCC_ClockConfig+0x268>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d909      	bls.n	800537e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800536a:	4b5f      	ldr	r3, [pc, #380]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005372:	4a5d      	ldr	r2, [pc, #372]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800537e:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f023 0203 	bic.w	r2, r3, #3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4957      	ldr	r1, [pc, #348]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800538c:	4313      	orrs	r3, r2
 800538e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005390:	f7fd fba8 	bl	8002ae4 <HAL_GetTick>
 8005394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	e00a      	b.n	80053ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005398:	f7fd fba4 	bl	8002ae4 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e095      	b.n	80054da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ae:	4b4e      	ldr	r3, [pc, #312]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 020c 	and.w	r2, r3, #12
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	429a      	cmp	r2, r3
 80053be:	d1eb      	bne.n	8005398 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d023      	beq.n	8005414 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d8:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4a42      	ldr	r2, [pc, #264]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 80053de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053f0:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053f8:	4a3b      	ldr	r2, [pc, #236]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 80053fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4936      	ldr	r1, [pc, #216]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
 8005412:	e008      	b.n	8005426 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d105      	bne.n	8005426 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800541a:	4b33      	ldr	r3, [pc, #204]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	4a32      	ldr	r2, [pc, #200]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 8005420:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005424:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005426:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <HAL_RCC_ClockConfig+0x260>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d21d      	bcs.n	8005470 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005434:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <HAL_RCC_ClockConfig+0x260>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f023 020f 	bic.w	r2, r3, #15
 800543c:	4929      	ldr	r1, [pc, #164]	; (80054e4 <HAL_RCC_ClockConfig+0x260>)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005444:	f7fd fb4e 	bl	8002ae4 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fd fb4a 	bl	8002ae4 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e03b      	b.n	80054da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	4b20      	ldr	r3, [pc, #128]	; (80054e4 <HAL_RCC_ClockConfig+0x260>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d1ed      	bne.n	800544c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800547c:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4917      	ldr	r1, [pc, #92]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800548a:	4313      	orrs	r3, r2
 800548c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800549a:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	490f      	ldr	r1, [pc, #60]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ae:	f000 f825 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 80054b2:	4602      	mov	r2, r0
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <HAL_RCC_ClockConfig+0x264>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	490c      	ldr	r1, [pc, #48]	; (80054f0 <HAL_RCC_ClockConfig+0x26c>)
 80054c0:	5ccb      	ldrb	r3, [r1, r3]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ca:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <HAL_RCC_ClockConfig+0x270>)
 80054cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fd faba 	bl	8002a4c <HAL_InitTick>
 80054d8:	4603      	mov	r3, r0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40022000 	.word	0x40022000
 80054e8:	40021000 	.word	0x40021000
 80054ec:	04c4b400 	.word	0x04c4b400
 80054f0:	08008838 	.word	0x08008838
 80054f4:	20000004 	.word	0x20000004
 80054f8:	20000008 	.word	0x20000008

080054fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b04      	cmp	r3, #4
 800550c:	d102      	bne.n	8005514 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800550e:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	e047      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005514:	4b27      	ldr	r3, [pc, #156]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 030c 	and.w	r3, r3, #12
 800551c:	2b08      	cmp	r3, #8
 800551e:	d102      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005520:	4b26      	ldr	r3, [pc, #152]	; (80055bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	e03e      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005526:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	2b0c      	cmp	r3, #12
 8005530:	d136      	bne.n	80055a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800553c:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	3301      	adds	r3, #1
 8005548:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d10c      	bne.n	800556a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005550:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800555a:	68d2      	ldr	r2, [r2, #12]
 800555c:	0a12      	lsrs	r2, r2, #8
 800555e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	617b      	str	r3, [r7, #20]
      break;
 8005568:	e00c      	b.n	8005584 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800556a:	4a13      	ldr	r2, [pc, #76]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	4a10      	ldr	r2, [pc, #64]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005574:	68d2      	ldr	r2, [r2, #12]
 8005576:	0a12      	lsrs	r2, r2, #8
 8005578:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]
      break;
 8005582:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	0e5b      	lsrs	r3, r3, #25
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	3301      	adds	r3, #1
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	e001      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055a4:	693b      	ldr	r3, [r7, #16]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40021000 	.word	0x40021000
 80055b8:	00f42400 	.word	0x00f42400
 80055bc:	016e3600 	.word	0x016e3600

080055c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000004 	.word	0x20000004

080055d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055dc:	f7ff fff0 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4904      	ldr	r1, [pc, #16]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055ee:	5ccb      	ldrb	r3, [r1, r3]
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000
 8005600:	08008848 	.word	0x08008848

08005604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005608:	f7ff ffda 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	0adb      	lsrs	r3, r3, #11
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	4904      	ldr	r1, [pc, #16]	; (800562c <HAL_RCC_GetPCLK2Freq+0x28>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	08008848 	.word	0x08008848

08005630 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005636:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005640:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	3301      	adds	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b03      	cmp	r3, #3
 8005652:	d10c      	bne.n	800566e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800565e:	68d2      	ldr	r2, [r2, #12]
 8005660:	0a12      	lsrs	r2, r2, #8
 8005662:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005666:	fb02 f303 	mul.w	r3, r2, r3
 800566a:	617b      	str	r3, [r7, #20]
    break;
 800566c:	e00c      	b.n	8005688 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800566e:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005678:	68d2      	ldr	r2, [r2, #12]
 800567a:	0a12      	lsrs	r2, r2, #8
 800567c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005680:	fb02 f303 	mul.w	r3, r2, r3
 8005684:	617b      	str	r3, [r7, #20]
    break;
 8005686:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	0e5b      	lsrs	r3, r3, #25
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	3301      	adds	r3, #1
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056a2:	687b      	ldr	r3, [r7, #4]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40021000 	.word	0x40021000
 80056b4:	016e3600 	.word	0x016e3600
 80056b8:	00f42400 	.word	0x00f42400

080056bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056c4:	2300      	movs	r3, #0
 80056c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056c8:	2300      	movs	r3, #0
 80056ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8098 	beq.w	800580a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056de:	4b43      	ldr	r3, [pc, #268]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ea:	4b40      	ldr	r3, [pc, #256]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ee:	4a3f      	ldr	r2, [pc, #252]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f4:	6593      	str	r3, [r2, #88]	; 0x58
 80056f6:	4b3d      	ldr	r3, [pc, #244]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005702:	2301      	movs	r3, #1
 8005704:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005706:	4b3a      	ldr	r3, [pc, #232]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a39      	ldr	r2, [pc, #228]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005710:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005712:	f7fd f9e7 	bl	8002ae4 <HAL_GetTick>
 8005716:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005718:	e009      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800571a:	f7fd f9e3 	bl	8002ae4 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d902      	bls.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	74fb      	strb	r3, [r7, #19]
        break;
 800572c:	e005      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800572e:	4b30      	ldr	r3, [pc, #192]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0ef      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800573a:	7cfb      	ldrb	r3, [r7, #19]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d159      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005740:	4b2a      	ldr	r3, [pc, #168]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d01e      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	429a      	cmp	r2, r3
 800575a:	d019      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800575c:	4b23      	ldr	r3, [pc, #140]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005766:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	4a1f      	ldr	r2, [pc, #124]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005778:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005788:	4a18      	ldr	r2, [pc, #96]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d016      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fd f9a3 	bl	8002ae4 <HAL_GetTick>
 800579e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a0:	e00b      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7fd f99f 	bl	8002ae4 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d902      	bls.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	74fb      	strb	r3, [r7, #19]
            break;
 80057b8:	e006      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ec      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10b      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057dc:	4903      	ldr	r1, [pc, #12]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057e4:	e008      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
 80057e8:	74bb      	strb	r3, [r7, #18]
 80057ea:	e005      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f8:	7c7b      	ldrb	r3, [r7, #17]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d105      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fe:	4ba7      	ldr	r3, [pc, #668]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	4aa6      	ldr	r2, [pc, #664]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005808:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005816:	4ba1      	ldr	r3, [pc, #644]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f023 0203 	bic.w	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	499d      	ldr	r1, [pc, #628]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005838:	4b98      	ldr	r3, [pc, #608]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f023 020c 	bic.w	r2, r3, #12
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	4995      	ldr	r1, [pc, #596]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800585a:	4b90      	ldr	r3, [pc, #576]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	498c      	ldr	r1, [pc, #560]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800587c:	4b87      	ldr	r3, [pc, #540]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	4984      	ldr	r1, [pc, #528]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800589e:	4b7f      	ldr	r3, [pc, #508]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	497b      	ldr	r1, [pc, #492]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058c0:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	4973      	ldr	r1, [pc, #460]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058e2:	4b6e      	ldr	r3, [pc, #440]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	496a      	ldr	r1, [pc, #424]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005904:	4b65      	ldr	r3, [pc, #404]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	4962      	ldr	r1, [pc, #392]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005926:	4b5d      	ldr	r3, [pc, #372]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	4959      	ldr	r1, [pc, #356]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005948:	4b54      	ldr	r3, [pc, #336]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800594e:	f023 0203 	bic.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	4951      	ldr	r1, [pc, #324]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800596a:	4b4c      	ldr	r3, [pc, #304]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4948      	ldr	r1, [pc, #288]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	2b00      	cmp	r3, #0
 800598a:	d015      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800598c:	4b43      	ldr	r3, [pc, #268]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	4940      	ldr	r1, [pc, #256]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059aa:	d105      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ac:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4a3a      	ldr	r2, [pc, #232]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d015      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059c4:	4b35      	ldr	r3, [pc, #212]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	4932      	ldr	r1, [pc, #200]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e2:	d105      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e4:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059fc:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	4924      	ldr	r1, [pc, #144]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d015      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	4916      	ldr	r1, [pc, #88]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a52:	d105      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a10      	ldr	r2, [pc, #64]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d019      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	4908      	ldr	r1, [pc, #32]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8a:	d109      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a02      	ldr	r2, [pc, #8]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a96:	60d3      	str	r3, [r2, #12]
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d015      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005aac:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	4926      	ldr	r1, [pc, #152]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005acc:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d015      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	4918      	ldr	r1, [pc, #96]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b02:	d105      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a12      	ldr	r2, [pc, #72]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d015      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2a:	490a      	ldr	r1, [pc, #40]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4a04      	ldr	r2, [pc, #16]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b48:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40021000 	.word	0x40021000

08005b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e049      	b.n	8005bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fc fce2 	bl	8002548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f001 f86e 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d001      	beq.n	8005c20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e04c      	b.n	8005cba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <HAL_TIM_Base_Start+0xc0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d022      	beq.n	8005c78 <HAL_TIM_Base_Start+0x70>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3a:	d01d      	beq.n	8005c78 <HAL_TIM_Base_Start+0x70>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a22      	ldr	r2, [pc, #136]	; (8005ccc <HAL_TIM_Base_Start+0xc4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <HAL_TIM_Base_Start+0x70>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a21      	ldr	r2, [pc, #132]	; (8005cd0 <HAL_TIM_Base_Start+0xc8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <HAL_TIM_Base_Start+0x70>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <HAL_TIM_Base_Start+0xcc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <HAL_TIM_Base_Start+0x70>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <HAL_TIM_Base_Start+0xd0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_TIM_Base_Start+0x70>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <HAL_TIM_Base_Start+0xd4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_TIM_Base_Start+0x70>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <HAL_TIM_Base_Start+0xd8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d115      	bne.n	8005ca4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <HAL_TIM_Base_Start+0xdc>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d015      	beq.n	8005cb6 <HAL_TIM_Base_Start+0xae>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c90:	d011      	beq.n	8005cb6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca2:	e008      	b.n	8005cb6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e000      	b.n	8005cb8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40000c00 	.word	0x40000c00
 8005cd8:	40013400 	.word	0x40013400
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40015000 	.word	0x40015000
 8005ce4:	00010007 	.word	0x00010007

08005ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d001      	beq.n	8005d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e054      	b.n	8005daa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d022      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x80>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2a:	d01d      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x80>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a22      	ldr	r2, [pc, #136]	; (8005dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d018      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x80>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d013      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x80>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00e      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x80>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1e      	ldr	r2, [pc, #120]	; (8005dc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d009      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x80>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <HAL_TIM_Base_Start_IT+0xe4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x80>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d115      	bne.n	8005d94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xec>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b06      	cmp	r3, #6
 8005d78:	d015      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0xbe>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d011      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	e008      	b.n	8005da6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e000      	b.n	8005da8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800
 8005dc4:	40000c00 	.word	0x40000c00
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40015000 	.word	0x40015000
 8005dd4:	00010007 	.word	0x00010007

08005dd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e049      	b.n	8005e7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc fc66 	bl	80026d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f000 ff2e 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <HAL_TIM_PWM_Start+0x24>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e03c      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d109      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0x3e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	bf14      	ite	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e02f      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d109      	bne.n	8005ee0 <HAL_TIM_PWM_Start+0x58>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	bf14      	ite	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	2300      	moveq	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	e022      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d109      	bne.n	8005efa <HAL_TIM_PWM_Start+0x72>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	bf14      	ite	ne
 8005ef2:	2301      	movne	r3, #1
 8005ef4:	2300      	moveq	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	e015      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d109      	bne.n	8005f14 <HAL_TIM_PWM_Start+0x8c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	bf14      	ite	ne
 8005f0c:	2301      	movne	r3, #1
 8005f0e:	2300      	moveq	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e008      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e0a6      	b.n	800607c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Start+0xb6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f3c:	e023      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_PWM_Start+0xc6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4c:	e01b      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_PWM_Start+0xd6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	e013      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b0c      	cmp	r3, #12
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_PWM_Start+0xe6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f6c:	e00b      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_PWM_Start+0xf6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f7c:	e003      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fc16 	bl	80077c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a3a      	ldr	r2, [pc, #232]	; (8006084 <HAL_TIM_PWM_Start+0x1fc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a39      	ldr	r2, [pc, #228]	; (8006088 <HAL_TIM_PWM_Start+0x200>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a37      	ldr	r2, [pc, #220]	; (800608c <HAL_TIM_PWM_Start+0x204>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a36      	ldr	r2, [pc, #216]	; (8006090 <HAL_TIM_PWM_Start+0x208>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a34      	ldr	r2, [pc, #208]	; (8006094 <HAL_TIM_PWM_Start+0x20c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a33      	ldr	r2, [pc, #204]	; (8006098 <HAL_TIM_PWM_Start+0x210>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIM_PWM_Start+0x14c>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x14e>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a25      	ldr	r2, [pc, #148]	; (8006084 <HAL_TIM_PWM_Start+0x1fc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d022      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d01d      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a26      	ldr	r2, [pc, #152]	; (800609c <HAL_TIM_PWM_Start+0x214>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d018      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_TIM_PWM_Start+0x218>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a23      	ldr	r2, [pc, #140]	; (80060a4 <HAL_TIM_PWM_Start+0x21c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_TIM_PWM_Start+0x200>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_TIM_PWM_Start+0x204>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a18      	ldr	r2, [pc, #96]	; (8006098 <HAL_TIM_PWM_Start+0x210>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d115      	bne.n	8006066 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <HAL_TIM_PWM_Start+0x220>)
 8006042:	4013      	ands	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b06      	cmp	r3, #6
 800604a:	d015      	beq.n	8006078 <HAL_TIM_PWM_Start+0x1f0>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006052:	d011      	beq.n	8006078 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	e008      	b.n	8006078 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e000      	b.n	800607a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40014800 	.word	0x40014800
 8006098:	40015000 	.word	0x40015000
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	00010007 	.word	0x00010007

080060ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e049      	b.n	8006152 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f841 	bl	800615a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f000 fdc4 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_TIM_IC_Start_IT+0x1e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800618a:	b2db      	uxtb	r3, r3
 800618c:	e023      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x66>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d104      	bne.n	800619e <HAL_TIM_IC_Start_IT+0x2e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e01b      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x66>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_IC_Start_IT+0x3e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e013      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x66>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b0c      	cmp	r3, #12
 80061b2:	d104      	bne.n	80061be <HAL_TIM_IC_Start_IT+0x4e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	e00b      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x66>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_IC_Start_IT+0x5e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	e003      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x66>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <HAL_TIM_IC_Start_IT+0x78>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	e013      	b.n	8006210 <HAL_TIM_IC_Start_IT+0xa0>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d104      	bne.n	80061f8 <HAL_TIM_IC_Start_IT+0x88>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e00b      	b.n	8006210 <HAL_TIM_IC_Start_IT+0xa0>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d104      	bne.n	8006208 <HAL_TIM_IC_Start_IT+0x98>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006204:	b2db      	uxtb	r3, r3
 8006206:	e003      	b.n	8006210 <HAL_TIM_IC_Start_IT+0xa0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800620e:	b2db      	uxtb	r3, r3
 8006210:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d102      	bne.n	800621e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006218:	7b7b      	ldrb	r3, [r7, #13]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d001      	beq.n	8006222 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e0e2      	b.n	80063e8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <HAL_TIM_IC_Start_IT+0xc2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006230:	e023      	b.n	800627a <HAL_TIM_IC_Start_IT+0x10a>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b04      	cmp	r3, #4
 8006236:	d104      	bne.n	8006242 <HAL_TIM_IC_Start_IT+0xd2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006240:	e01b      	b.n	800627a <HAL_TIM_IC_Start_IT+0x10a>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d104      	bne.n	8006252 <HAL_TIM_IC_Start_IT+0xe2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006250:	e013      	b.n	800627a <HAL_TIM_IC_Start_IT+0x10a>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b0c      	cmp	r3, #12
 8006256:	d104      	bne.n	8006262 <HAL_TIM_IC_Start_IT+0xf2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006260:	e00b      	b.n	800627a <HAL_TIM_IC_Start_IT+0x10a>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b10      	cmp	r3, #16
 8006266:	d104      	bne.n	8006272 <HAL_TIM_IC_Start_IT+0x102>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006270:	e003      	b.n	800627a <HAL_TIM_IC_Start_IT+0x10a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <HAL_TIM_IC_Start_IT+0x11a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006288:	e013      	b.n	80062b2 <HAL_TIM_IC_Start_IT+0x142>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b04      	cmp	r3, #4
 800628e:	d104      	bne.n	800629a <HAL_TIM_IC_Start_IT+0x12a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006298:	e00b      	b.n	80062b2 <HAL_TIM_IC_Start_IT+0x142>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d104      	bne.n	80062aa <HAL_TIM_IC_Start_IT+0x13a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062a8:	e003      	b.n	80062b2 <HAL_TIM_IC_Start_IT+0x142>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d841      	bhi.n	800633c <HAL_TIM_IC_Start_IT+0x1cc>
 80062b8:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_TIM_IC_Start_IT+0x150>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	0800633d 	.word	0x0800633d
 80062c8:	0800633d 	.word	0x0800633d
 80062cc:	0800633d 	.word	0x0800633d
 80062d0:	08006307 	.word	0x08006307
 80062d4:	0800633d 	.word	0x0800633d
 80062d8:	0800633d 	.word	0x0800633d
 80062dc:	0800633d 	.word	0x0800633d
 80062e0:	08006319 	.word	0x08006319
 80062e4:	0800633d 	.word	0x0800633d
 80062e8:	0800633d 	.word	0x0800633d
 80062ec:	0800633d 	.word	0x0800633d
 80062f0:	0800632b 	.word	0x0800632b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0202 	orr.w	r2, r2, #2
 8006302:	60da      	str	r2, [r3, #12]
      break;
 8006304:	e01d      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0204 	orr.w	r2, r2, #4
 8006314:	60da      	str	r2, [r3, #12]
      break;
 8006316:	e014      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0208 	orr.w	r2, r2, #8
 8006326:	60da      	str	r2, [r3, #12]
      break;
 8006328:	e00b      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0210 	orr.w	r2, r2, #16
 8006338:	60da      	str	r2, [r3, #12]
      break;
 800633a:	e002      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
      break;
 8006340:	bf00      	nop
  }

  if (status == HAL_OK)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d14e      	bne.n	80063e6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	f001 fa35 	bl	80077c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <HAL_TIM_IC_Start_IT+0x280>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d022      	beq.n	80063a6 <HAL_TIM_IC_Start_IT+0x236>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d01d      	beq.n	80063a6 <HAL_TIM_IC_Start_IT+0x236>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_TIM_IC_Start_IT+0x284>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d018      	beq.n	80063a6 <HAL_TIM_IC_Start_IT+0x236>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <HAL_TIM_IC_Start_IT+0x288>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d013      	beq.n	80063a6 <HAL_TIM_IC_Start_IT+0x236>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_TIM_IC_Start_IT+0x28c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_TIM_IC_Start_IT+0x236>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_TIM_IC_Start_IT+0x290>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_TIM_IC_Start_IT+0x236>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <HAL_TIM_IC_Start_IT+0x294>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_TIM_IC_Start_IT+0x236>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a19      	ldr	r2, [pc, #100]	; (8006408 <HAL_TIM_IC_Start_IT+0x298>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d115      	bne.n	80063d2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	4b17      	ldr	r3, [pc, #92]	; (800640c <HAL_TIM_IC_Start_IT+0x29c>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b06      	cmp	r3, #6
 80063b6:	d015      	beq.n	80063e4 <HAL_TIM_IC_Start_IT+0x274>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d011      	beq.n	80063e4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d0:	e008      	b.n	80063e4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	e000      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40012c00 	.word	0x40012c00
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40000c00 	.word	0x40000c00
 8006400:	40013400 	.word	0x40013400
 8006404:	40014000 	.word	0x40014000
 8006408:	40015000 	.word	0x40015000
 800640c:	00010007 	.word	0x00010007

08006410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d020      	beq.n	8006474 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01b      	beq.n	8006474 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0202 	mvn.w	r2, #2
 8006444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fb fd47 	bl	8001eee <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fbea 	bl	8006c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fbf1 	bl	8006c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d020      	beq.n	80064c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01b      	beq.n	80064c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0204 	mvn.w	r2, #4
 8006490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fb fd21 	bl	8001eee <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fbc4 	bl	8006c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fbcb 	bl	8006c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d020      	beq.n	800650c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01b      	beq.n	800650c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0208 	mvn.w	r2, #8
 80064dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2204      	movs	r2, #4
 80064e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fb fcfb 	bl	8001eee <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fb9e 	bl	8006c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fba5 	bl	8006c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b00      	cmp	r3, #0
 8006514:	d020      	beq.n	8006558 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0210 	mvn.w	r2, #16
 8006528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2208      	movs	r2, #8
 800652e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fb fcd5 	bl	8001eee <HAL_TIM_IC_CaptureCallback>
 8006544:	e005      	b.n	8006552 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fb78 	bl	8006c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fb7f 	bl	8006c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00c      	beq.n	800657c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0201 	mvn.w	r2, #1
 8006574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fb fcc4 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00c      	beq.n	80065aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80065a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fa65 	bl	8007a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fa5d 	bl	8007a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fb39 	bl	8006c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00c      	beq.n	8006616 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f06f 0220 	mvn.w	r2, #32
 800660e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fa25 	bl	8007a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00c      	beq.n	800663a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fa31 	bl	8007a9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00c      	beq.n	800665e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fa29 	bl	8007ab0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00c      	beq.n	8006682 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800667a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fa21 	bl	8007ac4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00c      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800669e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 fa19 	bl	8007ad8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066a6:	bf00      	nop
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e088      	b.n	80067de <HAL_TIM_IC_ConfigChannel+0x130>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d11b      	bne.n	8006712 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80066ea:	f000 fea3 	bl	8007434 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 020c 	bic.w	r2, r2, #12
 80066fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6999      	ldr	r1, [r3, #24]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	619a      	str	r2, [r3, #24]
 8006710:	e060      	b.n	80067d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b04      	cmp	r3, #4
 8006716:	d11c      	bne.n	8006752 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006728:	f000 ff27 	bl	800757a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800673a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6999      	ldr	r1, [r3, #24]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	619a      	str	r2, [r3, #24]
 8006750:	e040      	b.n	80067d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b08      	cmp	r3, #8
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006768:	f000 ff74 	bl	8007654 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 020c 	bic.w	r2, r2, #12
 800677a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69d9      	ldr	r1, [r3, #28]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	61da      	str	r2, [r3, #28]
 800678e:	e021      	b.n	80067d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b0c      	cmp	r3, #12
 8006794:	d11c      	bne.n	80067d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80067a6:	f000 ff91 	bl	80076cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69da      	ldr	r2, [r3, #28]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69d9      	ldr	r1, [r3, #28]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	021a      	lsls	r2, r3, #8
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	61da      	str	r2, [r3, #28]
 80067ce:	e001      	b.n	80067d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006802:	2302      	movs	r3, #2
 8006804:	e0ff      	b.n	8006a06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b14      	cmp	r3, #20
 8006812:	f200 80f0 	bhi.w	80069f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	08006871 	.word	0x08006871
 8006820:	080069f7 	.word	0x080069f7
 8006824:	080069f7 	.word	0x080069f7
 8006828:	080069f7 	.word	0x080069f7
 800682c:	080068b1 	.word	0x080068b1
 8006830:	080069f7 	.word	0x080069f7
 8006834:	080069f7 	.word	0x080069f7
 8006838:	080069f7 	.word	0x080069f7
 800683c:	080068f3 	.word	0x080068f3
 8006840:	080069f7 	.word	0x080069f7
 8006844:	080069f7 	.word	0x080069f7
 8006848:	080069f7 	.word	0x080069f7
 800684c:	08006933 	.word	0x08006933
 8006850:	080069f7 	.word	0x080069f7
 8006854:	080069f7 	.word	0x080069f7
 8006858:	080069f7 	.word	0x080069f7
 800685c:	08006975 	.word	0x08006975
 8006860:	080069f7 	.word	0x080069f7
 8006864:	080069f7 	.word	0x080069f7
 8006868:	080069f7 	.word	0x080069f7
 800686c:	080069b5 	.word	0x080069b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fab2 	bl	8006de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0208 	orr.w	r2, r2, #8
 800688a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0204 	bic.w	r2, r2, #4
 800689a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6999      	ldr	r1, [r3, #24]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	619a      	str	r2, [r3, #24]
      break;
 80068ae:	e0a5      	b.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fb2c 	bl	8006f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6999      	ldr	r1, [r3, #24]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	021a      	lsls	r2, r3, #8
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	619a      	str	r2, [r3, #24]
      break;
 80068f0:	e084      	b.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fb9f 	bl	800703c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69da      	ldr	r2, [r3, #28]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0208 	orr.w	r2, r2, #8
 800690c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69da      	ldr	r2, [r3, #28]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0204 	bic.w	r2, r2, #4
 800691c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69d9      	ldr	r1, [r3, #28]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	61da      	str	r2, [r3, #28]
      break;
 8006930:	e064      	b.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68b9      	ldr	r1, [r7, #8]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fc11 	bl	8007160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800694c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69d9      	ldr	r1, [r3, #28]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	021a      	lsls	r2, r3, #8
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	61da      	str	r2, [r3, #28]
      break;
 8006972:	e043      	b.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fc84 	bl	8007288 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0208 	orr.w	r2, r2, #8
 800698e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0204 	bic.w	r2, r2, #4
 800699e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80069b2:	e023      	b.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fcce 	bl	800735c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	021a      	lsls	r2, r3, #8
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80069f4:	e002      	b.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	75fb      	strb	r3, [r7, #23]
      break;
 80069fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop

08006a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_TIM_ConfigClockSource+0x1c>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e0f6      	b.n	8006c1a <HAL_TIM_ConfigClockSource+0x20a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006a4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a6f      	ldr	r2, [pc, #444]	; (8006c24 <HAL_TIM_ConfigClockSource+0x214>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	f000 80c1 	beq.w	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006a6c:	4a6d      	ldr	r2, [pc, #436]	; (8006c24 <HAL_TIM_ConfigClockSource+0x214>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	f200 80c6 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a74:	4a6c      	ldr	r2, [pc, #432]	; (8006c28 <HAL_TIM_ConfigClockSource+0x218>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	f000 80b9 	beq.w	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006a7c:	4a6a      	ldr	r2, [pc, #424]	; (8006c28 <HAL_TIM_ConfigClockSource+0x218>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	f200 80be 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a84:	4a69      	ldr	r2, [pc, #420]	; (8006c2c <HAL_TIM_ConfigClockSource+0x21c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	f000 80b1 	beq.w	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006a8c:	4a67      	ldr	r2, [pc, #412]	; (8006c2c <HAL_TIM_ConfigClockSource+0x21c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	f200 80b6 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a94:	4a66      	ldr	r2, [pc, #408]	; (8006c30 <HAL_TIM_ConfigClockSource+0x220>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	f000 80a9 	beq.w	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006a9c:	4a64      	ldr	r2, [pc, #400]	; (8006c30 <HAL_TIM_ConfigClockSource+0x220>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f200 80ae 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006aa4:	4a63      	ldr	r2, [pc, #396]	; (8006c34 <HAL_TIM_ConfigClockSource+0x224>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	f000 80a1 	beq.w	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006aac:	4a61      	ldr	r2, [pc, #388]	; (8006c34 <HAL_TIM_ConfigClockSource+0x224>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	f200 80a6 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ab4:	4a60      	ldr	r2, [pc, #384]	; (8006c38 <HAL_TIM_ConfigClockSource+0x228>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f000 8099 	beq.w	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006abc:	4a5e      	ldr	r2, [pc, #376]	; (8006c38 <HAL_TIM_ConfigClockSource+0x228>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	f200 809e 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ac4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ac8:	f000 8091 	beq.w	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006acc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ad0:	f200 8096 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad8:	f000 8089 	beq.w	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae0:	f200 808e 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae8:	d03e      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0x158>
 8006aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aee:	f200 8087 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af6:	f000 8086 	beq.w	8006c06 <HAL_TIM_ConfigClockSource+0x1f6>
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	d87f      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b00:	2b70      	cmp	r3, #112	; 0x70
 8006b02:	d01a      	beq.n	8006b3a <HAL_TIM_ConfigClockSource+0x12a>
 8006b04:	2b70      	cmp	r3, #112	; 0x70
 8006b06:	d87b      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b08:	2b60      	cmp	r3, #96	; 0x60
 8006b0a:	d050      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x19e>
 8006b0c:	2b60      	cmp	r3, #96	; 0x60
 8006b0e:	d877      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b10:	2b50      	cmp	r3, #80	; 0x50
 8006b12:	d03c      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x17e>
 8006b14:	2b50      	cmp	r3, #80	; 0x50
 8006b16:	d873      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d058      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0x1be>
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d86f      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b20:	2b30      	cmp	r3, #48	; 0x30
 8006b22:	d064      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006b24:	2b30      	cmp	r3, #48	; 0x30
 8006b26:	d86b      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d060      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d867      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d05c      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006b34:	2b10      	cmp	r3, #16
 8006b36:	d05a      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x1de>
 8006b38:	e062      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b4a:	f000 fe19 	bl	8007780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	609a      	str	r2, [r3, #8]
      break;
 8006b66:	e04f      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b78:	f000 fe02 	bl	8007780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b8a:	609a      	str	r2, [r3, #8]
      break;
 8006b8c:	e03c      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f000 fcbe 	bl	800751c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2150      	movs	r1, #80	; 0x50
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fdcd 	bl	8007746 <TIM_ITRx_SetConfig>
      break;
 8006bac:	e02c      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f000 fd1a 	bl	80075f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2160      	movs	r1, #96	; 0x60
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fdbd 	bl	8007746 <TIM_ITRx_SetConfig>
      break;
 8006bcc:	e01c      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f000 fc9e 	bl	800751c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2140      	movs	r1, #64	; 0x40
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fdad 	bl	8007746 <TIM_ITRx_SetConfig>
      break;
 8006bec:	e00c      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f000 fda4 	bl	8007746 <TIM_ITRx_SetConfig>
      break;
 8006bfe:	e003      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
      break;
 8006c04:	e000      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	00100070 	.word	0x00100070
 8006c28:	00100060 	.word	0x00100060
 8006c2c:	00100050 	.word	0x00100050
 8006c30:	00100040 	.word	0x00100040
 8006c34:	00100030 	.word	0x00100030
 8006c38:	00100020 	.word	0x00100020

08006c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a4c      	ldr	r2, [pc, #304]	; (8006dbc <TIM_Base_SetConfig+0x144>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d017      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d013      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a49      	ldr	r2, [pc, #292]	; (8006dc0 <TIM_Base_SetConfig+0x148>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00f      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a48      	ldr	r2, [pc, #288]	; (8006dc4 <TIM_Base_SetConfig+0x14c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a47      	ldr	r2, [pc, #284]	; (8006dc8 <TIM_Base_SetConfig+0x150>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d007      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a46      	ldr	r2, [pc, #280]	; (8006dcc <TIM_Base_SetConfig+0x154>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_Base_SetConfig+0x48>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a45      	ldr	r2, [pc, #276]	; (8006dd0 <TIM_Base_SetConfig+0x158>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d108      	bne.n	8006cd2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a39      	ldr	r2, [pc, #228]	; (8006dbc <TIM_Base_SetConfig+0x144>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d023      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce0:	d01f      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a36      	ldr	r2, [pc, #216]	; (8006dc0 <TIM_Base_SetConfig+0x148>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01b      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a35      	ldr	r2, [pc, #212]	; (8006dc4 <TIM_Base_SetConfig+0x14c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d017      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a34      	ldr	r2, [pc, #208]	; (8006dc8 <TIM_Base_SetConfig+0x150>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a33      	ldr	r2, [pc, #204]	; (8006dcc <TIM_Base_SetConfig+0x154>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00f      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a33      	ldr	r2, [pc, #204]	; (8006dd4 <TIM_Base_SetConfig+0x15c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a32      	ldr	r2, [pc, #200]	; (8006dd8 <TIM_Base_SetConfig+0x160>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a31      	ldr	r2, [pc, #196]	; (8006ddc <TIM_Base_SetConfig+0x164>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_Base_SetConfig+0xaa>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <TIM_Base_SetConfig+0x158>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <TIM_Base_SetConfig+0x144>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d013      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <TIM_Base_SetConfig+0x154>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1a      	ldr	r2, [pc, #104]	; (8006dd4 <TIM_Base_SetConfig+0x15c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <TIM_Base_SetConfig+0x160>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <TIM_Base_SetConfig+0x164>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0x110>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <TIM_Base_SetConfig+0x158>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d103      	bne.n	8006d90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d105      	bne.n	8006dae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f023 0201 	bic.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	611a      	str	r2, [r3, #16]
  }
}
 8006dae:	bf00      	nop
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40000c00 	.word	0x40000c00
 8006dcc:	40013400 	.word	0x40013400
 8006dd0:	40015000 	.word	0x40015000
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800

08006de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f023 0201 	bic.w	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0303 	bic.w	r3, r3, #3
 8006e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f023 0302 	bic.w	r3, r3, #2
 8006e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a30      	ldr	r2, [pc, #192]	; (8006efc <TIM_OC1_SetConfig+0x11c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <TIM_OC1_SetConfig+0x88>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a2f      	ldr	r2, [pc, #188]	; (8006f00 <TIM_OC1_SetConfig+0x120>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00f      	beq.n	8006e68 <TIM_OC1_SetConfig+0x88>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a2e      	ldr	r2, [pc, #184]	; (8006f04 <TIM_OC1_SetConfig+0x124>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <TIM_OC1_SetConfig+0x88>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a2d      	ldr	r2, [pc, #180]	; (8006f08 <TIM_OC1_SetConfig+0x128>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_OC1_SetConfig+0x88>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <TIM_OC1_SetConfig+0x12c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_OC1_SetConfig+0x88>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a2b      	ldr	r2, [pc, #172]	; (8006f10 <TIM_OC1_SetConfig+0x130>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10c      	bne.n	8006e82 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0308 	bic.w	r3, r3, #8
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 0304 	bic.w	r3, r3, #4
 8006e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <TIM_OC1_SetConfig+0x11c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <TIM_OC1_SetConfig+0xd2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a1c      	ldr	r2, [pc, #112]	; (8006f00 <TIM_OC1_SetConfig+0x120>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00f      	beq.n	8006eb2 <TIM_OC1_SetConfig+0xd2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a1b      	ldr	r2, [pc, #108]	; (8006f04 <TIM_OC1_SetConfig+0x124>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00b      	beq.n	8006eb2 <TIM_OC1_SetConfig+0xd2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a1a      	ldr	r2, [pc, #104]	; (8006f08 <TIM_OC1_SetConfig+0x128>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d007      	beq.n	8006eb2 <TIM_OC1_SetConfig+0xd2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <TIM_OC1_SetConfig+0x12c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d003      	beq.n	8006eb2 <TIM_OC1_SetConfig+0xd2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a18      	ldr	r2, [pc, #96]	; (8006f10 <TIM_OC1_SetConfig+0x130>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d111      	bne.n	8006ed6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	621a      	str	r2, [r3, #32]
}
 8006ef0:	bf00      	nop
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	40012c00 	.word	0x40012c00
 8006f00:	40013400 	.word	0x40013400
 8006f04:	40014000 	.word	0x40014000
 8006f08:	40014400 	.word	0x40014400
 8006f0c:	40014800 	.word	0x40014800
 8006f10:	40015000 	.word	0x40015000

08006f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	f023 0210 	bic.w	r2, r3, #16
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0320 	bic.w	r3, r3, #32
 8006f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a2c      	ldr	r2, [pc, #176]	; (8007024 <TIM_OC2_SetConfig+0x110>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_OC2_SetConfig+0x74>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a2b      	ldr	r2, [pc, #172]	; (8007028 <TIM_OC2_SetConfig+0x114>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_OC2_SetConfig+0x74>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a2a      	ldr	r2, [pc, #168]	; (800702c <TIM_OC2_SetConfig+0x118>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d10d      	bne.n	8006fa4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <TIM_OC2_SetConfig+0x110>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d013      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xc0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <TIM_OC2_SetConfig+0x114>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xc0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <TIM_OC2_SetConfig+0x11c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00b      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xc0>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <TIM_OC2_SetConfig+0x120>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xc0>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a1c      	ldr	r2, [pc, #112]	; (8007038 <TIM_OC2_SetConfig+0x124>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xc0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a17      	ldr	r2, [pc, #92]	; (800702c <TIM_OC2_SetConfig+0x118>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d113      	bne.n	8006ffc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40013400 	.word	0x40013400
 800702c:	40015000 	.word	0x40015000
 8007030:	40014000 	.word	0x40014000
 8007034:	40014400 	.word	0x40014400
 8007038:	40014800 	.word	0x40014800

0800703c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2b      	ldr	r2, [pc, #172]	; (8007148 <TIM_OC3_SetConfig+0x10c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d007      	beq.n	80070ae <TIM_OC3_SetConfig+0x72>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a2a      	ldr	r2, [pc, #168]	; (800714c <TIM_OC3_SetConfig+0x110>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d003      	beq.n	80070ae <TIM_OC3_SetConfig+0x72>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a29      	ldr	r2, [pc, #164]	; (8007150 <TIM_OC3_SetConfig+0x114>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d10d      	bne.n	80070ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <TIM_OC3_SetConfig+0x10c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d013      	beq.n	80070fa <TIM_OC3_SetConfig+0xbe>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1d      	ldr	r2, [pc, #116]	; (800714c <TIM_OC3_SetConfig+0x110>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00f      	beq.n	80070fa <TIM_OC3_SetConfig+0xbe>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <TIM_OC3_SetConfig+0x118>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00b      	beq.n	80070fa <TIM_OC3_SetConfig+0xbe>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a1c      	ldr	r2, [pc, #112]	; (8007158 <TIM_OC3_SetConfig+0x11c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d007      	beq.n	80070fa <TIM_OC3_SetConfig+0xbe>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a1b      	ldr	r2, [pc, #108]	; (800715c <TIM_OC3_SetConfig+0x120>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d003      	beq.n	80070fa <TIM_OC3_SetConfig+0xbe>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a16      	ldr	r2, [pc, #88]	; (8007150 <TIM_OC3_SetConfig+0x114>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d113      	bne.n	8007122 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	621a      	str	r2, [r3, #32]
}
 800713c:	bf00      	nop
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40012c00 	.word	0x40012c00
 800714c:	40013400 	.word	0x40013400
 8007150:	40015000 	.word	0x40015000
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800

08007160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a2c      	ldr	r2, [pc, #176]	; (8007270 <TIM_OC4_SetConfig+0x110>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_OC4_SetConfig+0x74>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a2b      	ldr	r2, [pc, #172]	; (8007274 <TIM_OC4_SetConfig+0x114>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_OC4_SetConfig+0x74>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <TIM_OC4_SetConfig+0x118>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d10d      	bne.n	80071f0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	031b      	lsls	r3, r3, #12
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <TIM_OC4_SetConfig+0x110>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d013      	beq.n	8007220 <TIM_OC4_SetConfig+0xc0>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a1e      	ldr	r2, [pc, #120]	; (8007274 <TIM_OC4_SetConfig+0x114>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00f      	beq.n	8007220 <TIM_OC4_SetConfig+0xc0>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a1e      	ldr	r2, [pc, #120]	; (800727c <TIM_OC4_SetConfig+0x11c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00b      	beq.n	8007220 <TIM_OC4_SetConfig+0xc0>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <TIM_OC4_SetConfig+0x120>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d007      	beq.n	8007220 <TIM_OC4_SetConfig+0xc0>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <TIM_OC4_SetConfig+0x124>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC4_SetConfig+0xc0>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a17      	ldr	r2, [pc, #92]	; (8007278 <TIM_OC4_SetConfig+0x118>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d113      	bne.n	8007248 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007226:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800722e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	019b      	lsls	r3, r3, #6
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	019b      	lsls	r3, r3, #6
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40013400 	.word	0x40013400
 8007278:	40015000 	.word	0x40015000
 800727c:	40014000 	.word	0x40014000
 8007280:	40014400 	.word	0x40014400
 8007284:	40014800 	.word	0x40014800

08007288 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a19      	ldr	r2, [pc, #100]	; (8007344 <TIM_OC5_SetConfig+0xbc>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d013      	beq.n	800730a <TIM_OC5_SetConfig+0x82>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a18      	ldr	r2, [pc, #96]	; (8007348 <TIM_OC5_SetConfig+0xc0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00f      	beq.n	800730a <TIM_OC5_SetConfig+0x82>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a17      	ldr	r2, [pc, #92]	; (800734c <TIM_OC5_SetConfig+0xc4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00b      	beq.n	800730a <TIM_OC5_SetConfig+0x82>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a16      	ldr	r2, [pc, #88]	; (8007350 <TIM_OC5_SetConfig+0xc8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d007      	beq.n	800730a <TIM_OC5_SetConfig+0x82>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a15      	ldr	r2, [pc, #84]	; (8007354 <TIM_OC5_SetConfig+0xcc>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <TIM_OC5_SetConfig+0x82>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a14      	ldr	r2, [pc, #80]	; (8007358 <TIM_OC5_SetConfig+0xd0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d109      	bne.n	800731e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007310:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	621a      	str	r2, [r3, #32]
}
 8007338:	bf00      	nop
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40012c00 	.word	0x40012c00
 8007348:	40013400 	.word	0x40013400
 800734c:	40014000 	.word	0x40014000
 8007350:	40014400 	.word	0x40014400
 8007354:	40014800 	.word	0x40014800
 8007358:	40015000 	.word	0x40015000

0800735c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800738a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4313      	orrs	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	051b      	lsls	r3, r3, #20
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a1a      	ldr	r2, [pc, #104]	; (800741c <TIM_OC6_SetConfig+0xc0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d013      	beq.n	80073e0 <TIM_OC6_SetConfig+0x84>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a19      	ldr	r2, [pc, #100]	; (8007420 <TIM_OC6_SetConfig+0xc4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00f      	beq.n	80073e0 <TIM_OC6_SetConfig+0x84>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a18      	ldr	r2, [pc, #96]	; (8007424 <TIM_OC6_SetConfig+0xc8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00b      	beq.n	80073e0 <TIM_OC6_SetConfig+0x84>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a17      	ldr	r2, [pc, #92]	; (8007428 <TIM_OC6_SetConfig+0xcc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d007      	beq.n	80073e0 <TIM_OC6_SetConfig+0x84>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a16      	ldr	r2, [pc, #88]	; (800742c <TIM_OC6_SetConfig+0xd0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC6_SetConfig+0x84>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a15      	ldr	r2, [pc, #84]	; (8007430 <TIM_OC6_SetConfig+0xd4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d109      	bne.n	80073f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	029b      	lsls	r3, r3, #10
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	621a      	str	r2, [r3, #32]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40012c00 	.word	0x40012c00
 8007420:	40013400 	.word	0x40013400
 8007424:	40014000 	.word	0x40014000
 8007428:	40014400 	.word	0x40014400
 800742c:	40014800 	.word	0x40014800
 8007430:	40015000 	.word	0x40015000

08007434 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f023 0201 	bic.w	r2, r3, #1
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4a28      	ldr	r2, [pc, #160]	; (8007500 <TIM_TI1_SetConfig+0xcc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d01b      	beq.n	800749a <TIM_TI1_SetConfig+0x66>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007468:	d017      	beq.n	800749a <TIM_TI1_SetConfig+0x66>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4a25      	ldr	r2, [pc, #148]	; (8007504 <TIM_TI1_SetConfig+0xd0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d013      	beq.n	800749a <TIM_TI1_SetConfig+0x66>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4a24      	ldr	r2, [pc, #144]	; (8007508 <TIM_TI1_SetConfig+0xd4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00f      	beq.n	800749a <TIM_TI1_SetConfig+0x66>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a23      	ldr	r2, [pc, #140]	; (800750c <TIM_TI1_SetConfig+0xd8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00b      	beq.n	800749a <TIM_TI1_SetConfig+0x66>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a22      	ldr	r2, [pc, #136]	; (8007510 <TIM_TI1_SetConfig+0xdc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d007      	beq.n	800749a <TIM_TI1_SetConfig+0x66>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4a21      	ldr	r2, [pc, #132]	; (8007514 <TIM_TI1_SetConfig+0xe0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d003      	beq.n	800749a <TIM_TI1_SetConfig+0x66>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4a20      	ldr	r2, [pc, #128]	; (8007518 <TIM_TI1_SetConfig+0xe4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d101      	bne.n	800749e <TIM_TI1_SetConfig+0x6a>
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <TIM_TI1_SetConfig+0x6c>
 800749e:	2300      	movs	r3, #0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d008      	beq.n	80074b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f023 0303 	bic.w	r3, r3, #3
 80074aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e003      	b.n	80074be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f043 0301 	orr.w	r3, r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f023 030a 	bic.w	r3, r3, #10
 80074d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f003 030a 	and.w	r3, r3, #10
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40012c00 	.word	0x40012c00
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40000c00 	.word	0x40000c00
 8007510:	40013400 	.word	0x40013400
 8007514:	40014000 	.word	0x40014000
 8007518:	40015000 	.word	0x40015000

0800751c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f023 0201 	bic.w	r2, r3, #1
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f023 030a 	bic.w	r3, r3, #10
 8007558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800757a:	b480      	push	{r7}
 800757c:	b087      	sub	sp, #28
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f023 0210 	bic.w	r2, r3, #16
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	031b      	lsls	r3, r3, #12
 80075be:	b29b      	uxth	r3, r3
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	621a      	str	r2, [r3, #32]
}
 80075e8:	bf00      	nop
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0210 	bic.w	r2, r3, #16
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800761e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	031b      	lsls	r3, r3, #12
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007630:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	621a      	str	r2, [r3, #32]
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f023 0303 	bic.w	r3, r3, #3
 8007680:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4313      	orrs	r3, r2
 8007688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007690:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	b2db      	uxtb	r3, r3
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80076a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	621a      	str	r2, [r3, #32]
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800770a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	031b      	lsls	r3, r3, #12
 8007710:	b29b      	uxth	r3, r3
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	4313      	orrs	r3, r2
 8007716:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800771e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	031b      	lsls	r3, r3, #12
 8007724:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	621a      	str	r2, [r3, #32]
}
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800775c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	f043 0307 	orr.w	r3, r3, #7
 800776c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	609a      	str	r2, [r3, #8]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800779a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	609a      	str	r2, [r3, #8]
}
 80077b4:	bf00      	nop
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f003 031f 	and.w	r3, r3, #31
 80077d2:	2201      	movs	r2, #1
 80077d4:	fa02 f303 	lsl.w	r3, r2, r3
 80077d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a1a      	ldr	r2, [r3, #32]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	43db      	mvns	r3, r3
 80077e2:	401a      	ands	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1a      	ldr	r2, [r3, #32]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	fa01 f303 	lsl.w	r3, r1, r3
 80077f8:	431a      	orrs	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	621a      	str	r2, [r3, #32]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007820:	2302      	movs	r3, #2
 8007822:	e074      	b.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a34      	ldr	r2, [pc, #208]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d009      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a33      	ldr	r2, [pc, #204]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d004      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a31      	ldr	r2, [pc, #196]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d108      	bne.n	8007874 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007868:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a21      	ldr	r2, [pc, #132]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d022      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a4:	d01d      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1f      	ldr	r2, [pc, #124]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d018      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1d      	ldr	r2, [pc, #116]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d013      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1c      	ldr	r2, [pc, #112]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00e      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a18      	ldr	r2, [pc, #96]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d004      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a11      	ldr	r2, [pc, #68]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d10c      	bne.n	80078fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40012c00 	.word	0x40012c00
 8007920:	40013400 	.word	0x40013400
 8007924:	40015000 	.word	0x40015000
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40014000 	.word	0x40014000

08007938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007950:	2302      	movs	r3, #2
 8007952:	e078      	b.n	8007a46 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	041b      	lsls	r3, r3, #16
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1c      	ldr	r2, [pc, #112]	; (8007a54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d009      	beq.n	80079fa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1b      	ldr	r2, [pc, #108]	; (8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d004      	beq.n	80079fa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a19      	ldr	r2, [pc, #100]	; (8007a5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d11c      	bne.n	8007a34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	051b      	lsls	r3, r3, #20
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40013400 	.word	0x40013400
 8007a5c:	40015000 	.word	0x40015000

08007a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e042      	b.n	8007b84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fa fea5 	bl	8002860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2224      	movs	r2, #36	; 0x24
 8007b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fb24 	bl	8008184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f825 	bl	8007b8c <UART_SetConfig>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e01b      	b.n	8007b84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fba3 	bl	80082c8 <UART_CheckIdleState>
 8007b82:	4603      	mov	r3, r0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b90:	b08c      	sub	sp, #48	; 0x30
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4baa      	ldr	r3, [pc, #680]	; (8007e64 <UART_SetConfig+0x2d8>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a9f      	ldr	r2, [pc, #636]	; (8007e68 <UART_SetConfig+0x2dc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007c02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	f023 010f 	bic.w	r1, r3, #15
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a90      	ldr	r2, [pc, #576]	; (8007e6c <UART_SetConfig+0x2e0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d125      	bne.n	8007c7c <UART_SetConfig+0xf0>
 8007c30:	4b8f      	ldr	r3, [pc, #572]	; (8007e70 <UART_SetConfig+0x2e4>)
 8007c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d81a      	bhi.n	8007c74 <UART_SetConfig+0xe8>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <UART_SetConfig+0xb8>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c55 	.word	0x08007c55
 8007c48:	08007c65 	.word	0x08007c65
 8007c4c:	08007c5d 	.word	0x08007c5d
 8007c50:	08007c6d 	.word	0x08007c6d
 8007c54:	2301      	movs	r3, #1
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5a:	e116      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c62:	e112      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007c64:	2304      	movs	r3, #4
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c6a:	e10e      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c72:	e10a      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007c74:	2310      	movs	r3, #16
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7a:	e106      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a7c      	ldr	r2, [pc, #496]	; (8007e74 <UART_SetConfig+0x2e8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d138      	bne.n	8007cf8 <UART_SetConfig+0x16c>
 8007c86:	4b7a      	ldr	r3, [pc, #488]	; (8007e70 <UART_SetConfig+0x2e4>)
 8007c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c8c:	f003 030c 	and.w	r3, r3, #12
 8007c90:	2b0c      	cmp	r3, #12
 8007c92:	d82d      	bhi.n	8007cf0 <UART_SetConfig+0x164>
 8007c94:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <UART_SetConfig+0x110>)
 8007c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9a:	bf00      	nop
 8007c9c:	08007cd1 	.word	0x08007cd1
 8007ca0:	08007cf1 	.word	0x08007cf1
 8007ca4:	08007cf1 	.word	0x08007cf1
 8007ca8:	08007cf1 	.word	0x08007cf1
 8007cac:	08007ce1 	.word	0x08007ce1
 8007cb0:	08007cf1 	.word	0x08007cf1
 8007cb4:	08007cf1 	.word	0x08007cf1
 8007cb8:	08007cf1 	.word	0x08007cf1
 8007cbc:	08007cd9 	.word	0x08007cd9
 8007cc0:	08007cf1 	.word	0x08007cf1
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	08007cf1 	.word	0x08007cf1
 8007ccc:	08007ce9 	.word	0x08007ce9
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cd6:	e0d8      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	e0d4      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce6:	e0d0      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007ce8:	2308      	movs	r3, #8
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cee:	e0cc      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf6:	e0c8      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a5e      	ldr	r2, [pc, #376]	; (8007e78 <UART_SetConfig+0x2ec>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d125      	bne.n	8007d4e <UART_SetConfig+0x1c2>
 8007d02:	4b5b      	ldr	r3, [pc, #364]	; (8007e70 <UART_SetConfig+0x2e4>)
 8007d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d0c:	2b30      	cmp	r3, #48	; 0x30
 8007d0e:	d016      	beq.n	8007d3e <UART_SetConfig+0x1b2>
 8007d10:	2b30      	cmp	r3, #48	; 0x30
 8007d12:	d818      	bhi.n	8007d46 <UART_SetConfig+0x1ba>
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d00a      	beq.n	8007d2e <UART_SetConfig+0x1a2>
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d814      	bhi.n	8007d46 <UART_SetConfig+0x1ba>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <UART_SetConfig+0x19a>
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d008      	beq.n	8007d36 <UART_SetConfig+0x1aa>
 8007d24:	e00f      	b.n	8007d46 <UART_SetConfig+0x1ba>
 8007d26:	2300      	movs	r3, #0
 8007d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d2c:	e0ad      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d34:	e0a9      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d36:	2304      	movs	r3, #4
 8007d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3c:	e0a5      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d3e:	2308      	movs	r3, #8
 8007d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d44:	e0a1      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d46:	2310      	movs	r3, #16
 8007d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4c:	e09d      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a4a      	ldr	r2, [pc, #296]	; (8007e7c <UART_SetConfig+0x2f0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d125      	bne.n	8007da4 <UART_SetConfig+0x218>
 8007d58:	4b45      	ldr	r3, [pc, #276]	; (8007e70 <UART_SetConfig+0x2e4>)
 8007d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d62:	2bc0      	cmp	r3, #192	; 0xc0
 8007d64:	d016      	beq.n	8007d94 <UART_SetConfig+0x208>
 8007d66:	2bc0      	cmp	r3, #192	; 0xc0
 8007d68:	d818      	bhi.n	8007d9c <UART_SetConfig+0x210>
 8007d6a:	2b80      	cmp	r3, #128	; 0x80
 8007d6c:	d00a      	beq.n	8007d84 <UART_SetConfig+0x1f8>
 8007d6e:	2b80      	cmp	r3, #128	; 0x80
 8007d70:	d814      	bhi.n	8007d9c <UART_SetConfig+0x210>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <UART_SetConfig+0x1f0>
 8007d76:	2b40      	cmp	r3, #64	; 0x40
 8007d78:	d008      	beq.n	8007d8c <UART_SetConfig+0x200>
 8007d7a:	e00f      	b.n	8007d9c <UART_SetConfig+0x210>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d82:	e082      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d84:	2302      	movs	r3, #2
 8007d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8a:	e07e      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d92:	e07a      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d9a:	e076      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007da2:	e072      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a35      	ldr	r2, [pc, #212]	; (8007e80 <UART_SetConfig+0x2f4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d12a      	bne.n	8007e04 <UART_SetConfig+0x278>
 8007dae:	4b30      	ldr	r3, [pc, #192]	; (8007e70 <UART_SetConfig+0x2e4>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dbc:	d01a      	beq.n	8007df4 <UART_SetConfig+0x268>
 8007dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc2:	d81b      	bhi.n	8007dfc <UART_SetConfig+0x270>
 8007dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc8:	d00c      	beq.n	8007de4 <UART_SetConfig+0x258>
 8007dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dce:	d815      	bhi.n	8007dfc <UART_SetConfig+0x270>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <UART_SetConfig+0x250>
 8007dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd8:	d008      	beq.n	8007dec <UART_SetConfig+0x260>
 8007dda:	e00f      	b.n	8007dfc <UART_SetConfig+0x270>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de2:	e052      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007de4:	2302      	movs	r3, #2
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dea:	e04e      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007dec:	2304      	movs	r3, #4
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df2:	e04a      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007df4:	2308      	movs	r3, #8
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfa:	e046      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e02:	e042      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a17      	ldr	r2, [pc, #92]	; (8007e68 <UART_SetConfig+0x2dc>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d13a      	bne.n	8007e84 <UART_SetConfig+0x2f8>
 8007e0e:	4b18      	ldr	r3, [pc, #96]	; (8007e70 <UART_SetConfig+0x2e4>)
 8007e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e1c:	d01a      	beq.n	8007e54 <UART_SetConfig+0x2c8>
 8007e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e22:	d81b      	bhi.n	8007e5c <UART_SetConfig+0x2d0>
 8007e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e28:	d00c      	beq.n	8007e44 <UART_SetConfig+0x2b8>
 8007e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e2e:	d815      	bhi.n	8007e5c <UART_SetConfig+0x2d0>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <UART_SetConfig+0x2b0>
 8007e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e38:	d008      	beq.n	8007e4c <UART_SetConfig+0x2c0>
 8007e3a:	e00f      	b.n	8007e5c <UART_SetConfig+0x2d0>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e42:	e022      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007e44:	2302      	movs	r3, #2
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e4a:	e01e      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e52:	e01a      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007e54:	2308      	movs	r3, #8
 8007e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e5a:	e016      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e62:	e012      	b.n	8007e8a <UART_SetConfig+0x2fe>
 8007e64:	cfff69f3 	.word	0xcfff69f3
 8007e68:	40008000 	.word	0x40008000
 8007e6c:	40013800 	.word	0x40013800
 8007e70:	40021000 	.word	0x40021000
 8007e74:	40004400 	.word	0x40004400
 8007e78:	40004800 	.word	0x40004800
 8007e7c:	40004c00 	.word	0x40004c00
 8007e80:	40005000 	.word	0x40005000
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4aae      	ldr	r2, [pc, #696]	; (8008148 <UART_SetConfig+0x5bc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	f040 8097 	bne.w	8007fc4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d823      	bhi.n	8007ee6 <UART_SetConfig+0x35a>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <UART_SetConfig+0x318>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ee7 	.word	0x08007ee7
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007ee7 	.word	0x08007ee7
 8007eb4:	08007ed7 	.word	0x08007ed7
 8007eb8:	08007ee7 	.word	0x08007ee7
 8007ebc:	08007ee7 	.word	0x08007ee7
 8007ec0:	08007ee7 	.word	0x08007ee7
 8007ec4:	08007edf 	.word	0x08007edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ec8:	f7fd fb86 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8007ecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ece:	e010      	b.n	8007ef2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed0:	4b9e      	ldr	r3, [pc, #632]	; (800814c <UART_SetConfig+0x5c0>)
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ed4:	e00d      	b.n	8007ef2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ed6:	f7fd fb11 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 8007eda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007edc:	e009      	b.n	8007ef2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ee4:	e005      	b.n	8007ef2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ef0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8130 	beq.w	800815a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	4a94      	ldr	r2, [pc, #592]	; (8008150 <UART_SetConfig+0x5c4>)
 8007f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f04:	461a      	mov	r2, r3
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	4413      	add	r3, r2
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d305      	bcc.n	8007f2a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d903      	bls.n	8007f32 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f30:	e113      	b.n	800815a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	2200      	movs	r2, #0
 8007f36:	60bb      	str	r3, [r7, #8]
 8007f38:	60fa      	str	r2, [r7, #12]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	4a84      	ldr	r2, [pc, #528]	; (8008150 <UART_SetConfig+0x5c4>)
 8007f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2200      	movs	r2, #0
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f54:	f7f8 fd9e 	bl	8000a94 <__aeabi_uldivmod>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	020b      	lsls	r3, r1, #8
 8007f6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f6e:	0202      	lsls	r2, r0, #8
 8007f70:	6979      	ldr	r1, [r7, #20]
 8007f72:	6849      	ldr	r1, [r1, #4]
 8007f74:	0849      	lsrs	r1, r1, #1
 8007f76:	2000      	movs	r0, #0
 8007f78:	460c      	mov	r4, r1
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	eb12 0804 	adds.w	r8, r2, r4
 8007f80:	eb43 0905 	adc.w	r9, r3, r5
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	469a      	mov	sl, r3
 8007f8c:	4693      	mov	fp, r2
 8007f8e:	4652      	mov	r2, sl
 8007f90:	465b      	mov	r3, fp
 8007f92:	4640      	mov	r0, r8
 8007f94:	4649      	mov	r1, r9
 8007f96:	f7f8 fd7d 	bl	8000a94 <__aeabi_uldivmod>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa8:	d308      	bcc.n	8007fbc <UART_SetConfig+0x430>
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fb0:	d204      	bcs.n	8007fbc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6a3a      	ldr	r2, [r7, #32]
 8007fb8:	60da      	str	r2, [r3, #12]
 8007fba:	e0ce      	b.n	800815a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007fc2:	e0ca      	b.n	800815a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fcc:	d166      	bne.n	800809c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d827      	bhi.n	8008026 <UART_SetConfig+0x49a>
 8007fd6:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <UART_SetConfig+0x450>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	08008001 	.word	0x08008001
 8007fe0:	08008009 	.word	0x08008009
 8007fe4:	08008011 	.word	0x08008011
 8007fe8:	08008027 	.word	0x08008027
 8007fec:	08008017 	.word	0x08008017
 8007ff0:	08008027 	.word	0x08008027
 8007ff4:	08008027 	.word	0x08008027
 8007ff8:	08008027 	.word	0x08008027
 8007ffc:	0800801f 	.word	0x0800801f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008000:	f7fd faea 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8008004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008006:	e014      	b.n	8008032 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008008:	f7fd fafc 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 800800c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800800e:	e010      	b.n	8008032 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008010:	4b4e      	ldr	r3, [pc, #312]	; (800814c <UART_SetConfig+0x5c0>)
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008014:	e00d      	b.n	8008032 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008016:	f7fd fa71 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 800801a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800801c:	e009      	b.n	8008032 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800801e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008024:	e005      	b.n	8008032 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8090 	beq.w	800815a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	4a44      	ldr	r2, [pc, #272]	; (8008150 <UART_SetConfig+0x5c4>)
 8008040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008044:	461a      	mov	r2, r3
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	fbb3 f3f2 	udiv	r3, r3, r2
 800804c:	005a      	lsls	r2, r3, #1
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	085b      	lsrs	r3, r3, #1
 8008054:	441a      	add	r2, r3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	fbb2 f3f3 	udiv	r3, r2, r3
 800805e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	2b0f      	cmp	r3, #15
 8008064:	d916      	bls.n	8008094 <UART_SetConfig+0x508>
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806c:	d212      	bcs.n	8008094 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f023 030f 	bic.w	r3, r3, #15
 8008076:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	085b      	lsrs	r3, r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	b29a      	uxth	r2, r3
 8008084:	8bfb      	ldrh	r3, [r7, #30]
 8008086:	4313      	orrs	r3, r2
 8008088:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	8bfa      	ldrh	r2, [r7, #30]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	e062      	b.n	800815a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800809a:	e05e      	b.n	800815a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800809c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d828      	bhi.n	80080f6 <UART_SetConfig+0x56a>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <UART_SetConfig+0x520>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	080080d1 	.word	0x080080d1
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	080080f7 	.word	0x080080f7
 80080bc:	080080e7 	.word	0x080080e7
 80080c0:	080080f7 	.word	0x080080f7
 80080c4:	080080f7 	.word	0x080080f7
 80080c8:	080080f7 	.word	0x080080f7
 80080cc:	080080ef 	.word	0x080080ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d0:	f7fd fa82 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 80080d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080d6:	e014      	b.n	8008102 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d8:	f7fd fa94 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 80080dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080de:	e010      	b.n	8008102 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080e0:	4b1a      	ldr	r3, [pc, #104]	; (800814c <UART_SetConfig+0x5c0>)
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080e4:	e00d      	b.n	8008102 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080e6:	f7fd fa09 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 80080ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080ec:	e009      	b.n	8008102 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080f4:	e005      	b.n	8008102 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008100:	bf00      	nop
    }

    if (pclk != 0U)
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	2b00      	cmp	r3, #0
 8008106:	d028      	beq.n	800815a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	4a10      	ldr	r2, [pc, #64]	; (8008150 <UART_SetConfig+0x5c4>)
 800810e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008112:	461a      	mov	r2, r3
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	fbb3 f2f2 	udiv	r2, r3, r2
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	085b      	lsrs	r3, r3, #1
 8008120:	441a      	add	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	fbb2 f3f3 	udiv	r3, r2, r3
 800812a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	2b0f      	cmp	r3, #15
 8008130:	d910      	bls.n	8008154 <UART_SetConfig+0x5c8>
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008138:	d20c      	bcs.n	8008154 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	b29a      	uxth	r2, r3
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	e009      	b.n	800815a <UART_SetConfig+0x5ce>
 8008146:	bf00      	nop
 8008148:	40008000 	.word	0x40008000
 800814c:	00f42400 	.word	0x00f42400
 8008150:	08008850 	.word	0x08008850
      }
      else
      {
        ret = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2201      	movs	r2, #1
 800815e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2201      	movs	r2, #1
 8008166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2200      	movs	r2, #0
 800816e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2200      	movs	r2, #0
 8008174:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008176:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800817a:	4618      	mov	r0, r3
 800817c:	3730      	adds	r7, #48	; 0x30
 800817e:	46bd      	mov	sp, r7
 8008180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01a      	beq.n	800829a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008282:	d10a      	bne.n	800829a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b098      	sub	sp, #96	; 0x60
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082d8:	f7fa fc04 	bl	8002ae4 <HAL_GetTick>
 80082dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d12f      	bne.n	800834c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f4:	2200      	movs	r2, #0
 80082f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f88e 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d022      	beq.n	800834c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800831a:	653b      	str	r3, [r7, #80]	; 0x50
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008324:	647b      	str	r3, [r7, #68]	; 0x44
 8008326:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800832a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e6      	bne.n	8008306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e063      	b.n	8008414 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b04      	cmp	r3, #4
 8008358:	d149      	bne.n	80083ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008362:	2200      	movs	r2, #0
 8008364:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f857 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d03c      	beq.n	80083ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	623b      	str	r3, [r7, #32]
   return(result);
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008392:	633b      	str	r3, [r7, #48]	; 0x30
 8008394:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e6      	bne.n	8008374 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f023 0301 	bic.w	r3, r3, #1
 80083bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c6:	61fa      	str	r2, [r7, #28]
 80083c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	69b9      	ldr	r1, [r7, #24]
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	617b      	str	r3, [r7, #20]
   return(result);
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e5      	bne.n	80083a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e012      	b.n	8008414 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3758      	adds	r7, #88	; 0x58
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842c:	e04f      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d04b      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008436:	f7fa fb55 	bl	8002ae4 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <UART_WaitOnFlagUntilTimeout+0x30>
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e04e      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d037      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b80      	cmp	r3, #128	; 0x80
 8008462:	d034      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d031      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b08      	cmp	r3, #8
 8008476:	d110      	bne.n	800849a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2208      	movs	r2, #8
 800847e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f838 	bl	80084f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2208      	movs	r2, #8
 800848a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e029      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a8:	d111      	bne.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f81e 	bl	80084f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2220      	movs	r2, #32
 80084be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e00f      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69da      	ldr	r2, [r3, #28]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4013      	ands	r3, r2
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	429a      	cmp	r2, r3
 80084dc:	bf0c      	ite	eq
 80084de:	2301      	moveq	r3, #1
 80084e0:	2300      	movne	r3, #0
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d0a0      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b095      	sub	sp, #84	; 0x54
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851c:	643b      	str	r3, [r7, #64]	; 0x40
 800851e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e6      	bne.n	80084fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008546:	f023 0301 	bic.w	r3, r3, #1
 800854a:	64bb      	str	r3, [r7, #72]	; 0x48
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800855a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e3      	bne.n	8008530 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800856c:	2b01      	cmp	r3, #1
 800856e:	d118      	bne.n	80085a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	60bb      	str	r3, [r7, #8]
   return(result);
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	f023 0310 	bic.w	r3, r3, #16
 8008584:	647b      	str	r3, [r7, #68]	; 0x44
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800858e:	61bb      	str	r3, [r7, #24]
 8008590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6979      	ldr	r1, [r7, #20]
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	613b      	str	r3, [r7, #16]
   return(result);
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e6      	bne.n	8008570 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80085b6:	bf00      	nop
 80085b8:	3754      	adds	r7, #84	; 0x54
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e027      	b.n	8008628 <HAL_UARTEx_DisableFifoMode+0x66>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2224      	movs	r2, #36	; 0x24
 80085e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0201 	bic.w	r2, r2, #1
 80085fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008606:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008648:	2302      	movs	r3, #2
 800864a:	e02d      	b.n	80086a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2224      	movs	r2, #36	; 0x24
 8008658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0201 	bic.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f84f 	bl	800872c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e02d      	b.n	8008724 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2224      	movs	r2, #36	; 0x24
 80086d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0201 	bic.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f811 	bl	800872c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008738:	2b00      	cmp	r3, #0
 800873a:	d108      	bne.n	800874e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800874c:	e031      	b.n	80087b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800874e:	2308      	movs	r3, #8
 8008750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008752:	2308      	movs	r3, #8
 8008754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	0e5b      	lsrs	r3, r3, #25
 800875e:	b2db      	uxtb	r3, r3
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	0f5b      	lsrs	r3, r3, #29
 800876e:	b2db      	uxtb	r3, r3
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	7b3a      	ldrb	r2, [r7, #12]
 800877a:	4911      	ldr	r1, [pc, #68]	; (80087c0 <UARTEx_SetNbDataToProcess+0x94>)
 800877c:	5c8a      	ldrb	r2, [r1, r2]
 800877e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008782:	7b3a      	ldrb	r2, [r7, #12]
 8008784:	490f      	ldr	r1, [pc, #60]	; (80087c4 <UARTEx_SetNbDataToProcess+0x98>)
 8008786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008788:	fb93 f3f2 	sdiv	r3, r3, r2
 800878c:	b29a      	uxth	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	7b7a      	ldrb	r2, [r7, #13]
 8008798:	4909      	ldr	r1, [pc, #36]	; (80087c0 <UARTEx_SetNbDataToProcess+0x94>)
 800879a:	5c8a      	ldrb	r2, [r1, r2]
 800879c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80087a0:	7b7a      	ldrb	r2, [r7, #13]
 80087a2:	4908      	ldr	r1, [pc, #32]	; (80087c4 <UARTEx_SetNbDataToProcess+0x98>)
 80087a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	08008868 	.word	0x08008868
 80087c4:	08008870 	.word	0x08008870

080087c8 <memset>:
 80087c8:	4402      	add	r2, r0
 80087ca:	4603      	mov	r3, r0
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d100      	bne.n	80087d2 <memset+0xa>
 80087d0:	4770      	bx	lr
 80087d2:	f803 1b01 	strb.w	r1, [r3], #1
 80087d6:	e7f9      	b.n	80087cc <memset+0x4>

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4d0d      	ldr	r5, [pc, #52]	; (8008810 <__libc_init_array+0x38>)
 80087dc:	4c0d      	ldr	r4, [pc, #52]	; (8008814 <__libc_init_array+0x3c>)
 80087de:	1b64      	subs	r4, r4, r5
 80087e0:	10a4      	asrs	r4, r4, #2
 80087e2:	2600      	movs	r6, #0
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	4d0b      	ldr	r5, [pc, #44]	; (8008818 <__libc_init_array+0x40>)
 80087ea:	4c0c      	ldr	r4, [pc, #48]	; (800881c <__libc_init_array+0x44>)
 80087ec:	f000 f818 	bl	8008820 <_init>
 80087f0:	1b64      	subs	r4, r4, r5
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	2600      	movs	r6, #0
 80087f6:	42a6      	cmp	r6, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008800:	4798      	blx	r3
 8008802:	3601      	adds	r6, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f855 3b04 	ldr.w	r3, [r5], #4
 800880a:	4798      	blx	r3
 800880c:	3601      	adds	r6, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	08008880 	.word	0x08008880
 8008814:	08008880 	.word	0x08008880
 8008818:	08008880 	.word	0x08008880
 800881c:	08008884 	.word	0x08008884

08008820 <_init>:
 8008820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008822:	bf00      	nop
 8008824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008826:	bc08      	pop	{r3}
 8008828:	469e      	mov	lr, r3
 800882a:	4770      	bx	lr

0800882c <_fini>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	bf00      	nop
 8008830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008832:	bc08      	pop	{r3}
 8008834:	469e      	mov	lr, r3
 8008836:	4770      	bx	lr
