
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081bc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008394  08008394  00009394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d4  080083d4  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  080083d4  080083d4  000093d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083dc  080083dc  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083dc  080083dc  000093dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080083e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  20000010  080083f4  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  080083f4  0000a78c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2c0  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d00  00000000  00000000  00028300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0002c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001364  00000000  00000000  0002d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ee6  00000000  00000000  0002ec4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020c43  00000000  00000000  00032b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011251d  00000000  00000000  00053775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165c92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069bc  00000000  00000000  00165cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0016c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800837c 	.word	0x0800837c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800837c 	.word	0x0800837c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vLineSensorSystemInit>:
#define IR4_AD hadc4
#define IR5_AD hadc5

extern uint32_t uiAdcValue;

void vLineSensorSystemInit(uint32_t *pLineSensorsReadings){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(&IR1_AD, ADC_SINGLE_ENDED);
 8000510:	217f      	movs	r1, #127	@ 0x7f
 8000512:	481c      	ldr	r0, [pc, #112]	@ (8000584 <vLineSensorSystemInit+0x7c>)
 8000514:	f003 f8c2 	bl	800369c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR1_AD, &pLineSensorsReadings[0] , 1);
 8000518:	2201      	movs	r2, #1
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	4819      	ldr	r0, [pc, #100]	@ (8000584 <vLineSensorSystemInit+0x7c>)
 800051e:	f002 f9af 	bl	8002880 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR2_AD, ADC_SINGLE_ENDED);
 8000522:	217f      	movs	r1, #127	@ 0x7f
 8000524:	4818      	ldr	r0, [pc, #96]	@ (8000588 <vLineSensorSystemInit+0x80>)
 8000526:	f003 f8b9 	bl	800369c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR2_AD, &pLineSensorsReadings[1] , 2);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	2202      	movs	r2, #2
 8000530:	4619      	mov	r1, r3
 8000532:	4815      	ldr	r0, [pc, #84]	@ (8000588 <vLineSensorSystemInit+0x80>)
 8000534:	f002 f9a4 	bl	8002880 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR3_AD, ADC_SINGLE_ENDED);
 8000538:	217f      	movs	r1, #127	@ 0x7f
 800053a:	4814      	ldr	r0, [pc, #80]	@ (800058c <vLineSensorSystemInit+0x84>)
 800053c:	f003 f8ae 	bl	800369c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR3_AD, &pLineSensorsReadings[2] , 1);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3308      	adds	r3, #8
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	4810      	ldr	r0, [pc, #64]	@ (800058c <vLineSensorSystemInit+0x84>)
 800054a:	f002 f999 	bl	8002880 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR4_AD, ADC_SINGLE_ENDED);
 800054e:	217f      	movs	r1, #127	@ 0x7f
 8000550:	480f      	ldr	r0, [pc, #60]	@ (8000590 <vLineSensorSystemInit+0x88>)
 8000552:	f003 f8a3 	bl	800369c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR4_AD, &pLineSensorsReadings[3] , 1);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	330c      	adds	r3, #12
 800055a:	2201      	movs	r2, #1
 800055c:	4619      	mov	r1, r3
 800055e:	480c      	ldr	r0, [pc, #48]	@ (8000590 <vLineSensorSystemInit+0x88>)
 8000560:	f002 f98e 	bl	8002880 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR5_AD, ADC_SINGLE_ENDED);
 8000564:	217f      	movs	r1, #127	@ 0x7f
 8000566:	480b      	ldr	r0, [pc, #44]	@ (8000594 <vLineSensorSystemInit+0x8c>)
 8000568:	f003 f898 	bl	800369c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR5_AD, &pLineSensorsReadings[4] , 1);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3310      	adds	r3, #16
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	4807      	ldr	r0, [pc, #28]	@ (8000594 <vLineSensorSystemInit+0x8c>)
 8000576:	f002 f983 	bl	8002880 <HAL_ADC_Start_DMA>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000002c 	.word	0x2000002c
 8000588:	20000098 	.word	0x20000098
 800058c:	20000104 	.word	0x20000104
 8000590:	20000170 	.word	0x20000170
 8000594:	200001dc 	.word	0x200001dc

08000598 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <vPowerTrainSystemInit+0x20>)
 800059e:	f005 f8e1 	bl	8005764 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 80005a2:	2100      	movs	r1, #0
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <vPowerTrainSystemInit+0x20>)
 80005a6:	f005 fa1d 	bl	80059e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 80005aa:	2104      	movs	r1, #4
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <vPowerTrainSystemInit+0x20>)
 80005ae:	f005 fa19 	bl	80059e4 <HAL_TIM_PWM_Start>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200004b8 	.word	0x200004b8

080005bc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	@ 0x30
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2220      	movs	r2, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f007 fea5 	bl	8008324 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005da:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005e4:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000604:	2204      	movs	r2, #4
 8000606:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060e:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000610:	2201      	movs	r2, #1
 8000612:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000616:	2201      	movs	r2, #1
 8000618:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000630:	2201      	movs	r2, #1
 8000632:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	4817      	ldr	r0, [pc, #92]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000646:	f001 ff5f 	bl	8002508 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000650:	f000 ff5a 	bl	8001508 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065c:	4619      	mov	r1, r3
 800065e:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000660:	f003 f87e 	bl	8003760 <HAL_ADCEx_MultiModeConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800066a:	f000 ff4d 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_ADC1_Init+0xec>)
 8000670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000672:	2306      	movs	r3, #6
 8000674:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000676:	2305      	movs	r3, #5
 8000678:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067a:	237f      	movs	r3, #127	@ 0x7f
 800067c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067e:	2304      	movs	r3, #4
 8000680:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800068c:	f002 f9ea 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000696:	f000 ff37 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	@ 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	04300002 	.word	0x04300002

080006ac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2220      	movs	r2, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f007 fe33 	bl	8008324 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006be:	4b32      	ldr	r3, [pc, #200]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006c0:	4a32      	ldr	r2, [pc, #200]	@ (800078c <MX_ADC2_Init+0xe0>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80006c4:	4b30      	ldr	r3, [pc, #192]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006c6:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006de:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80006f6:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_ADC2_Init+0xdc>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000712:	2201      	movs	r2, #1
 8000714:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_ADC2_Init+0xdc>)
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000726:	4818      	ldr	r0, [pc, #96]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000728:	f001 feee 	bl	8002508 <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000732:	f000 fee9 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xe4>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2306      	movs	r3, #6
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800073e:	2305      	movs	r3, #5
 8000740:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000742:	237f      	movs	r3, #127	@ 0x7f
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	480d      	ldr	r0, [pc, #52]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000754:	f002 f986 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800075e:	f000 fed3 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_ADC2_Init+0xe8>)
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000766:	230c      	movs	r3, #12
 8000768:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000770:	f002 f978 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800077a:	f000 fec5 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000098 	.word	0x20000098
 800078c:	50000100 	.word	0x50000100
 8000790:	0c900008 	.word	0x0c900008
 8000794:	10c00010 	.word	0x10c00010

08000798 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f007 fdb7 	bl	8008324 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007b6:	4b31      	ldr	r3, [pc, #196]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007b8:	4a31      	ldr	r2, [pc, #196]	@ (8000880 <MX_ADC3_Init+0xe8>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007be:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80007c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007c4:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80007d0:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b29      	ldr	r3, [pc, #164]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007de:	2204      	movs	r2, #4
 80007e0:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_ADC3_Init+0xe4>)
 800080a:	2201      	movs	r2, #1
 800080c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800081e:	4817      	ldr	r0, [pc, #92]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000820:	f001 fe72 	bl	8002508 <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800082a:	f000 fe6d 	bl	8001508 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4810      	ldr	r0, [pc, #64]	@ (800087c <MX_ADC3_Init+0xe4>)
 800083a:	f002 ff91 	bl	8003760 <HAL_ADCEx_MultiModeConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000844:	f000 fe60 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_ADC3_Init+0xec>)
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084c:	2306      	movs	r3, #6
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000850:	2305      	movs	r3, #5
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000854:	237f      	movs	r3, #127	@ 0x7f
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000858:	2304      	movs	r3, #4
 800085a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000866:	f002 f8fd 	bl	8002a64 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000870:	f000 fe4a 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	@ 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000104 	.word	0x20000104
 8000880:	50000400 	.word	0x50000400
 8000884:	14f00020 	.word	0x14f00020

08000888 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f007 fd45 	bl	8008324 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <MX_ADC4_Init+0xc0>)
 800089c:	4a2b      	ldr	r2, [pc, #172]	@ (800094c <MX_ADC4_Init+0xc4>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80008a0:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008a2:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80008a6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000902:	4811      	ldr	r0, [pc, #68]	@ (8000948 <MX_ADC4_Init+0xc0>)
 8000904:	f001 fe00 	bl	8002508 <HAL_ADC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800090e:	f000 fdfb 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_ADC4_Init+0xc8>)
 8000914:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000916:	2306      	movs	r3, #6
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800091a:	2305      	movs	r3, #5
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091e:	237f      	movs	r3, #127	@ 0x7f
 8000920:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000922:	2304      	movs	r3, #4
 8000924:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <MX_ADC4_Init+0xc0>)
 8000930:	f002 f898 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800093a:	f000 fde5 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000170 	.word	0x20000170
 800094c:	50000500 	.word	0x50000500
 8000950:	14f00020 	.word	0x14f00020

08000954 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2220      	movs	r2, #32
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f007 fcdf 	bl	8008324 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000966:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000968:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <MX_ADC5_Init+0xc4>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800096c:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 800096e:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000972:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097a:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000980:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098c:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 800098e:	2204      	movs	r2, #4
 8000990:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000992:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 800099a:	2201      	movs	r2, #1
 800099c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009d0:	f001 fd9a 	bl	8002508 <HAL_ADC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80009da:	f000 fd95 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_ADC5_Init+0xc8>)
 80009e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e2:	2306      	movs	r3, #6
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80009e6:	2305      	movs	r3, #5
 80009e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ea:	237f      	movs	r3, #127	@ 0x7f
 80009ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ee:	2304      	movs	r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009fc:	f002 f832 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000a06:	f000 fd7f 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001dc 	.word	0x200001dc
 8000a18:	50000600 	.word	0x50000600
 8000a1c:	08600004 	.word	0x08600004

08000a20 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0a6      	sub	sp, #152	@ 0x98
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a3c:	2254      	movs	r2, #84	@ 0x54
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f007 fc6f 	bl	8008324 <memset>
  if(adcHandle->Instance==ADC1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a4e:	d16c      	bne.n	8000b2a <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a54:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a56:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a5a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fbd9 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a6c:	f000 fd4c 	bl	8001508 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a70:	4ba0      	ldr	r3, [pc, #640]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a9f      	ldr	r2, [pc, #636]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000a78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a7a:	4b9e      	ldr	r3, [pc, #632]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10b      	bne.n	8000a9a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a82:	4b9d      	ldr	r3, [pc, #628]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a9c      	ldr	r2, [pc, #624]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000a88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b9a      	ldr	r3, [pc, #616]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b97      	ldr	r3, [pc, #604]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	4a96      	ldr	r2, [pc, #600]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa6:	4b94      	ldr	r3, [pc, #592]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f003 fad1 	bl	8004074 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ad2:	4b8a      	ldr	r3, [pc, #552]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000ad4:	4a8a      	ldr	r2, [pc, #552]	@ (8000d00 <HAL_ADC_MspInit+0x2e0>)
 8000ad6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ad8:	4b88      	ldr	r3, [pc, #544]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000ada:	2205      	movs	r2, #5
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b87      	ldr	r3, [pc, #540]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b85      	ldr	r3, [pc, #532]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b84      	ldr	r3, [pc, #528]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000af0:	4b82      	ldr	r3, [pc, #520]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000af2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af8:	4b80      	ldr	r3, [pc, #512]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b00:	4b7e      	ldr	r3, [pc, #504]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b02:	2220      	movs	r2, #32
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b7d      	ldr	r3, [pc, #500]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b0c:	487b      	ldr	r0, [pc, #492]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b0e:	f003 f83f 	bl	8003b90 <HAL_DMA_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000b18:	f000 fcf6 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a77      	ldr	r2, [pc, #476]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b20:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b22:	4a76      	ldr	r2, [pc, #472]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000b28:	e1e0      	b.n	8000eec <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a75      	ldr	r2, [pc, #468]	@ (8000d04 <HAL_ADC_MspInit+0x2e4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d16c      	bne.n	8000c0e <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b38:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b3a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b3e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 fb67 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000b50:	f000 fcda 	bl	8001508 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b54:	4b67      	ldr	r3, [pc, #412]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	4a66      	ldr	r2, [pc, #408]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000b5c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b5e:	4b65      	ldr	r3, [pc, #404]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10b      	bne.n	8000b7e <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b66:	4b64      	ldr	r3, [pc, #400]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a63      	ldr	r2, [pc, #396]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b61      	ldr	r3, [pc, #388]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a5d      	ldr	r2, [pc, #372]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000b96:	23c0      	movs	r3, #192	@ 0xc0
 8000b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb2:	f003 fa5f 	bl	8004074 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000bb6:	4b54      	ldr	r3, [pc, #336]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bb8:	4a54      	ldr	r2, [pc, #336]	@ (8000d0c <HAL_ADC_MspInit+0x2ec>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000bbc:	4b52      	ldr	r3, [pc, #328]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bbe:	2224      	movs	r2, #36	@ 0x24
 8000bc0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b51      	ldr	r3, [pc, #324]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b4e      	ldr	r3, [pc, #312]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bda:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000be4:	4b48      	ldr	r3, [pc, #288]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000be6:	2220      	movs	r2, #32
 8000be8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000bea:	4b47      	ldr	r3, [pc, #284]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000bf0:	4845      	ldr	r0, [pc, #276]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bf2:	f002 ffcd 	bl	8003b90 <HAL_DMA_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000bfc:	f000 fc84 	bl	8001508 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a41      	ldr	r2, [pc, #260]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000c04:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c06:	4a40      	ldr	r2, [pc, #256]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c0c:	e16e      	b.n	8000eec <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a3f      	ldr	r2, [pc, #252]	@ (8000d10 <HAL_ADC_MspInit+0x2f0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	f040 8085 	bne.w	8000d24 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000c24:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 faf4 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000c36:	f000 fc67 	bl	8001508 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c3a:	4b36      	ldr	r3, [pc, #216]	@ (8000d14 <HAL_ADC_MspInit+0x2f4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a34      	ldr	r2, [pc, #208]	@ (8000d14 <HAL_ADC_MspInit+0x2f4>)
 8000c42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000c44:	4b33      	ldr	r3, [pc, #204]	@ (8000d14 <HAL_ADC_MspInit+0x2f4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10b      	bne.n	8000c64 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4a29      	ldr	r2, [pc, #164]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b24      	ldr	r3, [pc, #144]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c68:	4a23      	ldr	r2, [pc, #140]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c94:	4619      	mov	r1, r3
 8000c96:	4820      	ldr	r0, [pc, #128]	@ (8000d18 <HAL_ADC_MspInit+0x2f8>)
 8000c98:	f003 f9ec 	bl	8004074 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000c9e:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <HAL_ADC_MspInit+0x300>)
 8000ca0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000ca4:	2225      	movs	r2, #37	@ 0x25
 8000ca6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000ccc:	2220      	movs	r2, #32
 8000cce:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000cd6:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cd8:	f002 ff5a 	bl	8003b90 <HAL_DMA_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000ce2:	f000 fc11 	bl	8001508 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cea:	655a      	str	r2, [r3, #84]	@ 0x54
 8000cec:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000cf2:	e0fb      	b.n	8000eec <HAL_ADC_MspInit+0x4cc>
 8000cf4:	20000428 	.word	0x20000428
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	20000248 	.word	0x20000248
 8000d00:	40020008 	.word	0x40020008
 8000d04:	50000100 	.word	0x50000100
 8000d08:	200002a8 	.word	0x200002a8
 8000d0c:	4002001c 	.word	0x4002001c
 8000d10:	50000400 	.word	0x50000400
 8000d14:	2000042c 	.word	0x2000042c
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	20000308 	.word	0x20000308
 8000d20:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a72      	ldr	r2, [pc, #456]	@ (8000ef4 <HAL_ADC_MspInit+0x4d4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d16c      	bne.n	8000e08 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d32:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d38:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fa6a 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000d4a:	f000 fbdd 	bl	8001508 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a68      	ldr	r2, [pc, #416]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000d56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000d58:	4b67      	ldr	r3, [pc, #412]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d10b      	bne.n	8000d78 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d60:	4b66      	ldr	r3, [pc, #408]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	4a65      	ldr	r2, [pc, #404]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6c:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b60      	ldr	r3, [pc, #384]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7c:	4a5f      	ldr	r2, [pc, #380]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d84:	4b5d      	ldr	r3, [pc, #372]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000da8:	4619      	mov	r1, r3
 8000daa:	4855      	ldr	r0, [pc, #340]	@ (8000f00 <HAL_ADC_MspInit+0x4e0>)
 8000dac:	f003 f962 	bl	8004074 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000db0:	4b54      	ldr	r3, [pc, #336]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000db2:	4a55      	ldr	r2, [pc, #340]	@ (8000f08 <HAL_ADC_MspInit+0x4e8>)
 8000db4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000db6:	4b53      	ldr	r3, [pc, #332]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000db8:	2226      	movs	r2, #38	@ 0x26
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbc:	4b51      	ldr	r3, [pc, #324]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc2:	4b50      	ldr	r3, [pc, #320]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dca:	2280      	movs	r2, #128	@ 0x80
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dce:	4b4d      	ldr	r3, [pc, #308]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ddc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000dde:	4b49      	ldr	r3, [pc, #292]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000de0:	2220      	movs	r2, #32
 8000de2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000de4:	4b47      	ldr	r3, [pc, #284]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000dea:	4846      	ldr	r0, [pc, #280]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dec:	f002 fed0 	bl	8003b90 <HAL_DMA_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000df6:	f000 fb87 	bl	8001508 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a41      	ldr	r2, [pc, #260]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dfe:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e00:	4a40      	ldr	r2, [pc, #256]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e06:	e071      	b.n	8000eec <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f0c <HAL_ADC_MspInit+0x4ec>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d16c      	bne.n	8000eec <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 f9f8 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000e2e:	f000 fb6b 	bl	8001508 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e32:	4b31      	ldr	r3, [pc, #196]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000e3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d10b      	bne.n	8000e5c <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000e44:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	4a2c      	ldr	r2, [pc, #176]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e50:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	4a26      	ldr	r2, [pc, #152]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f003 f8ef 	bl	8004074 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000e98:	4a1e      	ldr	r2, [pc, #120]	@ (8000f14 <HAL_ADC_MspInit+0x4f4>)
 8000e9a:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000e9e:	2227      	movs	r2, #39	@ 0x27
 8000ea0:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eba:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000ed0:	480f      	ldr	r0, [pc, #60]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ed2:	f002 fe5d 	bl	8003b90 <HAL_DMA_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000edc:	f000 fb14 	bl	8001508 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ee4:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000eec:	bf00      	nop
 8000eee:	3798      	adds	r7, #152	@ 0x98
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	50000500 	.word	0x50000500
 8000ef8:	2000042c 	.word	0x2000042c
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	20000368 	.word	0x20000368
 8000f08:	40020044 	.word	0x40020044
 8000f0c:	50000600 	.word	0x50000600
 8000f10:	200003c8 	.word	0x200003c8
 8000f14:	40020058 	.word	0x40020058

08000f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f1e:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <MX_DMA_Init+0x60>)
 8000f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f22:	4a15      	ldr	r2, [pc, #84]	@ (8000f78 <MX_DMA_Init+0x60>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <MX_DMA_Init+0x60>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <MX_DMA_Init+0x60>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f78 <MX_DMA_Init+0x60>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <MX_DMA_Init+0x60>)
 8000f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2010      	movs	r0, #16
 8000f54:	f002 fde7 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f58:	2010      	movs	r0, #16
 8000f5a:	f002 fdfe 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2011      	movs	r0, #17
 8000f64:	f002 fddf 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f68:	2011      	movs	r0, #17
 8000f6a:	f002 fdf6 	bl	8003b5a <HAL_NVIC_EnableIRQ>

}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <vEncoderSystemInit>:

int* pLeftMotorCount;
int* pRightMotorCount;

//void vEncoderSystemInit(int , int pRightMotorCount) {
void vEncoderSystemInit(int *leftMotorCount, int *rightMotorCount) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]

	pLeftMotorCount = leftMotorCount;
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <vEncoderSystemInit+0x30>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6013      	str	r3, [r2, #0]
	pRightMotorCount = rightMotorCount;
 8000f8c:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <vEncoderSystemInit+0x34>)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	6013      	str	r3, [r2, #0]

	HAL_TIM_IC_Start_IT(&LEFT_ENCODER_TIM, ENCODER_CHANNEL);
 8000f92:	2100      	movs	r1, #0
 8000f94:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <vEncoderSystemInit+0x38>)
 8000f96:	f004 fe99 	bl	8005ccc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&RIGHT_ENCODER_TIM, ENCODER_CHANNEL);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <vEncoderSystemInit+0x3c>)
 8000f9e:	f004 fe95 	bl	8005ccc <HAL_TIM_IC_Start_IT>


}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000438 	.word	0x20000438
 8000fb0:	2000043c 	.word	0x2000043c
 8000fb4:	2000059c 	.word	0x2000059c
 8000fb8:	200005e8 	.word	0x200005e8

08000fbc <vEncoderSystemExecuteMeasurement>:
void vEncoderSystemExecuteMeasurement(){
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	   // Tempo de amostragem em segundos
	    //float tempo_amostragem_s = tempo_amostragem_ms / 1000.0;

	    // Calcula o RPM
	    //motor 80:1 e sao duas pas logo para uma rotacao temos 160 do encoder
	    rpm_d = (contador_encoder * 60) / (160 * tempo_amostragem_s);
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <vEncoderSystemExecuteMeasurement+0x70>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <vEncoderSystemExecuteMeasurement+0x74>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	015b      	lsls	r3, r3, #5
 8000fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fde:	4a15      	ldr	r2, [pc, #84]	@ (8001034 <vEncoderSystemExecuteMeasurement+0x78>)
 8000fe0:	6013      	str	r3, [r2, #0]
	    rpm_e = (contador_encoder2 * 60) / (160 * tempo_amostragem_s);
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <vEncoderSystemExecuteMeasurement+0x7c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <vEncoderSystemExecuteMeasurement+0x74>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	015b      	lsls	r3, r3, #5
 8000ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001000:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <vEncoderSystemExecuteMeasurement+0x80>)
 8001002:	6013      	str	r3, [r2, #0]
	    // Resetar o contador para a próxima amostragem
	    contador_encoder = 0;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <vEncoderSystemExecuteMeasurement+0x70>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
	    contador_encoder2 = 0;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <vEncoderSystemExecuteMeasurement+0x7c>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
	    *pLeftMotorCount = 0;
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <vEncoderSystemExecuteMeasurement+0x84>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
	    *pRightMotorCount = 0;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <vEncoderSystemExecuteMeasurement+0x88>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200004a8 	.word	0x200004a8
 8001030:	20000000 	.word	0x20000000
 8001034:	20000430 	.word	0x20000430
 8001038:	200004ac 	.word	0x200004ac
 800103c:	20000434 	.word	0x20000434
 8001040:	20000438 	.word	0x20000438
 8001044:	2000043c 	.word	0x2000043c

08001048 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b66      	ldr	r3, [pc, #408]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	4a65      	ldr	r2, [pc, #404]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106a:	4b63      	ldr	r3, [pc, #396]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001076:	4b60      	ldr	r3, [pc, #384]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a5f      	ldr	r2, [pc, #380]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b5a      	ldr	r3, [pc, #360]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a59      	ldr	r2, [pc, #356]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b57      	ldr	r3, [pc, #348]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b54      	ldr	r3, [pc, #336]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a53      	ldr	r2, [pc, #332]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b51      	ldr	r3, [pc, #324]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4b4e      	ldr	r3, [pc, #312]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a4d      	ldr	r2, [pc, #308]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b4b      	ldr	r3, [pc, #300]	@ (80011f8 <MX_GPIO_Init+0x1b0>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e0:	f003 f94a 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 80010ea:	4844      	ldr	r0, [pc, #272]	@ (80011fc <MX_GPIO_Init+0x1b4>)
 80010ec:	f003 f944 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 80010f0:	f242 33a0 	movw	r3, #9120	@ 0x23a0
 80010f4:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	483e      	ldr	r0, [pc, #248]	@ (8001200 <MX_GPIO_Init+0x1b8>)
 8001108:	f002 ffb4 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 800110c:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f002 ffa4 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 800112c:	2304      	movs	r3, #4
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800113c:	2303      	movs	r3, #3
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	482d      	ldr	r0, [pc, #180]	@ (80011fc <MX_GPIO_Init+0x1b4>)
 8001148:	f002 ff94 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 800114c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800115e:	2307      	movs	r3, #7
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4824      	ldr	r0, [pc, #144]	@ (80011fc <MX_GPIO_Init+0x1b4>)
 800116a:	f002 ff83 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 800116e:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	481d      	ldr	r0, [pc, #116]	@ (80011fc <MX_GPIO_Init+0x1b4>)
 8001188:	f002 ff74 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 800118c:	2340      	movs	r3, #64	@ 0x40
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800119c:	2302      	movs	r3, #2
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4816      	ldr	r0, [pc, #88]	@ (8001200 <MX_GPIO_Init+0x1b8>)
 80011a8:	f002 ff64 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 80011ac:	2304      	movs	r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4810      	ldr	r0, [pc, #64]	@ (8001204 <MX_GPIO_Init+0x1bc>)
 80011c2:	f002 ff57 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 80011c6:	2340      	movs	r3, #64	@ 0x40
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4808      	ldr	r0, [pc, #32]	@ (80011fc <MX_GPIO_Init+0x1b4>)
 80011dc:	f002 ff4a 	bl	8004074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2028      	movs	r0, #40	@ 0x28
 80011e6:	f002 fc9e 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ea:	2028      	movs	r0, #40	@ 0x28
 80011ec:	f002 fcb5 	bl	8003b5a <HAL_NVIC_EnableIRQ>

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800
 8001204:	48000c00 	.word	0x48000c00

08001208 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_I2C2_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	@ (8001280 <MX_I2C2_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_I2C2_Init+0x74>)
 8001214:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <MX_I2C2_Init+0x7c>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_I2C2_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_I2C2_Init+0x74>)
 8001220:	2201      	movs	r2, #1
 8001222:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_I2C2_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_I2C2_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C2_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C2_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C2_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001242:	480e      	ldr	r0, [pc, #56]	@ (800127c <MX_I2C2_Init+0x74>)
 8001244:	f003 f8d3 	bl	80043ee <HAL_I2C_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800124e:	f000 f95b 	bl	8001508 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4809      	ldr	r0, [pc, #36]	@ (800127c <MX_I2C2_Init+0x74>)
 8001256:	f003 f965 	bl	8004524 <HAL_I2CEx_ConfigAnalogFilter>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001260:	f000 f952 	bl	8001508 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_I2C2_Init+0x74>)
 8001268:	f003 f9a7 	bl	80045ba <HAL_I2CEx_ConfigDigitalFilter>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 f949 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000440 	.word	0x20000440
 8001280:	40005800 	.word	0x40005800
 8001284:	30a0a7fb 	.word	0x30a0a7fb

08001288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0a0      	sub	sp, #128	@ 0x80
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	2254      	movs	r2, #84	@ 0x54
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f007 f83b 	bl	8008324 <memset>
  if(i2cHandle->Instance==I2C2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001368 <HAL_I2C_MspInit+0xe0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d153      	bne.n	8001360 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 ffa7 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f000 f91a 	bl	8001508 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	4b25      	ldr	r3, [pc, #148]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d8:	4a24      	ldr	r2, [pc, #144]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e0:	4b22      	ldr	r3, [pc, #136]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f0:	4a1e      	ldr	r2, [pc, #120]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f8:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 8001304:	2310      	movs	r3, #16
 8001306:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001308:	2312      	movs	r3, #18
 800130a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001314:	2304      	movs	r3, #4
 8001316:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800131c:	4619      	mov	r1, r3
 800131e:	4814      	ldr	r0, [pc, #80]	@ (8001370 <HAL_I2C_MspInit+0xe8>)
 8001320:	f002 fea8 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8001324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001328:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132a:	2312      	movs	r3, #18
 800132c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001336:	2304      	movs	r3, #4
 8001338:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001344:	f002 fe96 	bl	8004074 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	4a07      	ldr	r2, [pc, #28]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 800134e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001352:	6593      	str	r3, [r2, #88]	@ 0x58
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_I2C_MspInit+0xe4>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001360:	bf00      	nop
 8001362:	3780      	adds	r7, #128	@ 0x80
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40005800 	.word	0x40005800
 800136c:	40021000 	.word	0x40021000
 8001370:	48000800 	.word	0x48000800

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fe11 	bl	8001f9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f832 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f7ff fe62 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8001384:	f7ff fdc8 	bl	8000f18 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001388:	f000 fce2 	bl	8001d50 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800138c:	f7ff f916 	bl	80005bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001390:	f7ff f98c 	bl	80006ac <MX_ADC2_Init>
  MX_ADC3_Init();
 8001394:	f7ff fa00 	bl	8000798 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001398:	f000 f964 	bl	8001664 <MX_TIM1_Init>
  MX_TIM16_Init();
 800139c:	f000 fb02 	bl	80019a4 <MX_TIM16_Init>
  MX_TIM4_Init();
 80013a0:	f000 fa1c 	bl	80017dc <MX_TIM4_Init>
  MX_ADC4_Init();
 80013a4:	f7ff fa70 	bl	8000888 <MX_ADC4_Init>
  MX_ADC5_Init();
 80013a8:	f7ff fad4 	bl	8000954 <MX_ADC5_Init>
  MX_I2C2_Init();
 80013ac:	f7ff ff2c 	bl	8001208 <MX_I2C2_Init>
  MX_TIM8_Init();
 80013b0:	f000 fa64 	bl	800187c <MX_TIM8_Init>
  MX_TIM17_Init();
 80013b4:	f000 fb40 	bl	8001a38 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERNAL_CLOCK);
 80013b8:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <main+0x60>)
 80013ba:	f004 fa43 	bl	8005844 <HAL_TIM_Base_Start_IT>
  vPowerTrainSystemInit();
 80013be:	f7ff f8eb 	bl	8000598 <vPowerTrainSystemInit>
 // vEncoderSystemInit();
  vEncoderSystemInit(&leftMotorCount, &rightMotorCount);
 80013c2:	4905      	ldr	r1, [pc, #20]	@ (80013d8 <main+0x64>)
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <main+0x68>)
 80013c6:	f7ff fdd9 	bl	8000f7c <vEncoderSystemInit>

  vLineSensorSystemInit(pLineSensorsReadings);
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <main+0x6c>)
 80013cc:	f7ff f89c 	bl	8000508 <vLineSensorSystemInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <main+0x5c>
 80013d4:	20000504 	.word	0x20000504
 80013d8:	200004b4 	.word	0x200004b4
 80013dc:	200004b0 	.word	0x200004b0
 80013e0:	20000494 	.word	0x20000494

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b094      	sub	sp, #80	@ 0x50
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	2238      	movs	r2, #56	@ 0x38
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 ff96 	bl	8008324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001406:	2000      	movs	r0, #0
 8001408:	f003 f924 	bl	8004654 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001416:	2340      	movs	r3, #64	@ 0x40
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141e:	2302      	movs	r3, #2
 8001420:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001422:	2304      	movs	r3, #4
 8001424:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001426:	2355      	movs	r3, #85	@ 0x55
 8001428:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142a:	2302      	movs	r3, #2
 800142c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142e:	2302      	movs	r3, #2
 8001430:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	4618      	mov	r0, r3
 800143c:	f003 f9be 	bl	80047bc <HAL_RCC_OscConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001446:	f000 f85f 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144a:	230f      	movs	r3, #15
 800144c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144e:	2303      	movs	r3, #3
 8001450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2104      	movs	r1, #4
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fcbc 	bl	8004de0 <HAL_RCC_ClockConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800146e:	f000 f84b 	bl	8001508 <Error_Handler>
  }
}
 8001472:	bf00      	nop
 8001474:	3750      	adds	r7, #80	@ 0x50
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a10      	ldr	r2, [pc, #64]	@ (80014cc <HAL_TIM_IC_CaptureCallback+0x50>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d109      	bne.n	80014a2 <HAL_TIM_IC_CaptureCallback+0x26>
    	(*pRightMotorCount)++;
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	3201      	adds	r2, #1
 8001496:	601a      	str	r2, [r3, #0]
        contador_encoder++;
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_TIM_IC_CaptureCallback+0x58>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <HAL_TIM_IC_CaptureCallback+0x58>)
 80014a0:	6013      	str	r3, [r2, #0]
    } if (htim->Instance == TIM16) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0c      	ldr	r2, [pc, #48]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d109      	bne.n	80014c0 <HAL_TIM_IC_CaptureCallback+0x44>
    	(*pLeftMotorCount)++;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	3201      	adds	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
    	contador_encoder2++;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_TIM_IC_CaptureCallback+0x64>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <HAL_TIM_IC_CaptureCallback+0x64>)
 80014be:	6013      	str	r3, [r2, #0]
    }
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40014800 	.word	0x40014800
 80014d0:	2000043c 	.word	0x2000043c
 80014d4:	200004a8 	.word	0x200004a8
 80014d8:	40014400 	.word	0x40014400
 80014dc:	20000438 	.word	0x20000438
 80014e0:	200004ac 	.word	0x200004ac

080014e4 <HAL_TIM_PeriodElapsedCallback>:
// chama a funcao de calcular o rpm a cada 1 min
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a04      	ldr	r2, [pc, #16]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_TIM_PeriodElapsedCallback+0x16>
    	vEncoderSystemExecuteMeasurement();
 80014f6:	f7ff fd61 	bl	8000fbc <vEncoderSystemExecuteMeasurement>
    }
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40000800 	.word	0x40000800

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <Error_Handler+0x8>

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <HAL_MspInit+0x44>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151e:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <HAL_MspInit+0x44>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6613      	str	r3, [r2, #96]	@ 0x60
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_MspInit+0x44>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_MspInit+0x44>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_MspInit+0x44>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	6593      	str	r3, [r2, #88]	@ 0x58
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_MspInit+0x44>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800154a:	f003 f927 	bl	800479c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <NMI_Handler+0x4>

08001564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <MemManage_Handler+0x4>

08001574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <UsageFault_Handler+0x4>

08001584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b2:	f000 fd47 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <DMA1_Channel6_IRQHandler+0x10>)
 80015c2:	f002 fc08 	bl	8003dd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200006c8 	.word	0x200006c8

080015d0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <DMA1_Channel7_IRQHandler+0x10>)
 80015d6:	f002 fbfe 	bl	8003dd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000728 	.word	0x20000728

080015e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80015ea:	f004 fcbf 	bl	8005f6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80015ee:	4803      	ldr	r0, [pc, #12]	@ (80015fc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80015f0:	f004 fcbc 	bl	8005f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200004b8 	.word	0x200004b8
 80015fc:	2000059c 	.word	0x2000059c

08001600 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001606:	f004 fcb1 	bl	8005f6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800160a:	4803      	ldr	r0, [pc, #12]	@ (8001618 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800160c:	f004 fcae 	bl	8005f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200004b8 	.word	0x200004b8
 8001618:	200005e8 	.word	0x200005e8

0800161c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <TIM4_IRQHandler+0x10>)
 8001622:	f004 fca3 	bl	8005f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000504 	.word	0x20000504

08001630 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001634:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001638:	f002 feb6 	bl	80043a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b09c      	sub	sp, #112	@ 0x70
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001684:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2234      	movs	r2, #52	@ 0x34
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 fe40 	bl	8008324 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a4:	4b4b      	ldr	r3, [pc, #300]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016a6:	4a4c      	ldr	r2, [pc, #304]	@ (80017d8 <MX_TIM1_Init+0x174>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80016aa:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016ac:	2210      	movs	r2, #16
 80016ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b48      	ldr	r3, [pc, #288]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80016b6:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c4:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b42      	ldr	r3, [pc, #264]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016d0:	4840      	ldr	r0, [pc, #256]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016d2:	f003 ffef 	bl	80056b4 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016dc:	f7ff ff14 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016ea:	4619      	mov	r1, r3
 80016ec:	4839      	ldr	r0, [pc, #228]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016ee:	f004 ff3d 	bl	800656c <HAL_TIM_ConfigClockSource>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016f8:	f7ff ff06 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016fc:	4835      	ldr	r0, [pc, #212]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80016fe:	f004 f919 	bl	8005934 <HAL_TIM_PWM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001708:	f7ff fefe 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001718:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800171c:	4619      	mov	r1, r3
 800171e:	482d      	ldr	r0, [pc, #180]	@ (80017d4 <MX_TIM1_Init+0x170>)
 8001720:	f005 fe22 	bl	8007368 <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800172a:	f7ff feed 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172e:	2360      	movs	r3, #96	@ 0x60
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800173a:	2300      	movs	r3, #0
 800173c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800174e:	2200      	movs	r2, #0
 8001750:	4619      	mov	r1, r3
 8001752:	4820      	ldr	r0, [pc, #128]	@ (80017d4 <MX_TIM1_Init+0x170>)
 8001754:	f004 fdf6 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800175e:	f7ff fed3 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001762:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001766:	2204      	movs	r2, #4
 8001768:	4619      	mov	r1, r3
 800176a:	481a      	ldr	r0, [pc, #104]	@ (80017d4 <MX_TIM1_Init+0x170>)
 800176c:	f004 fdea 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001776:	f7ff fec7 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800178e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001792:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	4807      	ldr	r0, [pc, #28]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80017b8:	f005 fe6c 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80017c2:	f7ff fea1 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017c6:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <MX_TIM1_Init+0x170>)
 80017c8:	f000 fa64 	bl	8001c94 <HAL_TIM_MspPostInit>

}
 80017cc:	bf00      	nop
 80017ce:	3770      	adds	r7, #112	@ 0x70
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200004b8 	.word	0x200004b8
 80017d8:	40012c00 	.word	0x40012c00

080017dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <MX_TIM4_Init+0x98>)
 80017fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001878 <MX_TIM4_Init+0x9c>)
 80017fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2599;
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <MX_TIM4_Init+0x98>)
 8001802:	f640 2227 	movw	r2, #2599	@ 0xa27
 8001806:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <MX_TIM4_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65383;
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <MX_TIM4_Init+0x98>)
 8001810:	f64f 7267 	movw	r2, #65383	@ 0xff67
 8001814:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <MX_TIM4_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <MX_TIM4_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_TIM4_Init+0x98>)
 8001824:	f003 ff46 	bl	80056b4 <HAL_TIM_Base_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800182e:	f7ff fe6b 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001836:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	480d      	ldr	r0, [pc, #52]	@ (8001874 <MX_TIM4_Init+0x98>)
 8001840:	f004 fe94 	bl	800656c <HAL_TIM_ConfigClockSource>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800184a:	f7ff fe5d 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <MX_TIM4_Init+0x98>)
 800185c:	f005 fd84 	bl	8007368 <HAL_TIMEx_MasterConfigSynchronization>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001866:	f7ff fe4f 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000504 	.word	0x20000504
 8001878:	40000800 	.word	0x40000800

0800187c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b098      	sub	sp, #96	@ 0x60
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001882:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2234      	movs	r2, #52	@ 0x34
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f006 fd3b 	bl	8008324 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018ae:	4b3b      	ldr	r3, [pc, #236]	@ (800199c <MX_TIM8_Init+0x120>)
 80018b0:	4a3b      	ldr	r2, [pc, #236]	@ (80019a0 <MX_TIM8_Init+0x124>)
 80018b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018b4:	4b39      	ldr	r3, [pc, #228]	@ (800199c <MX_TIM8_Init+0x120>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b38      	ldr	r3, [pc, #224]	@ (800199c <MX_TIM8_Init+0x120>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018c0:	4b36      	ldr	r3, [pc, #216]	@ (800199c <MX_TIM8_Init+0x120>)
 80018c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b34      	ldr	r3, [pc, #208]	@ (800199c <MX_TIM8_Init+0x120>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018ce:	4b33      	ldr	r3, [pc, #204]	@ (800199c <MX_TIM8_Init+0x120>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b31      	ldr	r3, [pc, #196]	@ (800199c <MX_TIM8_Init+0x120>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018da:	4830      	ldr	r0, [pc, #192]	@ (800199c <MX_TIM8_Init+0x120>)
 80018dc:	f004 f82a 	bl	8005934 <HAL_TIM_PWM_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80018e6:	f7ff fe0f 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018fa:	4619      	mov	r1, r3
 80018fc:	4827      	ldr	r0, [pc, #156]	@ (800199c <MX_TIM8_Init+0x120>)
 80018fe:	f005 fd33 	bl	8007368 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001908:	f7ff fdfe 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190c:	2360      	movs	r3, #96	@ 0x60
 800190e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001928:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	481a      	ldr	r0, [pc, #104]	@ (800199c <MX_TIM8_Init+0x120>)
 8001932:	f004 fd07 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800193c:	f7ff fde4 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001958:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001966:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800196a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001970:	2300      	movs	r3, #0
 8001972:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4807      	ldr	r0, [pc, #28]	@ (800199c <MX_TIM8_Init+0x120>)
 800197e:	f005 fd89 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001988:	f7ff fdbe 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <MX_TIM8_Init+0x120>)
 800198e:	f000 f981 	bl	8001c94 <HAL_TIM_MspPostInit>

}
 8001992:	bf00      	nop
 8001994:	3760      	adds	r7, #96	@ 0x60
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000550 	.word	0x20000550
 80019a0:	40013400 	.word	0x40013400

080019a4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80019aa:	463b      	mov	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a34 <MX_TIM16_Init+0x90>)
 80019ba:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019be:	22a9      	movs	r2, #169	@ 0xa9
 80019c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d0:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019e2:	4813      	ldr	r0, [pc, #76]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019e4:	f003 fe66 	bl	80056b4 <HAL_TIM_Base_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 80019ee:	f7ff fd8b 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80019f2:	480f      	ldr	r0, [pc, #60]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 80019f4:	f004 f908 	bl	8005c08 <HAL_TIM_IC_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80019fe:	f7ff fd83 	bl	8001508 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a06:	2301      	movs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_TIM16_Init+0x8c>)
 8001a1a:	f004 fbf6 	bl	800620a <HAL_TIM_IC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001a24:	f7ff fd70 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000059c 	.word	0x2000059c
 8001a34:	40014400 	.word	0x40014400

08001a38 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <MX_TIM17_Init+0x90>)
 8001a4e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a52:	22a9      	movs	r2, #169	@ 0xa9
 8001a54:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a62:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a76:	4813      	ldr	r0, [pc, #76]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a78:	f003 fe1c 	bl	80056b4 <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8001a82:	f7ff fd41 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001a86:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001a88:	f004 f8be 	bl	8005c08 <HAL_TIM_IC_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001a92:	f7ff fd39 	bl	8001508 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <MX_TIM17_Init+0x8c>)
 8001aae:	f004 fbac 	bl	800620a <HAL_TIM_IC_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8001ab8:	f7ff fd26 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200005e8 	.word	0x200005e8
 8001ac8:	40014800 	.word	0x40014800

08001acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08e      	sub	sp, #56	@ 0x38
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a54      	ldr	r2, [pc, #336]	@ (8001c3c <HAL_TIM_Base_MspInit+0x170>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d11c      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aee:	4b54      	ldr	r3, [pc, #336]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af2:	4a53      	ldr	r2, [pc, #332]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001af4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001af8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001afa:	4b51      	ldr	r3, [pc, #324]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2019      	movs	r0, #25
 8001b0c:	f002 f80b 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b10:	2019      	movs	r0, #25
 8001b12:	f002 f822 	bl	8003b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201a      	movs	r0, #26
 8001b1c:	f002 f803 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001b20:	201a      	movs	r0, #26
 8001b22:	f002 f81a 	bl	8003b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001b26:	e084      	b.n	8001c32 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a45      	ldr	r2, [pc, #276]	@ (8001c44 <HAL_TIM_Base_MspInit+0x178>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d114      	bne.n	8001b5c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b32:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	4a42      	ldr	r2, [pc, #264]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b3e:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	201e      	movs	r0, #30
 8001b50:	f001 ffe9 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b54:	201e      	movs	r0, #30
 8001b56:	f002 f800 	bl	8003b5a <HAL_NVIC_EnableIRQ>
}
 8001b5a:	e06a      	b.n	8001c32 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM16)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a39      	ldr	r2, [pc, #228]	@ (8001c48 <HAL_TIM_Base_MspInit+0x17c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d130      	bne.n	8001bc8 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b66:	4b36      	ldr	r3, [pc, #216]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6a:	4a35      	ldr	r2, [pc, #212]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	4a2f      	ldr	r2, [pc, #188]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8001b96:	2310      	movs	r3, #16
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4826      	ldr	r0, [pc, #152]	@ (8001c4c <HAL_TIM_Base_MspInit+0x180>)
 8001bb2:	f002 fa5f 	bl	8004074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2019      	movs	r0, #25
 8001bbc:	f001 ffb3 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bc0:	2019      	movs	r0, #25
 8001bc2:	f001 ffca 	bl	8003b5a <HAL_NVIC_EnableIRQ>
}
 8001bc6:	e034      	b.n	8001c32 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM17)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a20      	ldr	r2, [pc, #128]	@ (8001c50 <HAL_TIM_Base_MspInit+0x184>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12f      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_TIM_Base_MspInit+0x174>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8001c02:	2320      	movs	r3, #32
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001c12:	230a      	movs	r3, #10
 8001c14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480b      	ldr	r0, [pc, #44]	@ (8001c4c <HAL_TIM_Base_MspInit+0x180>)
 8001c1e:	f002 fa29 	bl	8004074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	201a      	movs	r0, #26
 8001c28:	f001 ff7d 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c2c:	201a      	movs	r0, #26
 8001c2e:	f001 ff94 	bl	8003b5a <HAL_NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3738      	adds	r7, #56	@ 0x38
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40000800 	.word	0x40000800
 8001c48:	40014400 	.word	0x40014400
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	40014800 	.word	0x40014800

08001c54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <HAL_TIM_PWM_MspInit+0x38>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10b      	bne.n	8001c7e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6a:	4a09      	ldr	r2, [pc, #36]	@ (8001c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40013400 	.word	0x40013400
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <HAL_TIM_MspPostInit+0xac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <HAL_TIM_MspPostInit+0xb0>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <HAL_TIM_MspPostInit+0xb0>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_TIM_MspPostInit+0xb0>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4817      	ldr	r0, [pc, #92]	@ (8001d48 <HAL_TIM_MspPostInit+0xb4>)
 8001cea:	f002 f9c3 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001cee:	e022      	b.n	8001d36 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a15      	ldr	r2, [pc, #84]	@ (8001d4c <HAL_TIM_MspPostInit+0xb8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d11d      	bne.n	8001d36 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_TIM_MspPostInit+0xb0>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	4a11      	ldr	r2, [pc, #68]	@ (8001d44 <HAL_TIM_MspPostInit+0xb0>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d06:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <HAL_TIM_MspPostInit+0xb0>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001d24:	2302      	movs	r3, #2
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d32:	f002 f99f 	bl	8004074 <HAL_GPIO_Init>
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48000800 	.word	0x48000800
 8001d4c:	40013400 	.word	0x40013400

08001d50 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d54:	4b21      	ldr	r3, [pc, #132]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d56:	4a22      	ldr	r2, [pc, #136]	@ (8001de0 <MX_LPUART1_UART_Init+0x90>)
 8001d58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d80:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d92:	4812      	ldr	r0, [pc, #72]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001d94:	f005 fc58 	bl	8007648 <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f7ff fbb3 	bl	8001508 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	480d      	ldr	r0, [pc, #52]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001da6:	f006 f9f3 	bl	8008190 <HAL_UARTEx_SetTxFifoThreshold>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001db0:	f7ff fbaa 	bl	8001508 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db4:	2100      	movs	r1, #0
 8001db6:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001db8:	f006 fa28 	bl	800820c <HAL_UARTEx_SetRxFifoThreshold>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001dc2:	f7ff fba1 	bl	8001508 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <MX_LPUART1_UART_Init+0x8c>)
 8001dc8:	f006 f9a9 	bl	800811e <HAL_UARTEx_DisableFifoMode>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001dd2:	f7ff fb99 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000634 	.word	0x20000634
 8001de0:	40008000 	.word	0x40008000

08001de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09e      	sub	sp, #120	@ 0x78
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	2254      	movs	r2, #84	@ 0x54
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f006 fa8d 	bl	8008324 <memset>
  if(uartHandle->Instance==LPUART1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a49      	ldr	r2, [pc, #292]	@ (8001f34 <HAL_UART_MspInit+0x150>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	f040 808a 	bne.w	8001f2a <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e16:	2320      	movs	r3, #32
 8001e18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 f9f8 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e2e:	f7ff fb6b 	bl	8001508 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e32:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <HAL_UART_MspInit+0x154>)
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	4a40      	ldr	r2, [pc, #256]	@ (8001f38 <HAL_UART_MspInit+0x154>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f38 <HAL_UART_MspInit+0x154>)
 8001e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <HAL_UART_MspInit+0x154>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f38 <HAL_UART_MspInit+0x154>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e56:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <HAL_UART_MspInit+0x154>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001e62:	230c      	movs	r3, #12
 8001e64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e72:	230c      	movs	r3, #12
 8001e74:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e80:	f002 f8f8 	bl	8004074 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001e86:	4a2e      	ldr	r2, [pc, #184]	@ (8001f40 <HAL_UART_MspInit+0x15c>)
 8001e88:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001e8c:	2222      	movs	r2, #34	@ 0x22
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e90:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea2:	4b26      	ldr	r3, [pc, #152]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001eae:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb4:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001eba:	4820      	ldr	r0, [pc, #128]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001ebc:	f001 fe68 	bl	8003b90 <HAL_DMA_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001ec6:	f7ff fb1f 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f3c <HAL_UART_MspInit+0x158>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001eda:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <HAL_UART_MspInit+0x164>)
 8001edc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001ede:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001ee0:	2223      	movs	r2, #35	@ 0x23
 8001ee2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eea:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f08:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001f0e:	480d      	ldr	r0, [pc, #52]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001f10:	f001 fe3e 	bl	8003b90 <HAL_DMA_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001f1a:	f7ff faf5 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a08      	ldr	r2, [pc, #32]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001f22:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f24:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_UART_MspInit+0x160>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3778      	adds	r7, #120	@ 0x78
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40008000 	.word	0x40008000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	200006c8 	.word	0x200006c8
 8001f40:	4002006c 	.word	0x4002006c
 8001f44:	20000728 	.word	0x20000728
 8001f48:	40020080 	.word	0x40020080

08001f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f4c:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f50:	f7ff fb76 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <LoopForever+0xe>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <LoopForever+0x16>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f006 f9db 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f7e:	f7ff f9f9 	bl	8001374 <main>

08001f82 <LoopForever>:

LoopForever:
    b LoopForever
 8001f82:	e7fe      	b.n	8001f82 <LoopForever>
  ldr   r0, =_estack
 8001f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f90:	080083e4 	.word	0x080083e4
  ldr r2, =_sbss
 8001f94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f98:	2000078c 	.word	0x2000078c

08001f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC1_2_IRQHandler>

08001f9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f001 fdb1 	bl	8003b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f80e 	bl	8001fd0 <HAL_InitTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	e001      	b.n	8001fc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc0:	f7ff faa8 	bl	8001514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fc4:	79fb      	ldrb	r3, [r7, #7]

}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <HAL_InitTick+0x68>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d022      	beq.n	800202a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fe4:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_InitTick+0x6c>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <HAL_InitTick+0x68>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 fdbc 	bl	8003b76 <HAL_SYSTICK_Config>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10f      	bne.n	8002024 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b0f      	cmp	r3, #15
 8002008:	d809      	bhi.n	800201e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200a:	2200      	movs	r2, #0
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	f04f 30ff 	mov.w	r0, #4294967295
 8002012:	f001 fd88 	bl	8003b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002016:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <HAL_InitTick+0x70>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e007      	b.n	800202e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e004      	b.n	800202e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e001      	b.n	800202e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	2000000c 	.word	0x2000000c
 800203c:	20000004 	.word	0x20000004
 8002040:	20000008 	.word	0x20000008

08002044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_IncTick+0x1c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_IncTick+0x20>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4413      	add	r3, r2
 8002052:	4a03      	ldr	r2, [pc, #12]	@ (8002060 <HAL_IncTick+0x1c>)
 8002054:	6013      	str	r3, [r2, #0]
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000788 	.word	0x20000788
 8002064:	2000000c 	.word	0x2000000c

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000788 	.word	0x20000788

08002080 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	609a      	str	r2, [r3, #8]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3360      	adds	r3, #96	@ 0x60
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <LL_ADC_SetOffset+0x44>)
 800210a:	4013      	ands	r3, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	4313      	orrs	r3, r2
 8002118:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	03fff000 	.word	0x03fff000

08002130 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3360      	adds	r3, #96	@ 0x60
 800213e:	461a      	mov	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3360      	adds	r3, #96	@ 0x60
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002192:	b480      	push	{r7}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3360      	adds	r3, #96	@ 0x60
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3360      	adds	r3, #96	@ 0x60
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80021f2:	bf00      	nop
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	615a      	str	r2, [r3, #20]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800224a:	b480      	push	{r7}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3330      	adds	r3, #48	@ 0x30
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	4413      	add	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	211f      	movs	r1, #31
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	401a      	ands	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	f003 011f 	and.w	r1, r3, #31
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3314      	adds	r3, #20
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	0e5b      	lsrs	r3, r3, #25
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	4413      	add	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	0d1b      	lsrs	r3, r3, #20
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2107      	movs	r1, #7
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	401a      	ands	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	0d1b      	lsrs	r3, r3, #20
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	431a      	orrs	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022ec:	bf00      	nop
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0318 	and.w	r3, r3, #24
 800231a:	4908      	ldr	r1, [pc, #32]	@ (800233c <LL_ADC_SetChannelSingleDiff+0x44>)
 800231c:	40d9      	lsrs	r1, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	400b      	ands	r3, r1
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	0007ffff 	.word	0x0007ffff

08002340 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 031f 	and.w	r3, r3, #31
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800236c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6093      	str	r3, [r2, #8]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002394:	d101      	bne.n	800239a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023e4:	d101      	bne.n	80023ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002430:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002434:	f043 0202 	orr.w	r2, r3, #2
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <LL_ADC_IsEnabled+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_ADC_IsEnabled+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d101      	bne.n	8002486 <LL_ADC_IsDisableOngoing+0x18>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_ADC_IsDisableOngoing+0x1a>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a8:	f043 0204 	orr.w	r2, r3, #4
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d101      	bne.n	80024d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d101      	bne.n	80024fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1a9      	b.n	8002876 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe fa75 	bl	8000a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff19 	bl	8002380 <LL_ADC_IsDeepPowerDownEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff feff 	bl	800235c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff34 	bl	80023d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d115      	bne.n	800259a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff18 	bl	80023a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002578:	4b9c      	ldr	r3, [pc, #624]	@ (80027ec <HAL_ADC_Init+0x2e4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	4a9c      	ldr	r2, [pc, #624]	@ (80027f0 <HAL_ADC_Init+0x2e8>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	3301      	adds	r3, #1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800258c:	e002      	b.n	8002594 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3b01      	subs	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f9      	bne.n	800258e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff16 	bl	80023d0 <LL_ADC_IsInternalRegulatorEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff76 	bl	80024bc <LL_ADC_REG_IsConversionOngoing>
 80025d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 8142 	bne.w	8002864 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 813e 	bne.w	8002864 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025f0:	f043 0202 	orr.w	r2, r3, #2
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff23 	bl	8002448 <LL_ADC_IsEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d141      	bne.n	800268c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002610:	d004      	beq.n	800261c <HAL_ADC_Init+0x114>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a77      	ldr	r2, [pc, #476]	@ (80027f4 <HAL_ADC_Init+0x2ec>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10f      	bne.n	800263c <HAL_ADC_Init+0x134>
 800261c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002620:	f7ff ff12 	bl	8002448 <LL_ADC_IsEnabled>
 8002624:	4604      	mov	r4, r0
 8002626:	4873      	ldr	r0, [pc, #460]	@ (80027f4 <HAL_ADC_Init+0x2ec>)
 8002628:	f7ff ff0e 	bl	8002448 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	4323      	orrs	r3, r4
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e012      	b.n	8002662 <HAL_ADC_Init+0x15a>
 800263c:	486e      	ldr	r0, [pc, #440]	@ (80027f8 <HAL_ADC_Init+0x2f0>)
 800263e:	f7ff ff03 	bl	8002448 <LL_ADC_IsEnabled>
 8002642:	4604      	mov	r4, r0
 8002644:	486d      	ldr	r0, [pc, #436]	@ (80027fc <HAL_ADC_Init+0x2f4>)
 8002646:	f7ff feff 	bl	8002448 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	431c      	orrs	r4, r3
 800264e:	486c      	ldr	r0, [pc, #432]	@ (8002800 <HAL_ADC_Init+0x2f8>)
 8002650:	f7ff fefa 	bl	8002448 <LL_ADC_IsEnabled>
 8002654:	4603      	mov	r3, r0
 8002656:	4323      	orrs	r3, r4
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800266e:	d004      	beq.n	800267a <HAL_ADC_Init+0x172>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a5f      	ldr	r2, [pc, #380]	@ (80027f4 <HAL_ADC_Init+0x2ec>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_ADC_Init+0x176>
 800267a:	4a62      	ldr	r2, [pc, #392]	@ (8002804 <HAL_ADC_Init+0x2fc>)
 800267c:	e000      	b.n	8002680 <HAL_ADC_Init+0x178>
 800267e:	4a62      	ldr	r2, [pc, #392]	@ (8002808 <HAL_ADC_Init+0x300>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f7ff fcfa 	bl	8002080 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7f5b      	ldrb	r3, [r3, #29]
 8002690:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002696:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800269c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d106      	bne.n	80026c8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	3b01      	subs	r3, #1
 80026c0:	045b      	lsls	r3, r3, #17
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d009      	beq.n	80026e4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	4b48      	ldr	r3, [pc, #288]	@ (800280c <HAL_ADC_Init+0x304>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	69b9      	ldr	r1, [r7, #24]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fee5 	bl	80024e2 <LL_ADC_INJ_IsConversionOngoing>
 8002718:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d17f      	bne.n	8002820 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d17c      	bne.n	8002820 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800272a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002732:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002742:	f023 0302 	bic.w	r3, r3, #2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	69b9      	ldr	r1, [r7, #24]
 800274c:	430b      	orrs	r3, r1
 800274e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002766:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002770:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002774:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6911      	ldr	r1, [r2, #16]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	430b      	orrs	r3, r1
 8002782:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002786:	e013      	b.n	80027b0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002796:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027ac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d12a      	bne.n	8002810 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027d0:	4311      	orrs	r1, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027dc:	430a      	orrs	r2, r1
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	e019      	b.n	8002820 <HAL_ADC_Init+0x318>
 80027ec:	20000004 	.word	0x20000004
 80027f0:	053e2d63 	.word	0x053e2d63
 80027f4:	50000100 	.word	0x50000100
 80027f8:	50000400 	.word	0x50000400
 80027fc:	50000500 	.word	0x50000500
 8002800:	50000600 	.word	0x50000600
 8002804:	50000300 	.word	0x50000300
 8002808:	50000700 	.word	0x50000700
 800280c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10c      	bne.n	8002842 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f023 010f 	bic.w	r1, r3, #15
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002840:	e007      	b.n	8002852 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 020f 	bic.w	r2, r2, #15
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002862:	e007      	b.n	8002874 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	f043 0210 	orr.w	r2, r3, #16
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002874:	7ffb      	ldrb	r3, [r7, #31]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	@ 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd90      	pop	{r4, r7, pc}
 800287e:	bf00      	nop

08002880 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_Start_DMA+0x20>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5a      	ldr	r2, [pc, #360]	@ (8002a04 <HAL_ADC_Start_DMA+0x184>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_Start_DMA+0x24>
 80028a0:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <HAL_ADC_Start_DMA+0x188>)
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_Start_DMA+0x26>
 80028a4:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <HAL_ADC_Start_DMA+0x18c>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fd4a 	bl	8002340 <LL_ADC_GetMultimode>
 80028ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fe02 	bl	80024bc <LL_ADC_REG_IsConversionOngoing>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 809b 	bne.w	80029f6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Start_DMA+0x4e>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e096      	b.n	80029fc <HAL_ADC_Start_DMA+0x17c>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a4d      	ldr	r2, [pc, #308]	@ (8002a10 <HAL_ADC_Start_DMA+0x190>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d008      	beq.n	80028f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d002      	beq.n	80028f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b09      	cmp	r3, #9
 80028f0:	d17a      	bne.n	80029e8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fcf6 	bl	80032e4 <ADC_Enable>
 80028f8:	4603      	mov	r3, r0
 80028fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d16d      	bne.n	80029de <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a04 <HAL_ADC_Start_DMA+0x184>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_ADC_Start_DMA+0xb4>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3b      	ldr	r2, [pc, #236]	@ (8002a14 <HAL_ADC_Start_DMA+0x194>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d002      	beq.n	8002930 <HAL_ADC_Start_DMA+0xb0>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	e003      	b.n	8002938 <HAL_ADC_Start_DMA+0xb8>
 8002930:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_ADC_Start_DMA+0x198>)
 8002932:	e001      	b.n	8002938 <HAL_ADC_Start_DMA+0xb8>
 8002934:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4293      	cmp	r3, r2
 800293e:	d002      	beq.n	8002946 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002962:	f023 0206 	bic.w	r2, r3, #6
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	661a      	str	r2, [r3, #96]	@ 0x60
 800296a:	e002      	b.n	8002972 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	4a29      	ldr	r2, [pc, #164]	@ (8002a1c <HAL_ADC_Start_DMA+0x19c>)
 8002978:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	4a28      	ldr	r2, [pc, #160]	@ (8002a20 <HAL_ADC_Start_DMA+0x1a0>)
 8002980:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002986:	4a27      	ldr	r2, [pc, #156]	@ (8002a24 <HAL_ADC_Start_DMA+0x1a4>)
 8002988:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	221c      	movs	r2, #28
 8002990:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0210 	orr.w	r2, r2, #16
 80029a8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3340      	adds	r3, #64	@ 0x40
 80029c4:	4619      	mov	r1, r3
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f001 f989 	bl	8003ce0 <HAL_DMA_Start_IT>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd5c 	bl	8002494 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80029dc:	e00d      	b.n	80029fa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80029e6:	e008      	b.n	80029fa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80029f4:	e001      	b.n	80029fa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
 80029f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	50000100 	.word	0x50000100
 8002a08:	50000300 	.word	0x50000300
 8002a0c:	50000700 	.word	0x50000700
 8002a10:	50000600 	.word	0x50000600
 8002a14:	50000500 	.word	0x50000500
 8002a18:	50000400 	.word	0x50000400
 8002a1c:	080034cf 	.word	0x080034cf
 8002a20:	080035a7 	.word	0x080035a7
 8002a24:	080035c3 	.word	0x080035c3

08002a28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0b6      	sub	sp, #216	@ 0xd8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x24>
 8002a82:	2302      	movs	r3, #2
 8002a84:	f000 bc13 	b.w	80032ae <HAL_ADC_ConfigChannel+0x84a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fd11 	bl	80024bc <LL_ADC_REG_IsConversionOngoing>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 83f3 	bne.w	8003288 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f7ff fbcb 	bl	800224a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fcff 	bl	80024bc <LL_ADC_REG_IsConversionOngoing>
 8002abe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fd0b 	bl	80024e2 <LL_ADC_INJ_IsConversionOngoing>
 8002acc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f040 81d9 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 81d4 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aec:	d10f      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7ff fbd2 	bl	80022a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fb79 	bl	80021fe <LL_ADC_SetSamplingTimeCommonConfig>
 8002b0c:	e00e      	b.n	8002b2c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f7ff fbc1 	bl	80022a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fb69 	bl	80021fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d022      	beq.n	8002b94 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b5e:	f7ff fac3 	bl	80020e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6919      	ldr	r1, [r3, #16]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f7ff fb0f 	bl	8002192 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x126>
 8002b84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b88:	e000      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x128>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f7ff fb1b 	bl	80021c8 <LL_ADC_SetOffsetSaturation>
 8002b92:	e17b      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fac8 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x15c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fabd 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	e01e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x19a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fab2 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002be2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e004      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d105      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x1b2>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	e018      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x1e4>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e004      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d106      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fa81 	bl	800215c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fa65 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x222>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fa5a 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	e01e      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x260>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa4f 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e004      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x278>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	e018      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x2aa>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002cf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d00:	2320      	movs	r3, #32
 8002d02:	e004      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d106      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fa1e 	bl	800215c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fa02 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x2e8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f9f7 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	f003 021f 	and.w	r2, r3, #31
 8002d4a:	e01e      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x326>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2102      	movs	r1, #2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f9ec 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	e004      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x33e>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	e016      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x36c>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002db4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002db6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e004      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d106      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2102      	movs	r1, #2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f9bd 	bl	800215c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2103      	movs	r1, #3
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f9a1 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x3aa>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2103      	movs	r1, #3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f996 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	0e9b      	lsrs	r3, r3, #26
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	e017      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x3da>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2103      	movs	r1, #3
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f98b 	bl	8002130 <LL_ADC_GetOffsetChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e28:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e003      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x3f2>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	0e9b      	lsrs	r3, r3, #26
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	e011      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x416>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	e003      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d106      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2103      	movs	r1, #3
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f968 	bl	800215c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fad9 	bl	8002448 <LL_ADC_IsEnabled>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f040 813d 	bne.w	8003118 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f7ff fa24 	bl	80022f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4aa2      	ldr	r2, [pc, #648]	@ (8003140 <HAL_ADC_ConfigChannel+0x6dc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	f040 812e 	bne.w	8003118 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x480>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	bf94      	ite	ls
 8002edc:	2301      	movls	r3, #1
 8002ede:	2300      	movhi	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e019      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x4b4>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ef2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e003      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	2b09      	cmp	r3, #9
 8002f10:	bf94      	ite	ls
 8002f12:	2301      	movls	r3, #1
 8002f14:	2300      	movhi	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d079      	beq.n	8003010 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x4d4>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	3301      	adds	r3, #1
 8002f30:	069b      	lsls	r3, r3, #26
 8002f32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f36:	e015      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x500>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e003      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	069b      	lsls	r3, r3, #26
 8002f60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x520>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0e9b      	lsrs	r3, r3, #26
 8002f76:	3301      	adds	r3, #1
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	e017      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x550>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f94:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	e003      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2101      	movs	r1, #1
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	ea42 0103 	orr.w	r1, r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x576>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	0e9b      	lsrs	r3, r3, #26
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	051b      	lsls	r3, r3, #20
 8002fd8:	e018      	b.n	800300c <HAL_ADC_ConfigChannel+0x5a8>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e003      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300c:	430b      	orrs	r3, r1
 800300e:	e07e      	b.n	800310e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <HAL_ADC_ConfigChannel+0x5c8>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	3301      	adds	r3, #1
 8003024:	069b      	lsls	r3, r3, #26
 8003026:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800302a:	e015      	b.n	8003058 <HAL_ADC_ConfigChannel+0x5f4>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800303a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003044:	2320      	movs	r3, #32
 8003046:	e003      	b.n	8003050 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	069b      	lsls	r3, r3, #26
 8003054:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x614>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e9b      	lsrs	r3, r3, #26
 800306a:	3301      	adds	r3, #1
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	e017      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x644>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	61fb      	str	r3, [r7, #28]
  return result;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003090:	2320      	movs	r3, #32
 8003092:	e003      	b.n	800309c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x670>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	3b1e      	subs	r3, #30
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	e01b      	b.n	800310c <HAL_ADC_ConfigChannel+0x6a8>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	613b      	str	r3, [r7, #16]
  return result;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030ec:	2320      	movs	r3, #32
 80030ee:	e003      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f003 021f 	and.w	r2, r3, #31
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	3b1e      	subs	r3, #30
 8003106:	051b      	lsls	r3, r3, #20
 8003108:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003112:	4619      	mov	r1, r3
 8003114:	f7ff f8c5 	bl	80022a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <HAL_ADC_ConfigChannel+0x6e0>)
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80be 	beq.w	80032a2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800312e:	d004      	beq.n	800313a <HAL_ADC_ConfigChannel+0x6d6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a04      	ldr	r2, [pc, #16]	@ (8003148 <HAL_ADC_ConfigChannel+0x6e4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10a      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x6ec>
 800313a:	4b04      	ldr	r3, [pc, #16]	@ (800314c <HAL_ADC_ConfigChannel+0x6e8>)
 800313c:	e009      	b.n	8003152 <HAL_ADC_ConfigChannel+0x6ee>
 800313e:	bf00      	nop
 8003140:	407f0000 	.word	0x407f0000
 8003144:	80080000 	.word	0x80080000
 8003148:	50000100 	.word	0x50000100
 800314c:	50000300 	.word	0x50000300
 8003150:	4b59      	ldr	r3, [pc, #356]	@ (80032b8 <HAL_ADC_ConfigChannel+0x854>)
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe ffba 	bl	80020cc <LL_ADC_GetCommonPathInternalCh>
 8003158:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a56      	ldr	r2, [pc, #344]	@ (80032bc <HAL_ADC_ConfigChannel+0x858>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x70c>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a55      	ldr	r2, [pc, #340]	@ (80032c0 <HAL_ADC_ConfigChannel+0x85c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d13a      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d134      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003184:	d005      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x72e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a4e      	ldr	r2, [pc, #312]	@ (80032c4 <HAL_ADC_ConfigChannel+0x860>)
 800318c:	4293      	cmp	r3, r2
 800318e:	f040 8085 	bne.w	800329c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800319a:	d004      	beq.n	80031a6 <HAL_ADC_ConfigChannel+0x742>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a49      	ldr	r2, [pc, #292]	@ (80032c8 <HAL_ADC_ConfigChannel+0x864>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x746>
 80031a6:	4a49      	ldr	r2, [pc, #292]	@ (80032cc <HAL_ADC_ConfigChannel+0x868>)
 80031a8:	e000      	b.n	80031ac <HAL_ADC_ConfigChannel+0x748>
 80031aa:	4a43      	ldr	r2, [pc, #268]	@ (80032b8 <HAL_ADC_ConfigChannel+0x854>)
 80031ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f7fe ff75 	bl	80020a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031bc:	4b44      	ldr	r3, [pc, #272]	@ (80032d0 <HAL_ADC_ConfigChannel+0x86c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	4a44      	ldr	r2, [pc, #272]	@ (80032d4 <HAL_ADC_ConfigChannel+0x870>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031d6:	e002      	b.n	80031de <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e4:	e05a      	b.n	800329c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a3b      	ldr	r2, [pc, #236]	@ (80032d8 <HAL_ADC_ConfigChannel+0x874>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d125      	bne.n	800323c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d11f      	bne.n	800323c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a31      	ldr	r2, [pc, #196]	@ (80032c8 <HAL_ADC_ConfigChannel+0x864>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d104      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x7ac>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a34      	ldr	r2, [pc, #208]	@ (80032dc <HAL_ADC_ConfigChannel+0x878>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d047      	beq.n	80032a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003218:	d004      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x7c0>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2a      	ldr	r2, [pc, #168]	@ (80032c8 <HAL_ADC_ConfigChannel+0x864>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x7c4>
 8003224:	4a29      	ldr	r2, [pc, #164]	@ (80032cc <HAL_ADC_ConfigChannel+0x868>)
 8003226:	e000      	b.n	800322a <HAL_ADC_ConfigChannel+0x7c6>
 8003228:	4a23      	ldr	r2, [pc, #140]	@ (80032b8 <HAL_ADC_ConfigChannel+0x854>)
 800322a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003232:	4619      	mov	r1, r3
 8003234:	4610      	mov	r0, r2
 8003236:	f7fe ff36 	bl	80020a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323a:	e031      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a27      	ldr	r2, [pc, #156]	@ (80032e0 <HAL_ADC_ConfigChannel+0x87c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d12d      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800324a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d127      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1c      	ldr	r2, [pc, #112]	@ (80032c8 <HAL_ADC_ConfigChannel+0x864>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003264:	d004      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x80c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a17      	ldr	r2, [pc, #92]	@ (80032c8 <HAL_ADC_ConfigChannel+0x864>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x810>
 8003270:	4a16      	ldr	r2, [pc, #88]	@ (80032cc <HAL_ADC_ConfigChannel+0x868>)
 8003272:	e000      	b.n	8003276 <HAL_ADC_ConfigChannel+0x812>
 8003274:	4a10      	ldr	r2, [pc, #64]	@ (80032b8 <HAL_ADC_ConfigChannel+0x854>)
 8003276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800327a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7fe ff10 	bl	80020a6 <LL_ADC_SetCommonPathInternalCh>
 8003286:	e00c      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800329a:	e002      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800329c:	bf00      	nop
 800329e:	e000      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	37d8      	adds	r7, #216	@ 0xd8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	50000700 	.word	0x50000700
 80032bc:	c3210000 	.word	0xc3210000
 80032c0:	90c00010 	.word	0x90c00010
 80032c4:	50000600 	.word	0x50000600
 80032c8:	50000100 	.word	0x50000100
 80032cc:	50000300 	.word	0x50000300
 80032d0:	20000004 	.word	0x20000004
 80032d4:	053e2d63 	.word	0x053e2d63
 80032d8:	c7520000 	.word	0xc7520000
 80032dc:	50000500 	.word	0x50000500
 80032e0:	cb840000 	.word	0xcb840000

080032e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff f8a7 	bl	8002448 <LL_ADC_IsEnabled>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d176      	bne.n	80033ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	4b3c      	ldr	r3, [pc, #240]	@ (80033f8 <ADC_Enable+0x114>)
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e062      	b.n	80033f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff f862 	bl	80023f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800333c:	d004      	beq.n	8003348 <ADC_Enable+0x64>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2e      	ldr	r2, [pc, #184]	@ (80033fc <ADC_Enable+0x118>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <ADC_Enable+0x68>
 8003348:	4b2d      	ldr	r3, [pc, #180]	@ (8003400 <ADC_Enable+0x11c>)
 800334a:	e000      	b.n	800334e <ADC_Enable+0x6a>
 800334c:	4b2d      	ldr	r3, [pc, #180]	@ (8003404 <ADC_Enable+0x120>)
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe febc 	bl	80020cc <LL_ADC_GetCommonPathInternalCh>
 8003354:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003356:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800335a:	2b00      	cmp	r3, #0
 800335c:	d013      	beq.n	8003386 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800335e:	4b2a      	ldr	r3, [pc, #168]	@ (8003408 <ADC_Enable+0x124>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	099b      	lsrs	r3, r3, #6
 8003364:	4a29      	ldr	r2, [pc, #164]	@ (800340c <ADC_Enable+0x128>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003378:	e002      	b.n	8003380 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3b01      	subs	r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f9      	bne.n	800337a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003386:	f7fe fe6f 	bl	8002068 <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800338c:	e028      	b.n	80033e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f858 	bl	8002448 <LL_ADC_IsEnabled>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d104      	bne.n	80033a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f828 	bl	80023f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033a8:	f7fe fe5e 	bl	8002068 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d914      	bls.n	80033e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d00d      	beq.n	80033e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d1cf      	bne.n	800338e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	8000003f 	.word	0x8000003f
 80033fc:	50000100 	.word	0x50000100
 8003400:	50000300 	.word	0x50000300
 8003404:	50000700 	.word	0x50000700
 8003408:	20000004 	.word	0x20000004
 800340c:	053e2d63 	.word	0x053e2d63

08003410 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff f826 	bl	800246e <LL_ADC_IsDisableOngoing>
 8003422:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff f80d 	bl	8002448 <LL_ADC_IsEnabled>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d047      	beq.n	80034c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d144      	bne.n	80034c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030d 	and.w	r3, r3, #13
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10c      	bne.n	8003462 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe ffe7 	bl	8002420 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2203      	movs	r2, #3
 8003458:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800345a:	f7fe fe05 	bl	8002068 <HAL_GetTick>
 800345e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003460:	e029      	b.n	80034b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e023      	b.n	80034c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800347e:	f7fe fdf3 	bl	8002068 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d914      	bls.n	80034b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e007      	b.n	80034c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1dc      	bne.n	800347e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d14b      	bne.n	8003580 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d021      	beq.n	8003546 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fe8c 	bl	8002224 <LL_ADC_REG_IsTriggerSourceSWStart>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d032      	beq.n	8003578 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d12b      	bne.n	8003578 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d11f      	bne.n	8003578 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003544:	e018      	b.n	8003578 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff fa55 	bl	8002a28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800357e:	e00e      	b.n	800359e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff fa5f 	bl	8002a50 <HAL_ADC_ErrorCallback>
}
 8003592:	e004      	b.n	800359e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff fa41 	bl	8002a3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	f043 0204 	orr.w	r2, r3, #4
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff fa31 	bl	8002a50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <LL_ADC_IsEnabled>:
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <LL_ADC_IsEnabled+0x18>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <LL_ADC_IsEnabled+0x1a>
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_StartCalibration>:
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800362e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003638:	4313      	orrs	r3, r2
 800363a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	609a      	str	r2, [r3, #8]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_ADC_IsCalibrationOnGoing>:
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800365e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003662:	d101      	bne.n	8003668 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <LL_ADC_REG_IsConversionOngoing>:
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d101      	bne.n	800368e <LL_ADC_REG_IsConversionOngoing+0x18>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e04d      	b.n	8003754 <HAL_ADCEx_Calibration_Start+0xb8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fea5 	bl	8003410 <ADC_Disable>
 80036c6:	4603      	mov	r3, r0
 80036c8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d136      	bne.n	800373e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036d8:	f023 0302 	bic.w	r3, r3, #2
 80036dc:	f043 0202 	orr.w	r2, r3, #2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff ff96 	bl	800361c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036f0:	e014      	b.n	800371c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3301      	adds	r3, #1
 80036f6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4a18      	ldr	r2, [pc, #96]	@ (800375c <HAL_ADCEx_Calibration_Start+0xc0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d90d      	bls.n	800371c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	f023 0312 	bic.w	r3, r3, #18
 8003708:	f043 0210 	orr.w	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e01b      	b.n	8003754 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff94 	bl	800364e <LL_ADC_IsCalibrationOnGoing>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e2      	bne.n	80036f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f023 0303 	bic.w	r3, r3, #3
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800373c:	e005      	b.n	800374a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	f043 0210 	orr.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	0004de01 	.word	0x0004de01

08003760 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b0a1      	sub	sp, #132	@ 0x84
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800377a:	2302      	movs	r3, #2
 800377c:	e0e7      	b.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003786:	2300      	movs	r3, #0
 8003788:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800378a:	2300      	movs	r3, #0
 800378c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003796:	d102      	bne.n	800379e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003798:	4b6f      	ldr	r3, [pc, #444]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	e009      	b.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6e      	ldr	r2, [pc, #440]	@ (800395c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d102      	bne.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80037a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	e001      	b.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0be      	b.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff ff4f 	bl	8003676 <LL_ADC_REG_IsConversionOngoing>
 80037d8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff49 	bl	8003676 <LL_ADC_REG_IsConversionOngoing>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80a0 	bne.w	800392c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80037ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 809c 	bne.w	800392c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037fc:	d004      	beq.n	8003808 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a55      	ldr	r2, [pc, #340]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003808:	4b56      	ldr	r3, [pc, #344]	@ (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800380a:	e000      	b.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800380c:	4b56      	ldr	r3, [pc, #344]	@ (8003968 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800380e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d04b      	beq.n	80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003818:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800382a:	035b      	lsls	r3, r3, #13
 800382c:	430b      	orrs	r3, r1
 800382e:	431a      	orrs	r2, r3
 8003830:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003832:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800383c:	d004      	beq.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a45      	ldr	r2, [pc, #276]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d10f      	bne.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003848:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800384c:	f7ff fed3 	bl	80035f6 <LL_ADC_IsEnabled>
 8003850:	4604      	mov	r4, r0
 8003852:	4841      	ldr	r0, [pc, #260]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003854:	f7ff fecf 	bl	80035f6 <LL_ADC_IsEnabled>
 8003858:	4603      	mov	r3, r0
 800385a:	4323      	orrs	r3, r4
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e012      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003868:	483c      	ldr	r0, [pc, #240]	@ (800395c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800386a:	f7ff fec4 	bl	80035f6 <LL_ADC_IsEnabled>
 800386e:	4604      	mov	r4, r0
 8003870:	483b      	ldr	r0, [pc, #236]	@ (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003872:	f7ff fec0 	bl	80035f6 <LL_ADC_IsEnabled>
 8003876:	4603      	mov	r3, r0
 8003878:	431c      	orrs	r4, r3
 800387a:	483c      	ldr	r0, [pc, #240]	@ (800396c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800387c:	f7ff febb 	bl	80035f6 <LL_ADC_IsEnabled>
 8003880:	4603      	mov	r3, r0
 8003882:	4323      	orrs	r3, r4
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d056      	beq.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800389a:	f023 030f 	bic.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	6811      	ldr	r1, [r2, #0]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	6892      	ldr	r2, [r2, #8]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	431a      	orrs	r2, r3
 80038aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038ae:	e047      	b.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c4:	d004      	beq.n	80038d0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a23      	ldr	r2, [pc, #140]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10f      	bne.n	80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80038d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038d4:	f7ff fe8f 	bl	80035f6 <LL_ADC_IsEnabled>
 80038d8:	4604      	mov	r4, r0
 80038da:	481f      	ldr	r0, [pc, #124]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038dc:	f7ff fe8b 	bl	80035f6 <LL_ADC_IsEnabled>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4323      	orrs	r3, r4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e012      	b.n	8003916 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80038f0:	481a      	ldr	r0, [pc, #104]	@ (800395c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038f2:	f7ff fe80 	bl	80035f6 <LL_ADC_IsEnabled>
 80038f6:	4604      	mov	r4, r0
 80038f8:	4819      	ldr	r0, [pc, #100]	@ (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038fa:	f7ff fe7c 	bl	80035f6 <LL_ADC_IsEnabled>
 80038fe:	4603      	mov	r3, r0
 8003900:	431c      	orrs	r4, r3
 8003902:	481a      	ldr	r0, [pc, #104]	@ (800396c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003904:	f7ff fe77 	bl	80035f6 <LL_ADC_IsEnabled>
 8003908:	4603      	mov	r3, r0
 800390a:	4323      	orrs	r3, r4
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800391a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003922:	f023 030f 	bic.w	r3, r3, #15
 8003926:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003928:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800392a:	e009      	b.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800393e:	e000      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003940:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800394a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800394e:	4618      	mov	r0, r3
 8003950:	3784      	adds	r7, #132	@ 0x84
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop
 8003958:	50000100 	.word	0x50000100
 800395c:	50000400 	.word	0x50000400
 8003960:	50000500 	.word	0x50000500
 8003964:	50000300 	.word	0x50000300
 8003968:	50000700 	.word	0x50000700
 800396c:	50000600 	.word	0x50000600

08003970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0c      	ldr	r3, [pc, #48]	@ (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4907      	ldr	r1, [pc, #28]	@ (8003a0c <__NVIC_EnableIRQ+0x38>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000e100 	.word	0xe000e100

08003a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	@ (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	@ (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	@ 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
         );
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	@ 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003adc:	d301      	bcc.n	8003ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00f      	b.n	8003b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <SysTick_Config+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aea:	210f      	movs	r1, #15
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f7ff ff8e 	bl	8003a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <SysTick_Config+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <SysTick_Config+0x40>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff29 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b34:	f7ff ff40 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f7ff ff90 	bl	8003a64 <NVIC_EncodePriority>
 8003b44:	4602      	mov	r2, r0
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff5f 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b52:	bf00      	nop
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	4603      	mov	r3, r0
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff33 	bl	80039d4 <__NVIC_EnableIRQ>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ffa4 	bl	8003acc <SysTick_Config>
 8003b84:	4603      	mov	r3, r0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e08d      	b.n	8003cbe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b47      	ldr	r3, [pc, #284]	@ (8003cc8 <HAL_DMA_Init+0x138>)
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d80f      	bhi.n	8003bce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4b45      	ldr	r3, [pc, #276]	@ (8003ccc <HAL_DMA_Init+0x13c>)
 8003bb6:	4413      	add	r3, r2
 8003bb8:	4a45      	ldr	r2, [pc, #276]	@ (8003cd0 <HAL_DMA_Init+0x140>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	009a      	lsls	r2, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a42      	ldr	r2, [pc, #264]	@ (8003cd4 <HAL_DMA_Init+0x144>)
 8003bca:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bcc:	e00e      	b.n	8003bec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <HAL_DMA_Init+0x148>)
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8003cd0 <HAL_DMA_Init+0x140>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	009a      	lsls	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a3c      	ldr	r2, [pc, #240]	@ (8003cdc <HAL_DMA_Init+0x14c>)
 8003bea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9b6 	bl	8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c4c:	d102      	bne.n	8003c54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c68:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d010      	beq.n	8003c94 <HAL_DMA_Init+0x104>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d80c      	bhi.n	8003c94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9d6 	bl	800402c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	e008      	b.n	8003ca6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40020407 	.word	0x40020407
 8003ccc:	bffdfff8 	.word	0xbffdfff8
 8003cd0:	cccccccd 	.word	0xcccccccd
 8003cd4:	40020000 	.word	0x40020000
 8003cd8:	bffdfbf8 	.word	0xbffdfbf8
 8003cdc:	40020400 	.word	0x40020400

08003ce0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_DMA_Start_IT+0x20>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e066      	b.n	8003dce <HAL_DMA_Start_IT+0xee>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d155      	bne.n	8003dc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f8fb 	bl	8003f34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 020e 	orr.w	r2, r2, #14
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e00f      	b.n	8003d78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 020a 	orr.w	r2, r2, #10
 8003d76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e005      	b.n	8003dcc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2204      	movs	r2, #4
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d026      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x7a>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d021      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f003 021f 	and.w	r2, r3, #31
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2104      	movs	r1, #4
 8003e38:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d071      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e4e:	e06c      	b.n	8003f2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2202      	movs	r2, #2
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d02e      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d029      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 020a 	bic.w	r2, r2, #10
 8003e8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d038      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ec0:	e033      	b.n	8003f2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2208      	movs	r2, #8
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02a      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d025      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 020e 	bic.w	r2, r2, #14
 8003eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f202 	lsl.w	r2, r1, r2
 8003f02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
}
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f003 021f 	and.w	r2, r3, #31
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d108      	bne.n	8003f94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f92:	e007      	b.n	8003fa4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d802      	bhi.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003fc4:	4b15      	ldr	r3, [pc, #84]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e001      	b.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003fca:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fcc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b08      	subs	r3, #8
 8003fda:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	009a      	lsls	r2, r3, #2
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2201      	movs	r2, #1
 8004004:	409a      	lsls	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40020407 	.word	0x40020407
 800401c:	40020800 	.word	0x40020800
 8004020:	40020820 	.word	0x40020820
 8004024:	cccccccd 	.word	0xcccccccd
 8004028:	40020880 	.word	0x40020880

0800402c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a08      	ldr	r2, [pc, #32]	@ (8004070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800404e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b01      	subs	r3, #1
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	1000823f 	.word	0x1000823f
 8004070:	40020940 	.word	0x40020940

08004074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004082:	e15a      	b.n	800433a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 814c 	beq.w	8004334 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d005      	beq.n	80040b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d130      	bne.n	8004116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	2203      	movs	r2, #3
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040ea:	2201      	movs	r2, #1
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 0201 	and.w	r2, r3, #1
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b03      	cmp	r3, #3
 8004120:	d017      	beq.n	8004152 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	2203      	movs	r2, #3
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d123      	bne.n	80041a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	08da      	lsrs	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3208      	adds	r2, #8
 8004166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	6939      	ldr	r1, [r7, #16]
 80041a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0203 	and.w	r2, r3, #3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80a6 	beq.w	8004334 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004358 <HAL_GPIO_Init+0x2e4>)
 80041ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004358 <HAL_GPIO_Init+0x2e4>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80041f4:	4b58      	ldr	r3, [pc, #352]	@ (8004358 <HAL_GPIO_Init+0x2e4>)
 80041f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004200:	4a56      	ldr	r2, [pc, #344]	@ (800435c <HAL_GPIO_Init+0x2e8>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	3302      	adds	r3, #2
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	220f      	movs	r2, #15
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800422a:	d01f      	beq.n	800426c <HAL_GPIO_Init+0x1f8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a4c      	ldr	r2, [pc, #304]	@ (8004360 <HAL_GPIO_Init+0x2ec>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d019      	beq.n	8004268 <HAL_GPIO_Init+0x1f4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a4b      	ldr	r2, [pc, #300]	@ (8004364 <HAL_GPIO_Init+0x2f0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d013      	beq.n	8004264 <HAL_GPIO_Init+0x1f0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a4a      	ldr	r2, [pc, #296]	@ (8004368 <HAL_GPIO_Init+0x2f4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00d      	beq.n	8004260 <HAL_GPIO_Init+0x1ec>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a49      	ldr	r2, [pc, #292]	@ (800436c <HAL_GPIO_Init+0x2f8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <HAL_GPIO_Init+0x1e8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a48      	ldr	r2, [pc, #288]	@ (8004370 <HAL_GPIO_Init+0x2fc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <HAL_GPIO_Init+0x1e4>
 8004254:	2305      	movs	r3, #5
 8004256:	e00a      	b.n	800426e <HAL_GPIO_Init+0x1fa>
 8004258:	2306      	movs	r3, #6
 800425a:	e008      	b.n	800426e <HAL_GPIO_Init+0x1fa>
 800425c:	2304      	movs	r3, #4
 800425e:	e006      	b.n	800426e <HAL_GPIO_Init+0x1fa>
 8004260:	2303      	movs	r3, #3
 8004262:	e004      	b.n	800426e <HAL_GPIO_Init+0x1fa>
 8004264:	2302      	movs	r3, #2
 8004266:	e002      	b.n	800426e <HAL_GPIO_Init+0x1fa>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_GPIO_Init+0x1fa>
 800426c:	2300      	movs	r3, #0
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	f002 0203 	and.w	r2, r2, #3
 8004274:	0092      	lsls	r2, r2, #2
 8004276:	4093      	lsls	r3, r2
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800427e:	4937      	ldr	r1, [pc, #220]	@ (800435c <HAL_GPIO_Init+0x2e8>)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800428c:	4b39      	ldr	r3, [pc, #228]	@ (8004374 <HAL_GPIO_Init+0x300>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	43db      	mvns	r3, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042b0:	4a30      	ldr	r2, [pc, #192]	@ (8004374 <HAL_GPIO_Init+0x300>)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004374 <HAL_GPIO_Init+0x300>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	43db      	mvns	r3, r3
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042da:	4a26      	ldr	r2, [pc, #152]	@ (8004374 <HAL_GPIO_Init+0x300>)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042e0:	4b24      	ldr	r3, [pc, #144]	@ (8004374 <HAL_GPIO_Init+0x300>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004304:	4a1b      	ldr	r2, [pc, #108]	@ (8004374 <HAL_GPIO_Init+0x300>)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800430a:	4b1a      	ldr	r3, [pc, #104]	@ (8004374 <HAL_GPIO_Init+0x300>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43db      	mvns	r3, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800432e:	4a11      	ldr	r2, [pc, #68]	@ (8004374 <HAL_GPIO_Init+0x300>)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3301      	adds	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	f47f ae9d 	bne.w	8004084 <HAL_GPIO_Init+0x10>
  }
}
 800434a:	bf00      	nop
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40021000 	.word	0x40021000
 800435c:	40010000 	.word	0x40010000
 8004360:	48000400 	.word	0x48000400
 8004364:	48000800 	.word	0x48000800
 8004368:	48000c00 	.word	0x48000c00
 800436c:	48001000 	.word	0x48001000
 8004370:	48001400 	.word	0x48001400
 8004374:	40010400 	.word	0x40010400

08004378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
 8004384:	4613      	mov	r3, r2
 8004386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004388:	787b      	ldrb	r3, [r7, #1]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004394:	e002      	b.n	800439c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043b2:	4b08      	ldr	r3, [pc, #32]	@ (80043d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d006      	beq.n	80043cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043be:	4a05      	ldr	r2, [pc, #20]	@ (80043d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f806 	bl	80043d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40010400 	.word	0x40010400

080043d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e08d      	b.n	800451c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fc ff37 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	@ 0x24
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800443e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800444e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	e006      	b.n	8004476 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004474:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d108      	bne.n	8004490 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	e007      	b.n	80044a0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800449e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69d9      	ldr	r1, [r3, #28]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b20      	cmp	r3, #32
 8004538:	d138      	bne.n	80045ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004544:	2302      	movs	r3, #2
 8004546:	e032      	b.n	80045ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2224      	movs	r2, #36	@ 0x24
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d139      	bne.n	8004644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045da:	2302      	movs	r3, #2
 80045dc:	e033      	b.n	8004646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2224      	movs	r2, #36	@ 0x24
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800460c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	e000      	b.n	8004646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d141      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004662:	4b4b      	ldr	r3, [pc, #300]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466e:	d131      	bne.n	80046d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004670:	4b47      	ldr	r3, [pc, #284]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004676:	4a46      	ldr	r2, [pc, #280]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800467c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004680:	4b43      	ldr	r3, [pc, #268]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004688:	4a41      	ldr	r2, [pc, #260]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800468e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004690:	4b40      	ldr	r3, [pc, #256]	@ (8004794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2232      	movs	r2, #50	@ 0x32
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	4a3f      	ldr	r2, [pc, #252]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	0c9b      	lsrs	r3, r3, #18
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046a6:	e002      	b.n	80046ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ae:	4b38      	ldr	r3, [pc, #224]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ba:	d102      	bne.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f2      	bne.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046c2:	4b33      	ldr	r3, [pc, #204]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ce:	d158      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e057      	b.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046da:	4a2d      	ldr	r2, [pc, #180]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046e4:	e04d      	b.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ec:	d141      	bne.n	8004772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ee:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d131      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046fc:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004702:	4a23      	ldr	r2, [pc, #140]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004708:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800470c:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004714:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800471a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800471c:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2232      	movs	r2, #50	@ 0x32
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	0c9b      	lsrs	r3, r3, #18
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004732:	e002      	b.n	800473a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473a:	4b15      	ldr	r3, [pc, #84]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004746:	d102      	bne.n	800474e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f2      	bne.n	8004734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800474e:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475a:	d112      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e011      	b.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004760:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004766:	4a0a      	ldr	r2, [pc, #40]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004770:	e007      	b.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004772:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800477a:	4a05      	ldr	r2, [pc, #20]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004780:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40007000 	.word	0x40007000
 8004794:	20000004 	.word	0x20000004
 8004798:	431bde83 	.word	0x431bde83

0800479c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a04      	ldr	r2, [pc, #16]	@ (80047b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047aa:	6093      	str	r3, [r2, #8]
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40007000 	.word	0x40007000

080047bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e2fe      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d075      	beq.n	80048c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047da:	4b97      	ldr	r3, [pc, #604]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e4:	4b94      	ldr	r3, [pc, #592]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d102      	bne.n	80047fa <HAL_RCC_OscConfig+0x3e>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d002      	beq.n	8004800 <HAL_RCC_OscConfig+0x44>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10b      	bne.n	8004818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	4b8d      	ldr	r3, [pc, #564]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d05b      	beq.n	80048c4 <HAL_RCC_OscConfig+0x108>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d157      	bne.n	80048c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e2d9      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004820:	d106      	bne.n	8004830 <HAL_RCC_OscConfig+0x74>
 8004822:	4b85      	ldr	r3, [pc, #532]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a84      	ldr	r2, [pc, #528]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e01d      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004838:	d10c      	bne.n	8004854 <HAL_RCC_OscConfig+0x98>
 800483a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4b7c      	ldr	r3, [pc, #496]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e00b      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004854:	4b78      	ldr	r3, [pc, #480]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a77      	ldr	r2, [pc, #476]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800485a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b75      	ldr	r3, [pc, #468]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a74      	ldr	r2, [pc, #464]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800486a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d013      	beq.n	800489c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fd fbf8 	bl	8002068 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487c:	f7fd fbf4 	bl	8002068 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	@ 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e29e      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800488e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0xc0>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fd fbe4 	bl	8002068 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fd fbe0 	bl	8002068 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	@ 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e28a      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048b6:	4b60      	ldr	r3, [pc, #384]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0xe8>
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d075      	beq.n	80049be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d2:	4b59      	ldr	r3, [pc, #356]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048dc:	4b56      	ldr	r3, [pc, #344]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_OscConfig+0x136>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_OscConfig+0x13c>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11f      	bne.n	8004938 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_OscConfig+0x154>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e25d      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004910:	4b49      	ldr	r3, [pc, #292]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	4946      	ldr	r1, [pc, #280]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004924:	4b45      	ldr	r3, [pc, #276]	@ (8004a3c <HAL_RCC_OscConfig+0x280>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd fb51 	bl	8001fd0 <HAL_InitTick>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d043      	beq.n	80049bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e249      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d023      	beq.n	8004988 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004940:	4b3d      	ldr	r3, [pc, #244]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3c      	ldr	r2, [pc, #240]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800494a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fd fb8c 	bl	8002068 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004954:	f7fd fb88 	bl	8002068 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e232      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004966:	4b34      	ldr	r3, [pc, #208]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004972:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	492d      	ldr	r1, [pc, #180]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	604b      	str	r3, [r1, #4]
 8004986:	e01a      	b.n	80049be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004988:	4b2b      	ldr	r3, [pc, #172]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800498e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd fb68 	bl	8002068 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499c:	f7fd fb64 	bl	8002068 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e20e      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ae:	4b22      	ldr	r3, [pc, #136]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x1e0>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d041      	beq.n	8004a4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01c      	beq.n	8004a0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d2:	4b19      	ldr	r3, [pc, #100]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d8:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e2:	f7fd fb41 	bl	8002068 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ea:	f7fd fb3d 	bl	8002068 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e1e7      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0ef      	beq.n	80049ea <HAL_RCC_OscConfig+0x22e>
 8004a0a:	e020      	b.n	8004a4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a12:	4a09      	ldr	r2, [pc, #36]	@ (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fd fb24 	bl	8002068 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a22:	e00d      	b.n	8004a40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a24:	f7fd fb20 	bl	8002068 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d906      	bls.n	8004a40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1ca      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a40:	4b8c      	ldr	r3, [pc, #560]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ea      	bne.n	8004a24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80a6 	beq.w	8004ba8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a60:	4b84      	ldr	r3, [pc, #528]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2b4>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x2b6>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	4b7f      	ldr	r3, [pc, #508]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a82:	4b7c      	ldr	r3, [pc, #496]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a92:	4b79      	ldr	r3, [pc, #484]	@ (8004c78 <HAL_RCC_OscConfig+0x4bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d118      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a9e:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <HAL_RCC_OscConfig+0x4bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a75      	ldr	r2, [pc, #468]	@ (8004c78 <HAL_RCC_OscConfig+0x4bc>)
 8004aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aaa:	f7fd fadd 	bl	8002068 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab2:	f7fd fad9 	bl	8002068 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e183      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8004c78 <HAL_RCC_OscConfig+0x4bc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d108      	bne.n	8004aea <HAL_RCC_OscConfig+0x32e>
 8004ad8:	4b66      	ldr	r3, [pc, #408]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	4a65      	ldr	r2, [pc, #404]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ae8:	e024      	b.n	8004b34 <HAL_RCC_OscConfig+0x378>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d110      	bne.n	8004b14 <HAL_RCC_OscConfig+0x358>
 8004af2:	4b60      	ldr	r3, [pc, #384]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af8:	4a5e      	ldr	r2, [pc, #376]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b02:	4b5c      	ldr	r3, [pc, #368]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b08:	4a5a      	ldr	r2, [pc, #360]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b12:	e00f      	b.n	8004b34 <HAL_RCC_OscConfig+0x378>
 8004b14:	4b57      	ldr	r3, [pc, #348]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1a:	4a56      	ldr	r2, [pc, #344]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b24:	4b53      	ldr	r3, [pc, #332]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2a:	4a52      	ldr	r2, [pc, #328]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d016      	beq.n	8004b6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fd fa94 	bl	8002068 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fd fa90 	bl	8002068 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e138      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5a:	4b46      	ldr	r3, [pc, #280]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ed      	beq.n	8004b44 <HAL_RCC_OscConfig+0x388>
 8004b68:	e015      	b.n	8004b96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6a:	f7fd fa7d 	bl	8002068 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fd fa79 	bl	8002068 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e121      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b88:	4b3a      	ldr	r3, [pc, #232]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1ed      	bne.n	8004b72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b96:	7ffb      	ldrb	r3, [r7, #31]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b9c:	4b35      	ldr	r3, [pc, #212]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba0:	4a34      	ldr	r2, [pc, #208]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d03c      	beq.n	8004c2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01c      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fd fa4c 	bl	8002068 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bd4:	f7fd fa48 	bl	8002068 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0f2      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004be6:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ef      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x418>
 8004bf4:	e01b      	b.n	8004c2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fd fa2f 	bl	8002068 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c0e:	f7fd fa2b 	bl	8002068 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e0d5      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c20:	4b14      	ldr	r3, [pc, #80]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ef      	bne.n	8004c0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80c9 	beq.w	8004dca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c38:	4b0e      	ldr	r3, [pc, #56]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b0c      	cmp	r3, #12
 8004c42:	f000 8083 	beq.w	8004d4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d15e      	bne.n	8004d0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4e:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a08      	ldr	r2, [pc, #32]	@ (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fa05 	bl	8002068 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c60:	e00c      	b.n	8004c7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c62:	f7fd fa01 	bl	8002068 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d905      	bls.n	8004c7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e0ab      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7c:	4b55      	ldr	r3, [pc, #340]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ec      	bne.n	8004c62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c88:	4b52      	ldr	r3, [pc, #328]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	4b52      	ldr	r3, [pc, #328]	@ (8004dd8 <HAL_RCC_OscConfig+0x61c>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6a11      	ldr	r1, [r2, #32]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	0112      	lsls	r2, r2, #4
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ca2:	0212      	lsls	r2, r2, #8
 8004ca4:	4311      	orrs	r1, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004caa:	0852      	lsrs	r2, r2, #1
 8004cac:	3a01      	subs	r2, #1
 8004cae:	0552      	lsls	r2, r2, #21
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cb6:	0852      	lsrs	r2, r2, #1
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0652      	lsls	r2, r2, #25
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cc2:	06d2      	lsls	r2, r2, #27
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	4943      	ldr	r1, [pc, #268]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a40      	ldr	r2, [pc, #256]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ce2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd f9c0 	bl	8002068 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd f9bc 	bl	8002068 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e066      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfe:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x530>
 8004d0a:	e05e      	b.n	8004dca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b31      	ldr	r3, [pc, #196]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a30      	ldr	r2, [pc, #192]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd f9a6 	bl	8002068 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd f9a2 	bl	8002068 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e04c      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d32:	4b28      	ldr	r3, [pc, #160]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d3e:	4b25      	ldr	r3, [pc, #148]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	4924      	ldr	r1, [pc, #144]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004d44:	4b25      	ldr	r3, [pc, #148]	@ (8004ddc <HAL_RCC_OscConfig+0x620>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	60cb      	str	r3, [r1, #12]
 8004d4a:	e03e      	b.n	8004dca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e039      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd4 <HAL_RCC_OscConfig+0x618>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f003 0203 	and.w	r2, r3, #3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d12c      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	3b01      	subs	r3, #1
 8004d78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d123      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d11b      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d113      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d109      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	019f800c 	.word	0x019f800c
 8004ddc:	feeefffc 	.word	0xfeeefffc

08004de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e11e      	b.n	8005036 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004df8:	4b91      	ldr	r3, [pc, #580]	@ (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d910      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b8e      	ldr	r3, [pc, #568]	@ (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 020f 	bic.w	r2, r3, #15
 8004e0e:	498c      	ldr	r1, [pc, #560]	@ (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b8a      	ldr	r3, [pc, #552]	@ (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e106      	b.n	8005036 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d073      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d129      	bne.n	8004e90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3c:	4b81      	ldr	r3, [pc, #516]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0f4      	b.n	8005036 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e4c:	f000 f99e 	bl	800518c <RCC_GetSysClockFreqFromPLLSource>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4a7c      	ldr	r2, [pc, #496]	@ (8005048 <HAL_RCC_ClockConfig+0x268>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d93f      	bls.n	8004eda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d033      	beq.n	8004eda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d12f      	bne.n	8004eda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e7a:	4b72      	ldr	r3, [pc, #456]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e82:	4a70      	ldr	r2, [pc, #448]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e8a:	2380      	movs	r3, #128	@ 0x80
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e024      	b.n	8004eda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d107      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e98:	4b6a      	ldr	r3, [pc, #424]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0c6      	b.n	8005036 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea8:	4b66      	ldr	r3, [pc, #408]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0be      	b.n	8005036 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004eb8:	f000 f8ce 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4a61      	ldr	r2, [pc, #388]	@ (8005048 <HAL_RCC_ClockConfig+0x268>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d909      	bls.n	8004eda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ece:	4a5d      	ldr	r2, [pc, #372]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ed6:	2380      	movs	r3, #128	@ 0x80
 8004ed8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eda:	4b5a      	ldr	r3, [pc, #360]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 0203 	bic.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4957      	ldr	r1, [pc, #348]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eec:	f7fd f8bc 	bl	8002068 <HAL_GetTick>
 8004ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef4:	f7fd f8b8 	bl	8002068 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e095      	b.n	8005036 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 020c 	and.w	r2, r3, #12
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d1eb      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d023      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f34:	4b43      	ldr	r3, [pc, #268]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4a42      	ldr	r2, [pc, #264]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f54:	4a3b      	ldr	r2, [pc, #236]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f5c:	4b39      	ldr	r3, [pc, #228]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4936      	ldr	r1, [pc, #216]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	d105      	bne.n	8004f82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f76:	4b33      	ldr	r3, [pc, #204]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4a32      	ldr	r2, [pc, #200]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f82:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d21d      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f90:	4b2b      	ldr	r3, [pc, #172]	@ (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 020f 	bic.w	r2, r3, #15
 8004f98:	4929      	ldr	r1, [pc, #164]	@ (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fa0:	f7fd f862 	bl	8002068 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fd f85e 	bl	8002068 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e03b      	b.n	8005036 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b20      	ldr	r3, [pc, #128]	@ (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d1ed      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4917      	ldr	r1, [pc, #92]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff6:	4b13      	ldr	r3, [pc, #76]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	490f      	ldr	r1, [pc, #60]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800500a:	f000 f825 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 800500e:	4602      	mov	r2, r0
 8005010:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <HAL_RCC_ClockConfig+0x264>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	490c      	ldr	r1, [pc, #48]	@ (800504c <HAL_RCC_ClockConfig+0x26c>)
 800501c:	5ccb      	ldrb	r3, [r1, r3]
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	fa22 f303 	lsr.w	r3, r2, r3
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <HAL_RCC_ClockConfig+0x270>)
 8005028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800502a:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <HAL_RCC_ClockConfig+0x274>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fc ffce 	bl	8001fd0 <HAL_InitTick>
 8005034:	4603      	mov	r3, r0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40022000 	.word	0x40022000
 8005044:	40021000 	.word	0x40021000
 8005048:	04c4b400 	.word	0x04c4b400
 800504c:	08008394 	.word	0x08008394
 8005050:	20000004 	.word	0x20000004
 8005054:	20000008 	.word	0x20000008

08005058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800505e:	4b2c      	ldr	r3, [pc, #176]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b04      	cmp	r3, #4
 8005068:	d102      	bne.n	8005070 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800506a:	4b2a      	ldr	r3, [pc, #168]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xbc>)
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	e047      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005070:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	2b08      	cmp	r3, #8
 800507a:	d102      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800507c:	4b26      	ldr	r3, [pc, #152]	@ (8005118 <HAL_RCC_GetSysClockFreq+0xc0>)
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	e03e      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005082:	4b23      	ldr	r3, [pc, #140]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d136      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800508e:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005098:	4b1d      	ldr	r3, [pc, #116]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xb8>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	3301      	adds	r3, #1
 80050a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d10c      	bne.n	80050c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005118 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b6:	68d2      	ldr	r2, [r2, #12]
 80050b8:	0a12      	lsrs	r2, r2, #8
 80050ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	617b      	str	r3, [r7, #20]
      break;
 80050c4:	e00c      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c6:	4a13      	ldr	r2, [pc, #76]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ce:	4a10      	ldr	r2, [pc, #64]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d0:	68d2      	ldr	r2, [r2, #12]
 80050d2:	0a12      	lsrs	r2, r2, #8
 80050d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050d8:	fb02 f303 	mul.w	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]
      break;
 80050de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	0e5b      	lsrs	r3, r3, #25
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	3301      	adds	r3, #1
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e001      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005100:	693b      	ldr	r3, [r7, #16]
}
 8005102:	4618      	mov	r0, r3
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	00f42400 	.word	0x00f42400
 8005118:	016e3600 	.word	0x016e3600

0800511c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005120:	4b03      	ldr	r3, [pc, #12]	@ (8005130 <HAL_RCC_GetHCLKFreq+0x14>)
 8005122:	681b      	ldr	r3, [r3, #0]
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000004 	.word	0x20000004

08005134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005138:	f7ff fff0 	bl	800511c <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4904      	ldr	r1, [pc, #16]	@ (800515c <HAL_RCC_GetPCLK1Freq+0x28>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000
 800515c:	080083a4 	.word	0x080083a4

08005160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005164:	f7ff ffda 	bl	800511c <HAL_RCC_GetHCLKFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	4b06      	ldr	r3, [pc, #24]	@ (8005184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	0adb      	lsrs	r3, r3, #11
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4904      	ldr	r1, [pc, #16]	@ (8005188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005176:	5ccb      	ldrb	r3, [r1, r3]
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40021000 	.word	0x40021000
 8005188:	080083a4 	.word	0x080083a4

0800518c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005192:	4b1e      	ldr	r3, [pc, #120]	@ (800520c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800519c:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	091b      	lsrs	r3, r3, #4
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d10c      	bne.n	80051ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051b0:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	4a14      	ldr	r2, [pc, #80]	@ (800520c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ba:	68d2      	ldr	r2, [r2, #12]
 80051bc:	0a12      	lsrs	r2, r2, #8
 80051be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	617b      	str	r3, [r7, #20]
    break;
 80051c8:	e00c      	b.n	80051e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ca:	4a12      	ldr	r2, [pc, #72]	@ (8005214 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d2:	4a0e      	ldr	r2, [pc, #56]	@ (800520c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d4:	68d2      	ldr	r2, [r2, #12]
 80051d6:	0a12      	lsrs	r2, r2, #8
 80051d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051dc:	fb02 f303 	mul.w	r3, r2, r3
 80051e0:	617b      	str	r3, [r7, #20]
    break;
 80051e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051e4:	4b09      	ldr	r3, [pc, #36]	@ (800520c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	0e5b      	lsrs	r3, r3, #25
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	3301      	adds	r3, #1
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051fe:	687b      	ldr	r3, [r7, #4]
}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40021000 	.word	0x40021000
 8005210:	016e3600 	.word	0x016e3600
 8005214:	00f42400 	.word	0x00f42400

08005218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005220:	2300      	movs	r3, #0
 8005222:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005224:	2300      	movs	r3, #0
 8005226:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8098 	beq.w	8005366 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005236:	2300      	movs	r3, #0
 8005238:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523a:	4b43      	ldr	r3, [pc, #268]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800523c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10d      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	4b40      	ldr	r3, [pc, #256]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524a:	4a3f      	ldr	r2, [pc, #252]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005250:	6593      	str	r3, [r2, #88]	@ 0x58
 8005252:	4b3d      	ldr	r3, [pc, #244]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525e:	2301      	movs	r3, #1
 8005260:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005262:	4b3a      	ldr	r3, [pc, #232]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a39      	ldr	r2, [pc, #228]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800526c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526e:	f7fc fefb 	bl	8002068 <HAL_GetTick>
 8005272:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005274:	e009      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005276:	f7fc fef7 	bl	8002068 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d902      	bls.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	74fb      	strb	r3, [r7, #19]
        break;
 8005288:	e005      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800528a:	4b30      	ldr	r3, [pc, #192]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0ef      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d159      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800529c:	4b2a      	ldr	r3, [pc, #168]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01e      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d019      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052b8:	4b23      	ldr	r3, [pc, #140]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c4:	4b20      	ldr	r3, [pc, #128]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052da:	4a1b      	ldr	r2, [pc, #108]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e4:	4a18      	ldr	r2, [pc, #96]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fc feb7 	bl	8002068 <HAL_GetTick>
 80052fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052fc:	e00b      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fe:	f7fc feb3 	bl	8002068 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800530c:	4293      	cmp	r3, r2
 800530e:	d902      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	74fb      	strb	r3, [r7, #19]
            break;
 8005314:	e006      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005316:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0ec      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532a:	4b07      	ldr	r3, [pc, #28]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005330:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005338:	4903      	ldr	r1, [pc, #12]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005340:	e008      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	74bb      	strb	r3, [r7, #18]
 8005346:	e005      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005348:	40021000 	.word	0x40021000
 800534c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005354:	7c7b      	ldrb	r3, [r7, #17]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535a:	4ba7      	ldr	r3, [pc, #668]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	4aa6      	ldr	r2, [pc, #664]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005364:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005372:	4ba1      	ldr	r3, [pc, #644]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	f023 0203 	bic.w	r2, r3, #3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	499d      	ldr	r1, [pc, #628]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005394:	4b98      	ldr	r3, [pc, #608]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539a:	f023 020c 	bic.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	4995      	ldr	r1, [pc, #596]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053b6:	4b90      	ldr	r3, [pc, #576]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	498c      	ldr	r1, [pc, #560]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053d8:	4b87      	ldr	r3, [pc, #540]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	4984      	ldr	r1, [pc, #528]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fa:	4b7f      	ldr	r3, [pc, #508]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	497b      	ldr	r1, [pc, #492]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800541c:	4b76      	ldr	r3, [pc, #472]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	4973      	ldr	r1, [pc, #460]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800543e:	4b6e      	ldr	r3, [pc, #440]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005444:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	496a      	ldr	r1, [pc, #424]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005460:	4b65      	ldr	r3, [pc, #404]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	4962      	ldr	r1, [pc, #392]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005482:	4b5d      	ldr	r3, [pc, #372]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	4959      	ldr	r1, [pc, #356]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054a4:	4b54      	ldr	r3, [pc, #336]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054aa:	f023 0203 	bic.w	r2, r3, #3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	4951      	ldr	r1, [pc, #324]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054c6:	4b4c      	ldr	r3, [pc, #304]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	4948      	ldr	r1, [pc, #288]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e8:	4b43      	ldr	r3, [pc, #268]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	4940      	ldr	r1, [pc, #256]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005508:	4b3b      	ldr	r3, [pc, #236]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a3a      	ldr	r2, [pc, #232]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005512:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005520:	4b35      	ldr	r3, [pc, #212]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552e:	4932      	ldr	r1, [pc, #200]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800553e:	d105      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005540:	4b2d      	ldr	r3, [pc, #180]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4a2c      	ldr	r2, [pc, #176]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800554a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d015      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005558:	4b27      	ldr	r3, [pc, #156]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	4924      	ldr	r1, [pc, #144]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005576:	d105      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005578:	4b1f      	ldr	r3, [pc, #124]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4a1e      	ldr	r2, [pc, #120]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005582:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	4916      	ldr	r1, [pc, #88]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ae:	d105      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b0:	4b11      	ldr	r3, [pc, #68]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4a10      	ldr	r2, [pc, #64]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d019      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055c8:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	4908      	ldr	r1, [pc, #32]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055e6:	d109      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e8:	4b03      	ldr	r3, [pc, #12]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a02      	ldr	r2, [pc, #8]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f2:	60d3      	str	r3, [r2, #12]
 80055f4:	e002      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005608:	4b29      	ldr	r3, [pc, #164]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005616:	4926      	ldr	r1, [pc, #152]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005626:	d105      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005628:	4b21      	ldr	r3, [pc, #132]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a20      	ldr	r2, [pc, #128]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005632:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d015      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005640:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005646:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564e:	4918      	ldr	r1, [pc, #96]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565e:	d105      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005660:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a12      	ldr	r2, [pc, #72]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800566a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005678:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800567a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800567e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005686:	490a      	ldr	r1, [pc, #40]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005696:	d105      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005698:	4b05      	ldr	r3, [pc, #20]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4a04      	ldr	r2, [pc, #16]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800569e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40021000 	.word	0x40021000

080056b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e049      	b.n	800575a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fc f9f6 	bl	8001acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f001 f86e 	bl	80067d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d001      	beq.n	800577c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e04c      	b.n	8005816 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a26      	ldr	r2, [pc, #152]	@ (8005824 <HAL_TIM_Base_Start+0xc0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_TIM_Base_Start+0x70>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005796:	d01d      	beq.n	80057d4 <HAL_TIM_Base_Start+0x70>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a22      	ldr	r2, [pc, #136]	@ (8005828 <HAL_TIM_Base_Start+0xc4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_TIM_Base_Start+0x70>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a21      	ldr	r2, [pc, #132]	@ (800582c <HAL_TIM_Base_Start+0xc8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <HAL_TIM_Base_Start+0x70>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005830 <HAL_TIM_Base_Start+0xcc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_TIM_Base_Start+0x70>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005834 <HAL_TIM_Base_Start+0xd0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_TIM_Base_Start+0x70>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005838 <HAL_TIM_Base_Start+0xd4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIM_Base_Start+0x70>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1b      	ldr	r2, [pc, #108]	@ (800583c <HAL_TIM_Base_Start+0xd8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d115      	bne.n	8005800 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	4b19      	ldr	r3, [pc, #100]	@ (8005840 <HAL_TIM_Base_Start+0xdc>)
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b06      	cmp	r3, #6
 80057e4:	d015      	beq.n	8005812 <HAL_TIM_Base_Start+0xae>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ec:	d011      	beq.n	8005812 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	e008      	b.n	8005812 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e000      	b.n	8005814 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40013400 	.word	0x40013400
 8005838:	40014000 	.word	0x40014000
 800583c:	40015000 	.word	0x40015000
 8005840:	00010007 	.word	0x00010007

08005844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d001      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e054      	b.n	8005906 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a26      	ldr	r2, [pc, #152]	@ (8005914 <HAL_TIM_Base_Start_IT+0xd0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d022      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005886:	d01d      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a22      	ldr	r2, [pc, #136]	@ (8005918 <HAL_TIM_Base_Start_IT+0xd4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d018      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a21      	ldr	r2, [pc, #132]	@ (800591c <HAL_TIM_Base_Start_IT+0xd8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d013      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <HAL_TIM_Base_Start_IT+0xdc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00e      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005924 <HAL_TIM_Base_Start_IT+0xe0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d009      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <HAL_TIM_Base_Start_IT+0xe4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d004      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1b      	ldr	r2, [pc, #108]	@ (800592c <HAL_TIM_Base_Start_IT+0xe8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d115      	bne.n	80058f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <HAL_TIM_Base_Start_IT+0xec>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b06      	cmp	r3, #6
 80058d4:	d015      	beq.n	8005902 <HAL_TIM_Base_Start_IT+0xbe>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058dc:	d011      	beq.n	8005902 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ee:	e008      	b.n	8005902 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e000      	b.n	8005904 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40013400 	.word	0x40013400
 8005928:	40014000 	.word	0x40014000
 800592c:	40015000 	.word	0x40015000
 8005930:	00010007 	.word	0x00010007

08005934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e049      	b.n	80059da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fc f97a 	bl	8001c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f000 ff2e 	bl	80067d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <HAL_TIM_PWM_Start+0x24>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e03c      	b.n	8005a82 <HAL_TIM_PWM_Start+0x9e>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d109      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x3e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	bf14      	ite	ne
 8005a1a:	2301      	movne	r3, #1
 8005a1c:	2300      	moveq	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	e02f      	b.n	8005a82 <HAL_TIM_PWM_Start+0x9e>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d109      	bne.n	8005a3c <HAL_TIM_PWM_Start+0x58>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e022      	b.n	8005a82 <HAL_TIM_PWM_Start+0x9e>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d109      	bne.n	8005a56 <HAL_TIM_PWM_Start+0x72>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	bf14      	ite	ne
 8005a4e:	2301      	movne	r3, #1
 8005a50:	2300      	moveq	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	e015      	b.n	8005a82 <HAL_TIM_PWM_Start+0x9e>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d109      	bne.n	8005a70 <HAL_TIM_PWM_Start+0x8c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e008      	b.n	8005a82 <HAL_TIM_PWM_Start+0x9e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e0a6      	b.n	8005bd8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_PWM_Start+0xb6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a98:	e023      	b.n	8005ae2 <HAL_TIM_PWM_Start+0xfe>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_PWM_Start+0xc6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa8:	e01b      	b.n	8005ae2 <HAL_TIM_PWM_Start+0xfe>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d104      	bne.n	8005aba <HAL_TIM_PWM_Start+0xd6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ab8:	e013      	b.n	8005ae2 <HAL_TIM_PWM_Start+0xfe>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b0c      	cmp	r3, #12
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_PWM_Start+0xe6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ac8:	e00b      	b.n	8005ae2 <HAL_TIM_PWM_Start+0xfe>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_PWM_Start+0xf6>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad8:	e003      	b.n	8005ae2 <HAL_TIM_PWM_Start+0xfe>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 fc16 	bl	800731c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a3a      	ldr	r2, [pc, #232]	@ (8005be0 <HAL_TIM_PWM_Start+0x1fc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d018      	beq.n	8005b2c <HAL_TIM_PWM_Start+0x148>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a39      	ldr	r2, [pc, #228]	@ (8005be4 <HAL_TIM_PWM_Start+0x200>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <HAL_TIM_PWM_Start+0x148>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a37      	ldr	r2, [pc, #220]	@ (8005be8 <HAL_TIM_PWM_Start+0x204>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_TIM_PWM_Start+0x148>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a36      	ldr	r2, [pc, #216]	@ (8005bec <HAL_TIM_PWM_Start+0x208>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d009      	beq.n	8005b2c <HAL_TIM_PWM_Start+0x148>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a34      	ldr	r2, [pc, #208]	@ (8005bf0 <HAL_TIM_PWM_Start+0x20c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_TIM_PWM_Start+0x148>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a33      	ldr	r2, [pc, #204]	@ (8005bf4 <HAL_TIM_PWM_Start+0x210>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIM_PWM_Start+0x14c>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_TIM_PWM_Start+0x14e>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a25      	ldr	r2, [pc, #148]	@ (8005be0 <HAL_TIM_PWM_Start+0x1fc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1b2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b58:	d01d      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1b2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a26      	ldr	r2, [pc, #152]	@ (8005bf8 <HAL_TIM_PWM_Start+0x214>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1b2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a24      	ldr	r2, [pc, #144]	@ (8005bfc <HAL_TIM_PWM_Start+0x218>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1b2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a23      	ldr	r2, [pc, #140]	@ (8005c00 <HAL_TIM_PWM_Start+0x21c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1b2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a19      	ldr	r2, [pc, #100]	@ (8005be4 <HAL_TIM_PWM_Start+0x200>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1b2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a18      	ldr	r2, [pc, #96]	@ (8005be8 <HAL_TIM_PWM_Start+0x204>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1b2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a18      	ldr	r2, [pc, #96]	@ (8005bf4 <HAL_TIM_PWM_Start+0x210>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d115      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	4b19      	ldr	r3, [pc, #100]	@ (8005c04 <HAL_TIM_PWM_Start+0x220>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d015      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1f0>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bae:	d011      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	e008      	b.n	8005bd4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e000      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400
 8005bf0:	40014800 	.word	0x40014800
 8005bf4:	40015000 	.word	0x40015000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	00010007 	.word	0x00010007

08005c08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e049      	b.n	8005cae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f841 	bl	8005cb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 fdc4 	bl	80067d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <HAL_TIM_IC_Start_IT+0x1e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	e023      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x66>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d104      	bne.n	8005cfa <HAL_TIM_IC_Start_IT+0x2e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	e01b      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x66>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_IC_Start_IT+0x3e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	e013      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x66>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_IC_Start_IT+0x4e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	e00b      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x66>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d104      	bne.n	8005d2a <HAL_TIM_IC_Start_IT+0x5e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e003      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d104      	bne.n	8005d44 <HAL_TIM_IC_Start_IT+0x78>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e013      	b.n	8005d6c <HAL_TIM_IC_Start_IT+0xa0>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d104      	bne.n	8005d54 <HAL_TIM_IC_Start_IT+0x88>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e00b      	b.n	8005d6c <HAL_TIM_IC_Start_IT+0xa0>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d104      	bne.n	8005d64 <HAL_TIM_IC_Start_IT+0x98>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e003      	b.n	8005d6c <HAL_TIM_IC_Start_IT+0xa0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d102      	bne.n	8005d7a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d74:	7b7b      	ldrb	r3, [r7, #13]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d001      	beq.n	8005d7e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e0e2      	b.n	8005f44 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_IC_Start_IT+0xc2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d8c:	e023      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_IC_Start_IT+0xd2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d9c:	e01b      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d104      	bne.n	8005dae <HAL_TIM_IC_Start_IT+0xe2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dac:	e013      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	d104      	bne.n	8005dbe <HAL_TIM_IC_Start_IT+0xf2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dbc:	e00b      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d104      	bne.n	8005dce <HAL_TIM_IC_Start_IT+0x102>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dcc:	e003      	b.n	8005dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_IC_Start_IT+0x11a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005de4:	e013      	b.n	8005e0e <HAL_TIM_IC_Start_IT+0x142>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_IC_Start_IT+0x12a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005df4:	e00b      	b.n	8005e0e <HAL_TIM_IC_Start_IT+0x142>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d104      	bne.n	8005e06 <HAL_TIM_IC_Start_IT+0x13a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e04:	e003      	b.n	8005e0e <HAL_TIM_IC_Start_IT+0x142>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d841      	bhi.n	8005e98 <HAL_TIM_IC_Start_IT+0x1cc>
 8005e14:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <HAL_TIM_IC_Start_IT+0x150>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e51 	.word	0x08005e51
 8005e20:	08005e99 	.word	0x08005e99
 8005e24:	08005e99 	.word	0x08005e99
 8005e28:	08005e99 	.word	0x08005e99
 8005e2c:	08005e63 	.word	0x08005e63
 8005e30:	08005e99 	.word	0x08005e99
 8005e34:	08005e99 	.word	0x08005e99
 8005e38:	08005e99 	.word	0x08005e99
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e99 	.word	0x08005e99
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005e99 	.word	0x08005e99
 8005e4c:	08005e87 	.word	0x08005e87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0202 	orr.w	r2, r2, #2
 8005e5e:	60da      	str	r2, [r3, #12]
      break;
 8005e60:	e01d      	b.n	8005e9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0204 	orr.w	r2, r2, #4
 8005e70:	60da      	str	r2, [r3, #12]
      break;
 8005e72:	e014      	b.n	8005e9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0208 	orr.w	r2, r2, #8
 8005e82:	60da      	str	r2, [r3, #12]
      break;
 8005e84:	e00b      	b.n	8005e9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0210 	orr.w	r2, r2, #16
 8005e94:	60da      	str	r2, [r3, #12]
      break;
 8005e96:	e002      	b.n	8005e9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d14e      	bne.n	8005f42 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 fa35 	bl	800731c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a25      	ldr	r2, [pc, #148]	@ (8005f4c <HAL_TIM_IC_Start_IT+0x280>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d022      	beq.n	8005f02 <HAL_TIM_IC_Start_IT+0x236>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec4:	d01d      	beq.n	8005f02 <HAL_TIM_IC_Start_IT+0x236>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a21      	ldr	r2, [pc, #132]	@ (8005f50 <HAL_TIM_IC_Start_IT+0x284>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d018      	beq.n	8005f02 <HAL_TIM_IC_Start_IT+0x236>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <HAL_TIM_IC_Start_IT+0x288>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <HAL_TIM_IC_Start_IT+0x236>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1e      	ldr	r2, [pc, #120]	@ (8005f58 <HAL_TIM_IC_Start_IT+0x28c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_TIM_IC_Start_IT+0x236>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f5c <HAL_TIM_IC_Start_IT+0x290>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_TIM_IC_Start_IT+0x236>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8005f60 <HAL_TIM_IC_Start_IT+0x294>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIM_IC_Start_IT+0x236>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a19      	ldr	r2, [pc, #100]	@ (8005f64 <HAL_TIM_IC_Start_IT+0x298>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d115      	bne.n	8005f2e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	4b17      	ldr	r3, [pc, #92]	@ (8005f68 <HAL_TIM_IC_Start_IT+0x29c>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b06      	cmp	r3, #6
 8005f12:	d015      	beq.n	8005f40 <HAL_TIM_IC_Start_IT+0x274>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1a:	d011      	beq.n	8005f40 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2c:	e008      	b.n	8005f40 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0201 	orr.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e000      	b.n	8005f42 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f40:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40013400 	.word	0x40013400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40015000 	.word	0x40015000
 8005f68:	00010007 	.word	0x00010007

08005f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d020      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01b      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0202 	mvn.w	r2, #2
 8005fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fb fa60 	bl	800147c <HAL_TIM_IC_CaptureCallback>
 8005fbc:	e005      	b.n	8005fca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fbea 	bl	8006798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fbf1 	bl	80067ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d020      	beq.n	800601c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0204 	mvn.w	r2, #4
 8005fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb fa3a 	bl	800147c <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fbc4 	bl	8006798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fbcb 	bl	80067ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d020      	beq.n	8006068 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0208 	mvn.w	r2, #8
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fb fa14 	bl	800147c <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fb9e 	bl	8006798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fba5 	bl	80067ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0210 	mvn.w	r2, #16
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2208      	movs	r2, #8
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fb f9ee 	bl	800147c <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fb78 	bl	8006798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb7f 	bl	80067ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0201 	mvn.w	r2, #1
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fb fa06 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d104      	bne.n	80060ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00c      	beq.n	8006106 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80060fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fa65 	bl	80075d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00c      	beq.n	800612a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 fa5d 	bl	80075e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fb39 	bl	80067c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00c      	beq.n	8006172 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0220 	mvn.w	r2, #32
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fa25 	bl	80075bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00c      	beq.n	8006196 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800618e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 fa31 	bl	80075f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00c      	beq.n	80061ba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 fa29 	bl	800760c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00c      	beq.n	80061de <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80061d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 fa21 	bl	8007620 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00c      	beq.n	8006202 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80061fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 fa19 	bl	8007634 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b086      	sub	sp, #24
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006224:	2302      	movs	r3, #2
 8006226:	e088      	b.n	800633a <HAL_TIM_IC_ConfigChannel+0x130>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d11b      	bne.n	800626e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006246:	f000 fea3 	bl	8006f90 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 020c 	bic.w	r2, r2, #12
 8006258:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6999      	ldr	r1, [r3, #24]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	619a      	str	r2, [r3, #24]
 800626c:	e060      	b.n	8006330 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b04      	cmp	r3, #4
 8006272:	d11c      	bne.n	80062ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006284:	f000 ff27 	bl	80070d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006296:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6999      	ldr	r1, [r3, #24]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	021a      	lsls	r2, r3, #8
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	619a      	str	r2, [r3, #24]
 80062ac:	e040      	b.n	8006330 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80062c4:	f000 ff74 	bl	80071b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69da      	ldr	r2, [r3, #28]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 020c 	bic.w	r2, r2, #12
 80062d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69d9      	ldr	r1, [r3, #28]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	61da      	str	r2, [r3, #28]
 80062ea:	e021      	b.n	8006330 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b0c      	cmp	r3, #12
 80062f0:	d11c      	bne.n	800632c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006302:	f000 ff91 	bl	8007228 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006314:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69d9      	ldr	r1, [r3, #28]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	021a      	lsls	r2, r3, #8
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	61da      	str	r2, [r3, #28]
 800632a:	e001      	b.n	8006330 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006338:	7dfb      	ldrb	r3, [r7, #23]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800635e:	2302      	movs	r3, #2
 8006360:	e0ff      	b.n	8006562 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b14      	cmp	r3, #20
 800636e:	f200 80f0 	bhi.w	8006552 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063cd 	.word	0x080063cd
 800637c:	08006553 	.word	0x08006553
 8006380:	08006553 	.word	0x08006553
 8006384:	08006553 	.word	0x08006553
 8006388:	0800640d 	.word	0x0800640d
 800638c:	08006553 	.word	0x08006553
 8006390:	08006553 	.word	0x08006553
 8006394:	08006553 	.word	0x08006553
 8006398:	0800644f 	.word	0x0800644f
 800639c:	08006553 	.word	0x08006553
 80063a0:	08006553 	.word	0x08006553
 80063a4:	08006553 	.word	0x08006553
 80063a8:	0800648f 	.word	0x0800648f
 80063ac:	08006553 	.word	0x08006553
 80063b0:	08006553 	.word	0x08006553
 80063b4:	08006553 	.word	0x08006553
 80063b8:	080064d1 	.word	0x080064d1
 80063bc:	08006553 	.word	0x08006553
 80063c0:	08006553 	.word	0x08006553
 80063c4:	08006553 	.word	0x08006553
 80063c8:	08006511 	.word	0x08006511
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fab2 	bl	800693c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0208 	orr.w	r2, r2, #8
 80063e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0204 	bic.w	r2, r2, #4
 80063f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6999      	ldr	r1, [r3, #24]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	619a      	str	r2, [r3, #24]
      break;
 800640a:	e0a5      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fb2c 	bl	8006a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6999      	ldr	r1, [r3, #24]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	021a      	lsls	r2, r3, #8
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	619a      	str	r2, [r3, #24]
      break;
 800644c:	e084      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fb9f 	bl	8006b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0208 	orr.w	r2, r2, #8
 8006468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0204 	bic.w	r2, r2, #4
 8006478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69d9      	ldr	r1, [r3, #28]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	61da      	str	r2, [r3, #28]
      break;
 800648c:	e064      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fc11 	bl	8006cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69d9      	ldr	r1, [r3, #28]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	021a      	lsls	r2, r3, #8
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	61da      	str	r2, [r3, #28]
      break;
 80064ce:	e043      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fc84 	bl	8006de4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0208 	orr.w	r2, r2, #8
 80064ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0204 	bic.w	r2, r2, #4
 80064fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800650e:	e023      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fcce 	bl	8006eb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800652a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800653a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006550:	e002      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	75fb      	strb	r3, [r7, #23]
      break;
 8006556:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_TIM_ConfigClockSource+0x1c>
 8006584:	2302      	movs	r3, #2
 8006586:	e0f6      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x20a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80065a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a6f      	ldr	r2, [pc, #444]	@ (8006780 <HAL_TIM_ConfigClockSource+0x214>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	f000 80c1 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1de>
 80065c8:	4a6d      	ldr	r2, [pc, #436]	@ (8006780 <HAL_TIM_ConfigClockSource+0x214>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	f200 80c6 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 80065d0:	4a6c      	ldr	r2, [pc, #432]	@ (8006784 <HAL_TIM_ConfigClockSource+0x218>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	f000 80b9 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1de>
 80065d8:	4a6a      	ldr	r2, [pc, #424]	@ (8006784 <HAL_TIM_ConfigClockSource+0x218>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	f200 80be 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 80065e0:	4a69      	ldr	r2, [pc, #420]	@ (8006788 <HAL_TIM_ConfigClockSource+0x21c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	f000 80b1 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1de>
 80065e8:	4a67      	ldr	r2, [pc, #412]	@ (8006788 <HAL_TIM_ConfigClockSource+0x21c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	f200 80b6 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 80065f0:	4a66      	ldr	r2, [pc, #408]	@ (800678c <HAL_TIM_ConfigClockSource+0x220>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	f000 80a9 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1de>
 80065f8:	4a64      	ldr	r2, [pc, #400]	@ (800678c <HAL_TIM_ConfigClockSource+0x220>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	f200 80ae 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 8006600:	4a63      	ldr	r2, [pc, #396]	@ (8006790 <HAL_TIM_ConfigClockSource+0x224>)
 8006602:	4293      	cmp	r3, r2
 8006604:	f000 80a1 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1de>
 8006608:	4a61      	ldr	r2, [pc, #388]	@ (8006790 <HAL_TIM_ConfigClockSource+0x224>)
 800660a:	4293      	cmp	r3, r2
 800660c:	f200 80a6 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 8006610:	4a60      	ldr	r2, [pc, #384]	@ (8006794 <HAL_TIM_ConfigClockSource+0x228>)
 8006612:	4293      	cmp	r3, r2
 8006614:	f000 8099 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1de>
 8006618:	4a5e      	ldr	r2, [pc, #376]	@ (8006794 <HAL_TIM_ConfigClockSource+0x228>)
 800661a:	4293      	cmp	r3, r2
 800661c:	f200 809e 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 8006620:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006624:	f000 8091 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1de>
 8006628:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800662c:	f200 8096 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 8006630:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006634:	f000 8089 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x1de>
 8006638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800663c:	f200 808e 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 8006640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006644:	d03e      	beq.n	80066c4 <HAL_TIM_ConfigClockSource+0x158>
 8006646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800664a:	f200 8087 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006652:	f000 8086 	beq.w	8006762 <HAL_TIM_ConfigClockSource+0x1f6>
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800665a:	d87f      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 800665c:	2b70      	cmp	r3, #112	@ 0x70
 800665e:	d01a      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x12a>
 8006660:	2b70      	cmp	r3, #112	@ 0x70
 8006662:	d87b      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 8006664:	2b60      	cmp	r3, #96	@ 0x60
 8006666:	d050      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x19e>
 8006668:	2b60      	cmp	r3, #96	@ 0x60
 800666a:	d877      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 800666c:	2b50      	cmp	r3, #80	@ 0x50
 800666e:	d03c      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x17e>
 8006670:	2b50      	cmp	r3, #80	@ 0x50
 8006672:	d873      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 8006674:	2b40      	cmp	r3, #64	@ 0x40
 8006676:	d058      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x1be>
 8006678:	2b40      	cmp	r3, #64	@ 0x40
 800667a:	d86f      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 800667c:	2b30      	cmp	r3, #48	@ 0x30
 800667e:	d064      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x1de>
 8006680:	2b30      	cmp	r3, #48	@ 0x30
 8006682:	d86b      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d060      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x1de>
 8006688:	2b20      	cmp	r3, #32
 800668a:	d867      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x1f0>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d05c      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x1de>
 8006690:	2b10      	cmp	r3, #16
 8006692:	d05a      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x1de>
 8006694:	e062      	b.n	800675c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066a6:	f000 fe19 	bl	80072dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	609a      	str	r2, [r3, #8]
      break;
 80066c2:	e04f      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066d4:	f000 fe02 	bl	80072dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066e6:	609a      	str	r2, [r3, #8]
      break;
 80066e8:	e03c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	461a      	mov	r2, r3
 80066f8:	f000 fcbe 	bl	8007078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2150      	movs	r1, #80	@ 0x50
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fdcd 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006708:	e02c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006716:	461a      	mov	r2, r3
 8006718:	f000 fd1a 	bl	8007150 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2160      	movs	r1, #96	@ 0x60
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fdbd 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006728:	e01c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006736:	461a      	mov	r2, r3
 8006738:	f000 fc9e 	bl	8007078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2140      	movs	r1, #64	@ 0x40
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fdad 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006748:	e00c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f000 fda4 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 800675a:	e003      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
      break;
 8006760:	e000      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	00100070 	.word	0x00100070
 8006784:	00100060 	.word	0x00100060
 8006788:	00100050 	.word	0x00100050
 800678c:	00100040 	.word	0x00100040
 8006790:	00100030 	.word	0x00100030
 8006794:	00100020 	.word	0x00100020

08006798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a4c      	ldr	r2, [pc, #304]	@ (8006918 <TIM_Base_SetConfig+0x144>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d017      	beq.n	800681c <TIM_Base_SetConfig+0x48>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f2:	d013      	beq.n	800681c <TIM_Base_SetConfig+0x48>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a49      	ldr	r2, [pc, #292]	@ (800691c <TIM_Base_SetConfig+0x148>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00f      	beq.n	800681c <TIM_Base_SetConfig+0x48>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a48      	ldr	r2, [pc, #288]	@ (8006920 <TIM_Base_SetConfig+0x14c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00b      	beq.n	800681c <TIM_Base_SetConfig+0x48>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a47      	ldr	r2, [pc, #284]	@ (8006924 <TIM_Base_SetConfig+0x150>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d007      	beq.n	800681c <TIM_Base_SetConfig+0x48>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a46      	ldr	r2, [pc, #280]	@ (8006928 <TIM_Base_SetConfig+0x154>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_Base_SetConfig+0x48>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a45      	ldr	r2, [pc, #276]	@ (800692c <TIM_Base_SetConfig+0x158>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d108      	bne.n	800682e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a39      	ldr	r2, [pc, #228]	@ (8006918 <TIM_Base_SetConfig+0x144>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d023      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683c:	d01f      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a36      	ldr	r2, [pc, #216]	@ (800691c <TIM_Base_SetConfig+0x148>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01b      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a35      	ldr	r2, [pc, #212]	@ (8006920 <TIM_Base_SetConfig+0x14c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d017      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a34      	ldr	r2, [pc, #208]	@ (8006924 <TIM_Base_SetConfig+0x150>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a33      	ldr	r2, [pc, #204]	@ (8006928 <TIM_Base_SetConfig+0x154>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00f      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a33      	ldr	r2, [pc, #204]	@ (8006930 <TIM_Base_SetConfig+0x15c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00b      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a32      	ldr	r2, [pc, #200]	@ (8006934 <TIM_Base_SetConfig+0x160>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d007      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a31      	ldr	r2, [pc, #196]	@ (8006938 <TIM_Base_SetConfig+0x164>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d003      	beq.n	800687e <TIM_Base_SetConfig+0xaa>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a2c      	ldr	r2, [pc, #176]	@ (800692c <TIM_Base_SetConfig+0x158>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d108      	bne.n	8006890 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a18      	ldr	r2, [pc, #96]	@ (8006918 <TIM_Base_SetConfig+0x144>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <TIM_Base_SetConfig+0x110>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a1a      	ldr	r2, [pc, #104]	@ (8006928 <TIM_Base_SetConfig+0x154>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00f      	beq.n	80068e4 <TIM_Base_SetConfig+0x110>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006930 <TIM_Base_SetConfig+0x15c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00b      	beq.n	80068e4 <TIM_Base_SetConfig+0x110>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a19      	ldr	r2, [pc, #100]	@ (8006934 <TIM_Base_SetConfig+0x160>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d007      	beq.n	80068e4 <TIM_Base_SetConfig+0x110>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a18      	ldr	r2, [pc, #96]	@ (8006938 <TIM_Base_SetConfig+0x164>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_Base_SetConfig+0x110>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a13      	ldr	r2, [pc, #76]	@ (800692c <TIM_Base_SetConfig+0x158>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d103      	bne.n	80068ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d105      	bne.n	800690a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f023 0201 	bic.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	611a      	str	r2, [r3, #16]
  }
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40000400 	.word	0x40000400
 8006920:	40000800 	.word	0x40000800
 8006924:	40000c00 	.word	0x40000c00
 8006928:	40013400 	.word	0x40013400
 800692c:	40015000 	.word	0x40015000
 8006930:	40014000 	.word	0x40014000
 8006934:	40014400 	.word	0x40014400
 8006938:	40014800 	.word	0x40014800

0800693c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f023 0201 	bic.w	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800696a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 0302 	bic.w	r3, r3, #2
 8006988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a30      	ldr	r2, [pc, #192]	@ (8006a58 <TIM_OC1_SetConfig+0x11c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d013      	beq.n	80069c4 <TIM_OC1_SetConfig+0x88>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a2f      	ldr	r2, [pc, #188]	@ (8006a5c <TIM_OC1_SetConfig+0x120>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00f      	beq.n	80069c4 <TIM_OC1_SetConfig+0x88>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a2e      	ldr	r2, [pc, #184]	@ (8006a60 <TIM_OC1_SetConfig+0x124>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <TIM_OC1_SetConfig+0x88>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a2d      	ldr	r2, [pc, #180]	@ (8006a64 <TIM_OC1_SetConfig+0x128>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d007      	beq.n	80069c4 <TIM_OC1_SetConfig+0x88>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <TIM_OC1_SetConfig+0x12c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_OC1_SetConfig+0x88>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a2b      	ldr	r2, [pc, #172]	@ (8006a6c <TIM_OC1_SetConfig+0x130>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d10c      	bne.n	80069de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f023 0308 	bic.w	r3, r3, #8
 80069ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <TIM_OC1_SetConfig+0x11c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <TIM_OC1_SetConfig+0xd2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a5c <TIM_OC1_SetConfig+0x120>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00f      	beq.n	8006a0e <TIM_OC1_SetConfig+0xd2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a60 <TIM_OC1_SetConfig+0x124>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00b      	beq.n	8006a0e <TIM_OC1_SetConfig+0xd2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a64 <TIM_OC1_SetConfig+0x128>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d007      	beq.n	8006a0e <TIM_OC1_SetConfig+0xd2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a19      	ldr	r2, [pc, #100]	@ (8006a68 <TIM_OC1_SetConfig+0x12c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d003      	beq.n	8006a0e <TIM_OC1_SetConfig+0xd2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a18      	ldr	r2, [pc, #96]	@ (8006a6c <TIM_OC1_SetConfig+0x130>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d111      	bne.n	8006a32 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	621a      	str	r2, [r3, #32]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40012c00 	.word	0x40012c00
 8006a5c:	40013400 	.word	0x40013400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800
 8006a6c:	40015000 	.word	0x40015000

08006a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	f023 0210 	bic.w	r2, r3, #16
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0320 	bic.w	r3, r3, #32
 8006abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a2c      	ldr	r2, [pc, #176]	@ (8006b80 <TIM_OC2_SetConfig+0x110>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d007      	beq.n	8006ae4 <TIM_OC2_SetConfig+0x74>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8006b84 <TIM_OC2_SetConfig+0x114>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC2_SetConfig+0x74>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a2a      	ldr	r2, [pc, #168]	@ (8006b88 <TIM_OC2_SetConfig+0x118>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d10d      	bne.n	8006b00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a1f      	ldr	r2, [pc, #124]	@ (8006b80 <TIM_OC2_SetConfig+0x110>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d013      	beq.n	8006b30 <TIM_OC2_SetConfig+0xc0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b84 <TIM_OC2_SetConfig+0x114>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00f      	beq.n	8006b30 <TIM_OC2_SetConfig+0xc0>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a1e      	ldr	r2, [pc, #120]	@ (8006b8c <TIM_OC2_SetConfig+0x11c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00b      	beq.n	8006b30 <TIM_OC2_SetConfig+0xc0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <TIM_OC2_SetConfig+0x120>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d007      	beq.n	8006b30 <TIM_OC2_SetConfig+0xc0>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a1c      	ldr	r2, [pc, #112]	@ (8006b94 <TIM_OC2_SetConfig+0x124>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC2_SetConfig+0xc0>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a17      	ldr	r2, [pc, #92]	@ (8006b88 <TIM_OC2_SetConfig+0x118>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d113      	bne.n	8006b58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40013400 	.word	0x40013400
 8006b88:	40015000 	.word	0x40015000
 8006b8c:	40014000 	.word	0x40014000
 8006b90:	40014400 	.word	0x40014400
 8006b94:	40014800 	.word	0x40014800

08006b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8006ca4 <TIM_OC3_SetConfig+0x10c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <TIM_OC3_SetConfig+0x72>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8006ca8 <TIM_OC3_SetConfig+0x110>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_OC3_SetConfig+0x72>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a29      	ldr	r2, [pc, #164]	@ (8006cac <TIM_OC3_SetConfig+0x114>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d10d      	bne.n	8006c26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca4 <TIM_OC3_SetConfig+0x10c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <TIM_OC3_SetConfig+0xbe>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca8 <TIM_OC3_SetConfig+0x110>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00f      	beq.n	8006c56 <TIM_OC3_SetConfig+0xbe>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb0 <TIM_OC3_SetConfig+0x118>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00b      	beq.n	8006c56 <TIM_OC3_SetConfig+0xbe>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb4 <TIM_OC3_SetConfig+0x11c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d007      	beq.n	8006c56 <TIM_OC3_SetConfig+0xbe>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb8 <TIM_OC3_SetConfig+0x120>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_OC3_SetConfig+0xbe>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a16      	ldr	r2, [pc, #88]	@ (8006cac <TIM_OC3_SetConfig+0x114>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d113      	bne.n	8006c7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	621a      	str	r2, [r3, #32]
}
 8006c98:	bf00      	nop
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40012c00 	.word	0x40012c00
 8006ca8:	40013400 	.word	0x40013400
 8006cac:	40015000 	.word	0x40015000
 8006cb0:	40014000 	.word	0x40014000
 8006cb4:	40014400 	.word	0x40014400
 8006cb8:	40014800 	.word	0x40014800

08006cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	031b      	lsls	r3, r3, #12
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006dcc <TIM_OC4_SetConfig+0x110>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d007      	beq.n	8006d30 <TIM_OC4_SetConfig+0x74>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd0 <TIM_OC4_SetConfig+0x114>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_OC4_SetConfig+0x74>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd4 <TIM_OC4_SetConfig+0x118>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d10d      	bne.n	8006d4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	031b      	lsls	r3, r3, #12
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dcc <TIM_OC4_SetConfig+0x110>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <TIM_OC4_SetConfig+0xc0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a1e      	ldr	r2, [pc, #120]	@ (8006dd0 <TIM_OC4_SetConfig+0x114>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00f      	beq.n	8006d7c <TIM_OC4_SetConfig+0xc0>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006dd8 <TIM_OC4_SetConfig+0x11c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00b      	beq.n	8006d7c <TIM_OC4_SetConfig+0xc0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a1d      	ldr	r2, [pc, #116]	@ (8006ddc <TIM_OC4_SetConfig+0x120>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d007      	beq.n	8006d7c <TIM_OC4_SetConfig+0xc0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006de0 <TIM_OC4_SetConfig+0x124>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_OC4_SetConfig+0xc0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a17      	ldr	r2, [pc, #92]	@ (8006dd4 <TIM_OC4_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d113      	bne.n	8006da4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	019b      	lsls	r3, r3, #6
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	019b      	lsls	r3, r3, #6
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40015000 	.word	0x40015000
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	041b      	lsls	r3, r3, #16
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a19      	ldr	r2, [pc, #100]	@ (8006ea0 <TIM_OC5_SetConfig+0xbc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <TIM_OC5_SetConfig+0x82>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a18      	ldr	r2, [pc, #96]	@ (8006ea4 <TIM_OC5_SetConfig+0xc0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00f      	beq.n	8006e66 <TIM_OC5_SetConfig+0x82>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a17      	ldr	r2, [pc, #92]	@ (8006ea8 <TIM_OC5_SetConfig+0xc4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00b      	beq.n	8006e66 <TIM_OC5_SetConfig+0x82>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a16      	ldr	r2, [pc, #88]	@ (8006eac <TIM_OC5_SetConfig+0xc8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d007      	beq.n	8006e66 <TIM_OC5_SetConfig+0x82>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a15      	ldr	r2, [pc, #84]	@ (8006eb0 <TIM_OC5_SetConfig+0xcc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <TIM_OC5_SetConfig+0x82>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a14      	ldr	r2, [pc, #80]	@ (8006eb4 <TIM_OC5_SetConfig+0xd0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d109      	bne.n	8006e7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	621a      	str	r2, [r3, #32]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	40013400 	.word	0x40013400
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40014400 	.word	0x40014400
 8006eb0:	40014800 	.word	0x40014800
 8006eb4:	40015000 	.word	0x40015000

08006eb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	051b      	lsls	r3, r3, #20
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f78 <TIM_OC6_SetConfig+0xc0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <TIM_OC6_SetConfig+0x84>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a19      	ldr	r2, [pc, #100]	@ (8006f7c <TIM_OC6_SetConfig+0xc4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00f      	beq.n	8006f3c <TIM_OC6_SetConfig+0x84>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a18      	ldr	r2, [pc, #96]	@ (8006f80 <TIM_OC6_SetConfig+0xc8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <TIM_OC6_SetConfig+0x84>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a17      	ldr	r2, [pc, #92]	@ (8006f84 <TIM_OC6_SetConfig+0xcc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_OC6_SetConfig+0x84>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a16      	ldr	r2, [pc, #88]	@ (8006f88 <TIM_OC6_SetConfig+0xd0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC6_SetConfig+0x84>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a15      	ldr	r2, [pc, #84]	@ (8006f8c <TIM_OC6_SetConfig+0xd4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d109      	bne.n	8006f50 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	029b      	lsls	r3, r3, #10
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40013400 	.word	0x40013400
 8006f80:	40014000 	.word	0x40014000
 8006f84:	40014400 	.word	0x40014400
 8006f88:	40014800 	.word	0x40014800
 8006f8c:	40015000 	.word	0x40015000

08006f90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	f023 0201 	bic.w	r2, r3, #1
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4a28      	ldr	r2, [pc, #160]	@ (800705c <TIM_TI1_SetConfig+0xcc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d01b      	beq.n	8006ff6 <TIM_TI1_SetConfig+0x66>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc4:	d017      	beq.n	8006ff6 <TIM_TI1_SetConfig+0x66>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a25      	ldr	r2, [pc, #148]	@ (8007060 <TIM_TI1_SetConfig+0xd0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d013      	beq.n	8006ff6 <TIM_TI1_SetConfig+0x66>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a24      	ldr	r2, [pc, #144]	@ (8007064 <TIM_TI1_SetConfig+0xd4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00f      	beq.n	8006ff6 <TIM_TI1_SetConfig+0x66>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a23      	ldr	r2, [pc, #140]	@ (8007068 <TIM_TI1_SetConfig+0xd8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00b      	beq.n	8006ff6 <TIM_TI1_SetConfig+0x66>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a22      	ldr	r2, [pc, #136]	@ (800706c <TIM_TI1_SetConfig+0xdc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d007      	beq.n	8006ff6 <TIM_TI1_SetConfig+0x66>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4a21      	ldr	r2, [pc, #132]	@ (8007070 <TIM_TI1_SetConfig+0xe0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d003      	beq.n	8006ff6 <TIM_TI1_SetConfig+0x66>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4a20      	ldr	r2, [pc, #128]	@ (8007074 <TIM_TI1_SetConfig+0xe4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d101      	bne.n	8006ffa <TIM_TI1_SetConfig+0x6a>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <TIM_TI1_SetConfig+0x6c>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d008      	beq.n	8007012 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e003      	b.n	800701a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f043 0301 	orr.w	r3, r3, #1
 8007018:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	b2db      	uxtb	r3, r3
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f023 030a 	bic.w	r3, r3, #10
 8007034:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f003 030a 	and.w	r3, r3, #10
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40012c00 	.word	0x40012c00
 8007060:	40000400 	.word	0x40000400
 8007064:	40000800 	.word	0x40000800
 8007068:	40000c00 	.word	0x40000c00
 800706c:	40013400 	.word	0x40013400
 8007070:	40014000 	.word	0x40014000
 8007074:	40015000 	.word	0x40015000

08007078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	f023 0201 	bic.w	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 030a 	bic.w	r3, r3, #10
 80070b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f023 0210 	bic.w	r2, r3, #16
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	031b      	lsls	r3, r3, #12
 800711a:	b29b      	uxth	r3, r3
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007128:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	621a      	str	r2, [r3, #32]
}
 8007144:	bf00      	nop
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f023 0210 	bic.w	r2, r3, #16
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800717a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	031b      	lsls	r3, r3, #12
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800718c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	621a      	str	r2, [r3, #32]
}
 80071a4:	bf00      	nop
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007200:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	621a      	str	r2, [r3, #32]
}
 800721c:	bf00      	nop
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007254:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4313      	orrs	r3, r2
 800725e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007266:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	031b      	lsls	r3, r3, #12
 800726c:	b29b      	uxth	r3, r3
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	4313      	orrs	r3, r2
 8007272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800727a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	031b      	lsls	r3, r3, #12
 8007280:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b085      	sub	sp, #20
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80072b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f043 0307 	orr.w	r3, r3, #7
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	609a      	str	r2, [r3, #8]
}
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	021a      	lsls	r2, r3, #8
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	431a      	orrs	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4313      	orrs	r3, r2
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	609a      	str	r2, [r3, #8]
}
 8007310:	bf00      	nop
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	2201      	movs	r2, #1
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1a      	ldr	r2, [r3, #32]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	43db      	mvns	r3, r3
 800733e:	401a      	ands	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1a      	ldr	r2, [r3, #32]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	fa01 f303 	lsl.w	r3, r1, r3
 8007354:	431a      	orrs	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
	...

08007368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800737c:	2302      	movs	r3, #2
 800737e:	e074      	b.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a34      	ldr	r2, [pc, #208]	@ (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d009      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a33      	ldr	r2, [pc, #204]	@ (800747c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d004      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a31      	ldr	r2, [pc, #196]	@ (8007480 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d108      	bne.n	80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80073d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a21      	ldr	r2, [pc, #132]	@ (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d022      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007400:	d01d      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a1f      	ldr	r2, [pc, #124]	@ (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d018      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1d      	ldr	r2, [pc, #116]	@ (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1c      	ldr	r2, [pc, #112]	@ (800748c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00e      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a15      	ldr	r2, [pc, #84]	@ (800747c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a18      	ldr	r2, [pc, #96]	@ (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a11      	ldr	r2, [pc, #68]	@ (8007480 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d10c      	bne.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4313      	orrs	r3, r2
 800744e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40013400 	.word	0x40013400
 8007480:	40015000 	.word	0x40015000
 8007484:	40000400 	.word	0x40000400
 8007488:	40000800 	.word	0x40000800
 800748c:	40000c00 	.word	0x40000c00
 8007490:	40014000 	.word	0x40014000

08007494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e078      	b.n	80075a2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	041b      	lsls	r3, r3, #16
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1c      	ldr	r2, [pc, #112]	@ (80075b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1b      	ldr	r2, [pc, #108]	@ (80075b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a19      	ldr	r2, [pc, #100]	@ (80075b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d11c      	bne.n	8007590 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	051b      	lsls	r3, r3, #20
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	4313      	orrs	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40013400 	.word	0x40013400
 80075b8:	40015000 	.word	0x40015000

080075bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e042      	b.n	80076e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7fa fbb9 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2224      	movs	r2, #36	@ 0x24
 8007676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0201 	bic.w	r2, r2, #1
 8007688:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fb24 	bl	8007ce0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f825 	bl	80076e8 <UART_SetConfig>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e01b      	b.n	80076e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0201 	orr.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fba3 	bl	8007e24 <UART_CheckIdleState>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076ec:	b08c      	sub	sp, #48	@ 0x30
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	431a      	orrs	r2, r3
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	431a      	orrs	r2, r3
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	4313      	orrs	r3, r2
 800770e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	4baa      	ldr	r3, [pc, #680]	@ (80079c0 <UART_SetConfig+0x2d8>)
 8007718:	4013      	ands	r3, r2
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	6812      	ldr	r2, [r2, #0]
 800771e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007720:	430b      	orrs	r3, r1
 8007722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a9f      	ldr	r2, [pc, #636]	@ (80079c4 <UART_SetConfig+0x2dc>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d004      	beq.n	8007754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007750:	4313      	orrs	r3, r2
 8007752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800775e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007768:	430b      	orrs	r3, r1
 800776a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007772:	f023 010f 	bic.w	r1, r3, #15
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a90      	ldr	r2, [pc, #576]	@ (80079c8 <UART_SetConfig+0x2e0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d125      	bne.n	80077d8 <UART_SetConfig+0xf0>
 800778c:	4b8f      	ldr	r3, [pc, #572]	@ (80079cc <UART_SetConfig+0x2e4>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b03      	cmp	r3, #3
 8007798:	d81a      	bhi.n	80077d0 <UART_SetConfig+0xe8>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <UART_SetConfig+0xb8>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077b1 	.word	0x080077b1
 80077a4:	080077c1 	.word	0x080077c1
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077c9 	.word	0x080077c9
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b6:	e116      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80077b8:	2302      	movs	r3, #2
 80077ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077be:	e112      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80077c0:	2304      	movs	r3, #4
 80077c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c6:	e10e      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80077c8:	2308      	movs	r3, #8
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ce:	e10a      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80077d0:	2310      	movs	r3, #16
 80077d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d6:	e106      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a7c      	ldr	r2, [pc, #496]	@ (80079d0 <UART_SetConfig+0x2e8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d138      	bne.n	8007854 <UART_SetConfig+0x16c>
 80077e2:	4b7a      	ldr	r3, [pc, #488]	@ (80079cc <UART_SetConfig+0x2e4>)
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e8:	f003 030c 	and.w	r3, r3, #12
 80077ec:	2b0c      	cmp	r3, #12
 80077ee:	d82d      	bhi.n	800784c <UART_SetConfig+0x164>
 80077f0:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <UART_SetConfig+0x110>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	0800782d 	.word	0x0800782d
 80077fc:	0800784d 	.word	0x0800784d
 8007800:	0800784d 	.word	0x0800784d
 8007804:	0800784d 	.word	0x0800784d
 8007808:	0800783d 	.word	0x0800783d
 800780c:	0800784d 	.word	0x0800784d
 8007810:	0800784d 	.word	0x0800784d
 8007814:	0800784d 	.word	0x0800784d
 8007818:	08007835 	.word	0x08007835
 800781c:	0800784d 	.word	0x0800784d
 8007820:	0800784d 	.word	0x0800784d
 8007824:	0800784d 	.word	0x0800784d
 8007828:	08007845 	.word	0x08007845
 800782c:	2300      	movs	r3, #0
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007832:	e0d8      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007834:	2302      	movs	r3, #2
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800783a:	e0d4      	b.n	80079e6 <UART_SetConfig+0x2fe>
 800783c:	2304      	movs	r3, #4
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007842:	e0d0      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007844:	2308      	movs	r3, #8
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800784a:	e0cc      	b.n	80079e6 <UART_SetConfig+0x2fe>
 800784c:	2310      	movs	r3, #16
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007852:	e0c8      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a5e      	ldr	r2, [pc, #376]	@ (80079d4 <UART_SetConfig+0x2ec>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d125      	bne.n	80078aa <UART_SetConfig+0x1c2>
 800785e:	4b5b      	ldr	r3, [pc, #364]	@ (80079cc <UART_SetConfig+0x2e4>)
 8007860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007864:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007868:	2b30      	cmp	r3, #48	@ 0x30
 800786a:	d016      	beq.n	800789a <UART_SetConfig+0x1b2>
 800786c:	2b30      	cmp	r3, #48	@ 0x30
 800786e:	d818      	bhi.n	80078a2 <UART_SetConfig+0x1ba>
 8007870:	2b20      	cmp	r3, #32
 8007872:	d00a      	beq.n	800788a <UART_SetConfig+0x1a2>
 8007874:	2b20      	cmp	r3, #32
 8007876:	d814      	bhi.n	80078a2 <UART_SetConfig+0x1ba>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <UART_SetConfig+0x19a>
 800787c:	2b10      	cmp	r3, #16
 800787e:	d008      	beq.n	8007892 <UART_SetConfig+0x1aa>
 8007880:	e00f      	b.n	80078a2 <UART_SetConfig+0x1ba>
 8007882:	2300      	movs	r3, #0
 8007884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007888:	e0ad      	b.n	80079e6 <UART_SetConfig+0x2fe>
 800788a:	2302      	movs	r3, #2
 800788c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007890:	e0a9      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007892:	2304      	movs	r3, #4
 8007894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007898:	e0a5      	b.n	80079e6 <UART_SetConfig+0x2fe>
 800789a:	2308      	movs	r3, #8
 800789c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078a0:	e0a1      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80078a2:	2310      	movs	r3, #16
 80078a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078a8:	e09d      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a4a      	ldr	r2, [pc, #296]	@ (80079d8 <UART_SetConfig+0x2f0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d125      	bne.n	8007900 <UART_SetConfig+0x218>
 80078b4:	4b45      	ldr	r3, [pc, #276]	@ (80079cc <UART_SetConfig+0x2e4>)
 80078b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80078be:	2bc0      	cmp	r3, #192	@ 0xc0
 80078c0:	d016      	beq.n	80078f0 <UART_SetConfig+0x208>
 80078c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80078c4:	d818      	bhi.n	80078f8 <UART_SetConfig+0x210>
 80078c6:	2b80      	cmp	r3, #128	@ 0x80
 80078c8:	d00a      	beq.n	80078e0 <UART_SetConfig+0x1f8>
 80078ca:	2b80      	cmp	r3, #128	@ 0x80
 80078cc:	d814      	bhi.n	80078f8 <UART_SetConfig+0x210>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <UART_SetConfig+0x1f0>
 80078d2:	2b40      	cmp	r3, #64	@ 0x40
 80078d4:	d008      	beq.n	80078e8 <UART_SetConfig+0x200>
 80078d6:	e00f      	b.n	80078f8 <UART_SetConfig+0x210>
 80078d8:	2300      	movs	r3, #0
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078de:	e082      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80078e0:	2302      	movs	r3, #2
 80078e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e6:	e07e      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80078e8:	2304      	movs	r3, #4
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ee:	e07a      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80078f0:	2308      	movs	r3, #8
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f6:	e076      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80078f8:	2310      	movs	r3, #16
 80078fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078fe:	e072      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a35      	ldr	r2, [pc, #212]	@ (80079dc <UART_SetConfig+0x2f4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d12a      	bne.n	8007960 <UART_SetConfig+0x278>
 800790a:	4b30      	ldr	r3, [pc, #192]	@ (80079cc <UART_SetConfig+0x2e4>)
 800790c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007918:	d01a      	beq.n	8007950 <UART_SetConfig+0x268>
 800791a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800791e:	d81b      	bhi.n	8007958 <UART_SetConfig+0x270>
 8007920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007924:	d00c      	beq.n	8007940 <UART_SetConfig+0x258>
 8007926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800792a:	d815      	bhi.n	8007958 <UART_SetConfig+0x270>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <UART_SetConfig+0x250>
 8007930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007934:	d008      	beq.n	8007948 <UART_SetConfig+0x260>
 8007936:	e00f      	b.n	8007958 <UART_SetConfig+0x270>
 8007938:	2300      	movs	r3, #0
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e052      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007940:	2302      	movs	r3, #2
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007946:	e04e      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007948:	2304      	movs	r3, #4
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794e:	e04a      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007950:	2308      	movs	r3, #8
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007956:	e046      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007958:	2310      	movs	r3, #16
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800795e:	e042      	b.n	80079e6 <UART_SetConfig+0x2fe>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a17      	ldr	r2, [pc, #92]	@ (80079c4 <UART_SetConfig+0x2dc>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d13a      	bne.n	80079e0 <UART_SetConfig+0x2f8>
 800796a:	4b18      	ldr	r3, [pc, #96]	@ (80079cc <UART_SetConfig+0x2e4>)
 800796c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007970:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007974:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007978:	d01a      	beq.n	80079b0 <UART_SetConfig+0x2c8>
 800797a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800797e:	d81b      	bhi.n	80079b8 <UART_SetConfig+0x2d0>
 8007980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007984:	d00c      	beq.n	80079a0 <UART_SetConfig+0x2b8>
 8007986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800798a:	d815      	bhi.n	80079b8 <UART_SetConfig+0x2d0>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <UART_SetConfig+0x2b0>
 8007990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007994:	d008      	beq.n	80079a8 <UART_SetConfig+0x2c0>
 8007996:	e00f      	b.n	80079b8 <UART_SetConfig+0x2d0>
 8007998:	2300      	movs	r3, #0
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e022      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80079a0:	2302      	movs	r3, #2
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e01e      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80079a8:	2304      	movs	r3, #4
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ae:	e01a      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80079b0:	2308      	movs	r3, #8
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b6:	e016      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80079b8:	2310      	movs	r3, #16
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079be:	e012      	b.n	80079e6 <UART_SetConfig+0x2fe>
 80079c0:	cfff69f3 	.word	0xcfff69f3
 80079c4:	40008000 	.word	0x40008000
 80079c8:	40013800 	.word	0x40013800
 80079cc:	40021000 	.word	0x40021000
 80079d0:	40004400 	.word	0x40004400
 80079d4:	40004800 	.word	0x40004800
 80079d8:	40004c00 	.word	0x40004c00
 80079dc:	40005000 	.word	0x40005000
 80079e0:	2310      	movs	r3, #16
 80079e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4aae      	ldr	r2, [pc, #696]	@ (8007ca4 <UART_SetConfig+0x5bc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	f040 8097 	bne.w	8007b20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d823      	bhi.n	8007a42 <UART_SetConfig+0x35a>
 80079fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <UART_SetConfig+0x318>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a25 	.word	0x08007a25
 8007a04:	08007a43 	.word	0x08007a43
 8007a08:	08007a2d 	.word	0x08007a2d
 8007a0c:	08007a43 	.word	0x08007a43
 8007a10:	08007a33 	.word	0x08007a33
 8007a14:	08007a43 	.word	0x08007a43
 8007a18:	08007a43 	.word	0x08007a43
 8007a1c:	08007a43 	.word	0x08007a43
 8007a20:	08007a3b 	.word	0x08007a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a24:	f7fd fb86 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8007a28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a2a:	e010      	b.n	8007a4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a2c:	4b9e      	ldr	r3, [pc, #632]	@ (8007ca8 <UART_SetConfig+0x5c0>)
 8007a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a30:	e00d      	b.n	8007a4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a32:	f7fd fb11 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8007a36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a38:	e009      	b.n	8007a4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a40:	e005      	b.n	8007a4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 8130 	beq.w	8007cb6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5a:	4a94      	ldr	r2, [pc, #592]	@ (8007cac <UART_SetConfig+0x5c4>)
 8007a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	4413      	add	r3, r2
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d305      	bcc.n	8007a86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d903      	bls.n	8007a8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a8c:	e113      	b.n	8007cb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	2200      	movs	r2, #0
 8007a92:	60bb      	str	r3, [r7, #8]
 8007a94:	60fa      	str	r2, [r7, #12]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9a:	4a84      	ldr	r2, [pc, #528]	@ (8007cac <UART_SetConfig+0x5c4>)
 8007a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	603b      	str	r3, [r7, #0]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ab0:	f7f8 fbb2 	bl	8000218 <__aeabi_uldivmod>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4619      	mov	r1, r3
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	020b      	lsls	r3, r1, #8
 8007ac6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007aca:	0202      	lsls	r2, r0, #8
 8007acc:	6979      	ldr	r1, [r7, #20]
 8007ace:	6849      	ldr	r1, [r1, #4]
 8007ad0:	0849      	lsrs	r1, r1, #1
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	eb12 0804 	adds.w	r8, r2, r4
 8007adc:	eb43 0905 	adc.w	r9, r3, r5
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	469a      	mov	sl, r3
 8007ae8:	4693      	mov	fp, r2
 8007aea:	4652      	mov	r2, sl
 8007aec:	465b      	mov	r3, fp
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 fb91 	bl	8000218 <__aeabi_uldivmod>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4613      	mov	r3, r2
 8007afc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b04:	d308      	bcc.n	8007b18 <UART_SetConfig+0x430>
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b0c:	d204      	bcs.n	8007b18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6a3a      	ldr	r2, [r7, #32]
 8007b14:	60da      	str	r2, [r3, #12]
 8007b16:	e0ce      	b.n	8007cb6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b1e:	e0ca      	b.n	8007cb6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b28:	d166      	bne.n	8007bf8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d827      	bhi.n	8007b82 <UART_SetConfig+0x49a>
 8007b32:	a201      	add	r2, pc, #4	@ (adr r2, 8007b38 <UART_SetConfig+0x450>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	08007b83 	.word	0x08007b83
 8007b48:	08007b73 	.word	0x08007b73
 8007b4c:	08007b83 	.word	0x08007b83
 8007b50:	08007b83 	.word	0x08007b83
 8007b54:	08007b83 	.word	0x08007b83
 8007b58:	08007b7b 	.word	0x08007b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b5c:	f7fd faea 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8007b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b62:	e014      	b.n	8007b8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b64:	f7fd fafc 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8007b68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b6a:	e010      	b.n	8007b8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8007ca8 <UART_SetConfig+0x5c0>)
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b70:	e00d      	b.n	8007b8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b72:	f7fd fa71 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8007b76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b78:	e009      	b.n	8007b8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b80:	e005      	b.n	8007b8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8090 	beq.w	8007cb6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9a:	4a44      	ldr	r2, [pc, #272]	@ (8007cac <UART_SetConfig+0x5c4>)
 8007b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba8:	005a      	lsls	r2, r3, #1
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	441a      	add	r2, r3
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	2b0f      	cmp	r3, #15
 8007bc0:	d916      	bls.n	8007bf0 <UART_SetConfig+0x508>
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc8:	d212      	bcs.n	8007bf0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	f023 030f 	bic.w	r3, r3, #15
 8007bd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	085b      	lsrs	r3, r3, #1
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	8bfb      	ldrh	r3, [r7, #30]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	8bfa      	ldrh	r2, [r7, #30]
 8007bec:	60da      	str	r2, [r3, #12]
 8007bee:	e062      	b.n	8007cb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007bf6:	e05e      	b.n	8007cb6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bf8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d828      	bhi.n	8007c52 <UART_SetConfig+0x56a>
 8007c00:	a201      	add	r2, pc, #4	@ (adr r2, 8007c08 <UART_SetConfig+0x520>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c2d 	.word	0x08007c2d
 8007c0c:	08007c35 	.word	0x08007c35
 8007c10:	08007c3d 	.word	0x08007c3d
 8007c14:	08007c53 	.word	0x08007c53
 8007c18:	08007c43 	.word	0x08007c43
 8007c1c:	08007c53 	.word	0x08007c53
 8007c20:	08007c53 	.word	0x08007c53
 8007c24:	08007c53 	.word	0x08007c53
 8007c28:	08007c4b 	.word	0x08007c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c2c:	f7fd fa82 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8007c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c32:	e014      	b.n	8007c5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c34:	f7fd fa94 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8007c38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c3a:	e010      	b.n	8007c5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca8 <UART_SetConfig+0x5c0>)
 8007c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c40:	e00d      	b.n	8007c5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c42:	f7fd fa09 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8007c46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c48:	e009      	b.n	8007c5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c50:	e005      	b.n	8007c5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c5c:	bf00      	nop
    }

    if (pclk != 0U)
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d028      	beq.n	8007cb6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c68:	4a10      	ldr	r2, [pc, #64]	@ (8007cac <UART_SetConfig+0x5c4>)
 8007c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c72:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	085b      	lsrs	r3, r3, #1
 8007c7c:	441a      	add	r2, r3
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	2b0f      	cmp	r3, #15
 8007c8c:	d910      	bls.n	8007cb0 <UART_SetConfig+0x5c8>
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c94:	d20c      	bcs.n	8007cb0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60da      	str	r2, [r3, #12]
 8007ca0:	e009      	b.n	8007cb6 <UART_SetConfig+0x5ce>
 8007ca2:	bf00      	nop
 8007ca4:	40008000 	.word	0x40008000
 8007ca8:	00f42400 	.word	0x00f42400
 8007cac:	080083ac 	.word	0x080083ac
      }
      else
      {
        ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007cd2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3730      	adds	r7, #48	@ 0x30
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d52:	f003 0304 	and.w	r3, r3, #4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01a      	beq.n	8007df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dde:	d10a      	bne.n	8007df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	605a      	str	r2, [r3, #4]
  }
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b098      	sub	sp, #96	@ 0x60
 8007e28:	af02      	add	r7, sp, #8
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e34:	f7fa f918 	bl	8002068 <HAL_GetTick>
 8007e38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d12f      	bne.n	8007ea8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e50:	2200      	movs	r2, #0
 8007e52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f88e 	bl	8007f78 <UART_WaitOnFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d022      	beq.n	8007ea8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e6      	bne.n	8007e62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e063      	b.n	8007f70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d149      	bne.n	8007f4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f857 	bl	8007f78 <UART_WaitOnFlagUntilTimeout>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d03c      	beq.n	8007f4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eee:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e6      	bne.n	8007ed0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f22:	61fa      	str	r2, [r7, #28]
 8007f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	69b9      	ldr	r1, [r7, #24]
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e5      	bne.n	8007f02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e012      	b.n	8007f70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3758      	adds	r7, #88	@ 0x58
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	603b      	str	r3, [r7, #0]
 8007f84:	4613      	mov	r3, r2
 8007f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f88:	e04f      	b.n	800802a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f90:	d04b      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f92:	f7fa f869 	bl	8002068 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d302      	bcc.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e04e      	b.n	800804a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d037      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b80      	cmp	r3, #128	@ 0x80
 8007fbe:	d034      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b40      	cmp	r3, #64	@ 0x40
 8007fc4:	d031      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	f003 0308 	and.w	r3, r3, #8
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d110      	bne.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2208      	movs	r2, #8
 8007fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f838 	bl	8008052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e029      	b.n	800804a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008004:	d111      	bne.n	800802a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800800e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f81e 	bl	8008052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2220      	movs	r2, #32
 800801a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e00f      	b.n	800804a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69da      	ldr	r2, [r3, #28]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	4013      	ands	r3, r2
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	429a      	cmp	r2, r3
 8008038:	bf0c      	ite	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	2300      	movne	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	429a      	cmp	r2, r3
 8008046:	d0a0      	beq.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008052:	b480      	push	{r7}
 8008054:	b095      	sub	sp, #84	@ 0x54
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800806e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008078:	643b      	str	r3, [r7, #64]	@ 0x40
 800807a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800807e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	61fb      	str	r3, [r7, #28]
   return(result);
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080a2:	f023 0301 	bic.w	r3, r3, #1
 80080a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e3      	bne.n	800808c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d118      	bne.n	80080fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f023 0310 	bic.w	r3, r3, #16
 80080e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6979      	ldr	r1, [r7, #20]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	613b      	str	r3, [r7, #16]
   return(result);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e6      	bne.n	80080cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008112:	bf00      	nop
 8008114:	3754      	adds	r7, #84	@ 0x54
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_UARTEx_DisableFifoMode+0x16>
 8008130:	2302      	movs	r3, #2
 8008132:	e027      	b.n	8008184 <HAL_UARTEx_DisableFifoMode+0x66>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2224      	movs	r2, #36	@ 0x24
 8008140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008162:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e02d      	b.n	8008204 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2224      	movs	r2, #36	@ 0x24
 80081b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0201 	bic.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f84f 	bl	8008288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008220:	2302      	movs	r3, #2
 8008222:	e02d      	b.n	8008280 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2224      	movs	r2, #36	@ 0x24
 8008230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0201 	bic.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f811 	bl	8008288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008294:	2b00      	cmp	r3, #0
 8008296:	d108      	bne.n	80082aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082a8:	e031      	b.n	800830e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082aa:	2308      	movs	r3, #8
 80082ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082ae:	2308      	movs	r3, #8
 80082b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	0e5b      	lsrs	r3, r3, #25
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	0f5b      	lsrs	r3, r3, #29
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	7b3a      	ldrb	r2, [r7, #12]
 80082d6:	4911      	ldr	r1, [pc, #68]	@ (800831c <UARTEx_SetNbDataToProcess+0x94>)
 80082d8:	5c8a      	ldrb	r2, [r1, r2]
 80082da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082de:	7b3a      	ldrb	r2, [r7, #12]
 80082e0:	490f      	ldr	r1, [pc, #60]	@ (8008320 <UARTEx_SetNbDataToProcess+0x98>)
 80082e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	7b7a      	ldrb	r2, [r7, #13]
 80082f4:	4909      	ldr	r1, [pc, #36]	@ (800831c <UARTEx_SetNbDataToProcess+0x94>)
 80082f6:	5c8a      	ldrb	r2, [r1, r2]
 80082f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082fc:	7b7a      	ldrb	r2, [r7, #13]
 80082fe:	4908      	ldr	r1, [pc, #32]	@ (8008320 <UARTEx_SetNbDataToProcess+0x98>)
 8008300:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008302:	fb93 f3f2 	sdiv	r3, r3, r2
 8008306:	b29a      	uxth	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800830e:	bf00      	nop
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	080083c4 	.word	0x080083c4
 8008320:	080083cc 	.word	0x080083cc

08008324 <memset>:
 8008324:	4402      	add	r2, r0
 8008326:	4603      	mov	r3, r0
 8008328:	4293      	cmp	r3, r2
 800832a:	d100      	bne.n	800832e <memset+0xa>
 800832c:	4770      	bx	lr
 800832e:	f803 1b01 	strb.w	r1, [r3], #1
 8008332:	e7f9      	b.n	8008328 <memset+0x4>

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	@ (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	@ (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	@ (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	@ (8008378 <__libc_init_array+0x44>)
 8008348:	f000 f818 	bl	800837c <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	080083dc 	.word	0x080083dc
 8008370:	080083dc 	.word	0x080083dc
 8008374:	080083dc 	.word	0x080083dc
 8008378:	080083e0 	.word	0x080083e0

0800837c <_init>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	bf00      	nop
 8008380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	469e      	mov	lr, r3
 8008386:	4770      	bx	lr

08008388 <_fini>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr
