
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005dc0  08005dc0  00006dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e48  08005e48  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e48  08005e48  00006e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e50  08005e50  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e50  08005e50  00006e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e54  08005e54  00006e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000000c  08005e64  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005e64  00007258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016afe  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c79  00000000  00000000  0001db3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  000207b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb2  00000000  00000000  00021be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028249  00000000  00000000  00022b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185ae  00000000  00000000  0004ade3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ef74  00000000  00000000  00063391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005698  00000000  00000000  00172348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001779e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005da8 	.word	0x08005da8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005da8 	.word	0x08005da8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f005 fc15 	bl	8005d50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f001 f88b 	bl	80016ac <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 fbc9 	bl	8000d32 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f001 fea0 	bl	80022f0 <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 fbbc 	bl	8000d32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_ADC1_Init+0xf0>)
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f001 fa24 	bl	8001a24 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f000 fba6 	bl	8000d32 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	04300002 	.word	0x04300002
 80005f8:	407f0000 	.word	0x407f0000

080005fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2220      	movs	r2, #32
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f005 fba1 	bl	8005d50 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800060e:	4b2b      	ldr	r3, [pc, #172]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000610:	4a2b      	ldr	r2, [pc, #172]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000616:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800061a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <MX_ADC2_Init+0xc0>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000628:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <MX_ADC2_Init+0xc0>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062e:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000636:	2204      	movs	r2, #4
 8000638:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800063a:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <MX_ADC2_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000642:	2200      	movs	r2, #0
 8000644:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_ADC2_Init+0xc0>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000654:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000656:	2200      	movs	r2, #0
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_ADC2_Init+0xc0>)
 800065c:	2200      	movs	r2, #0
 800065e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_ADC2_Init+0xc0>)
 800066a:	2200      	movs	r2, #0
 800066c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000676:	4811      	ldr	r0, [pc, #68]	@ (80006bc <MX_ADC2_Init+0xc0>)
 8000678:	f001 f818 	bl	80016ac <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000682:	f000 fb56 	bl	8000d32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_ADC2_Init+0xc8>)
 8000688:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068a:	2306      	movs	r3, #6
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <MX_ADC2_Init+0xcc>)
 8000694:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000696:	2304      	movs	r3, #4
 8000698:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <MX_ADC2_Init+0xc0>)
 80006a4:	f001 f9be 	bl	8001a24 <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006ae:	f000 fb40 	bl	8000d32 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000094 	.word	0x20000094
 80006c0:	50000100 	.word	0x50000100
 80006c4:	0c900008 	.word	0x0c900008
 80006c8:	407f0000 	.word	0x407f0000

080006cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	@ 0x30
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2220      	movs	r2, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f005 fb33 	bl	8005d50 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006ea:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 80006ec:	4a31      	ldr	r2, [pc, #196]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 80006ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f0:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 80006f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006f8:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fe:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000704:	4b2a      	ldr	r3, [pc, #168]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000712:	2204      	movs	r2, #4
 8000714:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000718:	2200      	movs	r2, #0
 800071a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800071c:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 800071e:	2200      	movs	r2, #0
 8000720:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000722:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000732:	2200      	movs	r2, #0
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000738:	2200      	movs	r2, #0
 800073a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000746:	2200      	movs	r2, #0
 8000748:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000752:	4817      	ldr	r0, [pc, #92]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 8000754:	f000 ffaa 	bl	80016ac <HAL_ADC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800075e:	f000 fae8 	bl	8000d32 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076a:	4619      	mov	r1, r3
 800076c:	4810      	ldr	r0, [pc, #64]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 800076e:	f001 fdbf 	bl	80022f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000778:	f000 fadb 	bl	8000d32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_ADC3_Init+0xec>)
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000780:	2306      	movs	r3, #6
 8000782:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000788:	237f      	movs	r3, #127	@ 0x7f
 800078a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078c:	2304      	movs	r3, #4
 800078e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_ADC3_Init+0xe4>)
 800079a:	f001 f943 	bl	8001a24 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80007a4:	f000 fac5 	bl	8000d32 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000100 	.word	0x20000100
 80007b4:	50000400 	.word	0x50000400
 80007b8:	14f00020 	.word	0x14f00020

080007bc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0a2      	sub	sp, #136	@ 0x88
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	2254      	movs	r2, #84	@ 0x54
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f005 fab7 	bl	8005d50 <memset>
  if(adcHandle->Instance==ADC1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ea:	d13e      	bne.n	800086a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007f6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 ff2f 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000808:	f000 fa93 	bl	8000d32 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800080c:	4b58      	ldr	r3, [pc, #352]	@ (8000970 <HAL_ADC_MspInit+0x1b4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a57      	ldr	r2, [pc, #348]	@ (8000970 <HAL_ADC_MspInit+0x1b4>)
 8000814:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000816:	4b56      	ldr	r3, [pc, #344]	@ (8000970 <HAL_ADC_MspInit+0x1b4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d10b      	bne.n	8000836 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800081e:	4b55      	ldr	r3, [pc, #340]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a54      	ldr	r2, [pc, #336]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 8000824:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b52      	ldr	r3, [pc, #328]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b4f      	ldr	r3, [pc, #316]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a4e      	ldr	r2, [pc, #312]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b4c      	ldr	r3, [pc, #304]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin|DISTANCE_IR_FRONTAL_Pin;
 800084e:	2303      	movs	r3, #3
 8000850:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800085e:	4619      	mov	r1, r3
 8000860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000864:	f001 ff5c 	bl	8002720 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000868:	e07d      	b.n	8000966 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a42      	ldr	r2, [pc, #264]	@ (8000978 <HAL_ADC_MspInit+0x1bc>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d13e      	bne.n	80008f2 <HAL_ADC_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000878:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800087a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800087e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f002 feeb 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8000890:	f000 fa4f 	bl	8000d32 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000894:	4b36      	ldr	r3, [pc, #216]	@ (8000970 <HAL_ADC_MspInit+0x1b4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	4a35      	ldr	r2, [pc, #212]	@ (8000970 <HAL_ADC_MspInit+0x1b4>)
 800089c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800089e:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <HAL_ADC_MspInit+0x1b4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d10b      	bne.n	80008be <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008a6:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a32      	ldr	r2, [pc, #200]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 80008ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 80008d6:	23c0      	movs	r3, #192	@ 0xc0
 80008d8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008da:	2303      	movs	r3, #3
 80008dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f001 ff18 	bl	8002720 <HAL_GPIO_Init>
}
 80008f0:	e039      	b.n	8000966 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC3)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a21      	ldr	r2, [pc, #132]	@ (800097c <HAL_ADC_MspInit+0x1c0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d134      	bne.n	8000966 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80008fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000900:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000902:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000906:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fea7 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8000918:	f000 fa0b 	bl	8000d32 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000920:	4a14      	ldr	r2, [pc, #80]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 800093a:	f043 0302 	orr.w	r3, r3, #2
 800093e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_ADC_MspInit+0x1b8>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000950:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000952:	2303      	movs	r3, #3
 8000954:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <HAL_ADC_MspInit+0x1c4>)
 8000962:	f001 fedd 	bl	8002720 <HAL_GPIO_Init>
}
 8000966:	bf00      	nop
 8000968:	3788      	adds	r7, #136	@ 0x88
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000016c 	.word	0x2000016c
 8000974:	40021000 	.word	0x40021000
 8000978:	50000100 	.word	0x50000100
 800097c:	50000400 	.word	0x50000400
 8000980:	48000400 	.word	0x48000400

08000984 <MX_GPIO_Init>:
     PC12   ------> SPI3_MOSI
     PB4   ------> S_TIM16_CH1
     PB5   ------> S_TIM17_CH1
*/
void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b96      	ldr	r3, [pc, #600]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a95      	ldr	r2, [pc, #596]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b93      	ldr	r3, [pc, #588]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b2:	4b90      	ldr	r3, [pc, #576]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a8f      	ldr	r2, [pc, #572]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009b8:	f043 0320 	orr.w	r3, r3, #32
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b8d      	ldr	r3, [pc, #564]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0320 	and.w	r3, r3, #32
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b8a      	ldr	r3, [pc, #552]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a89      	ldr	r2, [pc, #548]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b87      	ldr	r3, [pc, #540]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b84      	ldr	r3, [pc, #528]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a83      	ldr	r2, [pc, #524]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b81      	ldr	r3, [pc, #516]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4b7e      	ldr	r3, [pc, #504]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a7d      	ldr	r2, [pc, #500]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b7b      	ldr	r3, [pc, #492]	@ (8000bf4 <MX_GPIO_Init+0x270>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1c:	f002 f802 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8000a26:	4874      	ldr	r0, [pc, #464]	@ (8000bf8 <MX_GPIO_Init+0x274>)
 8000a28:	f001 fffc 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 8000a2c:	f242 33a0 	movw	r3, #9120	@ 0x23a0
 8000a30:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	486e      	ldr	r0, [pc, #440]	@ (8000bfc <MX_GPIO_Init+0x278>)
 8000a44:	f001 fe6c 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f001 fe5b 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8000a6a:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f001 fe4b 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4854      	ldr	r0, [pc, #336]	@ (8000bf8 <MX_GPIO_Init+0x274>)
 8000aa6:	f001 fe3b 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8000aaa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000abc:	2307      	movs	r3, #7
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	484c      	ldr	r0, [pc, #304]	@ (8000bf8 <MX_GPIO_Init+0x274>)
 8000ac8:	f001 fe2a 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 8000acc:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4844      	ldr	r0, [pc, #272]	@ (8000bf8 <MX_GPIO_Init+0x274>)
 8000ae6:	f001 fe1b 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af0:	2303      	movs	r3, #3
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	483e      	ldr	r0, [pc, #248]	@ (8000bf8 <MX_GPIO_Init+0x274>)
 8000b00:	f001 fe0e 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1c:	f001 fe00 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8000b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000b32:	2302      	movs	r3, #2
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b40:	f001 fdee 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_SPI_SCK_Pin|IMU_SPI_MISO_Pin|IMU_SPI_MOSI_Pin;
 8000b44:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b56:	2306      	movs	r3, #6
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4826      	ldr	r0, [pc, #152]	@ (8000bfc <MX_GPIO_Init+0x278>)
 8000b62:	f001 fddd 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8000b66:	2304      	movs	r3, #4
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4821      	ldr	r0, [pc, #132]	@ (8000c00 <MX_GPIO_Init+0x27c>)
 8000b7c:	f001 fdd0 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8000b80:	2310      	movs	r3, #16
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000b90:	2301      	movs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <MX_GPIO_Init+0x274>)
 8000b9c:	f001 fdc0 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480f      	ldr	r0, [pc, #60]	@ (8000bf8 <MX_GPIO_Init+0x274>)
 8000bbc:	f001 fdb0 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8000bc0:	2340      	movs	r3, #64	@ 0x40
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4808      	ldr	r0, [pc, #32]	@ (8000bf8 <MX_GPIO_Init+0x274>)
 8000bd6:	f001 fda3 	bl	8002720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2028      	movs	r0, #40	@ 0x28
 8000be0:	f001 fd69 	bl	80026b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be4:	2028      	movs	r0, #40	@ 0x28
 8000be6:	f001 fd80 	bl	80026ea <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	@ 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	48000c00 	.word	0x48000c00

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fae7 	bl	80011da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f846 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f7ff feb8 	bl	8000984 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000c14:	f000 fa16 	bl	8001044 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000c18:	f7ff fc76 	bl	8000508 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c1c:	f7ff fcee 	bl	80005fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000c20:	f7ff fd54 	bl	80006cc <MX_ADC3_Init>
  MX_TIM1_Init();
 8000c24:	f000 f8fa 	bl	8000e1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20000);
 8000c28:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000c2c:	f000 fb46 	bl	80012bc <HAL_Delay>
  message = "AT+NAME=Embarcados_GrupoB1";
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <main+0x80>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	@ (8000c88 <main+0x84>)
 8000c34:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit_IT(&hlpuart1,  message, 27);
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <main+0x80>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	221b      	movs	r2, #27
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4813      	ldr	r0, [pc, #76]	@ (8000c8c <main+0x88>)
 8000c40:	f004 f832 	bl	8004ca8 <HAL_UART_Transmit_IT>
  message = "AT+PSWD=1234";
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <main+0x80>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <main+0x8c>)
 8000c48:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit_IT(&hlpuart1,  message, 13);
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <main+0x80>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	220d      	movs	r2, #13
 8000c50:	4619      	mov	r1, r3
 8000c52:	480e      	ldr	r0, [pc, #56]	@ (8000c8c <main+0x88>)
 8000c54:	f004 f828 	bl	8004ca8 <HAL_UART_Transmit_IT>
  message = "AT+ROLE=0";
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <main+0x80>)
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <main+0x90>)
 8000c5c:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit_IT(&hlpuart1,  message, 10);
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <main+0x80>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	220a      	movs	r2, #10
 8000c64:	4619      	mov	r1, r3
 8000c66:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <main+0x88>)
 8000c68:	f004 f81e 	bl	8004ca8 <HAL_UART_Transmit_IT>
  message = "AT+UART=115200";
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <main+0x80>)
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <main+0x94>)
 8000c70:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit_IT(&hlpuart1,  message, 15);
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <main+0x80>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	220f      	movs	r2, #15
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <main+0x88>)
 8000c7c:	f004 f814 	bl	8004ca8 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <main+0x7c>
 8000c84:	20000170 	.word	0x20000170
 8000c88:	08005dc0 	.word	0x08005dc0
 8000c8c:	200001c0 	.word	0x200001c0
 8000c90:	08005ddc 	.word	0x08005ddc
 8000c94:	08005dec 	.word	0x08005dec
 8000c98:	08005df8 	.word	0x08005df8

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	@ 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2238      	movs	r2, #56	@ 0x38
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f005 f850 	bl	8005d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 feec 	bl	8002a9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cce:	2340      	movs	r3, #64	@ 0x40
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cde:	2355      	movs	r3, #85	@ 0x55
 8000ce0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 ff86 	bl	8002c04 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cfe:	f000 f818 	bl	8000d32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2303      	movs	r3, #3
 8000d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fa84 	bl	8003228 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d26:	f000 f804 	bl	8000d32 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	@ 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d36:	b672      	cpsid	i
}
 8000d38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3a:	bf00      	nop
 8000d3c:	e7fd      	b.n	8000d3a <Error_Handler+0x8>
	...

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d76:	f001 ff35 	bl	8002be4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dde:	f000 fa4f 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dee:	f001 fe31 	bl	8002a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09c      	sub	sp, #112	@ 0x70
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2234      	movs	r2, #52	@ 0x34
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 ff7a 	bl	8005d50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f90 <MX_TIM1_Init+0x174>)
 8000e60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000e62:	4b4a      	ldr	r3, [pc, #296]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000e64:	2210      	movs	r2, #16
 8000e66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b48      	ldr	r3, [pc, #288]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000e6e:	4b47      	ldr	r3, [pc, #284]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000e70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e76:	4b45      	ldr	r3, [pc, #276]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e7c:	4b43      	ldr	r3, [pc, #268]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b42      	ldr	r3, [pc, #264]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e88:	4840      	ldr	r0, [pc, #256]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000e8a:	f002 fe37 	bl	8003afc <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e94:	f7ff ff4d 	bl	8000d32 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e9e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4839      	ldr	r0, [pc, #228]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000ea6:	f002 fff5 	bl	8003e94 <HAL_TIM_ConfigClockSource>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000eb0:	f7ff ff3f 	bl	8000d32 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eb4:	4835      	ldr	r0, [pc, #212]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000eb6:	f002 fe78 	bl	8003baa <HAL_TIM_PWM_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ec0:	f7ff ff37 	bl	8000d32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	482d      	ldr	r0, [pc, #180]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000ed8:	f003 fd6c 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ee2:	f7ff ff26 	bl	8000d32 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	@ 0x60
 8000ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4820      	ldr	r0, [pc, #128]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000f0c:	f002 feae 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f16:	f7ff ff0c 	bl	8000d32 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	481a      	ldr	r0, [pc, #104]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000f24:	f002 fea2 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000f2e:	f7ff ff00 	bl	8000d32 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000f70:	f003 fdb6 	bl	8004ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000f7a:	f7ff feda 	bl	8000d32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f7e:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <MX_TIM1_Init+0x170>)
 8000f80:	f000 f828 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000f84:	bf00      	nop
 8000f86:	3770      	adds	r7, #112	@ 0x70
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000174 	.word	0x20000174
 8000f90:	40012c00 	.word	0x40012c00

08000f94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_TIM_Base_MspInit+0x38>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10b      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40012c00 	.word	0x40012c00
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a11      	ldr	r2, [pc, #68]	@ (8001038 <HAL_TIM_MspPostInit+0x64>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11b      	bne.n	800102e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_TIM_MspPostInit+0x68>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a10      	ldr	r2, [pc, #64]	@ (800103c <HAL_TIM_MspPostInit+0x68>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_TIM_MspPostInit+0x68>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 800100e:	2303      	movs	r3, #3
 8001010:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800101e:	2302      	movs	r3, #2
 8001020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 800102a:	f001 fb79 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40012c00 	.word	0x40012c00
 800103c:	40021000 	.word	0x40021000
 8001040:	48000800 	.word	0x48000800

08001044 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001048:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800104a:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <MX_LPUART1_UART_Init+0x90>)
 800104c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001074:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001086:	4812      	ldr	r0, [pc, #72]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 8001088:	f003 fdbe 	bl	8004c08 <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001092:	f7ff fe4e 	bl	8000d32 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 800109a:	f004 fd8f 	bl	8005bbc <HAL_UARTEx_SetTxFifoThreshold>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010a4:	f7ff fe45 	bl	8000d32 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	4809      	ldr	r0, [pc, #36]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 80010ac:	f004 fdc4 	bl	8005c38 <HAL_UARTEx_SetRxFifoThreshold>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010b6:	f7ff fe3c 	bl	8000d32 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_LPUART1_UART_Init+0x8c>)
 80010bc:	f004 fd45 	bl	8005b4a <HAL_UARTEx_DisableFifoMode>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010c6:	f7ff fe34 	bl	8000d32 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001c0 	.word	0x200001c0
 80010d4:	40008000 	.word	0x40008000

080010d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09e      	sub	sp, #120	@ 0x78
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2254      	movs	r2, #84	@ 0x54
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f004 fe29 	bl	8005d50 <memset>
  if(uartHandle->Instance==LPUART1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1f      	ldr	r2, [pc, #124]	@ (8001180 <HAL_UART_MspInit+0xa8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d136      	bne.n	8001176 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001108:	2320      	movs	r3, #32
 800110a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f002 faa3 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001120:	f7ff fe07 	bl	8000d32 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_UART_MspInit+0xac>)
 8001126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001128:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <HAL_UART_MspInit+0xac>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <HAL_UART_MspInit+0xac>)
 8001132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_UART_MspInit+0xac>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <HAL_UART_MspInit+0xac>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_UART_MspInit+0xac>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001154:	230c      	movs	r3, #12
 8001156:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001164:	230c      	movs	r3, #12
 8001166:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001172:	f001 fad5 	bl	8002720 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3778      	adds	r7, #120	@ 0x78
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40008000 	.word	0x40008000
 8001184:	40021000 	.word	0x40021000

08001188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800118a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800118c:	f7ff fe34 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f004 fdd3 	bl	8005d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ba:	f7ff fd23 	bl	8000c04 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   r0, =_estack
 80011c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011cc:	08005e58 	.word	0x08005e58
  ldr r2, =_sbss
 80011d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011d4:	20000258 	.word	0x20000258

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>

080011da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f001 fa5b 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f80e 	bl	800120c <HAL_InitTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e001      	b.n	8001200 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fc:	f7ff fda0 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001200:	79fb      	ldrb	r3, [r7, #7]

}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <HAL_InitTick+0x68>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d022      	beq.n	8001266 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_InitTick+0x6c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <HAL_InitTick+0x68>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800122c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001230:	fbb2 f3f3 	udiv	r3, r2, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fa66 	bl	8002706 <HAL_SYSTICK_Config>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10f      	bne.n	8001260 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	d809      	bhi.n	800125a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001246:	2200      	movs	r2, #0
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
 800124e:	f001 fa32 	bl	80026b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <HAL_InitTick+0x70>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e007      	b.n	800126a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e004      	b.n	800126a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e001      	b.n	800126a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000008 	.word	0x20000008
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_IncTick+0x1c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x20>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4a03      	ldr	r2, [pc, #12]	@ (800129c <HAL_IncTick+0x1c>)
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000254 	.word	0x20000254
 80012a0:	20000008 	.word	0x20000008

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000254 	.word	0x20000254

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d004      	beq.n	80012e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <HAL_Delay+0x40>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e0:	bf00      	nop
 80012e2:	f7ff ffdf 	bl	80012a4 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d8f7      	bhi.n	80012e2 <HAL_Delay+0x26>
  {
  }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000008 	.word	0x20000008

08001300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3360      	adds	r3, #96	@ 0x60
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <LL_ADC_SetOffset+0x44>)
 800138a:	4013      	ands	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	4313      	orrs	r3, r2
 8001398:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	03fff000 	.word	0x03fff000

080013b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3360      	adds	r3, #96	@ 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3360      	adds	r3, #96	@ 0x60
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001412:	b480      	push	{r7}
 8001414:	b087      	sub	sp, #28
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3360      	adds	r3, #96	@ 0x60
 8001422:	461a      	mov	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3360      	adds	r3, #96	@ 0x60
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	431a      	orrs	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	615a      	str	r2, [r3, #20]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3330      	adds	r3, #48	@ 0x30
 80014b4:	461a      	mov	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	4413      	add	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	211f      	movs	r1, #31
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	401a      	ands	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0e9b      	lsrs	r3, r3, #26
 80014dc:	f003 011f 	and.w	r1, r3, #31
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f003 031f 	and.w	r3, r3, #31
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3314      	adds	r3, #20
 800150c:	461a      	mov	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	0e5b      	lsrs	r3, r3, #25
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	0d1b      	lsrs	r3, r3, #20
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	2107      	movs	r1, #7
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	401a      	ands	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	0d1b      	lsrs	r3, r3, #20
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	431a      	orrs	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001546:	bf00      	nop
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156c:	43db      	mvns	r3, r3
 800156e:	401a      	ands	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0318 	and.w	r3, r3, #24
 8001576:	4908      	ldr	r1, [pc, #32]	@ (8001598 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001578:	40d9      	lsrs	r1, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	400b      	ands	r3, r1
 800157e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001582:	431a      	orrs	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	0007ffff 	.word	0x0007ffff

0800159c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80015ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6093      	str	r3, [r2, #8]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015d4:	d101      	bne.n	80015da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001624:	d101      	bne.n	800162a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <LL_ADC_IsEnabled+0x18>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <LL_ADC_IsEnabled+0x1a>
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b04      	cmp	r3, #4
 8001670:	d101      	bne.n	8001676 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b08      	cmp	r3, #8
 8001696:	d101      	bne.n	800169c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1a9      	b.n	8001a1a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff f871 	bl	80007bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff67 	bl	80015c0 <LL_ADC_IsDeepPowerDownEnabled>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff4d 	bl	800159c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff82 	bl	8001610 <LL_ADC_IsInternalRegulatorEnabled>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d115      	bne.n	800173e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff66 	bl	80015e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800171c:	4b9c      	ldr	r3, [pc, #624]	@ (8001990 <HAL_ADC_Init+0x2e4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	099b      	lsrs	r3, r3, #6
 8001722:	4a9c      	ldr	r2, [pc, #624]	@ (8001994 <HAL_ADC_Init+0x2e8>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	3301      	adds	r3, #1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001730:	e002      	b.n	8001738 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b01      	subs	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f9      	bne.n	8001732 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff64 	bl	8001610 <LL_ADC_IsInternalRegulatorEnabled>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10d      	bne.n	800176a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001752:	f043 0210 	orr.w	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff75 	bl	800165e <LL_ADC_REG_IsConversionOngoing>
 8001774:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 8142 	bne.w	8001a08 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 813e 	bne.w	8001a08 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001790:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001794:	f043 0202 	orr.w	r2, r3, #2
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff49 	bl	8001638 <LL_ADC_IsEnabled>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d141      	bne.n	8001830 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017b4:	d004      	beq.n	80017c0 <HAL_ADC_Init+0x114>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a77      	ldr	r2, [pc, #476]	@ (8001998 <HAL_ADC_Init+0x2ec>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d10f      	bne.n	80017e0 <HAL_ADC_Init+0x134>
 80017c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80017c4:	f7ff ff38 	bl	8001638 <LL_ADC_IsEnabled>
 80017c8:	4604      	mov	r4, r0
 80017ca:	4873      	ldr	r0, [pc, #460]	@ (8001998 <HAL_ADC_Init+0x2ec>)
 80017cc:	f7ff ff34 	bl	8001638 <LL_ADC_IsEnabled>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4323      	orrs	r3, r4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	e012      	b.n	8001806 <HAL_ADC_Init+0x15a>
 80017e0:	486e      	ldr	r0, [pc, #440]	@ (800199c <HAL_ADC_Init+0x2f0>)
 80017e2:	f7ff ff29 	bl	8001638 <LL_ADC_IsEnabled>
 80017e6:	4604      	mov	r4, r0
 80017e8:	486d      	ldr	r0, [pc, #436]	@ (80019a0 <HAL_ADC_Init+0x2f4>)
 80017ea:	f7ff ff25 	bl	8001638 <LL_ADC_IsEnabled>
 80017ee:	4603      	mov	r3, r0
 80017f0:	431c      	orrs	r4, r3
 80017f2:	486c      	ldr	r0, [pc, #432]	@ (80019a4 <HAL_ADC_Init+0x2f8>)
 80017f4:	f7ff ff20 	bl	8001638 <LL_ADC_IsEnabled>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4323      	orrs	r3, r4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d012      	beq.n	8001830 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001812:	d004      	beq.n	800181e <HAL_ADC_Init+0x172>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5f      	ldr	r2, [pc, #380]	@ (8001998 <HAL_ADC_Init+0x2ec>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x176>
 800181e:	4a62      	ldr	r2, [pc, #392]	@ (80019a8 <HAL_ADC_Init+0x2fc>)
 8001820:	e000      	b.n	8001824 <HAL_ADC_Init+0x178>
 8001822:	4a62      	ldr	r2, [pc, #392]	@ (80019ac <HAL_ADC_Init+0x300>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f7ff fd68 	bl	8001300 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7f5b      	ldrb	r3, [r3, #29]
 8001834:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800183a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001840:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001846:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800184e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800185a:	2b01      	cmp	r3, #1
 800185c:	d106      	bne.n	800186c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	3b01      	subs	r3, #1
 8001864:	045b      	lsls	r3, r3, #17
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	4b48      	ldr	r3, [pc, #288]	@ (80019b0 <HAL_ADC_Init+0x304>)
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	430b      	orrs	r3, r1
 800189a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fee4 	bl	8001684 <LL_ADC_INJ_IsConversionOngoing>
 80018bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d17f      	bne.n	80019c4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d17c      	bne.n	80019c4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018e6:	f023 0302 	bic.w	r3, r3, #2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d017      	beq.n	800192c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800190a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001914:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001918:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6911      	ldr	r1, [r2, #16]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	430b      	orrs	r3, r1
 8001926:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800192a:	e013      	b.n	8001954 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800193a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800194c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001950:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800195a:	2b01      	cmp	r3, #1
 800195c:	d12a      	bne.n	80019b4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001974:	4311      	orrs	r1, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001980:	430a      	orrs	r2, r1
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	e019      	b.n	80019c4 <HAL_ADC_Init+0x318>
 8001990:	20000000 	.word	0x20000000
 8001994:	053e2d63 	.word	0x053e2d63
 8001998:	50000100 	.word	0x50000100
 800199c:	50000400 	.word	0x50000400
 80019a0:	50000500 	.word	0x50000500
 80019a4:	50000600 	.word	0x50000600
 80019a8:	50000300 	.word	0x50000300
 80019ac:	50000700 	.word	0x50000700
 80019b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10c      	bne.n	80019e6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f023 010f 	bic.w	r1, r3, #15
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	1e5a      	subs	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80019e4:	e007      	b.n	80019f6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 020f 	bic.w	r2, r2, #15
 80019f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a06:	e007      	b.n	8001a18 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	f043 0210 	orr.w	r2, r3, #16
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop

08001a24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0b6      	sub	sp, #216	@ 0xd8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d102      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x24>
 8001a42:	2302      	movs	r3, #2
 8001a44:	f000 bc13 	b.w	800226e <HAL_ADC_ConfigChannel+0x84a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fe02 	bl	800165e <LL_ADC_REG_IsConversionOngoing>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 83f3 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f7ff fd18 	bl	80014a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fdf0 	bl	800165e <LL_ADC_REG_IsConversionOngoing>
 8001a7e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fdfc 	bl	8001684 <LL_ADC_INJ_IsConversionOngoing>
 8001a8c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 81d9 	bne.w	8001e4c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 81d4 	bne.w	8001e4c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001aac:	d10f      	bne.n	8001ace <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff fd1f 	bl	80014fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fcd9 	bl	800147e <LL_ADC_SetSamplingTimeCommonConfig>
 8001acc:	e00e      	b.n	8001aec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	461a      	mov	r2, r3
 8001adc:	f7ff fd0e 	bl	80014fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fcc9 	bl	800147e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d022      	beq.n	8001b54 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6919      	ldr	r1, [r3, #16]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b1e:	f7ff fc23 	bl	8001368 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff fc6f 	bl	8001412 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d102      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x126>
 8001b44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b48:	e000      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x128>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f7ff fc7b 	bl	8001448 <LL_ADC_SetOffsetSaturation>
 8001b52:	e17b      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fc28 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x15c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fc1d 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	0e9b      	lsrs	r3, r3, #26
 8001b7a:	f003 021f 	and.w	r2, r3, #31
 8001b7e:	e01e      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x19a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fc12 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e004      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d105      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x1b2>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	e018      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x1e4>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	e004      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fbe1 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fbc5 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x222>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fbba 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	0e9b      	lsrs	r3, r3, #26
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	e01e      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x260>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fbaf 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001c64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e004      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x278>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	e018      	b.n	8001cce <HAL_ADC_ConfigChannel+0x2aa>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	e004      	b.n	8001cce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d106      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fb7e 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fb62 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x2e8>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fb57 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	f003 021f 	and.w	r2, r3, #31
 8001d0a:	e01e      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x326>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2102      	movs	r1, #2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fb4c 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e004      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x33e>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0e9b      	lsrs	r3, r3, #26
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	e016      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x36c>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001d74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e004      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d106      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fb1d 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2103      	movs	r1, #3
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fb01 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x3aa>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff faf6 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	e017      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x3da>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff faeb 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001de8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001dea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e003      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x3f2>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	e011      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x416>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e2e:	2320      	movs	r3, #32
 8001e30:	e003      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d106      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2200      	movs	r2, #0
 8001e44:	2103      	movs	r1, #3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fac8 	bl	80013dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbf1 	bl	8001638 <LL_ADC_IsEnabled>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 813d 	bne.w	80020d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7ff fb72 	bl	8001554 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4aa2      	ldr	r2, [pc, #648]	@ (8002100 <HAL_ADC_ConfigChannel+0x6dc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f040 812e 	bne.w	80020d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x480>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	3301      	adds	r3, #1
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	bf94      	ite	ls
 8001e9c:	2301      	movls	r3, #1
 8001e9e:	2300      	movhi	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e019      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x4b4>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eb4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	e003      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ec0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	bf94      	ite	ls
 8001ed2:	2301      	movls	r3, #1
 8001ed4:	2300      	movhi	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d079      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x4d4>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0e9b      	lsrs	r3, r3, #26
 8001eee:	3301      	adds	r3, #1
 8001ef0:	069b      	lsls	r3, r3, #26
 8001ef2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ef6:	e015      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x500>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	069b      	lsls	r3, r3, #26
 8001f20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x520>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	e017      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x550>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f54:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	ea42 0103 	orr.w	r1, r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x576>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	051b      	lsls	r3, r3, #20
 8001f98:	e018      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x5a8>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e003      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	e07e      	b.n	80020ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x5c8>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	069b      	lsls	r3, r3, #26
 8001fe6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fea:	e015      	b.n	8002018 <HAL_ADC_ConfigChannel+0x5f4>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3301      	adds	r3, #1
 8002012:	069b      	lsls	r3, r3, #26
 8002014:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x614>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	3301      	adds	r3, #1
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	e017      	b.n	8002068 <HAL_ADC_ConfigChannel+0x644>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	61fb      	str	r3, [r7, #28]
  return result;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	ea42 0103 	orr.w	r1, r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x670>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	3301      	adds	r3, #1
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	3b1e      	subs	r3, #30
 800208c:	051b      	lsls	r3, r3, #20
 800208e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002092:	e01b      	b.n	80020cc <HAL_ADC_ConfigChannel+0x6a8>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	613b      	str	r3, [r7, #16]
  return result;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e003      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f003 021f 	and.w	r2, r3, #31
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	3b1e      	subs	r3, #30
 80020c6:	051b      	lsls	r3, r3, #20
 80020c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7ff fa12 	bl	80014fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <HAL_ADC_ConfigChannel+0x6e0>)
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80be 	beq.w	8002262 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ee:	d004      	beq.n	80020fa <HAL_ADC_ConfigChannel+0x6d6>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <HAL_ADC_ConfigChannel+0x6e4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10a      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x6ec>
 80020fa:	4b04      	ldr	r3, [pc, #16]	@ (800210c <HAL_ADC_ConfigChannel+0x6e8>)
 80020fc:	e009      	b.n	8002112 <HAL_ADC_ConfigChannel+0x6ee>
 80020fe:	bf00      	nop
 8002100:	407f0000 	.word	0x407f0000
 8002104:	80080000 	.word	0x80080000
 8002108:	50000100 	.word	0x50000100
 800210c:	50000300 	.word	0x50000300
 8002110:	4b59      	ldr	r3, [pc, #356]	@ (8002278 <HAL_ADC_ConfigChannel+0x854>)
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f91a 	bl	800134c <LL_ADC_GetCommonPathInternalCh>
 8002118:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a56      	ldr	r2, [pc, #344]	@ (800227c <HAL_ADC_ConfigChannel+0x858>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_ADC_ConfigChannel+0x70c>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a55      	ldr	r2, [pc, #340]	@ (8002280 <HAL_ADC_ConfigChannel+0x85c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d13a      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d134      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002144:	d005      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x72e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a4e      	ldr	r2, [pc, #312]	@ (8002284 <HAL_ADC_ConfigChannel+0x860>)
 800214c:	4293      	cmp	r3, r2
 800214e:	f040 8085 	bne.w	800225c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800215a:	d004      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x742>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a49      	ldr	r2, [pc, #292]	@ (8002288 <HAL_ADC_ConfigChannel+0x864>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x746>
 8002166:	4a49      	ldr	r2, [pc, #292]	@ (800228c <HAL_ADC_ConfigChannel+0x868>)
 8002168:	e000      	b.n	800216c <HAL_ADC_ConfigChannel+0x748>
 800216a:	4a43      	ldr	r2, [pc, #268]	@ (8002278 <HAL_ADC_ConfigChannel+0x854>)
 800216c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002170:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f7ff f8d5 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800217c:	4b44      	ldr	r3, [pc, #272]	@ (8002290 <HAL_ADC_ConfigChannel+0x86c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	4a44      	ldr	r2, [pc, #272]	@ (8002294 <HAL_ADC_ConfigChannel+0x870>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002196:	e002      	b.n	800219e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3b01      	subs	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021a4:	e05a      	b.n	800225c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002298 <HAL_ADC_ConfigChannel+0x874>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d125      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11f      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a31      	ldr	r2, [pc, #196]	@ (8002288 <HAL_ADC_ConfigChannel+0x864>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d104      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x7ac>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a34      	ldr	r2, [pc, #208]	@ (800229c <HAL_ADC_ConfigChannel+0x878>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d047      	beq.n	8002260 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d8:	d004      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x7c0>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2a      	ldr	r2, [pc, #168]	@ (8002288 <HAL_ADC_ConfigChannel+0x864>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x7c4>
 80021e4:	4a29      	ldr	r2, [pc, #164]	@ (800228c <HAL_ADC_ConfigChannel+0x868>)
 80021e6:	e000      	b.n	80021ea <HAL_ADC_ConfigChannel+0x7c6>
 80021e8:	4a23      	ldr	r2, [pc, #140]	@ (8002278 <HAL_ADC_ConfigChannel+0x854>)
 80021ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f7ff f896 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021fa:	e031      	b.n	8002260 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a27      	ldr	r2, [pc, #156]	@ (80022a0 <HAL_ADC_ConfigChannel+0x87c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d12d      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800220a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d127      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <HAL_ADC_ConfigChannel+0x864>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d022      	beq.n	8002262 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002224:	d004      	beq.n	8002230 <HAL_ADC_ConfigChannel+0x80c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_ADC_ConfigChannel+0x864>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x810>
 8002230:	4a16      	ldr	r2, [pc, #88]	@ (800228c <HAL_ADC_ConfigChannel+0x868>)
 8002232:	e000      	b.n	8002236 <HAL_ADC_ConfigChannel+0x812>
 8002234:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <HAL_ADC_ConfigChannel+0x854>)
 8002236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800223a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f7ff f870 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
 8002246:	e00c      	b.n	8002262 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800225a:	e002      	b.n	8002262 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800225c:	bf00      	nop
 800225e:	e000      	b.n	8002262 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002260:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800226a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800226e:	4618      	mov	r0, r3
 8002270:	37d8      	adds	r7, #216	@ 0xd8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	50000700 	.word	0x50000700
 800227c:	c3210000 	.word	0xc3210000
 8002280:	90c00010 	.word	0x90c00010
 8002284:	50000600 	.word	0x50000600
 8002288:	50000100 	.word	0x50000100
 800228c:	50000300 	.word	0x50000300
 8002290:	20000000 	.word	0x20000000
 8002294:	053e2d63 	.word	0x053e2d63
 8002298:	c7520000 	.word	0xc7520000
 800229c:	50000500 	.word	0x50000500
 80022a0:	cb840000 	.word	0xcb840000

080022a4 <LL_ADC_IsEnabled>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <LL_ADC_IsEnabled+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_ADC_IsEnabled+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_REG_IsConversionOngoing>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b0a1      	sub	sp, #132	@ 0x84
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800230a:	2302      	movs	r3, #2
 800230c:	e0e7      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002316:	2300      	movs	r3, #0
 8002318:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800231a:	2300      	movs	r3, #0
 800231c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002326:	d102      	bne.n	800232e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002328:	4b6f      	ldr	r3, [pc, #444]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	e009      	b.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6e      	ldr	r2, [pc, #440]	@ (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d102      	bne.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002338:	4b6d      	ldr	r3, [pc, #436]	@ (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	e001      	b.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10b      	bne.n	8002360 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0be      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ffb1 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 8002368:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffab 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 80a0 	bne.w	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800237c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 809c 	bne.w	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800238c:	d004      	beq.n	8002398 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a55      	ldr	r2, [pc, #340]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d101      	bne.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002398:	4b56      	ldr	r3, [pc, #344]	@ (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800239a:	e000      	b.n	800239e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800239c:	4b56      	ldr	r3, [pc, #344]	@ (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800239e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d04b      	beq.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023ba:	035b      	lsls	r3, r3, #13
 80023bc:	430b      	orrs	r3, r1
 80023be:	431a      	orrs	r2, r3
 80023c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023cc:	d004      	beq.n	80023d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a45      	ldr	r2, [pc, #276]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10f      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80023d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023dc:	f7ff ff62 	bl	80022a4 <LL_ADC_IsEnabled>
 80023e0:	4604      	mov	r4, r0
 80023e2:	4841      	ldr	r0, [pc, #260]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023e4:	f7ff ff5e 	bl	80022a4 <LL_ADC_IsEnabled>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4323      	orrs	r3, r4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e012      	b.n	800241e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80023f8:	483c      	ldr	r0, [pc, #240]	@ (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80023fa:	f7ff ff53 	bl	80022a4 <LL_ADC_IsEnabled>
 80023fe:	4604      	mov	r4, r0
 8002400:	483b      	ldr	r0, [pc, #236]	@ (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002402:	f7ff ff4f 	bl	80022a4 <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	431c      	orrs	r4, r3
 800240a:	483c      	ldr	r0, [pc, #240]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800240c:	f7ff ff4a 	bl	80022a4 <LL_ADC_IsEnabled>
 8002410:	4603      	mov	r3, r0
 8002412:	4323      	orrs	r3, r4
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d056      	beq.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800242a:	f023 030f 	bic.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6811      	ldr	r1, [r2, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	6892      	ldr	r2, [r2, #8]
 8002436:	430a      	orrs	r2, r1
 8002438:	431a      	orrs	r2, r3
 800243a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800243e:	e047      	b.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002448:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800244a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002454:	d004      	beq.n	8002460 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a23      	ldr	r2, [pc, #140]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d10f      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002460:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002464:	f7ff ff1e 	bl	80022a4 <LL_ADC_IsEnabled>
 8002468:	4604      	mov	r4, r0
 800246a:	481f      	ldr	r0, [pc, #124]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800246c:	f7ff ff1a 	bl	80022a4 <LL_ADC_IsEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	4323      	orrs	r3, r4
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	e012      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002480:	481a      	ldr	r0, [pc, #104]	@ (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002482:	f7ff ff0f 	bl	80022a4 <LL_ADC_IsEnabled>
 8002486:	4604      	mov	r4, r0
 8002488:	4819      	ldr	r0, [pc, #100]	@ (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800248a:	f7ff ff0b 	bl	80022a4 <LL_ADC_IsEnabled>
 800248e:	4603      	mov	r3, r0
 8002490:	431c      	orrs	r4, r3
 8002492:	481a      	ldr	r0, [pc, #104]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002494:	f7ff ff06 	bl	80022a4 <LL_ADC_IsEnabled>
 8002498:	4603      	mov	r3, r0
 800249a:	4323      	orrs	r3, r4
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024b2:	f023 030f 	bic.w	r3, r3, #15
 80024b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024ba:	e009      	b.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80024ce:	e000      	b.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3784      	adds	r7, #132	@ 0x84
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	50000100 	.word	0x50000100
 80024ec:	50000400 	.word	0x50000400
 80024f0:	50000500 	.word	0x50000500
 80024f4:	50000300 	.word	0x50000300
 80024f8:	50000700 	.word	0x50000700
 80024fc:	50000600 	.word	0x50000600

08002500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800252c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4907      	ldr	r1, [pc, #28]	@ (800259c <__NVIC_EnableIRQ+0x38>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	@ (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	@ (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	@ 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800266c:	d301      	bcc.n	8002672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266e:	2301      	movs	r3, #1
 8002670:	e00f      	b.n	8002692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <SysTick_Config+0x40>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267a:	210f      	movs	r1, #15
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f7ff ff8e 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <SysTick_Config+0x40>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268a:	4b04      	ldr	r3, [pc, #16]	@ (800269c <SysTick_Config+0x40>)
 800268c:	2207      	movs	r2, #7
 800268e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	e000e010 	.word	0xe000e010

080026a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff29 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff40 	bl	8002548 <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff90 	bl	80025f4 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5f 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff33 	bl	8002564 <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffa4 	bl	800265c <SysTick_Config>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800272e:	e15a      	b.n	80029e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 814c 	beq.w	80029e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d005      	beq.n	8002760 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800275c:	2b02      	cmp	r3, #2
 800275e:	d130      	bne.n	80027c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002796:	2201      	movs	r2, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 0201 	and.w	r2, r3, #1
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d017      	beq.n	80027fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d123      	bne.n	8002852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0203 	and.w	r2, r3, #3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a6 	beq.w	80029e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002894:	4b5b      	ldr	r3, [pc, #364]	@ (8002a04 <HAL_GPIO_Init+0x2e4>)
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	4a5a      	ldr	r2, [pc, #360]	@ (8002a04 <HAL_GPIO_Init+0x2e4>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6613      	str	r3, [r2, #96]	@ 0x60
 80028a0:	4b58      	ldr	r3, [pc, #352]	@ (8002a04 <HAL_GPIO_Init+0x2e4>)
 80028a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ac:	4a56      	ldr	r2, [pc, #344]	@ (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028d6:	d01f      	beq.n	8002918 <HAL_GPIO_Init+0x1f8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a4c      	ldr	r2, [pc, #304]	@ (8002a0c <HAL_GPIO_Init+0x2ec>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d019      	beq.n	8002914 <HAL_GPIO_Init+0x1f4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002a10 <HAL_GPIO_Init+0x2f0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d013      	beq.n	8002910 <HAL_GPIO_Init+0x1f0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002a14 <HAL_GPIO_Init+0x2f4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00d      	beq.n	800290c <HAL_GPIO_Init+0x1ec>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a49      	ldr	r2, [pc, #292]	@ (8002a18 <HAL_GPIO_Init+0x2f8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d007      	beq.n	8002908 <HAL_GPIO_Init+0x1e8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a48      	ldr	r2, [pc, #288]	@ (8002a1c <HAL_GPIO_Init+0x2fc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d101      	bne.n	8002904 <HAL_GPIO_Init+0x1e4>
 8002900:	2305      	movs	r3, #5
 8002902:	e00a      	b.n	800291a <HAL_GPIO_Init+0x1fa>
 8002904:	2306      	movs	r3, #6
 8002906:	e008      	b.n	800291a <HAL_GPIO_Init+0x1fa>
 8002908:	2304      	movs	r3, #4
 800290a:	e006      	b.n	800291a <HAL_GPIO_Init+0x1fa>
 800290c:	2303      	movs	r3, #3
 800290e:	e004      	b.n	800291a <HAL_GPIO_Init+0x1fa>
 8002910:	2302      	movs	r3, #2
 8002912:	e002      	b.n	800291a <HAL_GPIO_Init+0x1fa>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_GPIO_Init+0x1fa>
 8002918:	2300      	movs	r3, #0
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	f002 0203 	and.w	r2, r2, #3
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	4093      	lsls	r3, r2
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800292a:	4937      	ldr	r1, [pc, #220]	@ (8002a08 <HAL_GPIO_Init+0x2e8>)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002938:	4b39      	ldr	r3, [pc, #228]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800295c:	4a30      	ldr	r2, [pc, #192]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002962:	4b2f      	ldr	r3, [pc, #188]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002986:	4a26      	ldr	r2, [pc, #152]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029da:	4a11      	ldr	r2, [pc, #68]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3301      	adds	r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f47f ae9d 	bne.w	8002730 <HAL_GPIO_Init+0x10>
  }
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	48000400 	.word	0x48000400
 8002a10:	48000800 	.word	0x48000800
 8002a14:	48000c00 	.word	0x48000c00
 8002a18:	48001000 	.word	0x48001000
 8002a1c:	48001400 	.word	0x48001400
 8002a20:	40010400 	.word	0x40010400

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a6a:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f806 	bl	8002a84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d141      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab6:	d131      	bne.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab8:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002abe:	4a46      	ldr	r2, [pc, #280]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ac4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac8:	4b43      	ldr	r3, [pc, #268]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ad0:	4a41      	ldr	r2, [pc, #260]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ad8:	4b40      	ldr	r3, [pc, #256]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2232      	movs	r2, #50	@ 0x32
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8002be0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	0c9b      	lsrs	r3, r3, #18
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aee:	e002      	b.n	8002af6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b02:	d102      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f2      	bne.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b0a:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b16:	d158      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e057      	b.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b22:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b2c:	e04d      	b.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b34:	d141      	bne.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b36:	4b28      	ldr	r3, [pc, #160]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b42:	d131      	bne.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b44:	4b24      	ldr	r3, [pc, #144]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b4a:	4a23      	ldr	r2, [pc, #140]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b54:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b64:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2232      	movs	r2, #50	@ 0x32
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002be0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	3301      	adds	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7a:	e002      	b.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8e:	d102      	bne.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f2      	bne.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba2:	d112      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e011      	b.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bae:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bb8:	e007      	b.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bc2:	4a05      	ldr	r2, [pc, #20]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	431bde83 	.word	0x431bde83

08002be4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a04      	ldr	r2, [pc, #16]	@ (8002c00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf2:	6093      	str	r3, [r2, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40007000 	.word	0x40007000

08002c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e2fe      	b.n	8003214 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d075      	beq.n	8002d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c22:	4b97      	ldr	r3, [pc, #604]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c2c:	4b94      	ldr	r3, [pc, #592]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3e>
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_OscConfig+0x44>
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d10b      	bne.n	8002c60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	4b8d      	ldr	r3, [pc, #564]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05b      	beq.n	8002d0c <HAL_RCC_OscConfig+0x108>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d157      	bne.n	8002d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e2d9      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_OscConfig+0x74>
 8002c6a:	4b85      	ldr	r3, [pc, #532]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a84      	ldr	r2, [pc, #528]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e01d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xb0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x98>
 8002c82:	4b7f      	ldr	r3, [pc, #508]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7e      	ldr	r2, [pc, #504]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a7b      	ldr	r2, [pc, #492]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xb0>
 8002c9c:	4b78      	ldr	r3, [pc, #480]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a77      	ldr	r2, [pc, #476]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b75      	ldr	r3, [pc, #468]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a74      	ldr	r2, [pc, #464]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe faf2 	bl	80012a4 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe faee 	bl	80012a4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	@ 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e29e      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xc0>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fade 	bl	80012a4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fada 	bl	80012a4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	@ 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e28a      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cfe:	4b60      	ldr	r3, [pc, #384]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0xe8>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d075      	beq.n	8002e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1a:	4b59      	ldr	r3, [pc, #356]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d24:	4b56      	ldr	r3, [pc, #344]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b0c      	cmp	r3, #12
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_OscConfig+0x136>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d002      	beq.n	8002d40 <HAL_RCC_OscConfig+0x13c>
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d11f      	bne.n	8002d80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d40:	4b4f      	ldr	r3, [pc, #316]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_OscConfig+0x154>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e25d      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b49      	ldr	r3, [pc, #292]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	4946      	ldr	r1, [pc, #280]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d6c:	4b45      	ldr	r3, [pc, #276]	@ (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fa4b 	bl	800120c <HAL_InitTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d043      	beq.n	8002e04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e249      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d023      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b3d      	ldr	r3, [pc, #244]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fa86 	bl	80012a4 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fa82 	bl	80012a4 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e232      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dae:	4b34      	ldr	r3, [pc, #208]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b31      	ldr	r3, [pc, #196]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	492d      	ldr	r1, [pc, #180]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
 8002dce:	e01a      	b.n	8002e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fa62 	bl	80012a4 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe fa5e 	bl	80012a4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e20e      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df6:	4b22      	ldr	r3, [pc, #136]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1e0>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d041      	beq.n	8002e96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e20:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fa3b 	bl	80012a4 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e32:	f7fe fa37 	bl	80012a4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1e7      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e44:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ef      	beq.n	8002e32 <HAL_RCC_OscConfig+0x22e>
 8002e52:	e020      	b.n	8002e96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e54:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5a:	4a09      	ldr	r2, [pc, #36]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe fa1e 	bl	80012a4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e6a:	e00d      	b.n	8002e88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fa1a 	bl	80012a4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d906      	bls.n	8002e88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1ca      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e88:	4b8c      	ldr	r3, [pc, #560]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ea      	bne.n	8002e6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80a6 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea8:	4b84      	ldr	r3, [pc, #528]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2b4>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x2b6>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec2:	4a7e      	ldr	r2, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eca:	4b7c      	ldr	r3, [pc, #496]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eda:	4b79      	ldr	r3, [pc, #484]	@ (80030c0 <HAL_RCC_OscConfig+0x4bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee6:	4b76      	ldr	r3, [pc, #472]	@ (80030c0 <HAL_RCC_OscConfig+0x4bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	@ (80030c0 <HAL_RCC_OscConfig+0x4bc>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f9d7 	bl	80012a4 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe f9d3 	bl	80012a4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e183      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80030c0 <HAL_RCC_OscConfig+0x4bc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_RCC_OscConfig+0x32e>
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f26:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f30:	e024      	b.n	8002f7c <HAL_RCC_OscConfig+0x378>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d110      	bne.n	8002f5c <HAL_RCC_OscConfig+0x358>
 8002f3a:	4b60      	ldr	r3, [pc, #384]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f40:	4a5e      	ldr	r2, [pc, #376]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f50:	4a5a      	ldr	r2, [pc, #360]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f5a:	e00f      	b.n	8002f7c <HAL_RCC_OscConfig+0x378>
 8002f5c:	4b57      	ldr	r3, [pc, #348]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	4a56      	ldr	r2, [pc, #344]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f6c:	4b53      	ldr	r3, [pc, #332]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f72:	4a52      	ldr	r2, [pc, #328]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d016      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe f98e 	bl	80012a4 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe f98a 	bl	80012a4 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e138      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa2:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0ed      	beq.n	8002f8c <HAL_RCC_OscConfig+0x388>
 8002fb0:	e015      	b.n	8002fde <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fe f977 	bl	80012a4 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fe f973 	bl	80012a4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e121      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ed      	bne.n	8002fba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe4:	4b35      	ldr	r3, [pc, #212]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	4a34      	ldr	r2, [pc, #208]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d03c      	beq.n	8003076 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01c      	beq.n	800303e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003004:	4b2d      	ldr	r3, [pc, #180]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8003006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800300a:	4a2c      	ldr	r2, [pc, #176]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe f946 	bl	80012a4 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800301c:	f7fe f942 	bl	80012a4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e0f2      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800302e:	4b23      	ldr	r3, [pc, #140]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8003030:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ef      	beq.n	800301c <HAL_RCC_OscConfig+0x418>
 800303c:	e01b      	b.n	8003076 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800303e:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8003040:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fe f929 	bl	80012a4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003056:	f7fe f925 	bl	80012a4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0d5      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 800306a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ef      	bne.n	8003056 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80c9 	beq.w	8003212 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003080:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b0c      	cmp	r3, #12
 800308a:	f000 8083 	beq.w	8003194 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d15e      	bne.n	8003154 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <HAL_RCC_OscConfig+0x4b8>)
 800309c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe f8ff 	bl	80012a4 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a8:	e00c      	b.n	80030c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe f8fb 	bl	80012a4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d905      	bls.n	80030c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0ab      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c4:	4b55      	ldr	r3, [pc, #340]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ec      	bne.n	80030aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d0:	4b52      	ldr	r3, [pc, #328]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	4b52      	ldr	r3, [pc, #328]	@ (8003220 <HAL_RCC_OscConfig+0x61c>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6a11      	ldr	r1, [r2, #32]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030ea:	0212      	lsls	r2, r2, #8
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030f2:	0852      	lsrs	r2, r2, #1
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0552      	lsls	r2, r2, #21
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030fe:	0852      	lsrs	r2, r2, #1
 8003100:	3a01      	subs	r2, #1
 8003102:	0652      	lsls	r2, r2, #25
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800310a:	06d2      	lsls	r2, r2, #27
 800310c:	430a      	orrs	r2, r1
 800310e:	4943      	ldr	r1, [pc, #268]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 8003110:	4313      	orrs	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003114:	4b41      	ldr	r3, [pc, #260]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a40      	ldr	r2, [pc, #256]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003120:	4b3e      	ldr	r3, [pc, #248]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a3d      	ldr	r2, [pc, #244]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800312a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe f8ba 	bl	80012a4 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe f8b6 	bl	80012a4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e066      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	4b35      	ldr	r3, [pc, #212]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x530>
 8003152:	e05e      	b.n	8003212 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a30      	ldr	r2, [pc, #192]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 800315a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe f8a0 	bl	80012a4 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7fe f89c 	bl	80012a4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e04c      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317a:	4b28      	ldr	r3, [pc, #160]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003186:	4b25      	ldr	r3, [pc, #148]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	4924      	ldr	r1, [pc, #144]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 800318c:	4b25      	ldr	r3, [pc, #148]	@ (8003224 <HAL_RCC_OscConfig+0x620>)
 800318e:	4013      	ands	r3, r2
 8003190:	60cb      	str	r3, [r1, #12]
 8003192:	e03e      	b.n	8003212 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e039      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031a0:	4b1e      	ldr	r3, [pc, #120]	@ (800321c <HAL_RCC_OscConfig+0x618>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0203 	and.w	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d12c      	bne.n	800320e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	3b01      	subs	r3, #1
 80031c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d123      	bne.n	800320e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d11b      	bne.n	800320e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d113      	bne.n	800320e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	3b01      	subs	r3, #1
 80031f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d109      	bne.n	800320e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	3b01      	subs	r3, #1
 8003208:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	019f800c 	.word	0x019f800c
 8003224:	feeefffc 	.word	0xfeeefffc

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e11e      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b91      	ldr	r3, [pc, #580]	@ (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d910      	bls.n	8003270 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b8e      	ldr	r3, [pc, #568]	@ (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 020f 	bic.w	r2, r3, #15
 8003256:	498c      	ldr	r1, [pc, #560]	@ (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b8a      	ldr	r3, [pc, #552]	@ (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e106      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d073      	beq.n	8003364 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d129      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003284:	4b81      	ldr	r3, [pc, #516]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0f4      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003294:	f000 f99e 	bl	80035d4 <RCC_GetSysClockFreqFromPLLSource>
 8003298:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4a7c      	ldr	r2, [pc, #496]	@ (8003490 <HAL_RCC_ClockConfig+0x268>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d93f      	bls.n	8003322 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032a2:	4b7a      	ldr	r3, [pc, #488]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d033      	beq.n	8003322 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12f      	bne.n	8003322 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032c2:	4b72      	ldr	r3, [pc, #456]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ca:	4a70      	ldr	r2, [pc, #448]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80032cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e024      	b.n	8003322 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e0:	4b6a      	ldr	r3, [pc, #424]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0c6      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f0:	4b66      	ldr	r3, [pc, #408]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0be      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003300:	f000 f8ce 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8003304:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4a61      	ldr	r2, [pc, #388]	@ (8003490 <HAL_RCC_ClockConfig+0x268>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d909      	bls.n	8003322 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800330e:	4b5f      	ldr	r3, [pc, #380]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003316:	4a5d      	ldr	r2, [pc, #372]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800331c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b5a      	ldr	r3, [pc, #360]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4957      	ldr	r1, [pc, #348]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7fd ffb6 	bl	80012a4 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fd ffb2 	bl	80012a4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e095      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b4e      	ldr	r3, [pc, #312]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d023      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b43      	ldr	r3, [pc, #268]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a42      	ldr	r2, [pc, #264]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003382:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003386:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003394:	4b3d      	ldr	r3, [pc, #244]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800339c:	4a3b      	ldr	r2, [pc, #236]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 800339e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b39      	ldr	r3, [pc, #228]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4936      	ldr	r1, [pc, #216]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
 80033b6:	e008      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b80      	cmp	r3, #128	@ 0x80
 80033bc:	d105      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033be:	4b33      	ldr	r3, [pc, #204]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4a32      	ldr	r2, [pc, #200]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 80033c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003488 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d21d      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <HAL_RCC_ClockConfig+0x260>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 020f 	bic.w	r2, r3, #15
 80033e0:	4929      	ldr	r1, [pc, #164]	@ (8003488 <HAL_RCC_ClockConfig+0x260>)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033e8:	f7fd ff5c 	bl	80012a4 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f0:	f7fd ff58 	bl	80012a4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e03b      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d1ed      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003420:	4b1a      	ldr	r3, [pc, #104]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4917      	ldr	r1, [pc, #92]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343e:	4b13      	ldr	r3, [pc, #76]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	490f      	ldr	r1, [pc, #60]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003452:	f000 f825 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8003456:	4602      	mov	r2, r0
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <HAL_RCC_ClockConfig+0x264>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	490c      	ldr	r1, [pc, #48]	@ (8003494 <HAL_RCC_ClockConfig+0x26c>)
 8003464:	5ccb      	ldrb	r3, [r1, r3]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003472:	4b0a      	ldr	r3, [pc, #40]	@ (800349c <HAL_RCC_ClockConfig+0x274>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fec8 	bl	800120c <HAL_InitTick>
 800347c:	4603      	mov	r3, r0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	04c4b400 	.word	0x04c4b400
 8003494:	08005e08 	.word	0x08005e08
 8003498:	20000000 	.word	0x20000000
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034b2:	4b2a      	ldr	r3, [pc, #168]	@ (800355c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	e047      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034b8:	4b27      	ldr	r3, [pc, #156]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034c4:	4b26      	ldr	r3, [pc, #152]	@ (8003560 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	e03e      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034ca:	4b23      	ldr	r3, [pc, #140]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d136      	bne.n	8003544 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034d6:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3301      	adds	r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003560 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4a16      	ldr	r2, [pc, #88]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034fe:	68d2      	ldr	r2, [r2, #12]
 8003500:	0a12      	lsrs	r2, r2, #8
 8003502:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	617b      	str	r3, [r7, #20]
      break;
 800350c:	e00c      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800350e:	4a13      	ldr	r2, [pc, #76]	@ (800355c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	0a12      	lsrs	r2, r2, #8
 800351c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]
      break;
 8003526:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0e5b      	lsrs	r3, r3, #25
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e001      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003548:	693b      	ldr	r3, [r7, #16]
}
 800354a:	4618      	mov	r0, r3
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	00f42400 	.word	0x00f42400
 8003560:	016e3600 	.word	0x016e3600

08003564 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000000 	.word	0x20000000

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003580:	f7ff fff0 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4904      	ldr	r1, [pc, #16]	@ (80035a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08005e18 	.word	0x08005e18

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035ac:	f7ff ffda 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0adb      	lsrs	r3, r3, #11
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4904      	ldr	r1, [pc, #16]	@ (80035d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08005e18 	.word	0x08005e18

080035d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035da:	4b1e      	ldr	r3, [pc, #120]	@ (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d10c      	bne.n	8003612 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035f8:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003602:	68d2      	ldr	r2, [r2, #12]
 8003604:	0a12      	lsrs	r2, r2, #8
 8003606:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	617b      	str	r3, [r7, #20]
    break;
 8003610:	e00c      	b.n	800362c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003612:	4a12      	ldr	r2, [pc, #72]	@ (800365c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	fbb2 f3f3 	udiv	r3, r2, r3
 800361a:	4a0e      	ldr	r2, [pc, #56]	@ (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	0a12      	lsrs	r2, r2, #8
 8003620:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]
    break;
 800362a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800362c:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	0e5b      	lsrs	r3, r3, #25
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003646:	687b      	ldr	r3, [r7, #4]
}
 8003648:	4618      	mov	r0, r3
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40021000 	.word	0x40021000
 8003658:	016e3600 	.word	0x016e3600
 800365c:	00f42400 	.word	0x00f42400

08003660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003668:	2300      	movs	r3, #0
 800366a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800366c:	2300      	movs	r3, #0
 800366e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8098 	beq.w	80037ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003682:	4b43      	ldr	r3, [pc, #268]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b40      	ldr	r3, [pc, #256]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003692:	4a3f      	ldr	r2, [pc, #252]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003698:	6593      	str	r3, [r2, #88]	@ 0x58
 800369a:	4b3d      	ldr	r3, [pc, #244]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a39      	ldr	r2, [pc, #228]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b6:	f7fd fdf5 	bl	80012a4 <HAL_GetTick>
 80036ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036bc:	e009      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7fd fdf1 	bl	80012a4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d902      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	74fb      	strb	r3, [r7, #19]
        break;
 80036d0:	e005      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d2:	4b30      	ldr	r3, [pc, #192]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ef      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d159      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01e      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d019      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003700:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800370a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003712:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	4a1b      	ldr	r2, [pc, #108]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372c:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fd fdb1 	bl	80012a4 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003744:	e00b      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd fdad 	bl	80012a4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d902      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	74fb      	strb	r3, [r7, #19]
            break;
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ec      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003778:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003780:	4903      	ldr	r1, [pc, #12]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003788:	e008      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	74bb      	strb	r3, [r7, #18]
 800378e:	e005      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800379c:	7c7b      	ldrb	r3, [r7, #17]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a2:	4ba7      	ldr	r3, [pc, #668]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	4aa6      	ldr	r2, [pc, #664]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ba:	4ba1      	ldr	r3, [pc, #644]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	f023 0203 	bic.w	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	499d      	ldr	r1, [pc, #628]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037dc:	4b98      	ldr	r3, [pc, #608]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f023 020c 	bic.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4995      	ldr	r1, [pc, #596]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037fe:	4b90      	ldr	r3, [pc, #576]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	498c      	ldr	r1, [pc, #560]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003820:	4b87      	ldr	r3, [pc, #540]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	4984      	ldr	r1, [pc, #528]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003842:	4b7f      	ldr	r3, [pc, #508]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	497b      	ldr	r1, [pc, #492]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003864:	4b76      	ldr	r3, [pc, #472]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	4973      	ldr	r1, [pc, #460]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003886:	4b6e      	ldr	r3, [pc, #440]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	496a      	ldr	r1, [pc, #424]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a8:	4b65      	ldr	r3, [pc, #404]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4962      	ldr	r1, [pc, #392]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	4959      	ldr	r1, [pc, #356]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ec:	4b54      	ldr	r3, [pc, #336]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	4951      	ldr	r1, [pc, #324]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800390e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003914:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	4948      	ldr	r1, [pc, #288]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003930:	4b43      	ldr	r3, [pc, #268]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	4940      	ldr	r1, [pc, #256]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800394e:	d105      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003950:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a3a      	ldr	r2, [pc, #232]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800395a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003968:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003976:	4932      	ldr	r1, [pc, #200]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b2d      	ldr	r3, [pc, #180]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003992:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039a0:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	4924      	ldr	r1, [pc, #144]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	4916      	ldr	r1, [pc, #88]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f8:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a10      	ldr	r2, [pc, #64]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d019      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	4908      	ldr	r1, [pc, #32]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b03      	ldr	r3, [pc, #12]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a02      	ldr	r2, [pc, #8]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
 8003a3c:	e002      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d015      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a50:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	4926      	ldr	r1, [pc, #152]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a70:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a20      	ldr	r2, [pc, #128]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a88:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	4918      	ldr	r1, [pc, #96]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ace:	490a      	ldr	r1, [pc, #40]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a04      	ldr	r2, [pc, #16]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000

08003afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e049      	b.n	8003ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fa36 	bl	8000f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f000 fac0 	bl	80040c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e049      	b.n	8003c50 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f841 	bl	8003c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	f000 fa69 	bl	80040c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0ff      	b.n	8003e8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b14      	cmp	r3, #20
 8003c96:	f200 80f0 	bhi.w	8003e7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003e7b 	.word	0x08003e7b
 8003ca8:	08003e7b 	.word	0x08003e7b
 8003cac:	08003e7b 	.word	0x08003e7b
 8003cb0:	08003d35 	.word	0x08003d35
 8003cb4:	08003e7b 	.word	0x08003e7b
 8003cb8:	08003e7b 	.word	0x08003e7b
 8003cbc:	08003e7b 	.word	0x08003e7b
 8003cc0:	08003d77 	.word	0x08003d77
 8003cc4:	08003e7b 	.word	0x08003e7b
 8003cc8:	08003e7b 	.word	0x08003e7b
 8003ccc:	08003e7b 	.word	0x08003e7b
 8003cd0:	08003db7 	.word	0x08003db7
 8003cd4:	08003e7b 	.word	0x08003e7b
 8003cd8:	08003e7b 	.word	0x08003e7b
 8003cdc:	08003e7b 	.word	0x08003e7b
 8003ce0:	08003df9 	.word	0x08003df9
 8003ce4:	08003e7b 	.word	0x08003e7b
 8003ce8:	08003e7b 	.word	0x08003e7b
 8003cec:	08003e7b 	.word	0x08003e7b
 8003cf0:	08003e39 	.word	0x08003e39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa94 	bl	8004228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e0a5      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fb0e 	bl	800435c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e084      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fb81 	bl	8004484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e064      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fbf3 	bl	80045a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e043      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fc66 	bl	80046d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0208 	orr.w	r2, r2, #8
 8003e12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0204 	bic.w	r2, r2, #4
 8003e22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e36:	e023      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fcb0 	bl	80047a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	021a      	lsls	r2, r3, #8
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e78:	e002      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop

08003e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0f6      	b.n	800409e <HAL_TIM_ConfigClockSource+0x20a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003ece:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6f      	ldr	r2, [pc, #444]	@ (80040a8 <HAL_TIM_ConfigClockSource+0x214>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	f000 80c1 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003ef0:	4a6d      	ldr	r2, [pc, #436]	@ (80040a8 <HAL_TIM_ConfigClockSource+0x214>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f200 80c6 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ef8:	4a6c      	ldr	r2, [pc, #432]	@ (80040ac <HAL_TIM_ConfigClockSource+0x218>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	f000 80b9 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003f00:	4a6a      	ldr	r2, [pc, #424]	@ (80040ac <HAL_TIM_ConfigClockSource+0x218>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	f200 80be 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f08:	4a69      	ldr	r2, [pc, #420]	@ (80040b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	f000 80b1 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003f10:	4a67      	ldr	r2, [pc, #412]	@ (80040b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f200 80b6 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f18:	4a66      	ldr	r2, [pc, #408]	@ (80040b4 <HAL_TIM_ConfigClockSource+0x220>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	f000 80a9 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003f20:	4a64      	ldr	r2, [pc, #400]	@ (80040b4 <HAL_TIM_ConfigClockSource+0x220>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	f200 80ae 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f28:	4a63      	ldr	r2, [pc, #396]	@ (80040b8 <HAL_TIM_ConfigClockSource+0x224>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	f000 80a1 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003f30:	4a61      	ldr	r2, [pc, #388]	@ (80040b8 <HAL_TIM_ConfigClockSource+0x224>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	f200 80a6 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f38:	4a60      	ldr	r2, [pc, #384]	@ (80040bc <HAL_TIM_ConfigClockSource+0x228>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	f000 8099 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003f40:	4a5e      	ldr	r2, [pc, #376]	@ (80040bc <HAL_TIM_ConfigClockSource+0x228>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	f200 809e 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f4c:	f000 8091 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003f50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f54:	f200 8096 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f5c:	f000 8089 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003f60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f64:	f200 808e 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6c:	d03e      	beq.n	8003fec <HAL_TIM_ConfigClockSource+0x158>
 8003f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f72:	f200 8087 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7a:	f000 8086 	beq.w	800408a <HAL_TIM_ConfigClockSource+0x1f6>
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d87f      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f84:	2b70      	cmp	r3, #112	@ 0x70
 8003f86:	d01a      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x12a>
 8003f88:	2b70      	cmp	r3, #112	@ 0x70
 8003f8a:	d87b      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f8c:	2b60      	cmp	r3, #96	@ 0x60
 8003f8e:	d050      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x19e>
 8003f90:	2b60      	cmp	r3, #96	@ 0x60
 8003f92:	d877      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f94:	2b50      	cmp	r3, #80	@ 0x50
 8003f96:	d03c      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0x17e>
 8003f98:	2b50      	cmp	r3, #80	@ 0x50
 8003f9a:	d873      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	d058      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x1be>
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d86f      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fa4:	2b30      	cmp	r3, #48	@ 0x30
 8003fa6:	d064      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003fa8:	2b30      	cmp	r3, #48	@ 0x30
 8003faa:	d86b      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d060      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d867      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05c      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d05a      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x1de>
 8003fbc:	e062      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fce:	f000 fcd1 	bl	8004974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	609a      	str	r2, [r3, #8]
      break;
 8003fea:	e04f      	b.n	800408c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ffc:	f000 fcba 	bl	8004974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800400e:	609a      	str	r2, [r3, #8]
      break;
 8004010:	e03c      	b.n	800408c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	461a      	mov	r2, r3
 8004020:	f000 fc2c 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2150      	movs	r1, #80	@ 0x50
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fc85 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004030:	e02c      	b.n	800408c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800403e:	461a      	mov	r2, r3
 8004040:	f000 fc4b 	bl	80048da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2160      	movs	r1, #96	@ 0x60
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fc75 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004050:	e01c      	b.n	800408c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405e:	461a      	mov	r2, r3
 8004060:	f000 fc0c 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2140      	movs	r1, #64	@ 0x40
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fc65 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004070:	e00c      	b.n	800408c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f000 fc5c 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004082:	e003      	b.n	800408c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
      break;
 8004088:	e000      	b.n	800408c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800408a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	00100070 	.word	0x00100070
 80040ac:	00100060 	.word	0x00100060
 80040b0:	00100050 	.word	0x00100050
 80040b4:	00100040 	.word	0x00100040
 80040b8:	00100030 	.word	0x00100030
 80040bc:	00100020 	.word	0x00100020

080040c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004204 <TIM_Base_SetConfig+0x144>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d017      	beq.n	8004108 <TIM_Base_SetConfig+0x48>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040de:	d013      	beq.n	8004108 <TIM_Base_SetConfig+0x48>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a49      	ldr	r2, [pc, #292]	@ (8004208 <TIM_Base_SetConfig+0x148>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00f      	beq.n	8004108 <TIM_Base_SetConfig+0x48>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a48      	ldr	r2, [pc, #288]	@ (800420c <TIM_Base_SetConfig+0x14c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00b      	beq.n	8004108 <TIM_Base_SetConfig+0x48>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a47      	ldr	r2, [pc, #284]	@ (8004210 <TIM_Base_SetConfig+0x150>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <TIM_Base_SetConfig+0x48>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a46      	ldr	r2, [pc, #280]	@ (8004214 <TIM_Base_SetConfig+0x154>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0x48>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a45      	ldr	r2, [pc, #276]	@ (8004218 <TIM_Base_SetConfig+0x158>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d108      	bne.n	800411a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a39      	ldr	r2, [pc, #228]	@ (8004204 <TIM_Base_SetConfig+0x144>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d023      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004128:	d01f      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a36      	ldr	r2, [pc, #216]	@ (8004208 <TIM_Base_SetConfig+0x148>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01b      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a35      	ldr	r2, [pc, #212]	@ (800420c <TIM_Base_SetConfig+0x14c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d017      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a34      	ldr	r2, [pc, #208]	@ (8004210 <TIM_Base_SetConfig+0x150>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a33      	ldr	r2, [pc, #204]	@ (8004214 <TIM_Base_SetConfig+0x154>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00f      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a33      	ldr	r2, [pc, #204]	@ (800421c <TIM_Base_SetConfig+0x15c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00b      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a32      	ldr	r2, [pc, #200]	@ (8004220 <TIM_Base_SetConfig+0x160>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d007      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a31      	ldr	r2, [pc, #196]	@ (8004224 <TIM_Base_SetConfig+0x164>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d003      	beq.n	800416a <TIM_Base_SetConfig+0xaa>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2c      	ldr	r2, [pc, #176]	@ (8004218 <TIM_Base_SetConfig+0x158>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d108      	bne.n	800417c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a18      	ldr	r2, [pc, #96]	@ (8004204 <TIM_Base_SetConfig+0x144>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <TIM_Base_SetConfig+0x110>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004214 <TIM_Base_SetConfig+0x154>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00f      	beq.n	80041d0 <TIM_Base_SetConfig+0x110>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1a      	ldr	r2, [pc, #104]	@ (800421c <TIM_Base_SetConfig+0x15c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <TIM_Base_SetConfig+0x110>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a19      	ldr	r2, [pc, #100]	@ (8004220 <TIM_Base_SetConfig+0x160>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_Base_SetConfig+0x110>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a18      	ldr	r2, [pc, #96]	@ (8004224 <TIM_Base_SetConfig+0x164>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0x110>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a13      	ldr	r2, [pc, #76]	@ (8004218 <TIM_Base_SetConfig+0x158>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d103      	bne.n	80041d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	611a      	str	r2, [r3, #16]
  }
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40013400 	.word	0x40013400
 8004218:	40015000 	.word	0x40015000
 800421c:	40014000 	.word	0x40014000
 8004220:	40014400 	.word	0x40014400
 8004224:	40014800 	.word	0x40014800

08004228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 0201 	bic.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f023 0302 	bic.w	r3, r3, #2
 8004274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a30      	ldr	r2, [pc, #192]	@ (8004344 <TIM_OC1_SetConfig+0x11c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d013      	beq.n	80042b0 <TIM_OC1_SetConfig+0x88>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2f      	ldr	r2, [pc, #188]	@ (8004348 <TIM_OC1_SetConfig+0x120>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00f      	beq.n	80042b0 <TIM_OC1_SetConfig+0x88>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a2e      	ldr	r2, [pc, #184]	@ (800434c <TIM_OC1_SetConfig+0x124>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <TIM_OC1_SetConfig+0x88>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a2d      	ldr	r2, [pc, #180]	@ (8004350 <TIM_OC1_SetConfig+0x128>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <TIM_OC1_SetConfig+0x88>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004354 <TIM_OC1_SetConfig+0x12c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_OC1_SetConfig+0x88>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004358 <TIM_OC1_SetConfig+0x130>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10c      	bne.n	80042ca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0308 	bic.w	r3, r3, #8
 80042b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 0304 	bic.w	r3, r3, #4
 80042c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004344 <TIM_OC1_SetConfig+0x11c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <TIM_OC1_SetConfig+0xd2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004348 <TIM_OC1_SetConfig+0x120>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00f      	beq.n	80042fa <TIM_OC1_SetConfig+0xd2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	@ (800434c <TIM_OC1_SetConfig+0x124>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00b      	beq.n	80042fa <TIM_OC1_SetConfig+0xd2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004350 <TIM_OC1_SetConfig+0x128>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d007      	beq.n	80042fa <TIM_OC1_SetConfig+0xd2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a19      	ldr	r2, [pc, #100]	@ (8004354 <TIM_OC1_SetConfig+0x12c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d003      	beq.n	80042fa <TIM_OC1_SetConfig+0xd2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <TIM_OC1_SetConfig+0x130>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d111      	bne.n	800431e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	621a      	str	r2, [r3, #32]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40013400 	.word	0x40013400
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800
 8004358:	40015000 	.word	0x40015000

0800435c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f023 0210 	bic.w	r2, r3, #16
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0320 	bic.w	r3, r3, #32
 80043aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a2c      	ldr	r2, [pc, #176]	@ (800446c <TIM_OC2_SetConfig+0x110>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_OC2_SetConfig+0x74>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004470 <TIM_OC2_SetConfig+0x114>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_OC2_SetConfig+0x74>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004474 <TIM_OC2_SetConfig+0x118>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10d      	bne.n	80043ec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1f      	ldr	r2, [pc, #124]	@ (800446c <TIM_OC2_SetConfig+0x110>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <TIM_OC2_SetConfig+0xc0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004470 <TIM_OC2_SetConfig+0x114>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00f      	beq.n	800441c <TIM_OC2_SetConfig+0xc0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <TIM_OC2_SetConfig+0x11c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <TIM_OC2_SetConfig+0xc0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a1d      	ldr	r2, [pc, #116]	@ (800447c <TIM_OC2_SetConfig+0x120>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <TIM_OC2_SetConfig+0xc0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a1c      	ldr	r2, [pc, #112]	@ (8004480 <TIM_OC2_SetConfig+0x124>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_OC2_SetConfig+0xc0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a17      	ldr	r2, [pc, #92]	@ (8004474 <TIM_OC2_SetConfig+0x118>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d113      	bne.n	8004444 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800442a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40013400 	.word	0x40013400
 8004474:	40015000 	.word	0x40015000
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800

08004484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004590 <TIM_OC3_SetConfig+0x10c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_OC3_SetConfig+0x72>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004594 <TIM_OC3_SetConfig+0x110>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_OC3_SetConfig+0x72>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a29      	ldr	r2, [pc, #164]	@ (8004598 <TIM_OC3_SetConfig+0x114>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10d      	bne.n	8004512 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1e      	ldr	r2, [pc, #120]	@ (8004590 <TIM_OC3_SetConfig+0x10c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <TIM_OC3_SetConfig+0xbe>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a1d      	ldr	r2, [pc, #116]	@ (8004594 <TIM_OC3_SetConfig+0x110>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00f      	beq.n	8004542 <TIM_OC3_SetConfig+0xbe>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1d      	ldr	r2, [pc, #116]	@ (800459c <TIM_OC3_SetConfig+0x118>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_OC3_SetConfig+0xbe>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a1c      	ldr	r2, [pc, #112]	@ (80045a0 <TIM_OC3_SetConfig+0x11c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_OC3_SetConfig+0xbe>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1b      	ldr	r2, [pc, #108]	@ (80045a4 <TIM_OC3_SetConfig+0x120>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_OC3_SetConfig+0xbe>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a16      	ldr	r2, [pc, #88]	@ (8004598 <TIM_OC3_SetConfig+0x114>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d113      	bne.n	800456a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	621a      	str	r2, [r3, #32]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40012c00 	.word	0x40012c00
 8004594:	40013400 	.word	0x40013400
 8004598:	40015000 	.word	0x40015000
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800

080045a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	031b      	lsls	r3, r3, #12
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a2c      	ldr	r2, [pc, #176]	@ (80046b8 <TIM_OC4_SetConfig+0x110>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d007      	beq.n	800461c <TIM_OC4_SetConfig+0x74>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a2b      	ldr	r2, [pc, #172]	@ (80046bc <TIM_OC4_SetConfig+0x114>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_OC4_SetConfig+0x74>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a2a      	ldr	r2, [pc, #168]	@ (80046c0 <TIM_OC4_SetConfig+0x118>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d10d      	bne.n	8004638 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004636:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a1f      	ldr	r2, [pc, #124]	@ (80046b8 <TIM_OC4_SetConfig+0x110>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d013      	beq.n	8004668 <TIM_OC4_SetConfig+0xc0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a1e      	ldr	r2, [pc, #120]	@ (80046bc <TIM_OC4_SetConfig+0x114>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00f      	beq.n	8004668 <TIM_OC4_SetConfig+0xc0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a1e      	ldr	r2, [pc, #120]	@ (80046c4 <TIM_OC4_SetConfig+0x11c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00b      	beq.n	8004668 <TIM_OC4_SetConfig+0xc0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1d      	ldr	r2, [pc, #116]	@ (80046c8 <TIM_OC4_SetConfig+0x120>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <TIM_OC4_SetConfig+0xc0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <TIM_OC4_SetConfig+0x124>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_OC4_SetConfig+0xc0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a17      	ldr	r2, [pc, #92]	@ (80046c0 <TIM_OC4_SetConfig+0x118>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d113      	bne.n	8004690 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800466e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004676:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40015000 	.word	0x40015000
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800

080046d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004714:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a19      	ldr	r2, [pc, #100]	@ (800478c <TIM_OC5_SetConfig+0xbc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <TIM_OC5_SetConfig+0x82>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a18      	ldr	r2, [pc, #96]	@ (8004790 <TIM_OC5_SetConfig+0xc0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00f      	beq.n	8004752 <TIM_OC5_SetConfig+0x82>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a17      	ldr	r2, [pc, #92]	@ (8004794 <TIM_OC5_SetConfig+0xc4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00b      	beq.n	8004752 <TIM_OC5_SetConfig+0x82>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <TIM_OC5_SetConfig+0xc8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <TIM_OC5_SetConfig+0x82>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a15      	ldr	r2, [pc, #84]	@ (800479c <TIM_OC5_SetConfig+0xcc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC5_SetConfig+0x82>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a14      	ldr	r2, [pc, #80]	@ (80047a0 <TIM_OC5_SetConfig+0xd0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d109      	bne.n	8004766 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004758:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	bf00      	nop
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40013400 	.word	0x40013400
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	40015000 	.word	0x40015000

080047a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	051b      	lsls	r3, r3, #20
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004864 <TIM_OC6_SetConfig+0xc0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <TIM_OC6_SetConfig+0x84>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a19      	ldr	r2, [pc, #100]	@ (8004868 <TIM_OC6_SetConfig+0xc4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00f      	beq.n	8004828 <TIM_OC6_SetConfig+0x84>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a18      	ldr	r2, [pc, #96]	@ (800486c <TIM_OC6_SetConfig+0xc8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_OC6_SetConfig+0x84>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a17      	ldr	r2, [pc, #92]	@ (8004870 <TIM_OC6_SetConfig+0xcc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_OC6_SetConfig+0x84>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a16      	ldr	r2, [pc, #88]	@ (8004874 <TIM_OC6_SetConfig+0xd0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_OC6_SetConfig+0x84>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a15      	ldr	r2, [pc, #84]	@ (8004878 <TIM_OC6_SetConfig+0xd4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d109      	bne.n	800483c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800482e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	029b      	lsls	r3, r3, #10
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40013400 	.word	0x40013400
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800
 8004878:	40015000 	.word	0x40015000

0800487c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0201 	bic.w	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f023 030a 	bic.w	r3, r3, #10
 80048b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048da:	b480      	push	{r7}
 80048dc:	b087      	sub	sp, #28
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f023 0210 	bic.w	r2, r3, #16
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	031b      	lsls	r3, r3, #12
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004916:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e074      	b.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a34      	ldr	r2, [pc, #208]	@ (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a31      	ldr	r2, [pc, #196]	@ (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a21      	ldr	r2, [pc, #132]	@ (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4c:	d01d      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a11      	ldr	r2, [pc, #68]	@ (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10c      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40013400 	.word	0x40013400
 8004acc:	40015000 	.word	0x40015000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40014000 	.word	0x40014000

08004ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e078      	b.n	8004bee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	@ (8004c00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d11c      	bne.n	8004bdc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bac:	051b      	lsls	r3, r3, #20
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40013400 	.word	0x40013400
 8004c04:	40015000 	.word	0x40015000

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e042      	b.n	8004ca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fc fa53 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	@ 0x24
 8004c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fbb8 	bl	80053c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8b9 	bl	8004dd0 <UART_SetConfig>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e01b      	b.n	8004ca0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fc37 	bl	800550c <UART_CheckIdleState>
 8004c9e:	4603      	mov	r3, r0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b091      	sub	sp, #68	@ 0x44
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d178      	bne.n	8004db2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Transmit_IT+0x24>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e071      	b.n	8004db4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	88fa      	ldrh	r2, [r7, #6]
 8004ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2221      	movs	r2, #33	@ 0x21
 8004cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d04:	d12a      	bne.n	8004d5c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0e:	d107      	bne.n	8004d20 <HAL_UART_Transmit_IT+0x78>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a29      	ldr	r2, [pc, #164]	@ (8004dc0 <HAL_UART_Transmit_IT+0x118>)
 8004d1c:	679a      	str	r2, [r3, #120]	@ 0x78
 8004d1e:	e002      	b.n	8004d26 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a28      	ldr	r2, [pc, #160]	@ (8004dc4 <HAL_UART_Transmit_IT+0x11c>)
 8004d24:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d46:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d48:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <HAL_UART_Transmit_IT+0x7e>
 8004d5a:	e028      	b.n	8004dae <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d64:	d107      	bne.n	8004d76 <HAL_UART_Transmit_IT+0xce>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a15      	ldr	r2, [pc, #84]	@ (8004dc8 <HAL_UART_Transmit_IT+0x120>)
 8004d72:	679a      	str	r2, [r3, #120]	@ 0x78
 8004d74:	e002      	b.n	8004d7c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a14      	ldr	r2, [pc, #80]	@ (8004dcc <HAL_UART_Transmit_IT+0x124>)
 8004d7a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	69f9      	ldr	r1, [r7, #28]
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3744      	adds	r7, #68	@ 0x44
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	08005a61 	.word	0x08005a61
 8004dc4:	08005981 	.word	0x08005981
 8004dc8:	080058bf 	.word	0x080058bf
 8004dcc:	08005807 	.word	0x08005807

08004dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b08c      	sub	sp, #48	@ 0x30
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4baa      	ldr	r3, [pc, #680]	@ (80050a8 <UART_SetConfig+0x2d8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a9f      	ldr	r2, [pc, #636]	@ (80050ac <UART_SetConfig+0x2dc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	f023 010f 	bic.w	r1, r3, #15
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a90      	ldr	r2, [pc, #576]	@ (80050b0 <UART_SetConfig+0x2e0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d125      	bne.n	8004ec0 <UART_SetConfig+0xf0>
 8004e74:	4b8f      	ldr	r3, [pc, #572]	@ (80050b4 <UART_SetConfig+0x2e4>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d81a      	bhi.n	8004eb8 <UART_SetConfig+0xe8>
 8004e82:	a201      	add	r2, pc, #4	@ (adr r2, 8004e88 <UART_SetConfig+0xb8>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004ea9 	.word	0x08004ea9
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004eb1 	.word	0x08004eb1
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	e116      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e112      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eae:	e10e      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb6:	e10a      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ebe:	e106      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a7c      	ldr	r2, [pc, #496]	@ (80050b8 <UART_SetConfig+0x2e8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d138      	bne.n	8004f3c <UART_SetConfig+0x16c>
 8004eca:	4b7a      	ldr	r3, [pc, #488]	@ (80050b4 <UART_SetConfig+0x2e4>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b0c      	cmp	r3, #12
 8004ed6:	d82d      	bhi.n	8004f34 <UART_SetConfig+0x164>
 8004ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <UART_SetConfig+0x110>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08004f35 	.word	0x08004f35
 8004ee8:	08004f35 	.word	0x08004f35
 8004eec:	08004f35 	.word	0x08004f35
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08004f35 	.word	0x08004f35
 8004ef8:	08004f35 	.word	0x08004f35
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1a:	e0d8      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e0d4      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f24:	2304      	movs	r3, #4
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e0d0      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f2c:	2308      	movs	r3, #8
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e0cc      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f34:	2310      	movs	r3, #16
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3a:	e0c8      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a5e      	ldr	r2, [pc, #376]	@ (80050bc <UART_SetConfig+0x2ec>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d125      	bne.n	8004f92 <UART_SetConfig+0x1c2>
 8004f46:	4b5b      	ldr	r3, [pc, #364]	@ (80050b4 <UART_SetConfig+0x2e4>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f50:	2b30      	cmp	r3, #48	@ 0x30
 8004f52:	d016      	beq.n	8004f82 <UART_SetConfig+0x1b2>
 8004f54:	2b30      	cmp	r3, #48	@ 0x30
 8004f56:	d818      	bhi.n	8004f8a <UART_SetConfig+0x1ba>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d00a      	beq.n	8004f72 <UART_SetConfig+0x1a2>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d814      	bhi.n	8004f8a <UART_SetConfig+0x1ba>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <UART_SetConfig+0x19a>
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d008      	beq.n	8004f7a <UART_SetConfig+0x1aa>
 8004f68:	e00f      	b.n	8004f8a <UART_SetConfig+0x1ba>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f70:	e0ad      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f72:	2302      	movs	r3, #2
 8004f74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f78:	e0a9      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f80:	e0a5      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f82:	2308      	movs	r3, #8
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f88:	e0a1      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f8a:	2310      	movs	r3, #16
 8004f8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f90:	e09d      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a4a      	ldr	r2, [pc, #296]	@ (80050c0 <UART_SetConfig+0x2f0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d125      	bne.n	8004fe8 <UART_SetConfig+0x218>
 8004f9c:	4b45      	ldr	r3, [pc, #276]	@ (80050b4 <UART_SetConfig+0x2e4>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa8:	d016      	beq.n	8004fd8 <UART_SetConfig+0x208>
 8004faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fac:	d818      	bhi.n	8004fe0 <UART_SetConfig+0x210>
 8004fae:	2b80      	cmp	r3, #128	@ 0x80
 8004fb0:	d00a      	beq.n	8004fc8 <UART_SetConfig+0x1f8>
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d814      	bhi.n	8004fe0 <UART_SetConfig+0x210>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <UART_SetConfig+0x1f0>
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d008      	beq.n	8004fd0 <UART_SetConfig+0x200>
 8004fbe:	e00f      	b.n	8004fe0 <UART_SetConfig+0x210>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc6:	e082      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e07e      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e07a      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e076      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e072      	b.n	80050ce <UART_SetConfig+0x2fe>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a35      	ldr	r2, [pc, #212]	@ (80050c4 <UART_SetConfig+0x2f4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d12a      	bne.n	8005048 <UART_SetConfig+0x278>
 8004ff2:	4b30      	ldr	r3, [pc, #192]	@ (80050b4 <UART_SetConfig+0x2e4>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ffc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005000:	d01a      	beq.n	8005038 <UART_SetConfig+0x268>
 8005002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005006:	d81b      	bhi.n	8005040 <UART_SetConfig+0x270>
 8005008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800500c:	d00c      	beq.n	8005028 <UART_SetConfig+0x258>
 800500e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005012:	d815      	bhi.n	8005040 <UART_SetConfig+0x270>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <UART_SetConfig+0x250>
 8005018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800501c:	d008      	beq.n	8005030 <UART_SetConfig+0x260>
 800501e:	e00f      	b.n	8005040 <UART_SetConfig+0x270>
 8005020:	2300      	movs	r3, #0
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005026:	e052      	b.n	80050ce <UART_SetConfig+0x2fe>
 8005028:	2302      	movs	r3, #2
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e04e      	b.n	80050ce <UART_SetConfig+0x2fe>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e04a      	b.n	80050ce <UART_SetConfig+0x2fe>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e046      	b.n	80050ce <UART_SetConfig+0x2fe>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e042      	b.n	80050ce <UART_SetConfig+0x2fe>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a17      	ldr	r2, [pc, #92]	@ (80050ac <UART_SetConfig+0x2dc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d13a      	bne.n	80050c8 <UART_SetConfig+0x2f8>
 8005052:	4b18      	ldr	r3, [pc, #96]	@ (80050b4 <UART_SetConfig+0x2e4>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800505c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005060:	d01a      	beq.n	8005098 <UART_SetConfig+0x2c8>
 8005062:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005066:	d81b      	bhi.n	80050a0 <UART_SetConfig+0x2d0>
 8005068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506c:	d00c      	beq.n	8005088 <UART_SetConfig+0x2b8>
 800506e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005072:	d815      	bhi.n	80050a0 <UART_SetConfig+0x2d0>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <UART_SetConfig+0x2b0>
 8005078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507c:	d008      	beq.n	8005090 <UART_SetConfig+0x2c0>
 800507e:	e00f      	b.n	80050a0 <UART_SetConfig+0x2d0>
 8005080:	2300      	movs	r3, #0
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005086:	e022      	b.n	80050ce <UART_SetConfig+0x2fe>
 8005088:	2302      	movs	r3, #2
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508e:	e01e      	b.n	80050ce <UART_SetConfig+0x2fe>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005096:	e01a      	b.n	80050ce <UART_SetConfig+0x2fe>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509e:	e016      	b.n	80050ce <UART_SetConfig+0x2fe>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a6:	e012      	b.n	80050ce <UART_SetConfig+0x2fe>
 80050a8:	cfff69f3 	.word	0xcfff69f3
 80050ac:	40008000 	.word	0x40008000
 80050b0:	40013800 	.word	0x40013800
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40004400 	.word	0x40004400
 80050bc:	40004800 	.word	0x40004800
 80050c0:	40004c00 	.word	0x40004c00
 80050c4:	40005000 	.word	0x40005000
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4aae      	ldr	r2, [pc, #696]	@ (800538c <UART_SetConfig+0x5bc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	f040 8097 	bne.w	8005208 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d823      	bhi.n	800512a <UART_SetConfig+0x35a>
 80050e2:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <UART_SetConfig+0x318>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	0800512b 	.word	0x0800512b
 80050f0:	08005115 	.word	0x08005115
 80050f4:	0800512b 	.word	0x0800512b
 80050f8:	0800511b 	.word	0x0800511b
 80050fc:	0800512b 	.word	0x0800512b
 8005100:	0800512b 	.word	0x0800512b
 8005104:	0800512b 	.word	0x0800512b
 8005108:	08005123 	.word	0x08005123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800510c:	f7fe fa36 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8005110:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005112:	e010      	b.n	8005136 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005114:	4b9e      	ldr	r3, [pc, #632]	@ (8005390 <UART_SetConfig+0x5c0>)
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005118:	e00d      	b.n	8005136 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511a:	f7fe f9c1 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800511e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005120:	e009      	b.n	8005136 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005128:	e005      	b.n	8005136 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005134:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8130 	beq.w	800539e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	4a94      	ldr	r2, [pc, #592]	@ (8005394 <UART_SetConfig+0x5c4>)
 8005144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005148:	461a      	mov	r2, r3
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005150:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	429a      	cmp	r2, r3
 8005160:	d305      	bcc.n	800516e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	429a      	cmp	r2, r3
 800516c:	d903      	bls.n	8005176 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005174:	e113      	b.n	800539e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	2200      	movs	r2, #0
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	60fa      	str	r2, [r7, #12]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	4a84      	ldr	r2, [pc, #528]	@ (8005394 <UART_SetConfig+0x5c4>)
 8005184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005188:	b29b      	uxth	r3, r3
 800518a:	2200      	movs	r2, #0
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005194:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005198:	f7fb f83e 	bl	8000218 <__aeabi_uldivmod>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	020b      	lsls	r3, r1, #8
 80051ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051b2:	0202      	lsls	r2, r0, #8
 80051b4:	6979      	ldr	r1, [r7, #20]
 80051b6:	6849      	ldr	r1, [r1, #4]
 80051b8:	0849      	lsrs	r1, r1, #1
 80051ba:	2000      	movs	r0, #0
 80051bc:	460c      	mov	r4, r1
 80051be:	4605      	mov	r5, r0
 80051c0:	eb12 0804 	adds.w	r8, r2, r4
 80051c4:	eb43 0905 	adc.w	r9, r3, r5
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	469a      	mov	sl, r3
 80051d0:	4693      	mov	fp, r2
 80051d2:	4652      	mov	r2, sl
 80051d4:	465b      	mov	r3, fp
 80051d6:	4640      	mov	r0, r8
 80051d8:	4649      	mov	r1, r9
 80051da:	f7fb f81d 	bl	8000218 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4613      	mov	r3, r2
 80051e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ec:	d308      	bcc.n	8005200 <UART_SetConfig+0x430>
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051f4:	d204      	bcs.n	8005200 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	60da      	str	r2, [r3, #12]
 80051fe:	e0ce      	b.n	800539e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005206:	e0ca      	b.n	800539e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005210:	d166      	bne.n	80052e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005212:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005216:	2b08      	cmp	r3, #8
 8005218:	d827      	bhi.n	800526a <UART_SetConfig+0x49a>
 800521a:	a201      	add	r2, pc, #4	@ (adr r2, 8005220 <UART_SetConfig+0x450>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005245 	.word	0x08005245
 8005224:	0800524d 	.word	0x0800524d
 8005228:	08005255 	.word	0x08005255
 800522c:	0800526b 	.word	0x0800526b
 8005230:	0800525b 	.word	0x0800525b
 8005234:	0800526b 	.word	0x0800526b
 8005238:	0800526b 	.word	0x0800526b
 800523c:	0800526b 	.word	0x0800526b
 8005240:	08005263 	.word	0x08005263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005244:	f7fe f99a 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800524a:	e014      	b.n	8005276 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800524c:	f7fe f9ac 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8005250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005252:	e010      	b.n	8005276 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005254:	4b4e      	ldr	r3, [pc, #312]	@ (8005390 <UART_SetConfig+0x5c0>)
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005258:	e00d      	b.n	8005276 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800525a:	f7fe f921 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800525e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005260:	e009      	b.n	8005276 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005268:	e005      	b.n	8005276 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8090 	beq.w	800539e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	4a44      	ldr	r2, [pc, #272]	@ (8005394 <UART_SetConfig+0x5c4>)
 8005284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005288:	461a      	mov	r2, r3
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005290:	005a      	lsls	r2, r3, #1
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	441a      	add	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d916      	bls.n	80052d8 <UART_SetConfig+0x508>
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b0:	d212      	bcs.n	80052d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f023 030f 	bic.w	r3, r3, #15
 80052ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	8bfb      	ldrh	r3, [r7, #30]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	8bfa      	ldrh	r2, [r7, #30]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	e062      	b.n	800539e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052de:	e05e      	b.n	800539e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d828      	bhi.n	800533a <UART_SetConfig+0x56a>
 80052e8:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <UART_SetConfig+0x520>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005315 	.word	0x08005315
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	0800533b 	.word	0x0800533b
 8005300:	0800532b 	.word	0x0800532b
 8005304:	0800533b 	.word	0x0800533b
 8005308:	0800533b 	.word	0x0800533b
 800530c:	0800533b 	.word	0x0800533b
 8005310:	08005333 	.word	0x08005333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005314:	f7fe f932 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8005318:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800531a:	e014      	b.n	8005346 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800531c:	f7fe f944 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005322:	e010      	b.n	8005346 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005324:	4b1a      	ldr	r3, [pc, #104]	@ (8005390 <UART_SetConfig+0x5c0>)
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005328:	e00d      	b.n	8005346 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532a:	f7fe f8b9 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800532e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005330:	e009      	b.n	8005346 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005338:	e005      	b.n	8005346 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005344:	bf00      	nop
    }

    if (pclk != 0U)
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d028      	beq.n	800539e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	4a10      	ldr	r2, [pc, #64]	@ (8005394 <UART_SetConfig+0x5c4>)
 8005352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005356:	461a      	mov	r2, r3
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	fbb3 f2f2 	udiv	r2, r3, r2
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	441a      	add	r2, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d910      	bls.n	8005398 <UART_SetConfig+0x5c8>
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537c:	d20c      	bcs.n	8005398 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	b29a      	uxth	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	e009      	b.n	800539e <UART_SetConfig+0x5ce>
 800538a:	bf00      	nop
 800538c:	40008000 	.word	0x40008000
 8005390:	00f42400 	.word	0x00f42400
 8005394:	08005e20 	.word	0x08005e20
      }
      else
      {
        ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2200      	movs	r2, #0
 80053b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3730      	adds	r7, #48	@ 0x30
 80053c2:	46bd      	mov	sp, r7
 80053c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080053c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01a      	beq.n	80054de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054c6:	d10a      	bne.n	80054de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
  }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b098      	sub	sp, #96	@ 0x60
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800551c:	f7fb fec2 	bl	80012a4 <HAL_GetTick>
 8005520:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d12f      	bne.n	8005590 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005538:	2200      	movs	r2, #0
 800553a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f88e 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d022      	beq.n	8005590 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800555e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
 800556a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800556e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e063      	b.n	8005658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d149      	bne.n	8005632 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a6:	2200      	movs	r2, #0
 80055a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f857 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d03c      	beq.n	8005632 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	623b      	str	r3, [r7, #32]
   return(result);
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800560a:	61fa      	str	r2, [r7, #28]
 800560c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	617b      	str	r3, [r7, #20]
   return(result);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e012      	b.n	8005658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3758      	adds	r7, #88	@ 0x58
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005670:	e04f      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d04b      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fb fe13 	bl	80012a4 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <UART_WaitOnFlagUntilTimeout+0x30>
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e04e      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d037      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b80      	cmp	r3, #128	@ 0x80
 80056a6:	d034      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b40      	cmp	r3, #64	@ 0x40
 80056ac:	d031      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d110      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2208      	movs	r2, #8
 80056c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f838 	bl	800573a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2208      	movs	r2, #8
 80056ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e029      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ec:	d111      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f81e 	bl	800573a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00f      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d0a0      	beq.n	8005672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573a:	b480      	push	{r7}
 800573c:	b095      	sub	sp, #84	@ 0x54
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005760:	643b      	str	r3, [r7, #64]	@ 0x40
 8005762:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	61fb      	str	r3, [r7, #28]
   return(result);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e3      	bne.n	8005774 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d118      	bne.n	80057e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6979      	ldr	r1, [r7, #20]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	613b      	str	r3, [r7, #16]
   return(result);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e6      	bne.n	80057b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057fa:	bf00      	nop
 80057fc:	3754      	adds	r7, #84	@ 0x54
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005806:	b480      	push	{r7}
 8005808:	b08f      	sub	sp, #60	@ 0x3c
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005814:	2b21      	cmp	r3, #33	@ 0x21
 8005816:	d14c      	bne.n	80058b2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d132      	bne.n	800588a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	61fb      	str	r3, [r7, #28]
   return(result);
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005838:	637b      	str	r3, [r7, #52]	@ 0x34
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005844:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e6      	bne.n	8005824 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60bb      	str	r3, [r7, #8]
   return(result);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800586a:	633b      	str	r3, [r7, #48]	@ 0x30
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005888:	e013      	b.n	80058b2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	781a      	ldrb	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80058b2:	bf00      	nop
 80058b4:	373c      	adds	r7, #60	@ 0x3c
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058be:	b480      	push	{r7}
 80058c0:	b091      	sub	sp, #68	@ 0x44
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058cc:	2b21      	cmp	r3, #33	@ 0x21
 80058ce:	d151      	bne.n	8005974 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d132      	bne.n	8005942 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	623b      	str	r3, [r7, #32]
   return(result);
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80058fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e6      	bne.n	80058dc <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	60fb      	str	r3, [r7, #12]
   return(result);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005922:	637b      	str	r3, [r7, #52]	@ 0x34
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	617b      	str	r3, [r7, #20]
   return(result);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e6      	bne.n	800590e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005940:	e018      	b.n	8005974 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005946:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005956:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005974:	bf00      	nop
 8005976:	3744      	adds	r7, #68	@ 0x44
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b091      	sub	sp, #68	@ 0x44
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	2b21      	cmp	r3, #33	@ 0x21
 8005990:	d160      	bne.n	8005a54 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005998:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800599a:	e057      	b.n	8005a4c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d133      	bne.n	8005a10 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	623b      	str	r3, [r7, #32]
   return(result);
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80059be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80059ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	69b9      	ldr	r1, [r7, #24]
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	617b      	str	r3, [r7, #20]
   return(result);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e6      	bne.n	80059dc <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005a0e:	e021      	b.n	8005a54 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d013      	beq.n	8005a46 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005a46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005a4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1a4      	bne.n	800599c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005a52:	e7ff      	b.n	8005a54 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005a54:	bf00      	nop
 8005a56:	3744      	adds	r7, #68	@ 0x44
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b091      	sub	sp, #68	@ 0x44
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6e:	2b21      	cmp	r3, #33	@ 0x21
 8005a70:	d165      	bne.n	8005b3e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005a7a:	e05c      	b.n	8005b36 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d133      	bne.n	8005af0 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e5      	bne.n	8005a88 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6979      	ldr	r1, [r7, #20]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e6      	bne.n	8005abc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005aee:	e026      	b.n	8005b3e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d018      	beq.n	8005b30 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b02:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b12:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b18:	1c9a      	adds	r2, r3, #2
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005b30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005b32:	3b01      	subs	r3, #1
 8005b34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005b36:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d19f      	bne.n	8005a7c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005b3c:	e7ff      	b.n	8005b3e <UART_TxISR_16BIT_FIFOEN+0xde>
 8005b3e:	bf00      	nop
 8005b40:	3744      	adds	r7, #68	@ 0x44
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e027      	b.n	8005bb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2224      	movs	r2, #36	@ 0x24
 8005b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e02d      	b.n	8005c30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2224      	movs	r2, #36	@ 0x24
 8005be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f84f 	bl	8005cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e02d      	b.n	8005cac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2224      	movs	r2, #36	@ 0x24
 8005c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f811 	bl	8005cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d108      	bne.n	8005cd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cd4:	e031      	b.n	8005d3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cda:	2308      	movs	r3, #8
 8005cdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	0e5b      	lsrs	r3, r3, #25
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	0f5b      	lsrs	r3, r3, #29
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	7b3a      	ldrb	r2, [r7, #12]
 8005d02:	4911      	ldr	r1, [pc, #68]	@ (8005d48 <UARTEx_SetNbDataToProcess+0x94>)
 8005d04:	5c8a      	ldrb	r2, [r1, r2]
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d0a:	7b3a      	ldrb	r2, [r7, #12]
 8005d0c:	490f      	ldr	r1, [pc, #60]	@ (8005d4c <UARTEx_SetNbDataToProcess+0x98>)
 8005d0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	7b7a      	ldrb	r2, [r7, #13]
 8005d20:	4909      	ldr	r1, [pc, #36]	@ (8005d48 <UARTEx_SetNbDataToProcess+0x94>)
 8005d22:	5c8a      	ldrb	r2, [r1, r2]
 8005d24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d28:	7b7a      	ldrb	r2, [r7, #13]
 8005d2a:	4908      	ldr	r1, [pc, #32]	@ (8005d4c <UARTEx_SetNbDataToProcess+0x98>)
 8005d2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	08005e38 	.word	0x08005e38
 8005d4c:	08005e40 	.word	0x08005e40

08005d50 <memset>:
 8005d50:	4402      	add	r2, r0
 8005d52:	4603      	mov	r3, r0
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d100      	bne.n	8005d5a <memset+0xa>
 8005d58:	4770      	bx	lr
 8005d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d5e:	e7f9      	b.n	8005d54 <memset+0x4>

08005d60 <__libc_init_array>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	4d0d      	ldr	r5, [pc, #52]	@ (8005d98 <__libc_init_array+0x38>)
 8005d64:	4c0d      	ldr	r4, [pc, #52]	@ (8005d9c <__libc_init_array+0x3c>)
 8005d66:	1b64      	subs	r4, r4, r5
 8005d68:	10a4      	asrs	r4, r4, #2
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	42a6      	cmp	r6, r4
 8005d6e:	d109      	bne.n	8005d84 <__libc_init_array+0x24>
 8005d70:	4d0b      	ldr	r5, [pc, #44]	@ (8005da0 <__libc_init_array+0x40>)
 8005d72:	4c0c      	ldr	r4, [pc, #48]	@ (8005da4 <__libc_init_array+0x44>)
 8005d74:	f000 f818 	bl	8005da8 <_init>
 8005d78:	1b64      	subs	r4, r4, r5
 8005d7a:	10a4      	asrs	r4, r4, #2
 8005d7c:	2600      	movs	r6, #0
 8005d7e:	42a6      	cmp	r6, r4
 8005d80:	d105      	bne.n	8005d8e <__libc_init_array+0x2e>
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d88:	4798      	blx	r3
 8005d8a:	3601      	adds	r6, #1
 8005d8c:	e7ee      	b.n	8005d6c <__libc_init_array+0xc>
 8005d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d92:	4798      	blx	r3
 8005d94:	3601      	adds	r6, #1
 8005d96:	e7f2      	b.n	8005d7e <__libc_init_array+0x1e>
 8005d98:	08005e50 	.word	0x08005e50
 8005d9c:	08005e50 	.word	0x08005e50
 8005da0:	08005e50 	.word	0x08005e50
 8005da4:	08005e54 	.word	0x08005e54

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
