
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007680  08007680  00008680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c0  080076c0  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080076c0  080076c0  000086c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076c8  080076c8  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076c8  080076c8  000086c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076cc  080076cc  000086cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080076d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  2000000c  080076dc  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  080076dc  00009720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c5cd  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039a1  00000000  00000000  00025609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00028fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133d  00000000  00000000  0002a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c8d  00000000  00000000  0002bb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020362  00000000  00000000  0002f82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001123e9  00000000  00000000  0004fb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006914  00000000  00000000  00161fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001688cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007668 	.word	0x08007668

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007668 	.word	0x08007668

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vLineSensorSystemInit>:
#define IR4_AD hadc4
#define IR5_AD hadc5

extern uint32_t uiAdcValue;

void vLineSensorSystemInit(uint32_t *pLineSensorsReadings){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000510:	217f      	movs	r1, #127	@ 0x7f
 8000512:	481b      	ldr	r0, [pc, #108]	@ (8000580 <vLineSensorSystemInit+0x78>)
 8000514:	f002 ffdc 	bl	80034d0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, &pLineSensorsReadings[0] , 1);
 8000518:	2201      	movs	r2, #1
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	4818      	ldr	r0, [pc, #96]	@ (8000580 <vLineSensorSystemInit+0x78>)
 800051e:	f002 f8c9 	bl	80026b4 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR2_AD, ADC_SINGLE_ENDED);
 8000522:	217f      	movs	r1, #127	@ 0x7f
 8000524:	4817      	ldr	r0, [pc, #92]	@ (8000584 <vLineSensorSystemInit+0x7c>)
 8000526:	f002 ffd3 	bl	80034d0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR2_AD, &uiAdcValue , 1);
 800052a:	2201      	movs	r2, #1
 800052c:	4916      	ldr	r1, [pc, #88]	@ (8000588 <vLineSensorSystemInit+0x80>)
 800052e:	4815      	ldr	r0, [pc, #84]	@ (8000584 <vLineSensorSystemInit+0x7c>)
 8000530:	f002 f8c0 	bl	80026b4 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR3_AD, ADC_SINGLE_ENDED);
 8000534:	217f      	movs	r1, #127	@ 0x7f
 8000536:	4815      	ldr	r0, [pc, #84]	@ (800058c <vLineSensorSystemInit+0x84>)
 8000538:	f002 ffca 	bl	80034d0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR3_AD, &pLineSensorsReadings[2] , 1);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3308      	adds	r3, #8
 8000540:	2201      	movs	r2, #1
 8000542:	4619      	mov	r1, r3
 8000544:	4811      	ldr	r0, [pc, #68]	@ (800058c <vLineSensorSystemInit+0x84>)
 8000546:	f002 f8b5 	bl	80026b4 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR4_AD, ADC_SINGLE_ENDED);
 800054a:	217f      	movs	r1, #127	@ 0x7f
 800054c:	4810      	ldr	r0, [pc, #64]	@ (8000590 <vLineSensorSystemInit+0x88>)
 800054e:	f002 ffbf 	bl	80034d0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR4_AD, &pLineSensorsReadings[3] , 1);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	330c      	adds	r3, #12
 8000556:	2201      	movs	r2, #1
 8000558:	4619      	mov	r1, r3
 800055a:	480d      	ldr	r0, [pc, #52]	@ (8000590 <vLineSensorSystemInit+0x88>)
 800055c:	f002 f8aa 	bl	80026b4 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR5_AD, ADC_SINGLE_ENDED);
 8000560:	217f      	movs	r1, #127	@ 0x7f
 8000562:	480c      	ldr	r0, [pc, #48]	@ (8000594 <vLineSensorSystemInit+0x8c>)
 8000564:	f002 ffb4 	bl	80034d0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR5_AD, &pLineSensorsReadings[4] , 1);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3310      	adds	r3, #16
 800056c:	2201      	movs	r2, #1
 800056e:	4619      	mov	r1, r3
 8000570:	4808      	ldr	r0, [pc, #32]	@ (8000594 <vLineSensorSystemInit+0x8c>)
 8000572:	f002 f89f 	bl	80026b4 <HAL_ADC_Start_DMA>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000028 	.word	0x20000028
 8000584:	20000094 	.word	0x20000094
 8000588:	20000494 	.word	0x20000494
 800058c:	20000100 	.word	0x20000100
 8000590:	2000016c 	.word	0x2000016c
 8000594:	200001d8 	.word	0x200001d8

08000598 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <vPowerTrainSystemInit+0x20>)
 800059e:	f004 fffb 	bl	8005598 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 80005a2:	2100      	movs	r1, #0
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <vPowerTrainSystemInit+0x20>)
 80005a6:	f005 f8bf 	bl	8005728 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 80005aa:	2104      	movs	r1, #4
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <vPowerTrainSystemInit+0x20>)
 80005ae:	f005 f8bb 	bl	8005728 <HAL_TIM_PWM_Start>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000498 	.word	0x20000498

080005bc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	@ 0x30
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2220      	movs	r2, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f007 f81b 	bl	8007610 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005da:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000604:	2204      	movs	r2, #4
 8000606:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060e:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000610:	2201      	movs	r2, #1
 8000612:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000616:	2201      	movs	r2, #1
 8000618:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000630:	2201      	movs	r2, #1
 8000632:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	4817      	ldr	r0, [pc, #92]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000646:	f001 fe79 	bl	800233c <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000650:	f000 fed7 	bl	8001402 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065c:	4619      	mov	r1, r3
 800065e:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 8000660:	f002 ff98 	bl	8003594 <HAL_ADCEx_MultiModeConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800066a:	f000 feca 	bl	8001402 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_ADC1_Init+0xec>)
 8000670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000672:	2306      	movs	r3, #6
 8000674:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000676:	2302      	movs	r3, #2
 8000678:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067a:	237f      	movs	r3, #127	@ 0x7f
 800067c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067e:	2304      	movs	r3, #4
 8000680:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <MX_ADC1_Init+0xe8>)
 800068c:	f002 f904 	bl	8002898 <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000696:	f000 feb4 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	@ 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	04300002 	.word	0x04300002

080006ac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2220      	movs	r2, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f006 ffa9 	bl	8007610 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006be:	4b32      	ldr	r3, [pc, #200]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006c0:	4a32      	ldr	r2, [pc, #200]	@ (800078c <MX_ADC2_Init+0xe0>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c4:	4b30      	ldr	r3, [pc, #192]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006c6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006de:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80006f6:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_ADC2_Init+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_ADC2_Init+0xdc>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000712:	2201      	movs	r2, #1
 8000714:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_ADC2_Init+0xdc>)
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000726:	4818      	ldr	r0, [pc, #96]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000728:	f001 fe08 	bl	800233c <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000732:	f000 fe66 	bl	8001402 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xe4>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2306      	movs	r3, #6
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800073e:	2302      	movs	r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000742:	237f      	movs	r3, #127	@ 0x7f
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	480d      	ldr	r0, [pc, #52]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000754:	f002 f8a0 	bl	8002898 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800075e:	f000 fe50 	bl	8001402 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_ADC2_Init+0xe8>)
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000766:	230c      	movs	r3, #12
 8000768:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_ADC2_Init+0xdc>)
 8000770:	f002 f892 	bl	8002898 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800077a:	f000 fe42 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000094 	.word	0x20000094
 800078c:	50000100 	.word	0x50000100
 8000790:	0c900008 	.word	0x0c900008
 8000794:	10c00010 	.word	0x10c00010

08000798 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 ff2d 	bl	8007610 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007b6:	4b31      	ldr	r3, [pc, #196]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007b8:	4a31      	ldr	r2, [pc, #196]	@ (8000880 <MX_ADC3_Init+0xe8>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007c4:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80007d0:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b29      	ldr	r3, [pc, #164]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007de:	2204      	movs	r2, #4
 80007e0:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_ADC3_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_ADC3_Init+0xe4>)
 800080a:	2201      	movs	r2, #1
 800080c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800081e:	4817      	ldr	r0, [pc, #92]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000820:	f001 fd8c 	bl	800233c <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800082a:	f000 fdea 	bl	8001402 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4810      	ldr	r0, [pc, #64]	@ (800087c <MX_ADC3_Init+0xe4>)
 800083a:	f002 feab 	bl	8003594 <HAL_ADCEx_MultiModeConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000844:	f000 fddd 	bl	8001402 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_ADC3_Init+0xec>)
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084c:	2306      	movs	r3, #6
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000850:	2302      	movs	r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000854:	237f      	movs	r3, #127	@ 0x7f
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000858:	2304      	movs	r3, #4
 800085a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_ADC3_Init+0xe4>)
 8000866:	f002 f817 	bl	8002898 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000870:	f000 fdc7 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	@ 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000100 	.word	0x20000100
 8000880:	50000400 	.word	0x50000400
 8000884:	14f00020 	.word	0x14f00020

08000888 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f006 febb 	bl	8007610 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <MX_ADC4_Init+0xc0>)
 800089c:	4a2b      	ldr	r2, [pc, #172]	@ (800094c <MX_ADC4_Init+0xc4>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a0:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008a6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_ADC4_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000902:	4811      	ldr	r0, [pc, #68]	@ (8000948 <MX_ADC4_Init+0xc0>)
 8000904:	f001 fd1a 	bl	800233c <HAL_ADC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800090e:	f000 fd78 	bl	8001402 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_ADC4_Init+0xc8>)
 8000914:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000916:	2306      	movs	r3, #6
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800091a:	2302      	movs	r3, #2
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091e:	237f      	movs	r3, #127	@ 0x7f
 8000920:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000922:	2304      	movs	r3, #4
 8000924:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <MX_ADC4_Init+0xc0>)
 8000930:	f001 ffb2 	bl	8002898 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800093a:	f000 fd62 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000016c 	.word	0x2000016c
 800094c:	50000500 	.word	0x50000500
 8000950:	14f00020 	.word	0x14f00020

08000954 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2220      	movs	r2, #32
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f006 fe55 	bl	8007610 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000966:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000968:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <MX_ADC5_Init+0xc4>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800096c:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 800096e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000972:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097a:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000980:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098c:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 800098e:	2204      	movs	r2, #4
 8000990:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000992:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 800099a:	2201      	movs	r2, #1
 800099c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009d0:	f001 fcb4 	bl	800233c <HAL_ADC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80009da:	f000 fd12 	bl	8001402 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_ADC5_Init+0xc8>)
 80009e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e2:	2306      	movs	r3, #6
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ea:	237f      	movs	r3, #127	@ 0x7f
 80009ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ee:	2304      	movs	r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_ADC5_Init+0xc0>)
 80009fc:	f001 ff4c 	bl	8002898 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000a06:	f000 fcfc 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001d8 	.word	0x200001d8
 8000a18:	50000600 	.word	0x50000600
 8000a1c:	08600004 	.word	0x08600004

08000a20 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0a6      	sub	sp, #152	@ 0x98
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a3c:	2254      	movs	r2, #84	@ 0x54
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f006 fde5 	bl	8007610 <memset>
  if(adcHandle->Instance==ADC1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a4e:	d16c      	bne.n	8000b2a <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a54:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a56:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a5a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 faf3 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a6c:	f000 fcc9 	bl	8001402 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a70:	4ba0      	ldr	r3, [pc, #640]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a9f      	ldr	r2, [pc, #636]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000a78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a7a:	4b9e      	ldr	r3, [pc, #632]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10b      	bne.n	8000a9a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a82:	4b9d      	ldr	r3, [pc, #628]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a9c      	ldr	r2, [pc, #624]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000a88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b9a      	ldr	r3, [pc, #616]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b97      	ldr	r3, [pc, #604]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	4a96      	ldr	r2, [pc, #600]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa6:	4b94      	ldr	r3, [pc, #592]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f003 f9eb 	bl	8003ea8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ad2:	4b8a      	ldr	r3, [pc, #552]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000ad4:	4a8a      	ldr	r2, [pc, #552]	@ (8000d00 <HAL_ADC_MspInit+0x2e0>)
 8000ad6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ad8:	4b88      	ldr	r3, [pc, #544]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000ada:	2205      	movs	r2, #5
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b87      	ldr	r3, [pc, #540]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b85      	ldr	r3, [pc, #532]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b84      	ldr	r3, [pc, #528]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000af0:	4b82      	ldr	r3, [pc, #520]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000af2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af8:	4b80      	ldr	r3, [pc, #512]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b00:	4b7e      	ldr	r3, [pc, #504]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b02:	2220      	movs	r2, #32
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b7d      	ldr	r3, [pc, #500]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b0c:	487b      	ldr	r0, [pc, #492]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b0e:	f002 ff59 	bl	80039c4 <HAL_DMA_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000b18:	f000 fc73 	bl	8001402 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a77      	ldr	r2, [pc, #476]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b20:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b22:	4a76      	ldr	r2, [pc, #472]	@ (8000cfc <HAL_ADC_MspInit+0x2dc>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000b28:	e1e0      	b.n	8000eec <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a75      	ldr	r2, [pc, #468]	@ (8000d04 <HAL_ADC_MspInit+0x2e4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d16c      	bne.n	8000c0e <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b38:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b3a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b3e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 fa81 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000b50:	f000 fc57 	bl	8001402 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b54:	4b67      	ldr	r3, [pc, #412]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	4a66      	ldr	r2, [pc, #408]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000b5c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b5e:	4b65      	ldr	r3, [pc, #404]	@ (8000cf4 <HAL_ADC_MspInit+0x2d4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10b      	bne.n	8000b7e <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b66:	4b64      	ldr	r3, [pc, #400]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a63      	ldr	r2, [pc, #396]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b61      	ldr	r3, [pc, #388]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a5d      	ldr	r2, [pc, #372]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000b96:	23c0      	movs	r3, #192	@ 0xc0
 8000b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb2:	f003 f979 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000bb6:	4b54      	ldr	r3, [pc, #336]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bb8:	4a54      	ldr	r2, [pc, #336]	@ (8000d0c <HAL_ADC_MspInit+0x2ec>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000bbc:	4b52      	ldr	r3, [pc, #328]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bbe:	2224      	movs	r2, #36	@ 0x24
 8000bc0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b51      	ldr	r3, [pc, #324]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b4e      	ldr	r3, [pc, #312]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bda:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000be4:	4b48      	ldr	r3, [pc, #288]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000be6:	2220      	movs	r2, #32
 8000be8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000bea:	4b47      	ldr	r3, [pc, #284]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000bf0:	4845      	ldr	r0, [pc, #276]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000bf2:	f002 fee7 	bl	80039c4 <HAL_DMA_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000bfc:	f000 fc01 	bl	8001402 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a41      	ldr	r2, [pc, #260]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000c04:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c06:	4a40      	ldr	r2, [pc, #256]	@ (8000d08 <HAL_ADC_MspInit+0x2e8>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c0c:	e16e      	b.n	8000eec <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a3f      	ldr	r2, [pc, #252]	@ (8000d10 <HAL_ADC_MspInit+0x2f0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	f040 8085 	bne.w	8000d24 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000c24:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 fa0e 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000c36:	f000 fbe4 	bl	8001402 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c3a:	4b36      	ldr	r3, [pc, #216]	@ (8000d14 <HAL_ADC_MspInit+0x2f4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a34      	ldr	r2, [pc, #208]	@ (8000d14 <HAL_ADC_MspInit+0x2f4>)
 8000c42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000c44:	4b33      	ldr	r3, [pc, #204]	@ (8000d14 <HAL_ADC_MspInit+0x2f4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10b      	bne.n	8000c64 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4a29      	ldr	r2, [pc, #164]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b24      	ldr	r3, [pc, #144]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c68:	4a23      	ldr	r2, [pc, #140]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <HAL_ADC_MspInit+0x2d8>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c94:	4619      	mov	r1, r3
 8000c96:	4820      	ldr	r0, [pc, #128]	@ (8000d18 <HAL_ADC_MspInit+0x2f8>)
 8000c98:	f003 f906 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000c9e:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <HAL_ADC_MspInit+0x300>)
 8000ca0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000ca4:	2225      	movs	r2, #37	@ 0x25
 8000ca6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000ccc:	2220      	movs	r2, #32
 8000cce:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000cd6:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cd8:	f002 fe74 	bl	80039c4 <HAL_DMA_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000ce2:	f000 fb8e 	bl	8001402 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cea:	655a      	str	r2, [r3, #84]	@ 0x54
 8000cec:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <HAL_ADC_MspInit+0x2fc>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000cf2:	e0fb      	b.n	8000eec <HAL_ADC_MspInit+0x4cc>
 8000cf4:	20000424 	.word	0x20000424
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	20000244 	.word	0x20000244
 8000d00:	40020008 	.word	0x40020008
 8000d04:	50000100 	.word	0x50000100
 8000d08:	200002a4 	.word	0x200002a4
 8000d0c:	4002001c 	.word	0x4002001c
 8000d10:	50000400 	.word	0x50000400
 8000d14:	20000428 	.word	0x20000428
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	20000304 	.word	0x20000304
 8000d20:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a72      	ldr	r2, [pc, #456]	@ (8000ef4 <HAL_ADC_MspInit+0x4d4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d16c      	bne.n	8000e08 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d32:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d38:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 f984 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000d4a:	f000 fb5a 	bl	8001402 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a68      	ldr	r2, [pc, #416]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000d56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000d58:	4b67      	ldr	r3, [pc, #412]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d10b      	bne.n	8000d78 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d60:	4b66      	ldr	r3, [pc, #408]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	4a65      	ldr	r2, [pc, #404]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6c:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b60      	ldr	r3, [pc, #384]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7c:	4a5f      	ldr	r2, [pc, #380]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d84:	4b5d      	ldr	r3, [pc, #372]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000da8:	4619      	mov	r1, r3
 8000daa:	4855      	ldr	r0, [pc, #340]	@ (8000f00 <HAL_ADC_MspInit+0x4e0>)
 8000dac:	f003 f87c 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000db0:	4b54      	ldr	r3, [pc, #336]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000db2:	4a55      	ldr	r2, [pc, #340]	@ (8000f08 <HAL_ADC_MspInit+0x4e8>)
 8000db4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000db6:	4b53      	ldr	r3, [pc, #332]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000db8:	2226      	movs	r2, #38	@ 0x26
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbc:	4b51      	ldr	r3, [pc, #324]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc2:	4b50      	ldr	r3, [pc, #320]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dca:	2280      	movs	r2, #128	@ 0x80
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dce:	4b4d      	ldr	r3, [pc, #308]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ddc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000dde:	4b49      	ldr	r3, [pc, #292]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000de0:	2220      	movs	r2, #32
 8000de2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000de4:	4b47      	ldr	r3, [pc, #284]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000dea:	4846      	ldr	r0, [pc, #280]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dec:	f002 fdea 	bl	80039c4 <HAL_DMA_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000df6:	f000 fb04 	bl	8001402 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a41      	ldr	r2, [pc, #260]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000dfe:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e00:	4a40      	ldr	r2, [pc, #256]	@ (8000f04 <HAL_ADC_MspInit+0x4e4>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e06:	e071      	b.n	8000eec <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f0c <HAL_ADC_MspInit+0x4ec>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d16c      	bne.n	8000eec <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 f912 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000e2e:	f000 fae8 	bl	8001402 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e32:	4b31      	ldr	r3, [pc, #196]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000e3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <HAL_ADC_MspInit+0x4d8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d10b      	bne.n	8000e5c <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000e44:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	4a2c      	ldr	r2, [pc, #176]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e50:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	4a26      	ldr	r2, [pc, #152]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <HAL_ADC_MspInit+0x4dc>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f003 f809 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000e98:	4a1e      	ldr	r2, [pc, #120]	@ (8000f14 <HAL_ADC_MspInit+0x4f4>)
 8000e9a:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000e9e:	2227      	movs	r2, #39	@ 0x27
 8000ea0:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eba:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000ed0:	480f      	ldr	r0, [pc, #60]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ed2:	f002 fd77 	bl	80039c4 <HAL_DMA_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000edc:	f000 fa91 	bl	8001402 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ee4:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_ADC_MspInit+0x4f0>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000eec:	bf00      	nop
 8000eee:	3798      	adds	r7, #152	@ 0x98
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	50000500 	.word	0x50000500
 8000ef8:	20000428 	.word	0x20000428
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	20000364 	.word	0x20000364
 8000f08:	40020044 	.word	0x40020044
 8000f0c:	50000600 	.word	0x50000600
 8000f10:	200003c4 	.word	0x200003c4
 8000f14:	40020058 	.word	0x40020058

08000f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <MX_DMA_Init+0xb0>)
 8000f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f22:	4a29      	ldr	r2, [pc, #164]	@ (8000fc8 <MX_DMA_Init+0xb0>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f2a:	4b27      	ldr	r3, [pc, #156]	@ (8000fc8 <MX_DMA_Init+0xb0>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f36:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <MX_DMA_Init+0xb0>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3a:	4a23      	ldr	r2, [pc, #140]	@ (8000fc8 <MX_DMA_Init+0xb0>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f42:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <MX_DMA_Init+0xb0>)
 8000f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	200b      	movs	r0, #11
 8000f54:	f002 fd01 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f58:	200b      	movs	r0, #11
 8000f5a:	f002 fd18 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	200c      	movs	r0, #12
 8000f64:	f002 fcf9 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f68:	200c      	movs	r0, #12
 8000f6a:	f002 fd10 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	200d      	movs	r0, #13
 8000f74:	f002 fcf1 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f78:	200d      	movs	r0, #13
 8000f7a:	f002 fd08 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	200e      	movs	r0, #14
 8000f84:	f002 fce9 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f88:	200e      	movs	r0, #14
 8000f8a:	f002 fd00 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	200f      	movs	r0, #15
 8000f94:	f002 fce1 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f002 fcf8 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2010      	movs	r0, #16
 8000fa4:	f002 fcd9 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fa8:	2010      	movs	r0, #16
 8000faa:	f002 fcf0 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2011      	movs	r0, #17
 8000fb4:	f002 fcd1 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000fb8:	2011      	movs	r0, #17
 8000fba:	f002 fce8 	bl	800398e <HAL_NVIC_EnableIRQ>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <MX_GPIO_Init>:
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
     PB5   ------> S_TIM17_CH1
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b6e      	ldr	r3, [pc, #440]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b6b      	ldr	r3, [pc, #428]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffa:	4b68      	ldr	r3, [pc, #416]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a67      	ldr	r2, [pc, #412]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001000:	f043 0320 	orr.w	r3, r3, #32
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b65      	ldr	r3, [pc, #404]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0320 	and.w	r3, r3, #32
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b62      	ldr	r3, [pc, #392]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a61      	ldr	r2, [pc, #388]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b5f      	ldr	r3, [pc, #380]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b5c      	ldr	r3, [pc, #368]	@ (800119c <MX_GPIO_Init+0x1d0>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a5b      	ldr	r2, [pc, #364]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b59      	ldr	r3, [pc, #356]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b56      	ldr	r3, [pc, #344]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a55      	ldr	r2, [pc, #340]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b53      	ldr	r3, [pc, #332]	@ (800119c <MX_GPIO_Init+0x1d0>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8001060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001064:	f003 f8a2 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 800106e:	484c      	ldr	r0, [pc, #304]	@ (80011a0 <MX_GPIO_Init+0x1d4>)
 8001070:	f003 f89c 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 8001074:	f242 33a0 	movw	r3, #9120	@ 0x23a0
 8001078:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4846      	ldr	r0, [pc, #280]	@ (80011a4 <MX_GPIO_Init+0x1d8>)
 800108c:	f002 ff0c 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8001090:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ac:	f002 fefc 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 80010b0:	2304      	movs	r3, #4
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80010c0:	2303      	movs	r3, #3
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4835      	ldr	r0, [pc, #212]	@ (80011a0 <MX_GPIO_Init+0x1d4>)
 80010cc:	f002 feec 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 80010d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e2:	2307      	movs	r3, #7
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	482c      	ldr	r0, [pc, #176]	@ (80011a0 <MX_GPIO_Init+0x1d4>)
 80010ee:	f002 fedb 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 80010f2:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4825      	ldr	r0, [pc, #148]	@ (80011a0 <MX_GPIO_Init+0x1d4>)
 800110c:	f002 fecc 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8001110:	2340      	movs	r3, #64	@ 0x40
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001120:	2302      	movs	r3, #2
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	481e      	ldr	r0, [pc, #120]	@ (80011a4 <MX_GPIO_Init+0x1d8>)
 800112c:	f002 febc 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8001130:	2304      	movs	r3, #4
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001134:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4818      	ldr	r0, [pc, #96]	@ (80011a8 <MX_GPIO_Init+0x1dc>)
 8001146:	f002 feaf 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 800114a:	2320      	movs	r3, #32
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800115a:	230a      	movs	r3, #10
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480e      	ldr	r0, [pc, #56]	@ (80011a0 <MX_GPIO_Init+0x1d4>)
 8001166:	f002 fe9f 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 800116a:	2340      	movs	r3, #64	@ 0x40
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <MX_GPIO_Init+0x1d4>)
 8001180:	f002 fe92 	bl	8003ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2028      	movs	r0, #40	@ 0x28
 800118a:	f002 fbe6 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118e:	2028      	movs	r0, #40	@ 0x28
 8001190:	f002 fbfd 	bl	800398e <HAL_NVIC_EnableIRQ>

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	@ 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00

080011ac <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001224 <MX_I2C2_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <MX_I2C2_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011e8:	f003 f81b 	bl	8004222 <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f000 f906 	bl	8001402 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	@ (8001220 <MX_I2C2_Init+0x74>)
 80011fa:	f003 f8ad 	bl	8004358 <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001204:	f000 f8fd 	bl	8001402 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_I2C2_Init+0x74>)
 800120c:	f003 f8ef 	bl	80043ee <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 f8f4 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000042c 	.word	0x2000042c
 8001224:	40005800 	.word	0x40005800
 8001228:	30a0a7fb 	.word	0x30a0a7fb

0800122c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0a0      	sub	sp, #128	@ 0x80
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	2254      	movs	r2, #84	@ 0x54
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f006 f9df 	bl	8007610 <memset>
  if(i2cHandle->Instance==I2C2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a2d      	ldr	r2, [pc, #180]	@ (800130c <HAL_I2C_MspInit+0xe0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d153      	bne.n	8001304 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	4618      	mov	r0, r3
 800126a:	f003 feef 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001274:	f000 f8c5 	bl	8001402 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001278:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a24      	ldr	r2, [pc, #144]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 80012a8:	2310      	movs	r3, #16
 80012aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012b8:	2304      	movs	r3, #4
 80012ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012c0:	4619      	mov	r1, r3
 80012c2:	4814      	ldr	r0, [pc, #80]	@ (8001314 <HAL_I2C_MspInit+0xe8>)
 80012c4:	f002 fdf0 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 80012c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012da:	2304      	movs	r3, #4
 80012dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e8:	f002 fdde 	bl	8003ea8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 80012f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_I2C_MspInit+0xe4>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001304:	bf00      	nop
 8001306:	3780      	adds	r7, #128	@ 0x80
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40005800 	.word	0x40005800
 8001310:	40021000 	.word	0x40021000
 8001314:	48000800 	.word	0x48000800

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131c:	f000 fd59 	bl	8001dd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001320:	f000 f824 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001324:	f7ff fe52 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8001328:	f7ff fdf6 	bl	8000f18 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800132c:	f000 fc2a 	bl	8001b84 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001330:	f7ff f944 	bl	80005bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001334:	f7ff f9ba 	bl	80006ac <MX_ADC2_Init>
  MX_ADC3_Init();
 8001338:	f7ff fa2e 	bl	8000798 <MX_ADC3_Init>
  MX_TIM1_Init();
 800133c:	f000 f91c 	bl	8001578 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001340:	f000 faba 	bl	80018b8 <MX_TIM16_Init>
  MX_TIM4_Init();
 8001344:	f000 f9d4 	bl	80016f0 <MX_TIM4_Init>
  MX_ADC4_Init();
 8001348:	f7ff fa9e 	bl	8000888 <MX_ADC4_Init>
  MX_ADC5_Init();
 800134c:	f7ff fb02 	bl	8000954 <MX_ADC5_Init>
  MX_I2C2_Init();
 8001350:	f7ff ff2c 	bl	80011ac <MX_I2C2_Init>
  MX_TIM8_Init();
 8001354:	f000 fa1c 	bl	8001790 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  vLineSensorSystemInit(pLineSensorsReadings);
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <main+0x50>)
 800135a:	f7ff f8d5 	bl	8000508 <vLineSensorSystemInit>
  vPowerTrainSystemInit();
 800135e:	f7ff f91b 	bl	8000598 <vPowerTrainSystemInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001362:	bf00      	nop
 8001364:	e7fd      	b.n	8001362 <main+0x4a>
 8001366:	bf00      	nop
 8001368:	20000480 	.word	0x20000480

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	@ 0x50
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	2238      	movs	r2, #56	@ 0x38
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f006 f948 	bl	8007610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800138e:	2000      	movs	r0, #0
 8001390:	f003 f87a 	bl	8004488 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001398:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139e:	2340      	movs	r3, #64	@ 0x40
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a6:	2302      	movs	r3, #2
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013aa:	2304      	movs	r3, #4
 80013ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013ae:	2355      	movs	r3, #85	@ 0x55
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f914 	bl	80045f0 <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ce:	f000 f818 	bl	8001402 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2303      	movs	r3, #3
 80013d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2104      	movs	r1, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fc12 	bl	8004c14 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013f6:	f000 f804 	bl	8001402 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	@ 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001406:	b672      	cpsid	i
}
 8001408:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140a:	bf00      	nop
 800140c:	e7fd      	b.n	800140a <Error_Handler+0x8>
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_MspInit+0x44>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <HAL_MspInit+0x44>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6613      	str	r3, [r2, #96]	@ 0x60
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_MspInit+0x44>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_MspInit+0x44>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_MspInit+0x44>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001438:	6593      	str	r3, [r2, #88]	@ 0x58
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_MspInit+0x44>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001446:	f003 f8c3 	bl	80045d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ae:	f000 fce3 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <DMA1_Channel1_IRQHandler+0x10>)
 80014be:	f002 fba4 	bl	8003c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000244 	.word	0x20000244

080014cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <DMA1_Channel2_IRQHandler+0x10>)
 80014d2:	f002 fb9a 	bl	8003c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200002a4 	.word	0x200002a4

080014e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA1_Channel3_IRQHandler+0x10>)
 80014e6:	f002 fb90 	bl	8003c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000304 	.word	0x20000304

080014f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <DMA1_Channel4_IRQHandler+0x10>)
 80014fa:	f002 fb86 	bl	8003c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000364 	.word	0x20000364

08001508 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <DMA1_Channel5_IRQHandler+0x10>)
 800150e:	f002 fb7c 	bl	8003c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003c4 	.word	0x200003c4

0800151c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA1_Channel6_IRQHandler+0x10>)
 8001522:	f002 fb72 	bl	8003c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000065c 	.word	0x2000065c

08001530 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA1_Channel7_IRQHandler+0x10>)
 8001536:	f002 fb68 	bl	8003c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200006bc 	.word	0x200006bc

08001544 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001548:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800154c:	f002 fe46 	bl	80041dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b09c      	sub	sp, #112	@ 0x70
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001598:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2234      	movs	r2, #52	@ 0x34
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 f82c 	bl	8007610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b8:	4b4b      	ldr	r3, [pc, #300]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80015ba:	4a4c      	ldr	r2, [pc, #304]	@ (80016ec <MX_TIM1_Init+0x174>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80015be:	4b4a      	ldr	r3, [pc, #296]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80015c0:	2210      	movs	r2, #16
 80015c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b48      	ldr	r3, [pc, #288]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80015ca:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80015cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b45      	ldr	r3, [pc, #276]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d8:	4b43      	ldr	r3, [pc, #268]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b42      	ldr	r3, [pc, #264]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e4:	4840      	ldr	r0, [pc, #256]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80015e6:	f003 ff7f 	bl	80054e8 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f7ff ff07 	bl	8001402 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015fe:	4619      	mov	r1, r3
 8001600:	4839      	ldr	r0, [pc, #228]	@ (80016e8 <MX_TIM1_Init+0x170>)
 8001602:	f004 fab7 	bl	8005b74 <HAL_TIM_ConfigClockSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800160c:	f7ff fef9 	bl	8001402 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001610:	4835      	ldr	r0, [pc, #212]	@ (80016e8 <MX_TIM1_Init+0x170>)
 8001612:	f004 f831 	bl	8005678 <HAL_TIM_PWM_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800161c:	f7ff fef1 	bl	8001402 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800162c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001630:	4619      	mov	r1, r3
 8001632:	482d      	ldr	r0, [pc, #180]	@ (80016e8 <MX_TIM1_Init+0x170>)
 8001634:	f005 f854 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800163e:	f7ff fee0 	bl	8001402 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001642:	2360      	movs	r3, #96	@ 0x60
 8001644:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001662:	2200      	movs	r2, #0
 8001664:	4619      	mov	r1, r3
 8001666:	4820      	ldr	r0, [pc, #128]	@ (80016e8 <MX_TIM1_Init+0x170>)
 8001668:	f004 f970 	bl	800594c <HAL_TIM_PWM_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001672:	f7ff fec6 	bl	8001402 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001676:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800167a:	2204      	movs	r2, #4
 800167c:	4619      	mov	r1, r3
 800167e:	481a      	ldr	r0, [pc, #104]	@ (80016e8 <MX_TIM1_Init+0x170>)
 8001680:	f004 f964 	bl	800594c <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800168a:	f7ff feba 	bl	8001402 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80016cc:	f005 f89e 	bl	800680c <HAL_TIMEx_ConfigBreakDeadTime>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80016d6:	f7ff fe94 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016da:	4803      	ldr	r0, [pc, #12]	@ (80016e8 <MX_TIM1_Init+0x170>)
 80016dc:	f000 f9ce 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 80016e0:	bf00      	nop
 80016e2:	3770      	adds	r7, #112	@ 0x70
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000498 	.word	0x20000498
 80016ec:	40012c00 	.word	0x40012c00

080016f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <MX_TIM4_Init+0x98>)
 8001710:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <MX_TIM4_Init+0x9c>)
 8001712:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <MX_TIM4_Init+0x98>)
 8001716:	f244 2267 	movw	r2, #16999	@ 0x4267
 800171a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <MX_TIM4_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <MX_TIM4_Init+0x98>)
 8001724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001728:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <MX_TIM4_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <MX_TIM4_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001736:	4814      	ldr	r0, [pc, #80]	@ (8001788 <MX_TIM4_Init+0x98>)
 8001738:	f003 fed6 	bl	80054e8 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001742:	f7ff fe5e 	bl	8001402 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	@ (8001788 <MX_TIM4_Init+0x98>)
 8001754:	f004 fa0e 	bl	8005b74 <HAL_TIM_ConfigClockSource>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800175e:	f7ff fe50 	bl	8001402 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	@ (8001788 <MX_TIM4_Init+0x98>)
 8001770:	f004 ffb6 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800177a:	f7ff fe42 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200004e4 	.word	0x200004e4
 800178c:	40000800 	.word	0x40000800

08001790 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b098      	sub	sp, #96	@ 0x60
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2234      	movs	r2, #52	@ 0x34
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 ff27 	bl	8007610 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017c2:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80017c4:	4a3b      	ldr	r2, [pc, #236]	@ (80018b4 <MX_TIM8_Init+0x124>)
 80017c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017c8:	4b39      	ldr	r3, [pc, #228]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b38      	ldr	r3, [pc, #224]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017d4:	4b36      	ldr	r3, [pc, #216]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80017d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017e2:	4b33      	ldr	r3, [pc, #204]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e8:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80017ee:	4830      	ldr	r0, [pc, #192]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80017f0:	f003 ff42 	bl	8005678 <HAL_TIM_PWM_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f7ff fe02 	bl	8001402 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800180a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800180e:	4619      	mov	r1, r3
 8001810:	4827      	ldr	r0, [pc, #156]	@ (80018b0 <MX_TIM8_Init+0x120>)
 8001812:	f004 ff65 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800181c:	f7ff fdf1 	bl	8001402 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001820:	2360      	movs	r3, #96	@ 0x60
 8001822:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001828:	2300      	movs	r3, #0
 800182a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	481a      	ldr	r0, [pc, #104]	@ (80018b0 <MX_TIM8_Init+0x120>)
 8001846:	f004 f881 	bl	800594c <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001850:	f7ff fdd7 	bl	8001402 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800187a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4619      	mov	r1, r3
 8001890:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <MX_TIM8_Init+0x120>)
 8001892:	f004 ffbb 	bl	800680c <HAL_TIMEx_ConfigBreakDeadTime>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800189c:	f7ff fdb1 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80018a0:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <MX_TIM8_Init+0x120>)
 80018a2:	f000 f8eb 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 80018a6:	bf00      	nop
 80018a8:	3760      	adds	r7, #96	@ 0x60
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000530 	.word	0x20000530
 80018b4:	40013400 	.word	0x40013400

080018b8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b094      	sub	sp, #80	@ 0x50
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018d2:	463b      	mov	r3, r7
 80018d4:	2234      	movs	r2, #52	@ 0x34
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 fe99 	bl	8007610 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018de:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <MX_TIM16_Init+0xec>)
 80018e0:	4a31      	ldr	r2, [pc, #196]	@ (80019a8 <MX_TIM16_Init+0xf0>)
 80018e2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	@ (80019a4 <MX_TIM16_Init+0xec>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <MX_TIM16_Init+0xec>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <MX_TIM16_Init+0xec>)
 80018f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <MX_TIM16_Init+0xec>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018fe:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <MX_TIM16_Init+0xec>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <MX_TIM16_Init+0xec>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800190a:	4826      	ldr	r0, [pc, #152]	@ (80019a4 <MX_TIM16_Init+0xec>)
 800190c:	f003 fdec 	bl	80054e8 <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001916:	f7ff fd74 	bl	8001402 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800191a:	4822      	ldr	r0, [pc, #136]	@ (80019a4 <MX_TIM16_Init+0xec>)
 800191c:	f003 feac 	bl	8005678 <HAL_TIM_PWM_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001926:	f7ff fd6c 	bl	8001402 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192a:	2360      	movs	r3, #96	@ 0x60
 800192c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001932:	2300      	movs	r3, #0
 8001934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001936:	2300      	movs	r3, #0
 8001938:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001946:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <MX_TIM16_Init+0xec>)
 8001950:	f003 fffc 	bl	800594c <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800195a:	f7ff fd52 	bl	8001402 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001972:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001976:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001980:	463b      	mov	r3, r7
 8001982:	4619      	mov	r1, r3
 8001984:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <MX_TIM16_Init+0xec>)
 8001986:	f004 ff41 	bl	800680c <HAL_TIMEx_ConfigBreakDeadTime>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001990:	f7ff fd37 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001994:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <MX_TIM16_Init+0xec>)
 8001996:	f000 f871 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 800199a:	bf00      	nop
 800199c:	3750      	adds	r7, #80	@ 0x50
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000057c 	.word	0x2000057c
 80019a8:	40014400 	.word	0x40014400

080019ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10c      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019be:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 80019c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80019d6:	e022      	b.n	8001a1e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a15      	ldr	r2, [pc, #84]	@ (8001a34 <HAL_TIM_Base_MspInit+0x88>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10c      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
}
 80019fa:	e010      	b.n	8001a1e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <HAL_TIM_Base_MspInit+0x8c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10b      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0a:	4a09      	ldr	r2, [pc, #36]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <HAL_TIM_Base_MspInit+0x84>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40000800 	.word	0x40000800
 8001a38:	40014400 	.word	0x40014400

08001a3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <HAL_TIM_PWM_MspInit+0x38>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10b      	bne.n	8001a66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a52:	4a09      	ldr	r2, [pc, #36]	@ (8001a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40013400 	.word	0x40013400
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a34      	ldr	r2, [pc, #208]	@ (8001b6c <HAL_TIM_MspPostInit+0xf0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	4a33      	ldr	r2, [pc, #204]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aaa:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4828      	ldr	r0, [pc, #160]	@ (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001ad2:	f002 f9e9 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001ad6:	e044      	b.n	8001b62 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a26      	ldr	r2, [pc, #152]	@ (8001b78 <HAL_TIM_MspPostInit+0xfc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d11e      	bne.n	8001b20 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a22      	ldr	r2, [pc, #136]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1a:	f002 f9c5 	bl	8003ea8 <HAL_GPIO_Init>
}
 8001b1e:	e020      	b.n	8001b62 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM16)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <HAL_TIM_MspPostInit+0x100>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11b      	bne.n	8001b62 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4a10      	ldr	r2, [pc, #64]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_TIM_MspPostInit+0xf4>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8001b42:	2310      	movs	r3, #16
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4808      	ldr	r0, [pc, #32]	@ (8001b80 <HAL_TIM_MspPostInit+0x104>)
 8001b5e:	f002 f9a3 	bl	8003ea8 <HAL_GPIO_Init>
}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	@ 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40012c00 	.word	0x40012c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000800 	.word	0x48000800
 8001b78:	40013400 	.word	0x40013400
 8001b7c:	40014400 	.word	0x40014400
 8001b80:	48000400 	.word	0x48000400

08001b84 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001b8a:	4a22      	ldr	r2, [pc, #136]	@ (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b94:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bc6:	4812      	ldr	r0, [pc, #72]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001bc8:	f004 feb4 	bl	8006934 <HAL_UART_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bd2:	f7ff fc16 	bl	8001402 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001bda:	f005 fc4f 	bl	800747c <HAL_UARTEx_SetTxFifoThreshold>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001be4:	f7ff fc0d 	bl	8001402 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001bec:	f005 fc84 	bl	80074f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001bf6:	f7ff fc04 	bl	8001402 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_LPUART1_UART_Init+0x8c>)
 8001bfc:	f005 fc05 	bl	800740a <HAL_UARTEx_DisableFifoMode>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001c06:	f7ff fbfc 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200005c8 	.word	0x200005c8
 8001c14:	40008000 	.word	0x40008000

08001c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09e      	sub	sp, #120	@ 0x78
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	2254      	movs	r2, #84	@ 0x54
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f005 fce9 	bl	8007610 <memset>
  if(uartHandle->Instance==LPUART1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a49      	ldr	r2, [pc, #292]	@ (8001d68 <HAL_UART_MspInit+0x150>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f040 808a 	bne.w	8001d5e <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 f9f8 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c62:	f7ff fbce 	bl	8001402 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c66:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_UART_MspInit+0x154>)
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	4a40      	ldr	r2, [pc, #256]	@ (8001d6c <HAL_UART_MspInit+0x154>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c72:	4b3e      	ldr	r3, [pc, #248]	@ (8001d6c <HAL_UART_MspInit+0x154>)
 8001c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_UART_MspInit+0x154>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	4a3a      	ldr	r2, [pc, #232]	@ (8001d6c <HAL_UART_MspInit+0x154>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8a:	4b38      	ldr	r3, [pc, #224]	@ (8001d6c <HAL_UART_MspInit+0x154>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c96:	230c      	movs	r3, #12
 8001c98:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb4:	f002 f8f8 	bl	8003ea8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001cba:	4a2e      	ldr	r2, [pc, #184]	@ (8001d74 <HAL_UART_MspInit+0x15c>)
 8001cbc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001cc0:	2222      	movs	r2, #34	@ 0x22
 8001cc2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cca:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd0:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001cd2:	2280      	movs	r2, #128	@ 0x80
 8001cd4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001ce2:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce8:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001cee:	4820      	ldr	r0, [pc, #128]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001cf0:	f001 fe68 	bl	80039c4 <HAL_DMA_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001cfa:	f7ff fb82 	bl	8001402 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1b      	ldr	r2, [pc, #108]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d06:	4a1a      	ldr	r2, [pc, #104]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d7c <HAL_UART_MspInit+0x164>)
 8001d10:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001d12:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d14:	2223      	movs	r2, #35	@ 0x23
 8001d16:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d18:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d26:	2280      	movs	r2, #128	@ 0x80
 8001d28:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001d42:	480d      	ldr	r0, [pc, #52]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d44:	f001 fe3e 	bl	80039c4 <HAL_DMA_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001d4e:	f7ff fb58 	bl	8001402 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d56:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3778      	adds	r7, #120	@ 0x78
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40008000 	.word	0x40008000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	2000065c 	.word	0x2000065c
 8001d74:	4002006c 	.word	0x4002006c
 8001d78:	200006bc 	.word	0x200006bc
 8001d7c:	40020080 	.word	0x40020080

08001d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d80:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d84:	f7ff fbe6 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d88:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d8a:	490d      	ldr	r1, [pc, #52]	@ (8001dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc4 <LoopForever+0xe>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dcc <LoopForever+0x16>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dae:	f005 fc37 	bl	8007620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001db2:	f7ff fab1 	bl	8001318 <main>

08001db6 <LoopForever>:

LoopForever:
    b LoopForever
 8001db6:	e7fe      	b.n	8001db6 <LoopForever>
  ldr   r0, =_estack
 8001db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dc4:	080076d0 	.word	0x080076d0
  ldr r2, =_sbss
 8001dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dcc:	20000720 	.word	0x20000720

08001dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC1_2_IRQHandler>

08001dd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f001 fdb1 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f80e 	bl	8001e04 <HAL_InitTick>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	71fb      	strb	r3, [r7, #7]
 8001df2:	e001      	b.n	8001df8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df4:	f7ff fb0c 	bl	8001410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df8:	79fb      	ldrb	r3, [r7, #7]

}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e10:	4b16      	ldr	r3, [pc, #88]	@ (8001e6c <HAL_InitTick+0x68>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d022      	beq.n	8001e5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e18:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_InitTick+0x6c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_InitTick+0x68>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 fdbc 	bl	80039aa <HAL_SYSTICK_Config>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10f      	bne.n	8001e58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	d809      	bhi.n	8001e52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	f04f 30ff 	mov.w	r0, #4294967295
 8001e46:	f001 fd88 	bl	800395a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <HAL_InitTick+0x70>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e007      	b.n	8001e62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e004      	b.n	8001e62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e001      	b.n	8001e62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_IncTick+0x1c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a03      	ldr	r2, [pc, #12]	@ (8001e94 <HAL_IncTick+0x1c>)
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	2000071c 	.word	0x2000071c
 8001e98:	20000008 	.word	0x20000008

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	2000071c 	.word	0x2000071c

08001eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3360      	adds	r3, #96	@ 0x60
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <LL_ADC_SetOffset+0x44>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	03fff000 	.word	0x03fff000

08001f64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3360      	adds	r3, #96	@ 0x60
 8001f72:	461a      	mov	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3360      	adds	r3, #96	@ 0x60
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b087      	sub	sp, #28
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3360      	adds	r3, #96	@ 0x60
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3360      	adds	r3, #96	@ 0x60
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	615a      	str	r2, [r3, #20]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3330      	adds	r3, #48	@ 0x30
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	211f      	movs	r1, #31
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 011f 	and.w	r1, r3, #31
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3314      	adds	r3, #20
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0e5b      	lsrs	r3, r3, #25
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	0d1b      	lsrs	r3, r3, #20
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2107      	movs	r1, #7
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	401a      	ands	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0d1b      	lsrs	r3, r3, #20
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	431a      	orrs	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0318 	and.w	r3, r3, #24
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002150:	40d9      	lsrs	r1, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	400b      	ands	r3, r1
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	431a      	orrs	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	0007ffff 	.word	0x0007ffff

08002174 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 031f 	and.w	r3, r3, #31
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6093      	str	r3, [r2, #8]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021c8:	d101      	bne.n	80021ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002218:	d101      	bne.n	800221e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800223c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002268:	f043 0202 	orr.w	r2, r3, #2
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <LL_ADC_IsEnabled+0x18>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <LL_ADC_IsEnabled+0x1a>
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d101      	bne.n	80022ba <LL_ADC_IsDisableOngoing+0x18>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_ADC_IsDisableOngoing+0x1a>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b04      	cmp	r3, #4
 8002302:	d101      	bne.n	8002308 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b08      	cmp	r3, #8
 8002328:	d101      	bne.n	800232e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1a9      	b.n	80026aa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe fb5b 	bl	8000a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff19 	bl	80021b4 <LL_ADC_IsDeepPowerDownEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff feff 	bl	8002190 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff34 	bl	8002204 <LL_ADC_IsInternalRegulatorEnabled>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d115      	bne.n	80023ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff18 	bl	80021dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002620 <HAL_ADC_Init+0x2e4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	4a9c      	ldr	r2, [pc, #624]	@ (8002624 <HAL_ADC_Init+0x2e8>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	3301      	adds	r3, #1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023c0:	e002      	b.n	80023c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f9      	bne.n	80023c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff16 	bl	8002204 <LL_ADC_IsInternalRegulatorEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff76 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 8002404:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 8142 	bne.w	8002698 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 813e 	bne.w	8002698 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002424:	f043 0202 	orr.w	r2, r3, #2
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff23 	bl	800227c <LL_ADC_IsEnabled>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d141      	bne.n	80024c0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002444:	d004      	beq.n	8002450 <HAL_ADC_Init+0x114>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	@ (8002628 <HAL_ADC_Init+0x2ec>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d10f      	bne.n	8002470 <HAL_ADC_Init+0x134>
 8002450:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002454:	f7ff ff12 	bl	800227c <LL_ADC_IsEnabled>
 8002458:	4604      	mov	r4, r0
 800245a:	4873      	ldr	r0, [pc, #460]	@ (8002628 <HAL_ADC_Init+0x2ec>)
 800245c:	f7ff ff0e 	bl	800227c <LL_ADC_IsEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	4323      	orrs	r3, r4
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e012      	b.n	8002496 <HAL_ADC_Init+0x15a>
 8002470:	486e      	ldr	r0, [pc, #440]	@ (800262c <HAL_ADC_Init+0x2f0>)
 8002472:	f7ff ff03 	bl	800227c <LL_ADC_IsEnabled>
 8002476:	4604      	mov	r4, r0
 8002478:	486d      	ldr	r0, [pc, #436]	@ (8002630 <HAL_ADC_Init+0x2f4>)
 800247a:	f7ff feff 	bl	800227c <LL_ADC_IsEnabled>
 800247e:	4603      	mov	r3, r0
 8002480:	431c      	orrs	r4, r3
 8002482:	486c      	ldr	r0, [pc, #432]	@ (8002634 <HAL_ADC_Init+0x2f8>)
 8002484:	f7ff fefa 	bl	800227c <LL_ADC_IsEnabled>
 8002488:	4603      	mov	r3, r0
 800248a:	4323      	orrs	r3, r4
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d012      	beq.n	80024c0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024a2:	d004      	beq.n	80024ae <HAL_ADC_Init+0x172>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a5f      	ldr	r2, [pc, #380]	@ (8002628 <HAL_ADC_Init+0x2ec>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_Init+0x176>
 80024ae:	4a62      	ldr	r2, [pc, #392]	@ (8002638 <HAL_ADC_Init+0x2fc>)
 80024b0:	e000      	b.n	80024b4 <HAL_ADC_Init+0x178>
 80024b2:	4a62      	ldr	r2, [pc, #392]	@ (800263c <HAL_ADC_Init+0x300>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f7ff fcfa 	bl	8001eb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7f5b      	ldrb	r3, [r3, #29]
 80024c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d106      	bne.n	80024fc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	3b01      	subs	r3, #1
 80024f4:	045b      	lsls	r3, r3, #17
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	4b48      	ldr	r3, [pc, #288]	@ (8002640 <HAL_ADC_Init+0x304>)
 8002520:	4013      	ands	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	430b      	orrs	r3, r1
 800252a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fee5 	bl	8002316 <LL_ADC_INJ_IsConversionOngoing>
 800254c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d17f      	bne.n	8002654 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d17c      	bne.n	8002654 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800255e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002566:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002576:	f023 0302 	bic.w	r3, r3, #2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	69b9      	ldr	r1, [r7, #24]
 8002580:	430b      	orrs	r3, r1
 8002582:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800259a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6911      	ldr	r1, [r2, #16]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025ba:	e013      	b.n	80025e4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d12a      	bne.n	8002644 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002610:	430a      	orrs	r2, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	611a      	str	r2, [r3, #16]
 800261e:	e019      	b.n	8002654 <HAL_ADC_Init+0x318>
 8002620:	20000000 	.word	0x20000000
 8002624:	053e2d63 	.word	0x053e2d63
 8002628:	50000100 	.word	0x50000100
 800262c:	50000400 	.word	0x50000400
 8002630:	50000500 	.word	0x50000500
 8002634:	50000600 	.word	0x50000600
 8002638:	50000300 	.word	0x50000300
 800263c:	50000700 	.word	0x50000700
 8002640:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d10c      	bne.n	8002676 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f023 010f 	bic.w	r1, r3, #15
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
 8002674:	e007      	b.n	8002686 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 020f 	bic.w	r2, r2, #15
 8002684:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268a:	f023 0303 	bic.w	r3, r3, #3
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002696:	e007      	b.n	80026a8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	f043 0210 	orr.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	bf00      	nop

080026b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026c8:	d004      	beq.n	80026d4 <HAL_ADC_Start_DMA+0x20>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002838 <HAL_ADC_Start_DMA+0x184>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_Start_DMA+0x24>
 80026d4:	4b59      	ldr	r3, [pc, #356]	@ (800283c <HAL_ADC_Start_DMA+0x188>)
 80026d6:	e000      	b.n	80026da <HAL_ADC_Start_DMA+0x26>
 80026d8:	4b59      	ldr	r3, [pc, #356]	@ (8002840 <HAL_ADC_Start_DMA+0x18c>)
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fd4a 	bl	8002174 <LL_ADC_GetMultimode>
 80026e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fe02 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 809b 	bne.w	800282a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_Start_DMA+0x4e>
 80026fe:	2302      	movs	r3, #2
 8002700:	e096      	b.n	8002830 <HAL_ADC_Start_DMA+0x17c>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a4d      	ldr	r2, [pc, #308]	@ (8002844 <HAL_ADC_Start_DMA+0x190>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d008      	beq.n	8002726 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d002      	beq.n	8002726 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b09      	cmp	r3, #9
 8002724:	d17a      	bne.n	800281c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fcf6 	bl	8003118 <ADC_Enable>
 800272c:	4603      	mov	r3, r0
 800272e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d16d      	bne.n	8002812 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3a      	ldr	r2, [pc, #232]	@ (8002838 <HAL_ADC_Start_DMA+0x184>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_ADC_Start_DMA+0xb4>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3b      	ldr	r2, [pc, #236]	@ (8002848 <HAL_ADC_Start_DMA+0x194>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d002      	beq.n	8002764 <HAL_ADC_Start_DMA+0xb0>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	e003      	b.n	800276c <HAL_ADC_Start_DMA+0xb8>
 8002764:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_ADC_Start_DMA+0x198>)
 8002766:	e001      	b.n	800276c <HAL_ADC_Start_DMA+0xb8>
 8002768:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4293      	cmp	r3, r2
 8002772:	d002      	beq.n	800277a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002796:	f023 0206 	bic.w	r2, r3, #6
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	661a      	str	r2, [r3, #96]	@ 0x60
 800279e:	e002      	b.n	80027a6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027aa:	4a29      	ldr	r2, [pc, #164]	@ (8002850 <HAL_ADC_Start_DMA+0x19c>)
 80027ac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b2:	4a28      	ldr	r2, [pc, #160]	@ (8002854 <HAL_ADC_Start_DMA+0x1a0>)
 80027b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	4a27      	ldr	r2, [pc, #156]	@ (8002858 <HAL_ADC_Start_DMA+0x1a4>)
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	221c      	movs	r2, #28
 80027c4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0210 	orr.w	r2, r2, #16
 80027dc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3340      	adds	r3, #64	@ 0x40
 80027f8:	4619      	mov	r1, r3
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f001 f989 	bl	8003b14 <HAL_DMA_Start_IT>
 8002802:	4603      	mov	r3, r0
 8002804:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fd5c 	bl	80022c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002810:	e00d      	b.n	800282e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800281a:	e008      	b.n	800282e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002828:	e001      	b.n	800282e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	50000100 	.word	0x50000100
 800283c:	50000300 	.word	0x50000300
 8002840:	50000700 	.word	0x50000700
 8002844:	50000600 	.word	0x50000600
 8002848:	50000500 	.word	0x50000500
 800284c:	50000400 	.word	0x50000400
 8002850:	08003303 	.word	0x08003303
 8002854:	080033db 	.word	0x080033db
 8002858:	080033f7 	.word	0x080033f7

0800285c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b0b6      	sub	sp, #216	@ 0xd8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x24>
 80028b6:	2302      	movs	r3, #2
 80028b8:	f000 bc13 	b.w	80030e2 <HAL_ADC_ConfigChannel+0x84a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fd11 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 83f3 	bne.w	80030bc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f7ff fbcb 	bl	800207e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fcff 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 80028f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fd0b 	bl	8002316 <LL_ADC_INJ_IsConversionOngoing>
 8002900:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002904:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 81d9 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 81d4 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002920:	d10f      	bne.n	8002942 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	4619      	mov	r1, r3
 800292e:	f7ff fbd2 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fb79 	bl	8002032 <LL_ADC_SetSamplingTimeCommonConfig>
 8002940:	e00e      	b.n	8002960 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	461a      	mov	r2, r3
 8002950:	f7ff fbc1 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fb69 	bl	8002032 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	08db      	lsrs	r3, r3, #3
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b04      	cmp	r3, #4
 8002980:	d022      	beq.n	80029c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6919      	ldr	r1, [r3, #16]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002992:	f7ff fac3 	bl	8001f1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff fb0f 	bl	8001fc6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_ADC_ConfigChannel+0x126>
 80029b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029bc:	e000      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x128>
 80029be:	2300      	movs	r3, #0
 80029c0:	461a      	mov	r2, r3
 80029c2:	f7ff fb1b 	bl	8001ffc <LL_ADC_SetOffsetSaturation>
 80029c6:	e17b      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fac8 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x15c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fabd 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	f003 021f 	and.w	r2, r3, #31
 80029f2:	e01e      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x19a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fab2 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x1b2>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	e018      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x1e4>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e004      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fa81 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2101      	movs	r1, #1
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fa65 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x222>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fa5a 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	e01e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x260>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fa4f 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ad8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e004      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x278>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	e018      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x2aa>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e004      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d106      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fa1e 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2102      	movs	r1, #2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fa02 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x2e8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f9f7 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 021f 	and.w	r2, r3, #31
 8002b7e:	e01e      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x326>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2102      	movs	r1, #2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f9ec 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e004      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x33e>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	e016      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x36c>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002be8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e004      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d106      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f9bd 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f9a1 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x3aa>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2103      	movs	r1, #3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f996 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	e017      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x3da>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2103      	movs	r1, #3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f98b 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x3f2>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0e9b      	lsrs	r3, r3, #26
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	e011      	b.n	8002cae <HAL_ADC_ConfigChannel+0x416>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d106      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2103      	movs	r1, #3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff f968 	bl	8001f90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fad9 	bl	800227c <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f040 813d 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f7ff fa24 	bl	800212c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4aa2      	ldr	r2, [pc, #648]	@ (8002f74 <HAL_ADC_ConfigChannel+0x6dc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f040 812e 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x480>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	3301      	adds	r3, #1
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2b09      	cmp	r3, #9
 8002d0e:	bf94      	ite	ls
 8002d10:	2301      	movls	r3, #1
 8002d12:	2300      	movhi	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e019      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x4b4>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e003      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	bf94      	ite	ls
 8002d46:	2301      	movls	r3, #1
 8002d48:	2300      	movhi	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d079      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x4d4>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	3301      	adds	r3, #1
 8002d64:	069b      	lsls	r3, r3, #26
 8002d66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d6a:	e015      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x500>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x520>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	3301      	adds	r3, #1
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	e017      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x550>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	e003      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	ea42 0103 	orr.w	r1, r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x576>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	051b      	lsls	r3, r3, #20
 8002e0c:	e018      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x5a8>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e003      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e40:	430b      	orrs	r3, r1
 8002e42:	e07e      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x5c8>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	3301      	adds	r3, #1
 8002e58:	069b      	lsls	r3, r3, #26
 8002e5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5e:	e015      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x5f4>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x614>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	e017      	b.n	8002edc <HAL_ADC_ConfigChannel+0x644>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	61fb      	str	r3, [r7, #28]
  return result;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e003      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	ea42 0103 	orr.w	r1, r2, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x670>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	3b1e      	subs	r3, #30
 8002f00:	051b      	lsls	r3, r3, #20
 8002f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	e01b      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x6a8>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	613b      	str	r3, [r7, #16]
  return result;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e003      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f003 021f 	and.w	r2, r3, #31
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	3b1e      	subs	r3, #30
 8002f3a:	051b      	lsls	r3, r3, #20
 8002f3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7ff f8c5 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <HAL_ADC_ConfigChannel+0x6e0>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80be 	beq.w	80030d6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x6d6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a04      	ldr	r2, [pc, #16]	@ (8002f7c <HAL_ADC_ConfigChannel+0x6e4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10a      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x6ec>
 8002f6e:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <HAL_ADC_ConfigChannel+0x6e8>)
 8002f70:	e009      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x6ee>
 8002f72:	bf00      	nop
 8002f74:	407f0000 	.word	0x407f0000
 8002f78:	80080000 	.word	0x80080000
 8002f7c:	50000100 	.word	0x50000100
 8002f80:	50000300 	.word	0x50000300
 8002f84:	4b59      	ldr	r3, [pc, #356]	@ (80030ec <HAL_ADC_ConfigChannel+0x854>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe ffba 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8002f8c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a56      	ldr	r2, [pc, #344]	@ (80030f0 <HAL_ADC_ConfigChannel+0x858>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x70c>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a55      	ldr	r2, [pc, #340]	@ (80030f4 <HAL_ADC_ConfigChannel+0x85c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d13a      	bne.n	800301a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d134      	bne.n	800301a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fb8:	d005      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x72e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80030f8 <HAL_ADC_ConfigChannel+0x860>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f040 8085 	bne.w	80030d0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fce:	d004      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x742>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a49      	ldr	r2, [pc, #292]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x746>
 8002fda:	4a49      	ldr	r2, [pc, #292]	@ (8003100 <HAL_ADC_ConfigChannel+0x868>)
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x748>
 8002fde:	4a43      	ldr	r2, [pc, #268]	@ (80030ec <HAL_ADC_ConfigChannel+0x854>)
 8002fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7fe ff75 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff0:	4b44      	ldr	r3, [pc, #272]	@ (8003104 <HAL_ADC_ConfigChannel+0x86c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	4a44      	ldr	r2, [pc, #272]	@ (8003108 <HAL_ADC_ConfigChannel+0x870>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800300a:	e002      	b.n	8003012 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3b01      	subs	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003018:	e05a      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3b      	ldr	r2, [pc, #236]	@ (800310c <HAL_ADC_ConfigChannel+0x874>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d125      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11f      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a31      	ldr	r2, [pc, #196]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d104      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x7ac>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a34      	ldr	r2, [pc, #208]	@ (8003110 <HAL_ADC_ConfigChannel+0x878>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d047      	beq.n	80030d4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800304c:	d004      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x7c0>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_ADC_ConfigChannel+0x7c4>
 8003058:	4a29      	ldr	r2, [pc, #164]	@ (8003100 <HAL_ADC_ConfigChannel+0x868>)
 800305a:	e000      	b.n	800305e <HAL_ADC_ConfigChannel+0x7c6>
 800305c:	4a23      	ldr	r2, [pc, #140]	@ (80030ec <HAL_ADC_ConfigChannel+0x854>)
 800305e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f7fe ff36 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800306e:	e031      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a27      	ldr	r2, [pc, #156]	@ (8003114 <HAL_ADC_ConfigChannel+0x87c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d12d      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800307a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800307e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d127      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003098:	d004      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0x80c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a17      	ldr	r2, [pc, #92]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x810>
 80030a4:	4a16      	ldr	r2, [pc, #88]	@ (8003100 <HAL_ADC_ConfigChannel+0x868>)
 80030a6:	e000      	b.n	80030aa <HAL_ADC_ConfigChannel+0x812>
 80030a8:	4a10      	ldr	r2, [pc, #64]	@ (80030ec <HAL_ADC_ConfigChannel+0x854>)
 80030aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7fe ff10 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 80030ba:	e00c      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80030ce:	e002      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	37d8      	adds	r7, #216	@ 0xd8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	50000700 	.word	0x50000700
 80030f0:	c3210000 	.word	0xc3210000
 80030f4:	90c00010 	.word	0x90c00010
 80030f8:	50000600 	.word	0x50000600
 80030fc:	50000100 	.word	0x50000100
 8003100:	50000300 	.word	0x50000300
 8003104:	20000000 	.word	0x20000000
 8003108:	053e2d63 	.word	0x053e2d63
 800310c:	c7520000 	.word	0xc7520000
 8003110:	50000500 	.word	0x50000500
 8003114:	cb840000 	.word	0xcb840000

08003118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f8a7 	bl	800227c <LL_ADC_IsEnabled>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d176      	bne.n	8003222 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <ADC_Enable+0x114>)
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003146:	f043 0210 	orr.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e062      	b.n	8003224 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f862 	bl	800222c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003170:	d004      	beq.n	800317c <ADC_Enable+0x64>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2e      	ldr	r2, [pc, #184]	@ (8003230 <ADC_Enable+0x118>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <ADC_Enable+0x68>
 800317c:	4b2d      	ldr	r3, [pc, #180]	@ (8003234 <ADC_Enable+0x11c>)
 800317e:	e000      	b.n	8003182 <ADC_Enable+0x6a>
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <ADC_Enable+0x120>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe febc 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8003188:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800318a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800318e:	2b00      	cmp	r3, #0
 8003190:	d013      	beq.n	80031ba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003192:	4b2a      	ldr	r3, [pc, #168]	@ (800323c <ADC_Enable+0x124>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	4a29      	ldr	r2, [pc, #164]	@ (8003240 <ADC_Enable+0x128>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	099b      	lsrs	r3, r3, #6
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031ac:	e002      	b.n	80031b4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f9      	bne.n	80031ae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031ba:	f7fe fe6f 	bl	8001e9c <HAL_GetTick>
 80031be:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c0:	e028      	b.n	8003214 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f858 	bl	800227c <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f828 	bl	800222c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031dc:	f7fe fe5e 	bl	8001e9c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d914      	bls.n	8003214 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d00d      	beq.n	8003214 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	f043 0210 	orr.w	r2, r3, #16
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e007      	b.n	8003224 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d1cf      	bne.n	80031c2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	8000003f 	.word	0x8000003f
 8003230:	50000100 	.word	0x50000100
 8003234:	50000300 	.word	0x50000300
 8003238:	50000700 	.word	0x50000700
 800323c:	20000000 	.word	0x20000000
 8003240:	053e2d63 	.word	0x053e2d63

08003244 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff f826 	bl	80022a2 <LL_ADC_IsDisableOngoing>
 8003256:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f80d 	bl	800227c <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d047      	beq.n	80032f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d144      	bne.n	80032f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030d 	and.w	r3, r3, #13
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10c      	bne.n	8003296 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe ffe7 	bl	8002254 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2203      	movs	r2, #3
 800328c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328e:	f7fe fe05 	bl	8001e9c <HAL_GetTick>
 8003292:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003294:	e029      	b.n	80032ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e023      	b.n	80032fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032b2:	f7fe fdf3 	bl	8001e9c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d914      	bls.n	80032ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1dc      	bne.n	80032b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003318:	2b00      	cmp	r3, #0
 800331a:	d14b      	bne.n	80033b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003320:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d021      	beq.n	800337a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fe8c 	bl	8002058 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d032      	beq.n	80033ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d12b      	bne.n	80033ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003358:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d11f      	bne.n	80033ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003378:	e018      	b.n	80033ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d111      	bne.n	80033ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff fa55 	bl	800285c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033b2:	e00e      	b.n	80033d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff fa5f 	bl	8002884 <HAL_ADC_ErrorCallback>
}
 80033c6:	e004      	b.n	80033d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff fa41 	bl	8002870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003402:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff fa31 	bl	8002884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <LL_ADC_IsEnabled>:
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <LL_ADC_IsEnabled+0x18>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <LL_ADC_IsEnabled+0x1a>
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_ADC_StartCalibration>:
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003462:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800346c:	4313      	orrs	r3, r2
 800346e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_ADC_IsCalibrationOnGoing>:
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003492:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003496:	d101      	bne.n	800349c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_ADC_REG_IsConversionOngoing>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d101      	bne.n	80034c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_ADCEx_Calibration_Start+0x1c>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e04d      	b.n	8003588 <HAL_ADCEx_Calibration_Start+0xb8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fea5 	bl	8003244 <ADC_Disable>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d136      	bne.n	8003572 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800350c:	f023 0302 	bic.w	r3, r3, #2
 8003510:	f043 0202 	orr.w	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6839      	ldr	r1, [r7, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff96 	bl	8003450 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003524:	e014      	b.n	8003550 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3301      	adds	r3, #1
 800352a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d90d      	bls.n	8003550 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003538:	f023 0312 	bic.w	r3, r3, #18
 800353c:	f043 0210 	orr.w	r2, r3, #16
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e01b      	b.n	8003588 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff94 	bl	8003482 <LL_ADC_IsCalibrationOnGoing>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e2      	bne.n	8003526 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f023 0303 	bic.w	r3, r3, #3
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003570:	e005      	b.n	800357e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	f043 0210 	orr.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	0004de01 	.word	0x0004de01

08003594 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b0a1      	sub	sp, #132	@ 0x84
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0e7      	b.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035ba:	2300      	movs	r3, #0
 80035bc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035be:	2300      	movs	r3, #0
 80035c0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ca:	d102      	bne.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	e009      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d102      	bne.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80035dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	e001      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0be      	b.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff4f 	bl	80034aa <LL_ADC_REG_IsConversionOngoing>
 800360c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff49 	bl	80034aa <LL_ADC_REG_IsConversionOngoing>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 80a0 	bne.w	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 809c 	bne.w	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003630:	d004      	beq.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a55      	ldr	r2, [pc, #340]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800363c:	4b56      	ldr	r3, [pc, #344]	@ (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800363e:	e000      	b.n	8003642 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003640:	4b56      	ldr	r3, [pc, #344]	@ (800379c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003642:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d04b      	beq.n	80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800364c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800365e:	035b      	lsls	r3, r3, #13
 8003660:	430b      	orrs	r3, r1
 8003662:	431a      	orrs	r2, r3
 8003664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003666:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003670:	d004      	beq.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a45      	ldr	r2, [pc, #276]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10f      	bne.n	800369c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800367c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003680:	f7ff fed3 	bl	800342a <LL_ADC_IsEnabled>
 8003684:	4604      	mov	r4, r0
 8003686:	4841      	ldr	r0, [pc, #260]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003688:	f7ff fecf 	bl	800342a <LL_ADC_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	4323      	orrs	r3, r4
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e012      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800369c:	483c      	ldr	r0, [pc, #240]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800369e:	f7ff fec4 	bl	800342a <LL_ADC_IsEnabled>
 80036a2:	4604      	mov	r4, r0
 80036a4:	483b      	ldr	r0, [pc, #236]	@ (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036a6:	f7ff fec0 	bl	800342a <LL_ADC_IsEnabled>
 80036aa:	4603      	mov	r3, r0
 80036ac:	431c      	orrs	r4, r3
 80036ae:	483c      	ldr	r0, [pc, #240]	@ (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036b0:	f7ff febb 	bl	800342a <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4323      	orrs	r3, r4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d056      	beq.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036ce:	f023 030f 	bic.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	6892      	ldr	r2, [r2, #8]
 80036da:	430a      	orrs	r2, r1
 80036dc:	431a      	orrs	r2, r3
 80036de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036e0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036e2:	e047      	b.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f8:	d004      	beq.n	8003704 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a23      	ldr	r2, [pc, #140]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d10f      	bne.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003704:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003708:	f7ff fe8f 	bl	800342a <LL_ADC_IsEnabled>
 800370c:	4604      	mov	r4, r0
 800370e:	481f      	ldr	r0, [pc, #124]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003710:	f7ff fe8b 	bl	800342a <LL_ADC_IsEnabled>
 8003714:	4603      	mov	r3, r0
 8003716:	4323      	orrs	r3, r4
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e012      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003724:	481a      	ldr	r0, [pc, #104]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003726:	f7ff fe80 	bl	800342a <LL_ADC_IsEnabled>
 800372a:	4604      	mov	r4, r0
 800372c:	4819      	ldr	r0, [pc, #100]	@ (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800372e:	f7ff fe7c 	bl	800342a <LL_ADC_IsEnabled>
 8003732:	4603      	mov	r3, r0
 8003734:	431c      	orrs	r4, r3
 8003736:	481a      	ldr	r0, [pc, #104]	@ (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003738:	f7ff fe77 	bl	800342a <LL_ADC_IsEnabled>
 800373c:	4603      	mov	r3, r0
 800373e:	4323      	orrs	r3, r4
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d012      	beq.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800374e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003756:	f023 030f 	bic.w	r3, r3, #15
 800375a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800375c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800375e:	e009      	b.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003772:	e000      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003774:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800377e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003782:	4618      	mov	r0, r3
 8003784:	3784      	adds	r7, #132	@ 0x84
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}
 800378a:	bf00      	nop
 800378c:	50000100 	.word	0x50000100
 8003790:	50000400 	.word	0x50000400
 8003794:	50000500 	.word	0x50000500
 8003798:	50000300 	.word	0x50000300
 800379c:	50000700 	.word	0x50000700
 80037a0:	50000600 	.word	0x50000600

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	@ (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	@ (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	@ (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	@ 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	@ 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	@ (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003968:	f7ff ff40 	bl	80037ec <__NVIC_GetPriorityGrouping>
 800396c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff90 	bl	8003898 <NVIC_EncodePriority>
 8003978:	4602      	mov	r2, r0
 800397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5f 	bl	8003844 <__NVIC_SetPriority>
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff33 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffa4 	bl	8003900 <SysTick_Config>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e08d      	b.n	8003af2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	4b47      	ldr	r3, [pc, #284]	@ (8003afc <HAL_DMA_Init+0x138>)
 80039de:	429a      	cmp	r2, r3
 80039e0:	d80f      	bhi.n	8003a02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	4b45      	ldr	r3, [pc, #276]	@ (8003b00 <HAL_DMA_Init+0x13c>)
 80039ea:	4413      	add	r3, r2
 80039ec:	4a45      	ldr	r2, [pc, #276]	@ (8003b04 <HAL_DMA_Init+0x140>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a42      	ldr	r2, [pc, #264]	@ (8003b08 <HAL_DMA_Init+0x144>)
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a00:	e00e      	b.n	8003a20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b40      	ldr	r3, [pc, #256]	@ (8003b0c <HAL_DMA_Init+0x148>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b04 <HAL_DMA_Init+0x140>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	009a      	lsls	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b10 <HAL_DMA_Init+0x14c>)
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9b6 	bl	8003de4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a80:	d102      	bne.n	8003a88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a9c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_DMA_Init+0x104>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d80c      	bhi.n	8003ac8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9d6 	bl	8003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	e008      	b.n	8003ada <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40020407 	.word	0x40020407
 8003b00:	bffdfff8 	.word	0xbffdfff8
 8003b04:	cccccccd 	.word	0xcccccccd
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	bffdfbf8 	.word	0xbffdfbf8
 8003b10:	40020400 	.word	0x40020400

08003b14 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_DMA_Start_IT+0x20>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e066      	b.n	8003c02 <HAL_DMA_Start_IT+0xee>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d155      	bne.n	8003bf4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f8fb 	bl	8003d68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 020e 	orr.w	r2, r2, #14
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e00f      	b.n	8003bac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0204 	bic.w	r2, r2, #4
 8003b9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 020a 	orr.w	r2, r2, #10
 8003baa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e005      	b.n	8003c00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d026      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x7a>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d021      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0204 	bic.w	r2, r2, #4
 8003c5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f003 021f 	and.w	r2, r3, #31
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2104      	movs	r1, #4
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d071      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c82:	e06c      	b.n	8003d5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02e      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d029      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 020a 	bic.w	r2, r2, #10
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ccc:	f003 021f 	and.w	r2, r3, #31
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d038      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003cf4:	e033      	b.n	8003d5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2208      	movs	r2, #8
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02a      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d025      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 020e 	bic.w	r2, r2, #14
 8003d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	f003 021f 	and.w	r2, r3, #31
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	2101      	movs	r1, #1
 8003d32:	fa01 f202 	lsl.w	r2, r1, r2
 8003d36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
}
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d90:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	f003 021f 	and.w	r2, r3, #31
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d108      	bne.n	8003dc8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dc6:	e007      	b.n	8003dd8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b16      	ldr	r3, [pc, #88]	@ (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d802      	bhi.n	8003dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e001      	b.n	8003e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e00:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	3b08      	subs	r3, #8
 8003e0e:	4a12      	ldr	r2, [pc, #72]	@ (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	009a      	lsls	r2, r3, #2
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2201      	movs	r2, #1
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40020407 	.word	0x40020407
 8003e50:	40020800 	.word	0x40020800
 8003e54:	40020820 	.word	0x40020820
 8003e58:	cccccccd 	.word	0xcccccccd
 8003e5c:	40020880 	.word	0x40020880

08003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a08      	ldr	r2, [pc, #32]	@ (8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e82:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	1000823f 	.word	0x1000823f
 8003ea4:	40020940 	.word	0x40020940

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eb6:	e15a      	b.n	800416e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 814c 	beq.w	8004168 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d005      	beq.n	8003ee8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d130      	bne.n	8003f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f1e:	2201      	movs	r2, #1
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 0201 	and.w	r2, r3, #1
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d017      	beq.n	8003f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d123      	bne.n	8003fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	220f      	movs	r2, #15
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	08da      	lsrs	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	6939      	ldr	r1, [r7, #16]
 8003fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0203 	and.w	r2, r3, #3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80a6 	beq.w	8004168 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401c:	4b5b      	ldr	r3, [pc, #364]	@ (800418c <HAL_GPIO_Init+0x2e4>)
 800401e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004020:	4a5a      	ldr	r2, [pc, #360]	@ (800418c <HAL_GPIO_Init+0x2e4>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6613      	str	r3, [r2, #96]	@ 0x60
 8004028:	4b58      	ldr	r3, [pc, #352]	@ (800418c <HAL_GPIO_Init+0x2e4>)
 800402a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004034:	4a56      	ldr	r2, [pc, #344]	@ (8004190 <HAL_GPIO_Init+0x2e8>)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	220f      	movs	r2, #15
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800405e:	d01f      	beq.n	80040a0 <HAL_GPIO_Init+0x1f8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a4c      	ldr	r2, [pc, #304]	@ (8004194 <HAL_GPIO_Init+0x2ec>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d019      	beq.n	800409c <HAL_GPIO_Init+0x1f4>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a4b      	ldr	r2, [pc, #300]	@ (8004198 <HAL_GPIO_Init+0x2f0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_GPIO_Init+0x1f0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a4a      	ldr	r2, [pc, #296]	@ (800419c <HAL_GPIO_Init+0x2f4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00d      	beq.n	8004094 <HAL_GPIO_Init+0x1ec>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a49      	ldr	r2, [pc, #292]	@ (80041a0 <HAL_GPIO_Init+0x2f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <HAL_GPIO_Init+0x1e8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a48      	ldr	r2, [pc, #288]	@ (80041a4 <HAL_GPIO_Init+0x2fc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_GPIO_Init+0x1e4>
 8004088:	2305      	movs	r3, #5
 800408a:	e00a      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 800408c:	2306      	movs	r3, #6
 800408e:	e008      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 8004090:	2304      	movs	r3, #4
 8004092:	e006      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 8004094:	2303      	movs	r3, #3
 8004096:	e004      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 8004098:	2302      	movs	r3, #2
 800409a:	e002      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 80040a0:	2300      	movs	r3, #0
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	f002 0203 	and.w	r2, r2, #3
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	4093      	lsls	r3, r2
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b2:	4937      	ldr	r1, [pc, #220]	@ (8004190 <HAL_GPIO_Init+0x2e8>)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c0:	4b39      	ldr	r3, [pc, #228]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e4:	4a30      	ldr	r2, [pc, #192]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ea:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800410e:	4a26      	ldr	r2, [pc, #152]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004114:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004138:	4a1b      	ldr	r2, [pc, #108]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800413e:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004162:	4a11      	ldr	r2, [pc, #68]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3301      	adds	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f ae9d 	bne.w	8003eb8 <HAL_GPIO_Init+0x10>
  }
}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40021000 	.word	0x40021000
 8004190:	40010000 	.word	0x40010000
 8004194:	48000400 	.word	0x48000400
 8004198:	48000800 	.word	0x48000800
 800419c:	48000c00 	.word	0x48000c00
 80041a0:	48001000 	.word	0x48001000
 80041a4:	48001400 	.word	0x48001400
 80041a8:	40010400 	.word	0x40010400

080041ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
 80041b8:	4613      	mov	r3, r2
 80041ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041bc:	787b      	ldrb	r3, [r7, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041c8:	e002      	b.n	80041d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041e6:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041f2:	4a05      	ldr	r2, [pc, #20]	@ (8004208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f806 	bl	800420c <HAL_GPIO_EXTI_Callback>
  }
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40010400 	.word	0x40010400

0800420c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e08d      	b.n	8004350 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7fc ffef 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2224      	movs	r2, #36	@ 0x24
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004272:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004282:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d107      	bne.n	800429c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	e006      	b.n	80042aa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80042a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d108      	bne.n	80042c4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	e007      	b.n	80042d4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042e6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69d9      	ldr	r1, [r3, #28]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b20      	cmp	r3, #32
 800436c:	d138      	bne.n	80043e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004378:	2302      	movs	r3, #2
 800437a:	e032      	b.n	80043e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	@ 0x24
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b20      	cmp	r3, #32
 8004402:	d139      	bne.n	8004478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800440e:	2302      	movs	r3, #2
 8004410:	e033      	b.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	@ 0x24
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d141      	bne.n	800451a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004496:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a2:	d131      	bne.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a4:	4b47      	ldr	r3, [pc, #284]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044aa:	4a46      	ldr	r2, [pc, #280]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044b4:	4b43      	ldr	r3, [pc, #268]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044bc:	4a41      	ldr	r2, [pc, #260]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044c4:	4b40      	ldr	r3, [pc, #256]	@ (80045c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2232      	movs	r2, #50	@ 0x32
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	4a3f      	ldr	r2, [pc, #252]	@ (80045cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	0c9b      	lsrs	r3, r3, #18
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044da:	e002      	b.n	80044e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044e2:	4b38      	ldr	r3, [pc, #224]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ee:	d102      	bne.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f2      	bne.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044f6:	4b33      	ldr	r3, [pc, #204]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004502:	d158      	bne.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e057      	b.n	80045b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004508:	4b2e      	ldr	r3, [pc, #184]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450e:	4a2d      	ldr	r2, [pc, #180]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004514:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004518:	e04d      	b.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004520:	d141      	bne.n	80045a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004522:	4b28      	ldr	r3, [pc, #160]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800452a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452e:	d131      	bne.n	8004594 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004530:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004536:	4a23      	ldr	r2, [pc, #140]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004540:	4b20      	ldr	r3, [pc, #128]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004548:	4a1e      	ldr	r2, [pc, #120]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800454e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004550:	4b1d      	ldr	r3, [pc, #116]	@ (80045c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2232      	movs	r2, #50	@ 0x32
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	4a1c      	ldr	r2, [pc, #112]	@ (80045cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	0c9b      	lsrs	r3, r3, #18
 8004562:	3301      	adds	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004566:	e002      	b.n	800456e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3b01      	subs	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800456e:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457a:	d102      	bne.n	8004582 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f2      	bne.n	8004568 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458e:	d112      	bne.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e011      	b.n	80045b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800459a:	4a0a      	ldr	r2, [pc, #40]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045a4:	e007      	b.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045a6:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045ae:	4a05      	ldr	r2, [pc, #20]	@ (80045c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40007000 	.word	0x40007000
 80045c8:	20000000 	.word	0x20000000
 80045cc:	431bde83 	.word	0x431bde83

080045d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045de:	6093      	str	r3, [r2, #8]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40007000 	.word	0x40007000

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e2fe      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d075      	beq.n	80046fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460e:	4b97      	ldr	r3, [pc, #604]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004618:	4b94      	ldr	r3, [pc, #592]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d102      	bne.n	800462e <HAL_RCC_OscConfig+0x3e>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b03      	cmp	r3, #3
 800462c:	d002      	beq.n	8004634 <HAL_RCC_OscConfig+0x44>
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b8d      	ldr	r3, [pc, #564]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x108>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e2d9      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x74>
 8004656:	4b85      	ldr	r3, [pc, #532]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a84      	ldr	r2, [pc, #528]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b7f      	ldr	r3, [pc, #508]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a7e      	ldr	r2, [pc, #504]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b7c      	ldr	r3, [pc, #496]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a7b      	ldr	r2, [pc, #492]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004688:	4b78      	ldr	r3, [pc, #480]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a77      	ldr	r2, [pc, #476]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b75      	ldr	r3, [pc, #468]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a74      	ldr	r2, [pc, #464]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fd fbf8 	bl	8001e9c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fd fbf4 	bl	8001e9c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	@ 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e29e      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046c2:	4b6a      	ldr	r3, [pc, #424]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xc0>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd fbe4 	bl	8001e9c <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fd fbe0 	bl	8001e9c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	@ 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e28a      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ea:	4b60      	ldr	r3, [pc, #384]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0xe8>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d075      	beq.n	80047f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	4b59      	ldr	r3, [pc, #356]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004710:	4b56      	ldr	r3, [pc, #344]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d102      	bne.n	8004726 <HAL_RCC_OscConfig+0x136>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d002      	beq.n	800472c <HAL_RCC_OscConfig+0x13c>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d11f      	bne.n	800476c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800472c:	4b4f      	ldr	r3, [pc, #316]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_OscConfig+0x154>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e25d      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004744:	4b49      	ldr	r3, [pc, #292]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	061b      	lsls	r3, r3, #24
 8004752:	4946      	ldr	r1, [pc, #280]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004758:	4b45      	ldr	r3, [pc, #276]	@ (8004870 <HAL_RCC_OscConfig+0x280>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7fd fb51 	bl	8001e04 <HAL_InitTick>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d043      	beq.n	80047f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e249      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d023      	beq.n	80047bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004774:	4b3d      	ldr	r3, [pc, #244]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3c      	ldr	r2, [pc, #240]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800477a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fd fb8c 	bl	8001e9c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004788:	f7fd fb88 	bl	8001e9c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e232      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800479a:	4b34      	ldr	r3, [pc, #208]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a6:	4b31      	ldr	r3, [pc, #196]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	492d      	ldr	r1, [pc, #180]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]
 80047ba:	e01a      	b.n	80047f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047bc:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2a      	ldr	r2, [pc, #168]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 80047c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fd fb68 	bl	8001e9c <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d0:	f7fd fb64 	bl	8001e9c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e20e      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047e2:	4b22      	ldr	r3, [pc, #136]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1e0>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d041      	beq.n	8004882 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01c      	beq.n	8004840 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004806:	4b19      	ldr	r3, [pc, #100]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800480c:	4a17      	ldr	r2, [pc, #92]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004816:	f7fd fb41 	bl	8001e9c <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481e:	f7fd fb3d 	bl	8001e9c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1e7      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004830:	4b0e      	ldr	r3, [pc, #56]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0ef      	beq.n	800481e <HAL_RCC_OscConfig+0x22e>
 800483e:	e020      	b.n	8004882 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004840:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004846:	4a09      	ldr	r2, [pc, #36]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7fd fb24 	bl	8001e9c <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004856:	e00d      	b.n	8004874 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004858:	f7fd fb20 	bl	8001e9c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d906      	bls.n	8004874 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e1ca      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004874:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1ea      	bne.n	8004858 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80a6 	beq.w	80049dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004890:	2300      	movs	r3, #0
 8004892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004894:	4b84      	ldr	r3, [pc, #528]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_OscConfig+0x2b4>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x2b6>
 80048a4:	2300      	movs	r3, #0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	4b7f      	ldr	r3, [pc, #508]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ae:	4a7e      	ldr	r2, [pc, #504]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048b6:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048c2:	2301      	movs	r3, #1
 80048c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c6:	4b79      	ldr	r3, [pc, #484]	@ (8004aac <HAL_RCC_OscConfig+0x4bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d118      	bne.n	8004904 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d2:	4b76      	ldr	r3, [pc, #472]	@ (8004aac <HAL_RCC_OscConfig+0x4bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a75      	ldr	r2, [pc, #468]	@ (8004aac <HAL_RCC_OscConfig+0x4bc>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048de:	f7fd fadd 	bl	8001e9c <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fd fad9 	bl	8001e9c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e183      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f8:	4b6c      	ldr	r3, [pc, #432]	@ (8004aac <HAL_RCC_OscConfig+0x4bc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d108      	bne.n	800491e <HAL_RCC_OscConfig+0x32e>
 800490c:	4b66      	ldr	r3, [pc, #408]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004912:	4a65      	ldr	r2, [pc, #404]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800491c:	e024      	b.n	8004968 <HAL_RCC_OscConfig+0x378>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b05      	cmp	r3, #5
 8004924:	d110      	bne.n	8004948 <HAL_RCC_OscConfig+0x358>
 8004926:	4b60      	ldr	r3, [pc, #384]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	4a5e      	ldr	r2, [pc, #376]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 800492e:	f043 0304 	orr.w	r3, r3, #4
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004936:	4b5c      	ldr	r3, [pc, #368]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493c:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004946:	e00f      	b.n	8004968 <HAL_RCC_OscConfig+0x378>
 8004948:	4b57      	ldr	r3, [pc, #348]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	4a56      	ldr	r2, [pc, #344]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004958:	4b53      	ldr	r3, [pc, #332]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	4a52      	ldr	r2, [pc, #328]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004960:	f023 0304 	bic.w	r3, r3, #4
 8004964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d016      	beq.n	800499e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fd fa94 	bl	8001e9c <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fd fa90 	bl	8001e9c <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e138      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498e:	4b46      	ldr	r3, [pc, #280]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ed      	beq.n	8004978 <HAL_RCC_OscConfig+0x388>
 800499c:	e015      	b.n	80049ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499e:	f7fd fa7d 	bl	8001e9c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049a4:	e00a      	b.n	80049bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a6:	f7fd fa79 	bl	8001e9c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e121      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049bc:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1ed      	bne.n	80049a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049ca:	7ffb      	ldrb	r3, [r7, #31]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d105      	bne.n	80049dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d0:	4b35      	ldr	r3, [pc, #212]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	4a34      	ldr	r2, [pc, #208]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 80049d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d03c      	beq.n	8004a62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01c      	beq.n	8004a2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049f0:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 80049f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049f6:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fd fa4c 	bl	8001e9c <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a08:	f7fd fa48 	bl	8001e9c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0f2      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a1a:	4b23      	ldr	r3, [pc, #140]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ef      	beq.n	8004a08 <HAL_RCC_OscConfig+0x418>
 8004a28:	e01b      	b.n	8004a62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a30:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fd fa2f 	bl	8001e9c <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a42:	f7fd fa2b 	bl	8001e9c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e0d5      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a54:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ef      	bne.n	8004a42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80c9 	beq.w	8004bfe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	f000 8083 	beq.w	8004b80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d15e      	bne.n	8004b40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a82:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a08      	ldr	r2, [pc, #32]	@ (8004aa8 <HAL_RCC_OscConfig+0x4b8>)
 8004a88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fa05 	bl	8001e9c <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a94:	e00c      	b.n	8004ab0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fd fa01 	bl	8001e9c <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d905      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0ab      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab0:	4b55      	ldr	r3, [pc, #340]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ec      	bne.n	8004a96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004abc:	4b52      	ldr	r3, [pc, #328]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	4b52      	ldr	r3, [pc, #328]	@ (8004c0c <HAL_RCC_OscConfig+0x61c>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6a11      	ldr	r1, [r2, #32]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004acc:	3a01      	subs	r2, #1
 8004ace:	0112      	lsls	r2, r2, #4
 8004ad0:	4311      	orrs	r1, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ad6:	0212      	lsls	r2, r2, #8
 8004ad8:	4311      	orrs	r1, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ade:	0852      	lsrs	r2, r2, #1
 8004ae0:	3a01      	subs	r2, #1
 8004ae2:	0552      	lsls	r2, r2, #21
 8004ae4:	4311      	orrs	r1, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004aea:	0852      	lsrs	r2, r2, #1
 8004aec:	3a01      	subs	r2, #1
 8004aee:	0652      	lsls	r2, r2, #25
 8004af0:	4311      	orrs	r1, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004af6:	06d2      	lsls	r2, r2, #27
 8004af8:	430a      	orrs	r2, r1
 8004afa:	4943      	ldr	r1, [pc, #268]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b00:	4b41      	ldr	r3, [pc, #260]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a40      	ldr	r2, [pc, #256]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a3d      	ldr	r2, [pc, #244]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fd f9c0 	bl	8001e9c <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fd f9bc 	bl	8001e9c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e066      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b32:	4b35      	ldr	r3, [pc, #212]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x530>
 8004b3e:	e05e      	b.n	8004bfe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b40:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a30      	ldr	r2, [pc, #192]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fd f9a6 	bl	8001e9c <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fd f9a2 	bl	8001e9c <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e04c      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b66:	4b28      	ldr	r3, [pc, #160]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b72:	4b25      	ldr	r3, [pc, #148]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	4924      	ldr	r1, [pc, #144]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b78:	4b25      	ldr	r3, [pc, #148]	@ (8004c10 <HAL_RCC_OscConfig+0x620>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	60cb      	str	r3, [r1, #12]
 8004b7e:	e03e      	b.n	8004bfe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e039      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <HAL_RCC_OscConfig+0x618>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 0203 	and.w	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d12c      	bne.n	8004bfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	3b01      	subs	r3, #1
 8004bac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d123      	bne.n	8004bfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d11b      	bne.n	8004bfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bcc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d113      	bne.n	8004bfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	3b01      	subs	r3, #1
 8004be0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	019f800c 	.word	0x019f800c
 8004c10:	feeefffc 	.word	0xfeeefffc

08004c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e11e      	b.n	8004e6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b91      	ldr	r3, [pc, #580]	@ (8004e74 <HAL_RCC_ClockConfig+0x260>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d910      	bls.n	8004c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b8e      	ldr	r3, [pc, #568]	@ (8004e74 <HAL_RCC_ClockConfig+0x260>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 020f 	bic.w	r2, r3, #15
 8004c42:	498c      	ldr	r1, [pc, #560]	@ (8004e74 <HAL_RCC_ClockConfig+0x260>)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b8a      	ldr	r3, [pc, #552]	@ (8004e74 <HAL_RCC_ClockConfig+0x260>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e106      	b.n	8004e6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d073      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d129      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c70:	4b81      	ldr	r3, [pc, #516]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0f4      	b.n	8004e6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c80:	f000 f99e 	bl	8004fc0 <RCC_GetSysClockFreqFromPLLSource>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4a7c      	ldr	r2, [pc, #496]	@ (8004e7c <HAL_RCC_ClockConfig+0x268>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d93f      	bls.n	8004d0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d033      	beq.n	8004d0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d12f      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cae:	4b72      	ldr	r3, [pc, #456]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cb6:	4a70      	ldr	r2, [pc, #448]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e024      	b.n	8004d0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0c6      	b.n	8004e6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cdc:	4b66      	ldr	r3, [pc, #408]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0be      	b.n	8004e6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004cec:	f000 f8ce 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4a61      	ldr	r2, [pc, #388]	@ (8004e7c <HAL_RCC_ClockConfig+0x268>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d909      	bls.n	8004d0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d02:	4a5d      	ldr	r2, [pc, #372]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d0a:	2380      	movs	r3, #128	@ 0x80
 8004d0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d0e:	4b5a      	ldr	r3, [pc, #360]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4957      	ldr	r1, [pc, #348]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d20:	f7fd f8bc 	bl	8001e9c <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7fd f8b8 	bl	8001e9c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e095      	b.n	8004e6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 020c 	and.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1eb      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d023      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d68:	4b43      	ldr	r3, [pc, #268]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a42      	ldr	r2, [pc, #264]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004d80:	4b3d      	ldr	r3, [pc, #244]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d88:	4a3b      	ldr	r2, [pc, #236]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d90:	4b39      	ldr	r3, [pc, #228]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4936      	ldr	r1, [pc, #216]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b80      	cmp	r3, #128	@ 0x80
 8004da8:	d105      	bne.n	8004db6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004daa:	4b33      	ldr	r3, [pc, #204]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4a32      	ldr	r2, [pc, #200]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004db0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004db4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e74 <HAL_RCC_ClockConfig+0x260>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d21d      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <HAL_RCC_ClockConfig+0x260>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 020f 	bic.w	r2, r3, #15
 8004dcc:	4929      	ldr	r1, [pc, #164]	@ (8004e74 <HAL_RCC_ClockConfig+0x260>)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004dd4:	f7fd f862 	bl	8001e9c <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ddc:	f7fd f85e 	bl	8001e9c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e03b      	b.n	8004e6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b20      	ldr	r3, [pc, #128]	@ (8004e74 <HAL_RCC_ClockConfig+0x260>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1ed      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4917      	ldr	r1, [pc, #92]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2a:	4b13      	ldr	r3, [pc, #76]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	490f      	ldr	r1, [pc, #60]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e3e:	f000 f825 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004e42:	4602      	mov	r2, r0
 8004e44:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <HAL_RCC_ClockConfig+0x264>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	490c      	ldr	r1, [pc, #48]	@ (8004e80 <HAL_RCC_ClockConfig+0x26c>)
 8004e50:	5ccb      	ldrb	r3, [r1, r3]
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e84 <HAL_RCC_ClockConfig+0x270>)
 8004e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <HAL_RCC_ClockConfig+0x274>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fc ffce 	bl	8001e04 <HAL_InitTick>
 8004e68:	4603      	mov	r3, r0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40022000 	.word	0x40022000
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	04c4b400 	.word	0x04c4b400
 8004e80:	08007680 	.word	0x08007680
 8004e84:	20000000 	.word	0x20000000
 8004e88:	20000004 	.word	0x20000004

08004e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e92:	4b2c      	ldr	r3, [pc, #176]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d102      	bne.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e047      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ea4:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d102      	bne.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eb0:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	e03e      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004eb6:	4b23      	ldr	r3, [pc, #140]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	d136      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ec2:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d10c      	bne.n	8004efa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	4a16      	ldr	r2, [pc, #88]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eea:	68d2      	ldr	r2, [r2, #12]
 8004eec:	0a12      	lsrs	r2, r2, #8
 8004eee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	617b      	str	r3, [r7, #20]
      break;
 8004ef8:	e00c      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004efa:	4a13      	ldr	r2, [pc, #76]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	4a10      	ldr	r2, [pc, #64]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f04:	68d2      	ldr	r2, [r2, #12]
 8004f06:	0a12      	lsrs	r2, r2, #8
 8004f08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
 8004f10:	617b      	str	r3, [r7, #20]
      break;
 8004f12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f14:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0e5b      	lsrs	r3, r3, #25
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	e001      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f34:	693b      	ldr	r3, [r7, #16]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	016e3600 	.word	0x016e3600

08004f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f54:	4b03      	ldr	r3, [pc, #12]	@ (8004f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000000 	.word	0x20000000

08004f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f6c:	f7ff fff0 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4904      	ldr	r1, [pc, #16]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	08007690 	.word	0x08007690

08004f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f98:	f7ff ffda 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0adb      	lsrs	r3, r3, #11
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4904      	ldr	r1, [pc, #16]	@ (8004fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	08007690 	.word	0x08007690

08004fc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d10c      	bne.n	8004ffe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fe4:	4a17      	ldr	r2, [pc, #92]	@ (8005044 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	4a14      	ldr	r2, [pc, #80]	@ (8005040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fee:	68d2      	ldr	r2, [r2, #12]
 8004ff0:	0a12      	lsrs	r2, r2, #8
 8004ff2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	617b      	str	r3, [r7, #20]
    break;
 8004ffc:	e00c      	b.n	8005018 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ffe:	4a12      	ldr	r2, [pc, #72]	@ (8005048 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	4a0e      	ldr	r2, [pc, #56]	@ (8005040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005008:	68d2      	ldr	r2, [r2, #12]
 800500a:	0a12      	lsrs	r2, r2, #8
 800500c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005010:	fb02 f303 	mul.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]
    break;
 8005016:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005018:	4b09      	ldr	r3, [pc, #36]	@ (8005040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	0e5b      	lsrs	r3, r3, #25
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	3301      	adds	r3, #1
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005032:	687b      	ldr	r3, [r7, #4]
}
 8005034:	4618      	mov	r0, r3
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40021000 	.word	0x40021000
 8005044:	016e3600 	.word	0x016e3600
 8005048:	00f42400 	.word	0x00f42400

0800504c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005054:	2300      	movs	r3, #0
 8005056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005058:	2300      	movs	r3, #0
 800505a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8098 	beq.w	800519a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506e:	4b43      	ldr	r3, [pc, #268]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	4b40      	ldr	r3, [pc, #256]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507e:	4a3f      	ldr	r2, [pc, #252]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005084:	6593      	str	r3, [r2, #88]	@ 0x58
 8005086:	4b3d      	ldr	r3, [pc, #244]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005092:	2301      	movs	r3, #1
 8005094:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005096:	4b3a      	ldr	r3, [pc, #232]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a39      	ldr	r2, [pc, #228]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050a2:	f7fc fefb 	bl	8001e9c <HAL_GetTick>
 80050a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a8:	e009      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050aa:	f7fc fef7 	bl	8001e9c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d902      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	74fb      	strb	r3, [r7, #19]
        break;
 80050bc:	e005      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050be:	4b30      	ldr	r3, [pc, #192]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0ef      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80050ca:	7cfb      	ldrb	r3, [r7, #19]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d159      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050d0:	4b2a      	ldr	r3, [pc, #168]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01e      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d019      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050ec:	4b23      	ldr	r3, [pc, #140]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050f8:	4b20      	ldr	r3, [pc, #128]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005108:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510e:	4a1b      	ldr	r2, [pc, #108]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005118:	4a18      	ldr	r2, [pc, #96]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d016      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512a:	f7fc feb7 	bl	8001e9c <HAL_GetTick>
 800512e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005130:	e00b      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fc feb3 	bl	8001e9c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d902      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	74fb      	strb	r3, [r7, #19]
            break;
 8005148:	e006      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514a:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ec      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800515e:	4b07      	ldr	r3, [pc, #28]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005164:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800516c:	4903      	ldr	r1, [pc, #12]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005174:	e008      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	74bb      	strb	r3, [r7, #18]
 800517a:	e005      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800517c:	40021000 	.word	0x40021000
 8005180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005188:	7c7b      	ldrb	r3, [r7, #17]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518e:	4ba7      	ldr	r3, [pc, #668]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005192:	4aa6      	ldr	r2, [pc, #664]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005198:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051a6:	4ba1      	ldr	r3, [pc, #644]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ac:	f023 0203 	bic.w	r2, r3, #3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	499d      	ldr	r1, [pc, #628]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051c8:	4b98      	ldr	r3, [pc, #608]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ce:	f023 020c 	bic.w	r2, r3, #12
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4995      	ldr	r1, [pc, #596]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051ea:	4b90      	ldr	r3, [pc, #576]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	498c      	ldr	r1, [pc, #560]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800520c:	4b87      	ldr	r3, [pc, #540]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	4984      	ldr	r1, [pc, #528]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800522e:	4b7f      	ldr	r3, [pc, #508]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	497b      	ldr	r1, [pc, #492]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005250:	4b76      	ldr	r3, [pc, #472]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	4973      	ldr	r1, [pc, #460]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005272:	4b6e      	ldr	r3, [pc, #440]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005278:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	496a      	ldr	r1, [pc, #424]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005294:	4b65      	ldr	r3, [pc, #404]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4962      	ldr	r1, [pc, #392]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b6:	4b5d      	ldr	r3, [pc, #372]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	4959      	ldr	r1, [pc, #356]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052d8:	4b54      	ldr	r3, [pc, #336]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052de:	f023 0203 	bic.w	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	4951      	ldr	r1, [pc, #324]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052fa:	4b4c      	ldr	r3, [pc, #304]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005300:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	4948      	ldr	r1, [pc, #288]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005318:	2b00      	cmp	r3, #0
 800531a:	d015      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800531c:	4b43      	ldr	r3, [pc, #268]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005322:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532a:	4940      	ldr	r1, [pc, #256]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800533a:	d105      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800533c:	4b3b      	ldr	r3, [pc, #236]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a3a      	ldr	r2, [pc, #232]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005346:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005354:	4b35      	ldr	r3, [pc, #212]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005362:	4932      	ldr	r1, [pc, #200]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005372:	d105      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005374:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a2c      	ldr	r2, [pc, #176]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800538c:	4b27      	ldr	r3, [pc, #156]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005392:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	4924      	ldr	r1, [pc, #144]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ac:	4b1f      	ldr	r3, [pc, #124]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a1e      	ldr	r2, [pc, #120]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d015      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053c4:	4b19      	ldr	r3, [pc, #100]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d2:	4916      	ldr	r1, [pc, #88]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053e2:	d105      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e4:	4b11      	ldr	r3, [pc, #68]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4a10      	ldr	r2, [pc, #64]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d019      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053fc:	4b0b      	ldr	r3, [pc, #44]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	4908      	ldr	r1, [pc, #32]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800541a:	d109      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541c:	4b03      	ldr	r3, [pc, #12]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a02      	ldr	r2, [pc, #8]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005426:	60d3      	str	r3, [r2, #12]
 8005428:	e002      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800543c:	4b29      	ldr	r3, [pc, #164]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	4926      	ldr	r1, [pc, #152]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800545a:	d105      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800545c:	4b21      	ldr	r3, [pc, #132]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a20      	ldr	r2, [pc, #128]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005466:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005474:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005482:	4918      	ldr	r1, [pc, #96]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005492:	d105      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005494:	4b13      	ldr	r3, [pc, #76]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4a12      	ldr	r2, [pc, #72]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800549a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800549e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d015      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054ac:	4b0d      	ldr	r3, [pc, #52]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ba:	490a      	ldr	r1, [pc, #40]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054ca:	d105      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054cc:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4a04      	ldr	r2, [pc, #16]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80054d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000

080054e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e049      	b.n	800558e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fa4c 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f000 fc3a 	bl	8005da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e04c      	b.n	800564a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a26      	ldr	r2, [pc, #152]	@ (8005658 <HAL_TIM_Base_Start+0xc0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d022      	beq.n	8005608 <HAL_TIM_Base_Start+0x70>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ca:	d01d      	beq.n	8005608 <HAL_TIM_Base_Start+0x70>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a22      	ldr	r2, [pc, #136]	@ (800565c <HAL_TIM_Base_Start+0xc4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d018      	beq.n	8005608 <HAL_TIM_Base_Start+0x70>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a21      	ldr	r2, [pc, #132]	@ (8005660 <HAL_TIM_Base_Start+0xc8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <HAL_TIM_Base_Start+0x70>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005664 <HAL_TIM_Base_Start+0xcc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00e      	beq.n	8005608 <HAL_TIM_Base_Start+0x70>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005668 <HAL_TIM_Base_Start+0xd0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d009      	beq.n	8005608 <HAL_TIM_Base_Start+0x70>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1c      	ldr	r2, [pc, #112]	@ (800566c <HAL_TIM_Base_Start+0xd4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d004      	beq.n	8005608 <HAL_TIM_Base_Start+0x70>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_TIM_Base_Start+0xd8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d115      	bne.n	8005634 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	4b19      	ldr	r3, [pc, #100]	@ (8005674 <HAL_TIM_Base_Start+0xdc>)
 8005610:	4013      	ands	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b06      	cmp	r3, #6
 8005618:	d015      	beq.n	8005646 <HAL_TIM_Base_Start+0xae>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005620:	d011      	beq.n	8005646 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	e008      	b.n	8005646 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e000      	b.n	8005648 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40013400 	.word	0x40013400
 800566c:	40014000 	.word	0x40014000
 8005670:	40015000 	.word	0x40015000
 8005674:	00010007 	.word	0x00010007

08005678 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e049      	b.n	800571e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc f9cc 	bl	8001a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 fb72 	bl	8005da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <HAL_TIM_PWM_Start+0x24>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	bf14      	ite	ne
 8005744:	2301      	movne	r3, #1
 8005746:	2300      	moveq	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	e03c      	b.n	80057c6 <HAL_TIM_PWM_Start+0x9e>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d109      	bne.n	8005766 <HAL_TIM_PWM_Start+0x3e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b01      	cmp	r3, #1
 800575c:	bf14      	ite	ne
 800575e:	2301      	movne	r3, #1
 8005760:	2300      	moveq	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	e02f      	b.n	80057c6 <HAL_TIM_PWM_Start+0x9e>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d109      	bne.n	8005780 <HAL_TIM_PWM_Start+0x58>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	e022      	b.n	80057c6 <HAL_TIM_PWM_Start+0x9e>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b0c      	cmp	r3, #12
 8005784:	d109      	bne.n	800579a <HAL_TIM_PWM_Start+0x72>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b01      	cmp	r3, #1
 8005790:	bf14      	ite	ne
 8005792:	2301      	movne	r3, #1
 8005794:	2300      	moveq	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	e015      	b.n	80057c6 <HAL_TIM_PWM_Start+0x9e>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b10      	cmp	r3, #16
 800579e:	d109      	bne.n	80057b4 <HAL_TIM_PWM_Start+0x8c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	e008      	b.n	80057c6 <HAL_TIM_PWM_Start+0x9e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0a6      	b.n	800591c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <HAL_TIM_PWM_Start+0xb6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057dc:	e023      	b.n	8005826 <HAL_TIM_PWM_Start+0xfe>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_PWM_Start+0xc6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ec:	e01b      	b.n	8005826 <HAL_TIM_PWM_Start+0xfe>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d104      	bne.n	80057fe <HAL_TIM_PWM_Start+0xd6>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057fc:	e013      	b.n	8005826 <HAL_TIM_PWM_Start+0xfe>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b0c      	cmp	r3, #12
 8005802:	d104      	bne.n	800580e <HAL_TIM_PWM_Start+0xe6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800580c:	e00b      	b.n	8005826 <HAL_TIM_PWM_Start+0xfe>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b10      	cmp	r3, #16
 8005812:	d104      	bne.n	800581e <HAL_TIM_PWM_Start+0xf6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800581c:	e003      	b.n	8005826 <HAL_TIM_PWM_Start+0xfe>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 ff30 	bl	8006694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a3a      	ldr	r2, [pc, #232]	@ (8005924 <HAL_TIM_PWM_Start+0x1fc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d018      	beq.n	8005870 <HAL_TIM_PWM_Start+0x148>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a39      	ldr	r2, [pc, #228]	@ (8005928 <HAL_TIM_PWM_Start+0x200>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <HAL_TIM_PWM_Start+0x148>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a37      	ldr	r2, [pc, #220]	@ (800592c <HAL_TIM_PWM_Start+0x204>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00e      	beq.n	8005870 <HAL_TIM_PWM_Start+0x148>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a36      	ldr	r2, [pc, #216]	@ (8005930 <HAL_TIM_PWM_Start+0x208>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d009      	beq.n	8005870 <HAL_TIM_PWM_Start+0x148>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a34      	ldr	r2, [pc, #208]	@ (8005934 <HAL_TIM_PWM_Start+0x20c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <HAL_TIM_PWM_Start+0x148>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a33      	ldr	r2, [pc, #204]	@ (8005938 <HAL_TIM_PWM_Start+0x210>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d101      	bne.n	8005874 <HAL_TIM_PWM_Start+0x14c>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <HAL_TIM_PWM_Start+0x14e>
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a25      	ldr	r2, [pc, #148]	@ (8005924 <HAL_TIM_PWM_Start+0x1fc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_TIM_PWM_Start+0x1b2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589c:	d01d      	beq.n	80058da <HAL_TIM_PWM_Start+0x1b2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a26      	ldr	r2, [pc, #152]	@ (800593c <HAL_TIM_PWM_Start+0x214>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_TIM_PWM_Start+0x1b2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a24      	ldr	r2, [pc, #144]	@ (8005940 <HAL_TIM_PWM_Start+0x218>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_TIM_PWM_Start+0x1b2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a23      	ldr	r2, [pc, #140]	@ (8005944 <HAL_TIM_PWM_Start+0x21c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_TIM_PWM_Start+0x1b2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <HAL_TIM_PWM_Start+0x200>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_TIM_PWM_Start+0x1b2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a18      	ldr	r2, [pc, #96]	@ (800592c <HAL_TIM_PWM_Start+0x204>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_TIM_PWM_Start+0x1b2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <HAL_TIM_PWM_Start+0x210>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d115      	bne.n	8005906 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	4b19      	ldr	r3, [pc, #100]	@ (8005948 <HAL_TIM_PWM_Start+0x220>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d015      	beq.n	8005918 <HAL_TIM_PWM_Start+0x1f0>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058f2:	d011      	beq.n	8005918 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005904:	e008      	b.n	8005918 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e000      	b.n	800591a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005918:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40013400 	.word	0x40013400
 800592c:	40014000 	.word	0x40014000
 8005930:	40014400 	.word	0x40014400
 8005934:	40014800 	.word	0x40014800
 8005938:	40015000 	.word	0x40015000
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	40000c00 	.word	0x40000c00
 8005948:	00010007 	.word	0x00010007

0800594c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005966:	2302      	movs	r3, #2
 8005968:	e0ff      	b.n	8005b6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b14      	cmp	r3, #20
 8005976:	f200 80f0 	bhi.w	8005b5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800597a:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	080059d5 	.word	0x080059d5
 8005984:	08005b5b 	.word	0x08005b5b
 8005988:	08005b5b 	.word	0x08005b5b
 800598c:	08005b5b 	.word	0x08005b5b
 8005990:	08005a15 	.word	0x08005a15
 8005994:	08005b5b 	.word	0x08005b5b
 8005998:	08005b5b 	.word	0x08005b5b
 800599c:	08005b5b 	.word	0x08005b5b
 80059a0:	08005a57 	.word	0x08005a57
 80059a4:	08005b5b 	.word	0x08005b5b
 80059a8:	08005b5b 	.word	0x08005b5b
 80059ac:	08005b5b 	.word	0x08005b5b
 80059b0:	08005a97 	.word	0x08005a97
 80059b4:	08005b5b 	.word	0x08005b5b
 80059b8:	08005b5b 	.word	0x08005b5b
 80059bc:	08005b5b 	.word	0x08005b5b
 80059c0:	08005ad9 	.word	0x08005ad9
 80059c4:	08005b5b 	.word	0x08005b5b
 80059c8:	08005b5b 	.word	0x08005b5b
 80059cc:	08005b5b 	.word	0x08005b5b
 80059d0:	08005b19 	.word	0x08005b19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fa94 	bl	8005f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0208 	orr.w	r2, r2, #8
 80059ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0204 	bic.w	r2, r2, #4
 80059fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6999      	ldr	r1, [r3, #24]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	619a      	str	r2, [r3, #24]
      break;
 8005a12:	e0a5      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fb0e 	bl	800603c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6999      	ldr	r1, [r3, #24]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	021a      	lsls	r2, r3, #8
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	619a      	str	r2, [r3, #24]
      break;
 8005a54:	e084      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fb81 	bl	8006164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0208 	orr.w	r2, r2, #8
 8005a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0204 	bic.w	r2, r2, #4
 8005a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69d9      	ldr	r1, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	61da      	str	r2, [r3, #28]
      break;
 8005a94:	e064      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fbf3 	bl	8006288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69d9      	ldr	r1, [r3, #28]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	021a      	lsls	r2, r3, #8
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	61da      	str	r2, [r3, #28]
      break;
 8005ad6:	e043      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fc66 	bl	80063b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0208 	orr.w	r2, r2, #8
 8005af2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0204 	bic.w	r2, r2, #4
 8005b02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b16:	e023      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fcb0 	bl	8006484 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	021a      	lsls	r2, r3, #8
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b58:	e002      	b.n	8005b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop

08005b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIM_ConfigClockSource+0x1c>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e0f6      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x20a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005bae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a6f      	ldr	r2, [pc, #444]	@ (8005d88 <HAL_TIM_ConfigClockSource+0x214>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	f000 80c1 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005bd0:	4a6d      	ldr	r2, [pc, #436]	@ (8005d88 <HAL_TIM_ConfigClockSource+0x214>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	f200 80c6 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bd8:	4a6c      	ldr	r2, [pc, #432]	@ (8005d8c <HAL_TIM_ConfigClockSource+0x218>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	f000 80b9 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005be0:	4a6a      	ldr	r2, [pc, #424]	@ (8005d8c <HAL_TIM_ConfigClockSource+0x218>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	f200 80be 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005be8:	4a69      	ldr	r2, [pc, #420]	@ (8005d90 <HAL_TIM_ConfigClockSource+0x21c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	f000 80b1 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf0:	4a67      	ldr	r2, [pc, #412]	@ (8005d90 <HAL_TIM_ConfigClockSource+0x21c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	f200 80b6 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf8:	4a66      	ldr	r2, [pc, #408]	@ (8005d94 <HAL_TIM_ConfigClockSource+0x220>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	f000 80a9 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c00:	4a64      	ldr	r2, [pc, #400]	@ (8005d94 <HAL_TIM_ConfigClockSource+0x220>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	f200 80ae 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c08:	4a63      	ldr	r2, [pc, #396]	@ (8005d98 <HAL_TIM_ConfigClockSource+0x224>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	f000 80a1 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c10:	4a61      	ldr	r2, [pc, #388]	@ (8005d98 <HAL_TIM_ConfigClockSource+0x224>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f200 80a6 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c18:	4a60      	ldr	r2, [pc, #384]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x228>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f000 8099 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c20:	4a5e      	ldr	r2, [pc, #376]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x228>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f200 809e 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c2c:	f000 8091 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c34:	f200 8096 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c3c:	f000 8089 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c44:	f200 808e 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c4c:	d03e      	beq.n	8005ccc <HAL_TIM_ConfigClockSource+0x158>
 8005c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c52:	f200 8087 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c5a:	f000 8086 	beq.w	8005d6a <HAL_TIM_ConfigClockSource+0x1f6>
 8005c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c62:	d87f      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c64:	2b70      	cmp	r3, #112	@ 0x70
 8005c66:	d01a      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x12a>
 8005c68:	2b70      	cmp	r3, #112	@ 0x70
 8005c6a:	d87b      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c6c:	2b60      	cmp	r3, #96	@ 0x60
 8005c6e:	d050      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0x19e>
 8005c70:	2b60      	cmp	r3, #96	@ 0x60
 8005c72:	d877      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c74:	2b50      	cmp	r3, #80	@ 0x50
 8005c76:	d03c      	beq.n	8005cf2 <HAL_TIM_ConfigClockSource+0x17e>
 8005c78:	2b50      	cmp	r3, #80	@ 0x50
 8005c7a:	d873      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c7c:	2b40      	cmp	r3, #64	@ 0x40
 8005c7e:	d058      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x1be>
 8005c80:	2b40      	cmp	r3, #64	@ 0x40
 8005c82:	d86f      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c84:	2b30      	cmp	r3, #48	@ 0x30
 8005c86:	d064      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c88:	2b30      	cmp	r3, #48	@ 0x30
 8005c8a:	d86b      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d060      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d867      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d05c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d05a      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x1de>
 8005c9c:	e062      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cae:	f000 fcd1 	bl	8006654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	609a      	str	r2, [r3, #8]
      break;
 8005cca:	e04f      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cdc:	f000 fcba 	bl	8006654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cee:	609a      	str	r2, [r3, #8]
      break;
 8005cf0:	e03c      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f000 fc2c 	bl	800655c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2150      	movs	r1, #80	@ 0x50
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fc85 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005d10:	e02c      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 fc4b 	bl	80065ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2160      	movs	r1, #96	@ 0x60
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fc75 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005d30:	e01c      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 fc0c 	bl	800655c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2140      	movs	r1, #64	@ 0x40
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fc65 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005d50:	e00c      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f000 fc5c 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005d62:	e003      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
      break;
 8005d68:	e000      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	00100070 	.word	0x00100070
 8005d8c:	00100060 	.word	0x00100060
 8005d90:	00100050 	.word	0x00100050
 8005d94:	00100040 	.word	0x00100040
 8005d98:	00100030 	.word	0x00100030
 8005d9c:	00100020 	.word	0x00100020

08005da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a4c      	ldr	r2, [pc, #304]	@ (8005ee4 <TIM_Base_SetConfig+0x144>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d017      	beq.n	8005de8 <TIM_Base_SetConfig+0x48>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbe:	d013      	beq.n	8005de8 <TIM_Base_SetConfig+0x48>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a49      	ldr	r2, [pc, #292]	@ (8005ee8 <TIM_Base_SetConfig+0x148>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00f      	beq.n	8005de8 <TIM_Base_SetConfig+0x48>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a48      	ldr	r2, [pc, #288]	@ (8005eec <TIM_Base_SetConfig+0x14c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00b      	beq.n	8005de8 <TIM_Base_SetConfig+0x48>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a47      	ldr	r2, [pc, #284]	@ (8005ef0 <TIM_Base_SetConfig+0x150>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d007      	beq.n	8005de8 <TIM_Base_SetConfig+0x48>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a46      	ldr	r2, [pc, #280]	@ (8005ef4 <TIM_Base_SetConfig+0x154>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_Base_SetConfig+0x48>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a45      	ldr	r2, [pc, #276]	@ (8005ef8 <TIM_Base_SetConfig+0x158>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d108      	bne.n	8005dfa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a39      	ldr	r2, [pc, #228]	@ (8005ee4 <TIM_Base_SetConfig+0x144>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d023      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e08:	d01f      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a36      	ldr	r2, [pc, #216]	@ (8005ee8 <TIM_Base_SetConfig+0x148>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01b      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a35      	ldr	r2, [pc, #212]	@ (8005eec <TIM_Base_SetConfig+0x14c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d017      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a34      	ldr	r2, [pc, #208]	@ (8005ef0 <TIM_Base_SetConfig+0x150>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a33      	ldr	r2, [pc, #204]	@ (8005ef4 <TIM_Base_SetConfig+0x154>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00f      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a33      	ldr	r2, [pc, #204]	@ (8005efc <TIM_Base_SetConfig+0x15c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a32      	ldr	r2, [pc, #200]	@ (8005f00 <TIM_Base_SetConfig+0x160>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a31      	ldr	r2, [pc, #196]	@ (8005f04 <TIM_Base_SetConfig+0x164>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_Base_SetConfig+0xaa>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef8 <TIM_Base_SetConfig+0x158>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d108      	bne.n	8005e5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a18      	ldr	r2, [pc, #96]	@ (8005ee4 <TIM_Base_SetConfig+0x144>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d013      	beq.n	8005eb0 <TIM_Base_SetConfig+0x110>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef4 <TIM_Base_SetConfig+0x154>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00f      	beq.n	8005eb0 <TIM_Base_SetConfig+0x110>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a1a      	ldr	r2, [pc, #104]	@ (8005efc <TIM_Base_SetConfig+0x15c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00b      	beq.n	8005eb0 <TIM_Base_SetConfig+0x110>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a19      	ldr	r2, [pc, #100]	@ (8005f00 <TIM_Base_SetConfig+0x160>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d007      	beq.n	8005eb0 <TIM_Base_SetConfig+0x110>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a18      	ldr	r2, [pc, #96]	@ (8005f04 <TIM_Base_SetConfig+0x164>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_Base_SetConfig+0x110>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a13      	ldr	r2, [pc, #76]	@ (8005ef8 <TIM_Base_SetConfig+0x158>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d103      	bne.n	8005eb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d105      	bne.n	8005ed6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f023 0201 	bic.w	r2, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	611a      	str	r2, [r3, #16]
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40015000 	.word	0x40015000
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40014800 	.word	0x40014800

08005f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	f023 0201 	bic.w	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 0302 	bic.w	r3, r3, #2
 8005f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a30      	ldr	r2, [pc, #192]	@ (8006024 <TIM_OC1_SetConfig+0x11c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8006028 <TIM_OC1_SetConfig+0x120>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00f      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a2e      	ldr	r2, [pc, #184]	@ (800602c <TIM_OC1_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a2d      	ldr	r2, [pc, #180]	@ (8006030 <TIM_OC1_SetConfig+0x128>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d007      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a2c      	ldr	r2, [pc, #176]	@ (8006034 <TIM_OC1_SetConfig+0x12c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8006038 <TIM_OC1_SetConfig+0x130>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10c      	bne.n	8005faa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0308 	bic.w	r3, r3, #8
 8005f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 0304 	bic.w	r3, r3, #4
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a1d      	ldr	r2, [pc, #116]	@ (8006024 <TIM_OC1_SetConfig+0x11c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d013      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006028 <TIM_OC1_SetConfig+0x120>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00f      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800602c <TIM_OC1_SetConfig+0x124>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00b      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006030 <TIM_OC1_SetConfig+0x128>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d007      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a19      	ldr	r2, [pc, #100]	@ (8006034 <TIM_OC1_SetConfig+0x12c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d003      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a18      	ldr	r2, [pc, #96]	@ (8006038 <TIM_OC1_SetConfig+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d111      	bne.n	8005ffe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800
 8006038:	40015000 	.word	0x40015000

0800603c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f023 0210 	bic.w	r2, r3, #16
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0320 	bic.w	r3, r3, #32
 800608a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a2c      	ldr	r2, [pc, #176]	@ (800614c <TIM_OC2_SetConfig+0x110>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d007      	beq.n	80060b0 <TIM_OC2_SetConfig+0x74>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006150 <TIM_OC2_SetConfig+0x114>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_OC2_SetConfig+0x74>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006154 <TIM_OC2_SetConfig+0x118>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10d      	bne.n	80060cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1f      	ldr	r2, [pc, #124]	@ (800614c <TIM_OC2_SetConfig+0x110>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d013      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006150 <TIM_OC2_SetConfig+0x114>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00f      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1e      	ldr	r2, [pc, #120]	@ (8006158 <TIM_OC2_SetConfig+0x11c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	@ (800615c <TIM_OC2_SetConfig+0x120>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d007      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006160 <TIM_OC2_SetConfig+0x124>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a17      	ldr	r2, [pc, #92]	@ (8006154 <TIM_OC2_SetConfig+0x118>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d113      	bne.n	8006124 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800610a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40013400 	.word	0x40013400
 8006154:	40015000 	.word	0x40015000
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800

08006164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006270 <TIM_OC3_SetConfig+0x10c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d007      	beq.n	80061d6 <TIM_OC3_SetConfig+0x72>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006274 <TIM_OC3_SetConfig+0x110>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_OC3_SetConfig+0x72>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a29      	ldr	r2, [pc, #164]	@ (8006278 <TIM_OC3_SetConfig+0x114>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10d      	bne.n	80061f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006270 <TIM_OC3_SetConfig+0x10c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006274 <TIM_OC3_SetConfig+0x110>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00f      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1d      	ldr	r2, [pc, #116]	@ (800627c <TIM_OC3_SetConfig+0x118>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <TIM_OC3_SetConfig+0x11c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1b      	ldr	r2, [pc, #108]	@ (8006284 <TIM_OC3_SetConfig+0x120>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a16      	ldr	r2, [pc, #88]	@ (8006278 <TIM_OC3_SetConfig+0x114>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d113      	bne.n	800624a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	40012c00 	.word	0x40012c00
 8006274:	40013400 	.word	0x40013400
 8006278:	40015000 	.word	0x40015000
 800627c:	40014000 	.word	0x40014000
 8006280:	40014400 	.word	0x40014400
 8006284:	40014800 	.word	0x40014800

08006288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	031b      	lsls	r3, r3, #12
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006398 <TIM_OC4_SetConfig+0x110>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d007      	beq.n	80062fc <TIM_OC4_SetConfig+0x74>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a2b      	ldr	r2, [pc, #172]	@ (800639c <TIM_OC4_SetConfig+0x114>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_OC4_SetConfig+0x74>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a2a      	ldr	r2, [pc, #168]	@ (80063a0 <TIM_OC4_SetConfig+0x118>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d10d      	bne.n	8006318 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	031b      	lsls	r3, r3, #12
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a1f      	ldr	r2, [pc, #124]	@ (8006398 <TIM_OC4_SetConfig+0x110>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <TIM_OC4_SetConfig+0xc0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a1e      	ldr	r2, [pc, #120]	@ (800639c <TIM_OC4_SetConfig+0x114>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00f      	beq.n	8006348 <TIM_OC4_SetConfig+0xc0>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1e      	ldr	r2, [pc, #120]	@ (80063a4 <TIM_OC4_SetConfig+0x11c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00b      	beq.n	8006348 <TIM_OC4_SetConfig+0xc0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a1d      	ldr	r2, [pc, #116]	@ (80063a8 <TIM_OC4_SetConfig+0x120>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d007      	beq.n	8006348 <TIM_OC4_SetConfig+0xc0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a1c      	ldr	r2, [pc, #112]	@ (80063ac <TIM_OC4_SetConfig+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_OC4_SetConfig+0xc0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a17      	ldr	r2, [pc, #92]	@ (80063a0 <TIM_OC4_SetConfig+0x118>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d113      	bne.n	8006370 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800634e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006356:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	019b      	lsls	r3, r3, #6
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	019b      	lsls	r3, r3, #6
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40012c00 	.word	0x40012c00
 800639c:	40013400 	.word	0x40013400
 80063a0:	40015000 	.word	0x40015000
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800

080063b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80063f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a19      	ldr	r2, [pc, #100]	@ (800646c <TIM_OC5_SetConfig+0xbc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <TIM_OC5_SetConfig+0x82>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a18      	ldr	r2, [pc, #96]	@ (8006470 <TIM_OC5_SetConfig+0xc0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00f      	beq.n	8006432 <TIM_OC5_SetConfig+0x82>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a17      	ldr	r2, [pc, #92]	@ (8006474 <TIM_OC5_SetConfig+0xc4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00b      	beq.n	8006432 <TIM_OC5_SetConfig+0x82>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a16      	ldr	r2, [pc, #88]	@ (8006478 <TIM_OC5_SetConfig+0xc8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d007      	beq.n	8006432 <TIM_OC5_SetConfig+0x82>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a15      	ldr	r2, [pc, #84]	@ (800647c <TIM_OC5_SetConfig+0xcc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <TIM_OC5_SetConfig+0x82>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a14      	ldr	r2, [pc, #80]	@ (8006480 <TIM_OC5_SetConfig+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d109      	bne.n	8006446 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006438:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40013400 	.word	0x40013400
 8006474:	40014000 	.word	0x40014000
 8006478:	40014400 	.word	0x40014400
 800647c:	40014800 	.word	0x40014800
 8006480:	40015000 	.word	0x40015000

08006484 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	051b      	lsls	r3, r3, #20
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a1a      	ldr	r2, [pc, #104]	@ (8006544 <TIM_OC6_SetConfig+0xc0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d013      	beq.n	8006508 <TIM_OC6_SetConfig+0x84>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a19      	ldr	r2, [pc, #100]	@ (8006548 <TIM_OC6_SetConfig+0xc4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00f      	beq.n	8006508 <TIM_OC6_SetConfig+0x84>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a18      	ldr	r2, [pc, #96]	@ (800654c <TIM_OC6_SetConfig+0xc8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00b      	beq.n	8006508 <TIM_OC6_SetConfig+0x84>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a17      	ldr	r2, [pc, #92]	@ (8006550 <TIM_OC6_SetConfig+0xcc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <TIM_OC6_SetConfig+0x84>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a16      	ldr	r2, [pc, #88]	@ (8006554 <TIM_OC6_SetConfig+0xd0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_OC6_SetConfig+0x84>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a15      	ldr	r2, [pc, #84]	@ (8006558 <TIM_OC6_SetConfig+0xd4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d109      	bne.n	800651c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800650e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	029b      	lsls	r3, r3, #10
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40012c00 	.word	0x40012c00
 8006548:	40013400 	.word	0x40013400
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400
 8006554:	40014800 	.word	0x40014800
 8006558:	40015000 	.word	0x40015000

0800655c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0201 	bic.w	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f023 030a 	bic.w	r3, r3, #10
 8006598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b087      	sub	sp, #28
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f023 0210 	bic.w	r2, r3, #16
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	031b      	lsls	r3, r3, #12
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	f043 0307 	orr.w	r3, r3, #7
 8006640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800666e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	021a      	lsls	r2, r3, #8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	431a      	orrs	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4313      	orrs	r3, r2
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	609a      	str	r2, [r3, #8]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2201      	movs	r2, #1
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1a      	ldr	r2, [r3, #32]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	43db      	mvns	r3, r3
 80066b6:	401a      	ands	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a1a      	ldr	r2, [r3, #32]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	fa01 f303 	lsl.w	r3, r1, r3
 80066cc:	431a      	orrs	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e074      	b.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a34      	ldr	r2, [pc, #208]	@ (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a33      	ldr	r2, [pc, #204]	@ (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a31      	ldr	r2, [pc, #196]	@ (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d108      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800673c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800674e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d022      	beq.n	80067b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006778:	d01d      	beq.n	80067b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1f      	ldr	r2, [pc, #124]	@ (80067fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d018      	beq.n	80067b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1d      	ldr	r2, [pc, #116]	@ (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d013      	beq.n	80067b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1c      	ldr	r2, [pc, #112]	@ (8006804 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00e      	beq.n	80067b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a15      	ldr	r2, [pc, #84]	@ (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d009      	beq.n	80067b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a18      	ldr	r2, [pc, #96]	@ (8006808 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d004      	beq.n	80067b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a11      	ldr	r2, [pc, #68]	@ (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10c      	bne.n	80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40015000 	.word	0x40015000
 80067fc:	40000400 	.word	0x40000400
 8006800:	40000800 	.word	0x40000800
 8006804:	40000c00 	.word	0x40000c00
 8006808:	40014000 	.word	0x40014000

0800680c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006824:	2302      	movs	r3, #2
 8006826:	e078      	b.n	800691a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	041b      	lsls	r3, r3, #16
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006928 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d009      	beq.n	80068ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1b      	ldr	r2, [pc, #108]	@ (800692c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d004      	beq.n	80068ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a19      	ldr	r2, [pc, #100]	@ (8006930 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d11c      	bne.n	8006908 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d8:	051b      	lsls	r3, r3, #20
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40013400 	.word	0x40013400
 8006930:	40015000 	.word	0x40015000

08006934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e042      	b.n	80069cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fb f95d 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2224      	movs	r2, #36	@ 0x24
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fb24 	bl	8006fcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f825 	bl	80069d4 <UART_SetConfig>
 800698a:	4603      	mov	r3, r0
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e01b      	b.n	80069cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fba3 	bl	8007110 <UART_CheckIdleState>
 80069ca:	4603      	mov	r3, r0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b08c      	sub	sp, #48	@ 0x30
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4baa      	ldr	r3, [pc, #680]	@ (8006cac <UART_SetConfig+0x2d8>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a9f      	ldr	r2, [pc, #636]	@ (8006cb0 <UART_SetConfig+0x2dc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5e:	f023 010f 	bic.w	r1, r3, #15
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a90      	ldr	r2, [pc, #576]	@ (8006cb4 <UART_SetConfig+0x2e0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d125      	bne.n	8006ac4 <UART_SetConfig+0xf0>
 8006a78:	4b8f      	ldr	r3, [pc, #572]	@ (8006cb8 <UART_SetConfig+0x2e4>)
 8006a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d81a      	bhi.n	8006abc <UART_SetConfig+0xe8>
 8006a86:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <UART_SetConfig+0xb8>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006aad 	.word	0x08006aad
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa2:	e116      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e112      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006aac:	2304      	movs	r3, #4
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e10e      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e10a      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006abc:	2310      	movs	r3, #16
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e106      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a7c      	ldr	r2, [pc, #496]	@ (8006cbc <UART_SetConfig+0x2e8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d138      	bne.n	8006b40 <UART_SetConfig+0x16c>
 8006ace:	4b7a      	ldr	r3, [pc, #488]	@ (8006cb8 <UART_SetConfig+0x2e4>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad4:	f003 030c 	and.w	r3, r3, #12
 8006ad8:	2b0c      	cmp	r3, #12
 8006ada:	d82d      	bhi.n	8006b38 <UART_SetConfig+0x164>
 8006adc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae4 <UART_SetConfig+0x110>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006b19 	.word	0x08006b19
 8006ae8:	08006b39 	.word	0x08006b39
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b29 	.word	0x08006b29
 8006af8:	08006b39 	.word	0x08006b39
 8006afc:	08006b39 	.word	0x08006b39
 8006b00:	08006b39 	.word	0x08006b39
 8006b04:	08006b21 	.word	0x08006b21
 8006b08:	08006b39 	.word	0x08006b39
 8006b0c:	08006b39 	.word	0x08006b39
 8006b10:	08006b39 	.word	0x08006b39
 8006b14:	08006b31 	.word	0x08006b31
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1e:	e0d8      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b20:	2302      	movs	r3, #2
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	e0d4      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e0d0      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b30:	2308      	movs	r3, #8
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e0cc      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e0c8      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a5e      	ldr	r2, [pc, #376]	@ (8006cc0 <UART_SetConfig+0x2ec>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d125      	bne.n	8006b96 <UART_SetConfig+0x1c2>
 8006b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8006cb8 <UART_SetConfig+0x2e4>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b54:	2b30      	cmp	r3, #48	@ 0x30
 8006b56:	d016      	beq.n	8006b86 <UART_SetConfig+0x1b2>
 8006b58:	2b30      	cmp	r3, #48	@ 0x30
 8006b5a:	d818      	bhi.n	8006b8e <UART_SetConfig+0x1ba>
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d00a      	beq.n	8006b76 <UART_SetConfig+0x1a2>
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d814      	bhi.n	8006b8e <UART_SetConfig+0x1ba>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <UART_SetConfig+0x19a>
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d008      	beq.n	8006b7e <UART_SetConfig+0x1aa>
 8006b6c:	e00f      	b.n	8006b8e <UART_SetConfig+0x1ba>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b74:	e0ad      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b76:	2302      	movs	r3, #2
 8006b78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7c:	e0a9      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b7e:	2304      	movs	r3, #4
 8006b80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b84:	e0a5      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b86:	2308      	movs	r3, #8
 8006b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8c:	e0a1      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b8e:	2310      	movs	r3, #16
 8006b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b94:	e09d      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8006cc4 <UART_SetConfig+0x2f0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d125      	bne.n	8006bec <UART_SetConfig+0x218>
 8006ba0:	4b45      	ldr	r3, [pc, #276]	@ (8006cb8 <UART_SetConfig+0x2e4>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006baa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bac:	d016      	beq.n	8006bdc <UART_SetConfig+0x208>
 8006bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bb0:	d818      	bhi.n	8006be4 <UART_SetConfig+0x210>
 8006bb2:	2b80      	cmp	r3, #128	@ 0x80
 8006bb4:	d00a      	beq.n	8006bcc <UART_SetConfig+0x1f8>
 8006bb6:	2b80      	cmp	r3, #128	@ 0x80
 8006bb8:	d814      	bhi.n	8006be4 <UART_SetConfig+0x210>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <UART_SetConfig+0x1f0>
 8006bbe:	2b40      	cmp	r3, #64	@ 0x40
 8006bc0:	d008      	beq.n	8006bd4 <UART_SetConfig+0x200>
 8006bc2:	e00f      	b.n	8006be4 <UART_SetConfig+0x210>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bca:	e082      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd2:	e07e      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bda:	e07a      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be2:	e076      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bea:	e072      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a35      	ldr	r2, [pc, #212]	@ (8006cc8 <UART_SetConfig+0x2f4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d12a      	bne.n	8006c4c <UART_SetConfig+0x278>
 8006bf6:	4b30      	ldr	r3, [pc, #192]	@ (8006cb8 <UART_SetConfig+0x2e4>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c04:	d01a      	beq.n	8006c3c <UART_SetConfig+0x268>
 8006c06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c0a:	d81b      	bhi.n	8006c44 <UART_SetConfig+0x270>
 8006c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c10:	d00c      	beq.n	8006c2c <UART_SetConfig+0x258>
 8006c12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c16:	d815      	bhi.n	8006c44 <UART_SetConfig+0x270>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <UART_SetConfig+0x250>
 8006c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c20:	d008      	beq.n	8006c34 <UART_SetConfig+0x260>
 8006c22:	e00f      	b.n	8006c44 <UART_SetConfig+0x270>
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2a:	e052      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c32:	e04e      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c3a:	e04a      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c42:	e046      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c44:	2310      	movs	r3, #16
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	e042      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a17      	ldr	r2, [pc, #92]	@ (8006cb0 <UART_SetConfig+0x2dc>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d13a      	bne.n	8006ccc <UART_SetConfig+0x2f8>
 8006c56:	4b18      	ldr	r3, [pc, #96]	@ (8006cb8 <UART_SetConfig+0x2e4>)
 8006c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c64:	d01a      	beq.n	8006c9c <UART_SetConfig+0x2c8>
 8006c66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c6a:	d81b      	bhi.n	8006ca4 <UART_SetConfig+0x2d0>
 8006c6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c70:	d00c      	beq.n	8006c8c <UART_SetConfig+0x2b8>
 8006c72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c76:	d815      	bhi.n	8006ca4 <UART_SetConfig+0x2d0>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <UART_SetConfig+0x2b0>
 8006c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c80:	d008      	beq.n	8006c94 <UART_SetConfig+0x2c0>
 8006c82:	e00f      	b.n	8006ca4 <UART_SetConfig+0x2d0>
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8a:	e022      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c92:	e01e      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c94:	2304      	movs	r3, #4
 8006c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c9a:	e01a      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca2:	e016      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006caa:	e012      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006cac:	cfff69f3 	.word	0xcfff69f3
 8006cb0:	40008000 	.word	0x40008000
 8006cb4:	40013800 	.word	0x40013800
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	40004400 	.word	0x40004400
 8006cc0:	40004800 	.word	0x40004800
 8006cc4:	40004c00 	.word	0x40004c00
 8006cc8:	40005000 	.word	0x40005000
 8006ccc:	2310      	movs	r3, #16
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4aae      	ldr	r2, [pc, #696]	@ (8006f90 <UART_SetConfig+0x5bc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	f040 8097 	bne.w	8006e0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d823      	bhi.n	8006d2e <UART_SetConfig+0x35a>
 8006ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <UART_SetConfig+0x318>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d2f 	.word	0x08006d2f
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d2f 	.word	0x08006d2f
 8006cfc:	08006d1f 	.word	0x08006d1f
 8006d00:	08006d2f 	.word	0x08006d2f
 8006d04:	08006d2f 	.word	0x08006d2f
 8006d08:	08006d2f 	.word	0x08006d2f
 8006d0c:	08006d27 	.word	0x08006d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d10:	f7fe f92a 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8006d14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d16:	e010      	b.n	8006d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d18:	4b9e      	ldr	r3, [pc, #632]	@ (8006f94 <UART_SetConfig+0x5c0>)
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d1c:	e00d      	b.n	8006d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d1e:	f7fe f8b5 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8006d22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d24:	e009      	b.n	8006d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d2c:	e005      	b.n	8006d3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8130 	beq.w	8006fa2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	4a94      	ldr	r2, [pc, #592]	@ (8006f98 <UART_SetConfig+0x5c4>)
 8006d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d305      	bcc.n	8006d72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d903      	bls.n	8006d7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d78:	e113      	b.n	8006fa2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	60fa      	str	r2, [r7, #12]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	4a84      	ldr	r2, [pc, #528]	@ (8006f98 <UART_SetConfig+0x5c4>)
 8006d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2200      	movs	r2, #0
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d9c:	f7f9 fa3c 	bl	8000218 <__aeabi_uldivmod>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4610      	mov	r0, r2
 8006da6:	4619      	mov	r1, r3
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	020b      	lsls	r3, r1, #8
 8006db2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006db6:	0202      	lsls	r2, r0, #8
 8006db8:	6979      	ldr	r1, [r7, #20]
 8006dba:	6849      	ldr	r1, [r1, #4]
 8006dbc:	0849      	lsrs	r1, r1, #1
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	eb12 0804 	adds.w	r8, r2, r4
 8006dc8:	eb43 0905 	adc.w	r9, r3, r5
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	469a      	mov	sl, r3
 8006dd4:	4693      	mov	fp, r2
 8006dd6:	4652      	mov	r2, sl
 8006dd8:	465b      	mov	r3, fp
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7f9 fa1b 	bl	8000218 <__aeabi_uldivmod>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4613      	mov	r3, r2
 8006de8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006df0:	d308      	bcc.n	8006e04 <UART_SetConfig+0x430>
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006df8:	d204      	bcs.n	8006e04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6a3a      	ldr	r2, [r7, #32]
 8006e00:	60da      	str	r2, [r3, #12]
 8006e02:	e0ce      	b.n	8006fa2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e0a:	e0ca      	b.n	8006fa2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e14:	d166      	bne.n	8006ee4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d827      	bhi.n	8006e6e <UART_SetConfig+0x49a>
 8006e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <UART_SetConfig+0x450>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	08006e6f 	.word	0x08006e6f
 8006e34:	08006e5f 	.word	0x08006e5f
 8006e38:	08006e6f 	.word	0x08006e6f
 8006e3c:	08006e6f 	.word	0x08006e6f
 8006e40:	08006e6f 	.word	0x08006e6f
 8006e44:	08006e67 	.word	0x08006e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e48:	f7fe f88e 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8006e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e4e:	e014      	b.n	8006e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e50:	f7fe f8a0 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8006e54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e56:	e010      	b.n	8006e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e58:	4b4e      	ldr	r3, [pc, #312]	@ (8006f94 <UART_SetConfig+0x5c0>)
 8006e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e5c:	e00d      	b.n	8006e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5e:	f7fe f815 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8006e62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e64:	e009      	b.n	8006e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e6c:	e005      	b.n	8006e7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8090 	beq.w	8006fa2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	4a44      	ldr	r2, [pc, #272]	@ (8006f98 <UART_SetConfig+0x5c4>)
 8006e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e94:	005a      	lsls	r2, r3, #1
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	441a      	add	r2, r3
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	2b0f      	cmp	r3, #15
 8006eac:	d916      	bls.n	8006edc <UART_SetConfig+0x508>
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb4:	d212      	bcs.n	8006edc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f023 030f 	bic.w	r3, r3, #15
 8006ebe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	8bfb      	ldrh	r3, [r7, #30]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	8bfa      	ldrh	r2, [r7, #30]
 8006ed8:	60da      	str	r2, [r3, #12]
 8006eda:	e062      	b.n	8006fa2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ee2:	e05e      	b.n	8006fa2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d828      	bhi.n	8006f3e <UART_SetConfig+0x56a>
 8006eec:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef4 <UART_SetConfig+0x520>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	08006f3f 	.word	0x08006f3f
 8006f04:	08006f2f 	.word	0x08006f2f
 8006f08:	08006f3f 	.word	0x08006f3f
 8006f0c:	08006f3f 	.word	0x08006f3f
 8006f10:	08006f3f 	.word	0x08006f3f
 8006f14:	08006f37 	.word	0x08006f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f18:	f7fe f826 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8006f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f1e:	e014      	b.n	8006f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f20:	f7fe f838 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8006f24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f26:	e010      	b.n	8006f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f28:	4b1a      	ldr	r3, [pc, #104]	@ (8006f94 <UART_SetConfig+0x5c0>)
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f2c:	e00d      	b.n	8006f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fd ffad 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8006f32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f34:	e009      	b.n	8006f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f3c:	e005      	b.n	8006f4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f48:	bf00      	nop
    }

    if (pclk != 0U)
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d028      	beq.n	8006fa2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	4a10      	ldr	r2, [pc, #64]	@ (8006f98 <UART_SetConfig+0x5c4>)
 8006f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	441a      	add	r2, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d910      	bls.n	8006f9c <UART_SetConfig+0x5c8>
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f80:	d20c      	bcs.n	8006f9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60da      	str	r2, [r3, #12]
 8006f8c:	e009      	b.n	8006fa2 <UART_SetConfig+0x5ce>
 8006f8e:	bf00      	nop
 8006f90:	40008000 	.word	0x40008000
 8006f94:	00f42400 	.word	0x00f42400
 8006f98:	08007698 	.word	0x08007698
      }
      else
      {
        ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fbe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3730      	adds	r7, #48	@ 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ca:	d10a      	bne.n	80070e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b098      	sub	sp, #96	@ 0x60
 8007114:	af02      	add	r7, sp, #8
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007120:	f7fa febc 	bl	8001e9c <HAL_GetTick>
 8007124:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b08      	cmp	r3, #8
 8007132:	d12f      	bne.n	8007194 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007134:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800713c:	2200      	movs	r2, #0
 800713e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f88e 	bl	8007264 <UART_WaitOnFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d022      	beq.n	8007194 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800715c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007162:	653b      	str	r3, [r7, #80]	@ 0x50
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800716c:	647b      	str	r3, [r7, #68]	@ 0x44
 800716e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800717a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e6      	bne.n	800714e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e063      	b.n	800725c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d149      	bne.n	8007236 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071aa:	2200      	movs	r2, #0
 80071ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f857 	bl	8007264 <UART_WaitOnFlagUntilTimeout>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d03c      	beq.n	8007236 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071da:	633b      	str	r3, [r7, #48]	@ 0x30
 80071dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e6      	bne.n	80071bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3308      	adds	r3, #8
 80071f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3308      	adds	r3, #8
 800720c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800720e:	61fa      	str	r2, [r7, #28]
 8007210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	69b9      	ldr	r1, [r7, #24]
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	617b      	str	r3, [r7, #20]
   return(result);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e5      	bne.n	80071ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e012      	b.n	800725c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3758      	adds	r7, #88	@ 0x58
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007274:	e04f      	b.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d04b      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727e:	f7fa fe0d 	bl	8001e9c <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	429a      	cmp	r2, r3
 800728c:	d302      	bcc.n	8007294 <UART_WaitOnFlagUntilTimeout+0x30>
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e04e      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d037      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b80      	cmp	r3, #128	@ 0x80
 80072aa:	d034      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b40      	cmp	r3, #64	@ 0x40
 80072b0:	d031      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d110      	bne.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2208      	movs	r2, #8
 80072c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f838 	bl	800733e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2208      	movs	r2, #8
 80072d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e029      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072f0:	d111      	bne.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f81e 	bl	800733e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e00f      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	4013      	ands	r3, r2
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	429a      	cmp	r2, r3
 8007324:	bf0c      	ite	eq
 8007326:	2301      	moveq	r3, #1
 8007328:	2300      	movne	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	429a      	cmp	r2, r3
 8007332:	d0a0      	beq.n	8007276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800733e:	b480      	push	{r7}
 8007340:	b095      	sub	sp, #84	@ 0x54
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007356:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800735a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007364:	643b      	str	r3, [r7, #64]	@ 0x40
 8007366:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800736a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	61fb      	str	r3, [r7, #28]
   return(result);
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800738e:	f023 0301 	bic.w	r3, r3, #1
 8007392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3308      	adds	r3, #8
 800739a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800739c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800739e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e3      	bne.n	8007378 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d118      	bne.n	80073ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f023 0310 	bic.w	r3, r3, #16
 80073cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d6:	61bb      	str	r3, [r7, #24]
 80073d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6979      	ldr	r1, [r7, #20]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	613b      	str	r3, [r7, #16]
   return(result);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e6      	bne.n	80073b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073fe:	bf00      	nop
 8007400:	3754      	adds	r7, #84	@ 0x54
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_UARTEx_DisableFifoMode+0x16>
 800741c:	2302      	movs	r3, #2
 800741e:	e027      	b.n	8007470 <HAL_UARTEx_DisableFifoMode+0x66>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2224      	movs	r2, #36	@ 0x24
 800742c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800744e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007490:	2302      	movs	r3, #2
 8007492:	e02d      	b.n	80074f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2224      	movs	r2, #36	@ 0x24
 80074a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f84f 	bl	8007574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e02d      	b.n	800756c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2224      	movs	r2, #36	@ 0x24
 800751c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0201 	bic.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f811 	bl	8007574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007580:	2b00      	cmp	r3, #0
 8007582:	d108      	bne.n	8007596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007594:	e031      	b.n	80075fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007596:	2308      	movs	r3, #8
 8007598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800759a:	2308      	movs	r3, #8
 800759c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	0e5b      	lsrs	r3, r3, #25
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	0f5b      	lsrs	r3, r3, #29
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	7b3a      	ldrb	r2, [r7, #12]
 80075c2:	4911      	ldr	r1, [pc, #68]	@ (8007608 <UARTEx_SetNbDataToProcess+0x94>)
 80075c4:	5c8a      	ldrb	r2, [r1, r2]
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ca:	7b3a      	ldrb	r2, [r7, #12]
 80075cc:	490f      	ldr	r1, [pc, #60]	@ (800760c <UARTEx_SetNbDataToProcess+0x98>)
 80075ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	7b7a      	ldrb	r2, [r7, #13]
 80075e0:	4909      	ldr	r1, [pc, #36]	@ (8007608 <UARTEx_SetNbDataToProcess+0x94>)
 80075e2:	5c8a      	ldrb	r2, [r1, r2]
 80075e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075e8:	7b7a      	ldrb	r2, [r7, #13]
 80075ea:	4908      	ldr	r1, [pc, #32]	@ (800760c <UARTEx_SetNbDataToProcess+0x98>)
 80075ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	080076b0 	.word	0x080076b0
 800760c:	080076b8 	.word	0x080076b8

08007610 <memset>:
 8007610:	4402      	add	r2, r0
 8007612:	4603      	mov	r3, r0
 8007614:	4293      	cmp	r3, r2
 8007616:	d100      	bne.n	800761a <memset+0xa>
 8007618:	4770      	bx	lr
 800761a:	f803 1b01 	strb.w	r1, [r3], #1
 800761e:	e7f9      	b.n	8007614 <memset+0x4>

08007620 <__libc_init_array>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4d0d      	ldr	r5, [pc, #52]	@ (8007658 <__libc_init_array+0x38>)
 8007624:	4c0d      	ldr	r4, [pc, #52]	@ (800765c <__libc_init_array+0x3c>)
 8007626:	1b64      	subs	r4, r4, r5
 8007628:	10a4      	asrs	r4, r4, #2
 800762a:	2600      	movs	r6, #0
 800762c:	42a6      	cmp	r6, r4
 800762e:	d109      	bne.n	8007644 <__libc_init_array+0x24>
 8007630:	4d0b      	ldr	r5, [pc, #44]	@ (8007660 <__libc_init_array+0x40>)
 8007632:	4c0c      	ldr	r4, [pc, #48]	@ (8007664 <__libc_init_array+0x44>)
 8007634:	f000 f818 	bl	8007668 <_init>
 8007638:	1b64      	subs	r4, r4, r5
 800763a:	10a4      	asrs	r4, r4, #2
 800763c:	2600      	movs	r6, #0
 800763e:	42a6      	cmp	r6, r4
 8007640:	d105      	bne.n	800764e <__libc_init_array+0x2e>
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	f855 3b04 	ldr.w	r3, [r5], #4
 8007648:	4798      	blx	r3
 800764a:	3601      	adds	r6, #1
 800764c:	e7ee      	b.n	800762c <__libc_init_array+0xc>
 800764e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007652:	4798      	blx	r3
 8007654:	3601      	adds	r6, #1
 8007656:	e7f2      	b.n	800763e <__libc_init_array+0x1e>
 8007658:	080076c8 	.word	0x080076c8
 800765c:	080076c8 	.word	0x080076c8
 8007660:	080076c8 	.word	0x080076c8
 8007664:	080076cc 	.word	0x080076cc

08007668 <_init>:
 8007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766a:	bf00      	nop
 800766c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766e:	bc08      	pop	{r3}
 8007670:	469e      	mov	lr, r3
 8007672:	4770      	bx	lr

08007674 <_fini>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr
