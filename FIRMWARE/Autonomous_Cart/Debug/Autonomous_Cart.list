
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004460  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004680  08004680  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  08004694  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004694  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109d4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bb  00000000  00000000  00030a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6a  00000000  00000000  00033898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261a3  00000000  00000000  00034302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a1b  00000000  00000000  0005a4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcadf  00000000  00000000  0006aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000390c  00000000  00000000  001679a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0016b2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004620 	.word	0x08004620

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004620 	.word	0x08004620

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd3d 	bl	8000f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f828 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa16 	bl	8000950 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f9ca 	bl	80008bc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000528:	f000 f86e 	bl	8000608 <MX_ADC1_Init>
  MX_ADC2_Init();
 800052c:	f000 f8e6 	bl	80006fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000530:	f000 f94c 	bl	80007cc <MX_ADC3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port,YELLOW_LED_Pin);
 8000534:	2120      	movs	r1, #32
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f002 f969 	bl	8002810 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
 800053e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f002 f963 	bl	8002810 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
 800054a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f002 f95d 	bl	8002810 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port,BLUE_LED_Pin);
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0x58>)
 800055c:	f002 f958 	bl	8002810 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000564:	f000 fd88 	bl	8001078 <HAL_Delay>
	HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port,YELLOW_LED_Pin);
 8000568:	e7e4      	b.n	8000534 <main+0x20>
 800056a:	bf00      	nop
 800056c:	48000400 	.word	0x48000400

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2238      	movs	r2, #56	; 0x38
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 f822 	bl	80045c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000592:	2000      	movs	r0, #0
 8000594:	f002 f97a 	bl	800288c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	2340      	movs	r3, #64	; 0x40
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005b2:	2355      	movs	r3, #85	; 0x55
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fa14 	bl	80029f4 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d2:	f000 fb0d 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fd12 	bl	8003018 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005fa:	f000 faf9 	bl	8000bf0 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f003 ffd1 	bl	80045c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000626:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000628:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800062c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062e:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000630:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000650:	2204      	movs	r2, #4
 8000652:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000662:	2201      	movs	r2, #1
 8000664:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_ADC1_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC1_Init+0xe8>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	4817      	ldr	r0, [pc, #92]	; (80006f0 <MX_ADC1_Init+0xe8>)
 8000692:	f000 fee9 	bl	8001468 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800069c:	f000 faa8 	bl	8000bf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a8:	4619      	mov	r1, r3
 80006aa:	4811      	ldr	r0, [pc, #68]	; (80006f0 <MX_ADC1_Init+0xe8>)
 80006ac:	f001 fcfe 	bl	80020ac <HAL_ADCEx_MultiModeConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006b6:	f000 fa9b 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_ADC1_Init+0xec>)
 80006bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006be:	2306      	movs	r3, #6
 80006c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_ADC1_Init+0xf0>)
 80006c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ca:	2304      	movs	r3, #4
 80006cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <MX_ADC1_Init+0xe8>)
 80006d8:	f001 f882 	bl	80017e0 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006e2:	f000 fa85 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3730      	adds	r7, #48	; 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	04300002 	.word	0x04300002
 80006f8:	407f0000 	.word	0x407f0000

080006fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f003 ff5d 	bl	80045c8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000710:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <MX_ADC2_Init+0xc4>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000716:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800071a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_ADC2_Init+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000736:	2204      	movs	r2, #4
 8000738:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000748:	2201      	movs	r2, #1
 800074a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_ADC2_Init+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_ADC2_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_ADC2_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000778:	f000 fe76 	bl	8001468 <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 fa35 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC2_Init+0xc8>)
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_ADC2_Init+0xcc>)
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC2_Init+0xc0>)
 80007a4:	f001 f81c 	bl	80017e0 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ae:	f000 fa1f 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000094 	.word	0x20000094
 80007c0:	50000100 	.word	0x50000100
 80007c4:	0c900008 	.word	0x0c900008
 80007c8:	407f0000 	.word	0x407f0000

080007cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2220      	movs	r2, #32
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 feef 	bl	80045c8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ea:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <MX_ADC3_Init+0xe4>)
 80007ec:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <MX_ADC3_Init+0xe8>)
 80007ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f0:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <MX_ADC3_Init+0xe4>)
 80007f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_ADC3_Init+0xe4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_ADC3_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000812:	2204      	movs	r2, #4
 8000814:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_ADC3_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000824:	2201      	movs	r2, #1
 8000826:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_ADC3_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000832:	2200      	movs	r2, #0
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_ADC3_Init+0xe4>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_ADC3_Init+0xe4>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000852:	4817      	ldr	r0, [pc, #92]	; (80008b0 <MX_ADC3_Init+0xe4>)
 8000854:	f000 fe08 	bl	8001468 <HAL_ADC_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800085e:	f000 f9c7 	bl	8000bf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <MX_ADC3_Init+0xe4>)
 800086e:	f001 fc1d 	bl	80020ac <HAL_ADCEx_MultiModeConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000878:	f000 f9ba 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_ADC3_Init+0xec>)
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000880:	2306      	movs	r3, #6
 8000882:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000888:	237f      	movs	r3, #127	; 0x7f
 800088a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088c:	2304      	movs	r3, #4
 800088e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_ADC3_Init+0xe4>)
 800089a:	f000 ffa1 	bl	80017e0 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80008a4:	f000 f9a4 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3730      	adds	r7, #48	; 0x30
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000100 	.word	0x20000100
 80008b4:	50000400 	.word	0x50000400
 80008b8:	14f00020 	.word	0x14f00020

080008bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008c2:	4a22      	ldr	r2, [pc, #136]	; (800094c <MX_LPUART1_UART_Init+0x90>)
 80008c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 8000900:	f002 fff4 	bl	80038ec <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f971 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 8000912:	f003 fd8f 	bl	8004434 <HAL_UARTEx_SetTxFifoThreshold>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800091c:	f000 f968 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4809      	ldr	r0, [pc, #36]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 8000924:	f003 fdc4 	bl	80044b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800092e:	f000 f95f 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_LPUART1_UART_Init+0x8c>)
 8000934:	f003 fd45 	bl	80043c2 <HAL_UARTEx_DisableFifoMode>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800093e:	f000 f957 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000016c 	.word	0x2000016c
 800094c:	40008000 	.word	0x40008000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b9e      	ldr	r3, [pc, #632]	; (8000be0 <MX_GPIO_Init+0x290>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a9d      	ldr	r2, [pc, #628]	; (8000be0 <MX_GPIO_Init+0x290>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b9b      	ldr	r3, [pc, #620]	; (8000be0 <MX_GPIO_Init+0x290>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097e:	4b98      	ldr	r3, [pc, #608]	; (8000be0 <MX_GPIO_Init+0x290>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a97      	ldr	r2, [pc, #604]	; (8000be0 <MX_GPIO_Init+0x290>)
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b95      	ldr	r3, [pc, #596]	; (8000be0 <MX_GPIO_Init+0x290>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0320 	and.w	r3, r3, #32
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b92      	ldr	r3, [pc, #584]	; (8000be0 <MX_GPIO_Init+0x290>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a91      	ldr	r2, [pc, #580]	; (8000be0 <MX_GPIO_Init+0x290>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b8f      	ldr	r3, [pc, #572]	; (8000be0 <MX_GPIO_Init+0x290>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b8c      	ldr	r3, [pc, #560]	; (8000be0 <MX_GPIO_Init+0x290>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a8b      	ldr	r2, [pc, #556]	; (8000be0 <MX_GPIO_Init+0x290>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b89      	ldr	r3, [pc, #548]	; (8000be0 <MX_GPIO_Init+0x290>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b86      	ldr	r3, [pc, #536]	; (8000be0 <MX_GPIO_Init+0x290>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a85      	ldr	r2, [pc, #532]	; (8000be0 <MX_GPIO_Init+0x290>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b83      	ldr	r3, [pc, #524]	; (8000be0 <MX_GPIO_Init+0x290>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|LEFT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f001 fefa 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RIGHT_MOTOR_DIR_IN1_Pin|LEFT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|RIGHT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 80009f2:	487c      	ldr	r0, [pc, #496]	; (8000be4 <MX_GPIO_Init+0x294>)
 80009f4:	f001 fef4 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin BT_ENTER_Pin BT_DOWN_Pin BT_LEFT_Pin
                           BT_RIGHT_Pin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 80009f8:	f242 33a0 	movw	r3, #9120	; 0x23a0
 80009fc:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4876      	ldr	r0, [pc, #472]	; (8000be8 <MX_GPIO_Init+0x298>)
 8000a10:	f001 fd64 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_MOTOR_PWM_Pin RIGHT_MOTOR_PWM_Pin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8000a14:	2303      	movs	r3, #3
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a24:	2302      	movs	r3, #2
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	486e      	ldr	r0, [pc, #440]	; (8000be8 <MX_GPIO_Init+0x298>)
 8000a30:	f001 fd54 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASSONIC_ECO_Pin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8000a34:	2310      	movs	r3, #16
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a44:	2302      	movs	r3, #2
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f001 fd43 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LED_Pin LEFT_MOTOR_DIR_IN4_Pin RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|LEFT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8000a56:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f001 fd33 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASSONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 8000a76:	2304      	movs	r3, #4
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8000a86:	2303      	movs	r3, #3
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4854      	ldr	r0, [pc, #336]	; (8000be4 <MX_GPIO_Init+0x294>)
 8000a92:	f001 fd23 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_RX_Pin BLUETOOTH_TX_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8000a96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	484c      	ldr	r0, [pc, #304]	; (8000be4 <MX_GPIO_Init+0x294>)
 8000ab4:	f001 fd12 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_MOTOR_DIR_IN1_Pin LEFT_MOTOR_DIR_IN3_Pin BLUE_LED_Pin RIGHT_MOTOR_DIR_IN2_Pin */
  GPIO_InitStruct.Pin = RIGHT_MOTOR_DIR_IN1_Pin|LEFT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|RIGHT_MOTOR_DIR_IN2_Pin;
 8000ab8:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4844      	ldr	r0, [pc, #272]	; (8000be4 <MX_GPIO_Init+0x294>)
 8000ad2:	f001 fd03 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : IR4_AD_Pin */
  GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000adc:	2303      	movs	r3, #3
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	483e      	ldr	r0, [pc, #248]	; (8000be4 <MX_GPIO_Init+0x294>)
 8000aec:	f001 fcf6 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : IR5_AD_Pin */
  GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	2303      	movs	r3, #3
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 fce8 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_PWM_Pin */
  GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8000b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f001 fcd6 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_SPI_SCK_Pin IMU_SPI_MISO_Pin IMU_SPI_MOSI_Pin */
  GPIO_InitStruct.Pin = IMU_SPI_SCK_Pin|IMU_SPI_MISO_Pin|IMU_SPI_MOSI_Pin;
 8000b30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b42:	2306      	movs	r3, #6
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4826      	ldr	r0, [pc, #152]	; (8000be8 <MX_GPIO_Init+0x298>)
 8000b4e:	f001 fcc5 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_FRONTAL_Pin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8000b52:	2304      	movs	r3, #4
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4821      	ldr	r0, [pc, #132]	; (8000bec <MX_GPIO_Init+0x29c>)
 8000b68:	f001 fcb8 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_ENCODER_Pin */
  GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4817      	ldr	r0, [pc, #92]	; (8000be4 <MX_GPIO_Init+0x294>)
 8000b88:	f001 fca8 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_ENCODER_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480f      	ldr	r0, [pc, #60]	; (8000be4 <MX_GPIO_Init+0x294>)
 8000ba8:	f001 fc98 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_UP_Pin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8000bac:	2340      	movs	r3, #64	; 0x40
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <MX_GPIO_Init+0x294>)
 8000bc2:	f001 fc8b 	bl	80024dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2028      	movs	r0, #40	; 0x28
 8000bcc:	f001 fc51 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd0:	2028      	movs	r0, #40	; 0x28
 8000bd2:	f001 fc68 	bl	80024a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000c00 	.word	0x48000c00

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c32:	f001 fecf 	bl	80029d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0a2      	sub	sp, #136	; 0x88
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	2254      	movs	r2, #84	; 0x54
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fcaf 	bl	80045c8 <memset>
  if(hadc->Instance==ADC1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c72:	d13e      	bne.n	8000cf2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c7a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c7e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fbe3 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c90:	f7ff ffae 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c94:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <HAL_ADC_MspInit+0x1b4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a57      	ldr	r2, [pc, #348]	; (8000df8 <HAL_ADC_MspInit+0x1b4>)
 8000c9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c9e:	4b56      	ldr	r3, [pc, #344]	; (8000df8 <HAL_ADC_MspInit+0x1b4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10b      	bne.n	8000cbe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ca6:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a54      	ldr	r2, [pc, #336]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a4e      	ldr	r2, [pc, #312]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin|DISTANCE_IR_FRONTAL_Pin;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f001 fbf6 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000cf0:	e07d      	b.n	8000dee <HAL_ADC_MspInit+0x1aa>
  else if(hadc->Instance==ADC2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <HAL_ADC_MspInit+0x1bc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d13e      	bne.n	8000d7a <HAL_ADC_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d02:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d06:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fb9f 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8000d18:	f7ff ff6a 	bl	8000bf0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <HAL_ADC_MspInit+0x1b4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a35      	ldr	r2, [pc, #212]	; (8000df8 <HAL_ADC_MspInit+0x1b4>)
 8000d24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d26:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <HAL_ADC_MspInit+0x1b4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d10b      	bne.n	8000d46 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d2e:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000d34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a2c      	ldr	r2, [pc, #176]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000d5e:	23c0      	movs	r3, #192	; 0xc0
 8000d60:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d62:	2303      	movs	r3, #3
 8000d64:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f001 fbb2 	bl	80024dc <HAL_GPIO_Init>
}
 8000d78:	e039      	b.n	8000dee <HAL_ADC_MspInit+0x1aa>
  else if(hadc->Instance==ADC3)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_ADC_MspInit+0x1c0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d134      	bne.n	8000dee <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000d8e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fb5b 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8000da0:	f7ff ff26 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_ADC_MspInit+0x1b8>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000de6:	4619      	mov	r1, r3
 8000de8:	4807      	ldr	r0, [pc, #28]	; (8000e08 <HAL_ADC_MspInit+0x1c4>)
 8000dea:	f001 fb77 	bl	80024dc <HAL_GPIO_Init>
}
 8000dee:	bf00      	nop
 8000df0:	3788      	adds	r7, #136	; 0x88
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000200 	.word	0x20000200
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	50000100 	.word	0x50000100
 8000e04:	50000400 	.word	0x50000400
 8000e08:	48000400 	.word	0x48000400

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b09e      	sub	sp, #120	; 0x78
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2254      	movs	r2, #84	; 0x54
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fbcb 	bl	80045c8 <memset>
  if(huart->Instance==LPUART1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <HAL_UART_MspInit+0xa8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d136      	bne.n	8000eaa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 fb01 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff fecc 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e5c:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f001 fb19 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3778      	adds	r7, #120	; 0x78
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40008000 	.word	0x40008000
 8000eb8:	40021000 	.word	0x40021000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f898 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f18:	f001 fc94 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f48:	f7ff ffea 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f003 fb31 	bl	80045d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f7ff facd 	bl	8000514 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   r0, =_estack
 8000f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f88:	08004688 	.word	0x08004688
  ldr r2, =_sbss
 8000f8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f90:	20000208 	.word	0x20000208

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>

08000f96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f001 fa5b 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f80e 	bl	8000fc8 <HAL_InitTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e001      	b.n	8000fbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb8:	f7ff fe20 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_InitTick+0x68>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d022      	beq.n	8001022 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_InitTick+0x6c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_InitTick+0x68>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fa66 	bl	80024c2 <HAL_SYSTICK_Config>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10f      	bne.n	800101c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	d809      	bhi.n	8001016 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001002:	2200      	movs	r2, #0
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	f001 fa32 	bl	8002472 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_InitTick+0x70>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e007      	b.n	8001026 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e004      	b.n	8001026 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e001      	b.n	8001026 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000000 	.word	0x20000000
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_IncTick+0x1c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x20>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4413      	add	r3, r2
 800104a:	4a03      	ldr	r2, [pc, #12]	; (8001058 <HAL_IncTick+0x1c>)
 800104c:	6013      	str	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000204 	.word	0x20000204
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000204 	.word	0x20000204

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d004      	beq.n	800109c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_Delay+0x40>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109c:	bf00      	nop
 800109e:	f7ff ffdf 	bl	8001060 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8f7      	bhi.n	800109e <HAL_Delay+0x26>
  {
  }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000008 	.word	0x20000008

080010bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3360      	adds	r3, #96	; 0x60
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <LL_ADC_SetOffset+0x44>)
 8001146:	4013      	ands	r3, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	4313      	orrs	r3, r2
 8001154:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800115c:	bf00      	nop
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	03fff000 	.word	0x03fff000

0800116c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3360      	adds	r3, #96	; 0x60
 800117a:	461a      	mov	r2, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3360      	adds	r3, #96	; 0x60
 80011a8:	461a      	mov	r2, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	431a      	orrs	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b087      	sub	sp, #28
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3360      	adds	r3, #96	; 0x60
 80011de:	461a      	mov	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3360      	adds	r3, #96	; 0x60
 8001214:	461a      	mov	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800122e:	bf00      	nop
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	615a      	str	r2, [r3, #20]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3330      	adds	r3, #48	; 0x30
 8001270:	461a      	mov	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	4413      	add	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	211f      	movs	r1, #31
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	401a      	ands	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	0e9b      	lsrs	r3, r3, #26
 8001298:	f003 011f 	and.w	r1, r3, #31
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	431a      	orrs	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3314      	adds	r3, #20
 80012c8:	461a      	mov	r2, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	0e5b      	lsrs	r3, r3, #25
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	0d1b      	lsrs	r3, r3, #20
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	2107      	movs	r1, #7
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	401a      	ands	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	0d1b      	lsrs	r3, r3, #20
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001302:	bf00      	nop
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0318 	and.w	r3, r3, #24
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001334:	40d9      	lsrs	r1, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	400b      	ands	r3, r1
 800133a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800133e:	431a      	orrs	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	0007ffff 	.word	0x0007ffff

08001358 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6093      	str	r3, [r2, #8]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800138c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001390:	d101      	bne.n	8001396 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013e0:	d101      	bne.n	80013e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <LL_ADC_IsEnabled+0x18>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_ADC_IsEnabled+0x1a>
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b04      	cmp	r3, #4
 800142c:	d101      	bne.n	8001432 <LL_ADC_REG_IsConversionOngoing+0x18>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b08      	cmp	r3, #8
 8001452:	d101      	bne.n	8001458 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e1a9      	b.n	80017d6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fbd7 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff67 	bl	800137c <LL_ADC_IsDeepPowerDownEnabled>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff4d 	bl	8001358 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff82 	bl	80013cc <LL_ADC_IsInternalRegulatorEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff66 	bl	80013a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014d8:	4b9c      	ldr	r3, [pc, #624]	; (800174c <HAL_ADC_Init+0x2e4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	4a9c      	ldr	r2, [pc, #624]	; (8001750 <HAL_ADC_Init+0x2e8>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	3301      	adds	r3, #1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff64 	bl	80013cc <LL_ADC_IsInternalRegulatorEnabled>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10d      	bne.n	8001526 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	f043 0210 	orr.w	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff75 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 8001530:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 8142 	bne.w	80017c4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 813e 	bne.w	80017c4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001550:	f043 0202 	orr.w	r2, r3, #2
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff49 	bl	80013f4 <LL_ADC_IsEnabled>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d141      	bne.n	80015ec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001570:	d004      	beq.n	800157c <HAL_ADC_Init+0x114>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_ADC_Init+0x2ec>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d10f      	bne.n	800159c <HAL_ADC_Init+0x134>
 800157c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001580:	f7ff ff38 	bl	80013f4 <LL_ADC_IsEnabled>
 8001584:	4604      	mov	r4, r0
 8001586:	4873      	ldr	r0, [pc, #460]	; (8001754 <HAL_ADC_Init+0x2ec>)
 8001588:	f7ff ff34 	bl	80013f4 <LL_ADC_IsEnabled>
 800158c:	4603      	mov	r3, r0
 800158e:	4323      	orrs	r3, r4
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e012      	b.n	80015c2 <HAL_ADC_Init+0x15a>
 800159c:	486e      	ldr	r0, [pc, #440]	; (8001758 <HAL_ADC_Init+0x2f0>)
 800159e:	f7ff ff29 	bl	80013f4 <LL_ADC_IsEnabled>
 80015a2:	4604      	mov	r4, r0
 80015a4:	486d      	ldr	r0, [pc, #436]	; (800175c <HAL_ADC_Init+0x2f4>)
 80015a6:	f7ff ff25 	bl	80013f4 <LL_ADC_IsEnabled>
 80015aa:	4603      	mov	r3, r0
 80015ac:	431c      	orrs	r4, r3
 80015ae:	486c      	ldr	r0, [pc, #432]	; (8001760 <HAL_ADC_Init+0x2f8>)
 80015b0:	f7ff ff20 	bl	80013f4 <LL_ADC_IsEnabled>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4323      	orrs	r3, r4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ce:	d004      	beq.n	80015da <HAL_ADC_Init+0x172>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a5f      	ldr	r2, [pc, #380]	; (8001754 <HAL_ADC_Init+0x2ec>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_ADC_Init+0x176>
 80015da:	4a62      	ldr	r2, [pc, #392]	; (8001764 <HAL_ADC_Init+0x2fc>)
 80015dc:	e000      	b.n	80015e0 <HAL_ADC_Init+0x178>
 80015de:	4a62      	ldr	r2, [pc, #392]	; (8001768 <HAL_ADC_Init+0x300>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f7ff fd68 	bl	80010bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7f5b      	ldrb	r3, [r3, #29]
 80015f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80015fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001602:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800160a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001616:	2b01      	cmp	r3, #1
 8001618:	d106      	bne.n	8001628 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	3b01      	subs	r3, #1
 8001620:	045b      	lsls	r3, r3, #17
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d009      	beq.n	8001644 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	4b48      	ldr	r3, [pc, #288]	; (800176c <HAL_ADC_Init+0x304>)
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	430b      	orrs	r3, r1
 8001656:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fee4 	bl	8001440 <LL_ADC_INJ_IsConversionOngoing>
 8001678:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d17f      	bne.n	8001780 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d17c      	bne.n	8001780 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800168a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001692:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a2:	f023 0302 	bic.w	r3, r3, #2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	430b      	orrs	r3, r1
 80016ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d017      	beq.n	80016e8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6911      	ldr	r1, [r2, #16]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80016e6:	e013      	b.n	8001710 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001708:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800170c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001716:	2b01      	cmp	r3, #1
 8001718:	d12a      	bne.n	8001770 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800173c:	430a      	orrs	r2, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	e019      	b.n	8001780 <HAL_ADC_Init+0x318>
 800174c:	20000000 	.word	0x20000000
 8001750:	053e2d63 	.word	0x053e2d63
 8001754:	50000100 	.word	0x50000100
 8001758:	50000400 	.word	0x50000400
 800175c:	50000500 	.word	0x50000500
 8001760:	50000600 	.word	0x50000600
 8001764:	50000300 	.word	0x50000300
 8001768:	50000700 	.word	0x50000700
 800176c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10c      	bne.n	80017a2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f023 010f 	bic.w	r1, r3, #15
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	631a      	str	r2, [r3, #48]	; 0x30
 80017a0:	e007      	b.n	80017b2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 020f 	bic.w	r2, r2, #15
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	f043 0201 	orr.w	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80017c2:	e007      	b.n	80017d4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	f043 0210 	orr.w	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop

080017e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0b6      	sub	sp, #216	; 0xd8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d102      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x24>
 80017fe:	2302      	movs	r3, #2
 8001800:	f000 bc13 	b.w	800202a <HAL_ADC_ConfigChannel+0x84a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe02 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 83f3 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	f7ff fd18 	bl	8001260 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fdf0 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 800183a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fdfc 	bl	8001440 <LL_ADC_INJ_IsConversionOngoing>
 8001848:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800184c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 81d9 	bne.w	8001c08 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 81d4 	bne.w	8001c08 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001868:	d10f      	bne.n	800188a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff fd1f 	bl	80012b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fcd9 	bl	800123a <LL_ADC_SetSamplingTimeCommonConfig>
 8001888:	e00e      	b.n	80018a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	461a      	mov	r2, r3
 8001898:	f7ff fd0e 	bl	80012b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fcc9 	bl	800123a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d022      	beq.n	8001910 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6919      	ldr	r1, [r3, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018da:	f7ff fc23 	bl	8001124 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6919      	ldr	r1, [r3, #16]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f7ff fc6f 	bl	80011ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x126>
 8001900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001904:	e000      	b.n	8001908 <HAL_ADC_ConfigChannel+0x128>
 8001906:	2300      	movs	r3, #0
 8001908:	461a      	mov	r2, r3
 800190a:	f7ff fc7b 	bl	8001204 <LL_ADC_SetOffsetSaturation>
 800190e:	e17b      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fc28 	bl	800116c <LL_ADC_GetOffsetChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10a      	bne.n	800193c <HAL_ADC_ConfigChannel+0x15c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fc1d 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	0e9b      	lsrs	r3, r3, #26
 8001936:	f003 021f 	and.w	r2, r3, #31
 800193a:	e01e      	b.n	800197a <HAL_ADC_ConfigChannel+0x19a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fc12 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800195a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800195e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800196a:	2320      	movs	r3, #32
 800196c:	e004      	b.n	8001978 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800196e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001982:	2b00      	cmp	r3, #0
 8001984:	d105      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x1b2>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0e9b      	lsrs	r3, r3, #26
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	e018      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1e4>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e004      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80019ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d106      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fbe1 	bl	8001198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fbc5 	bl	800116c <LL_ADC_GetOffsetChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10a      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x222>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fbba 	bl	800116c <LL_ADC_GetOffsetChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	0e9b      	lsrs	r3, r3, #26
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	e01e      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x260>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2101      	movs	r1, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fbaf 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001a30:	2320      	movs	r3, #32
 8001a32:	e004      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x278>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	e018      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x2aa>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e004      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d106      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fb7e 	bl	8001198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fb62 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x2e8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fb57 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	e01e      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x326>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2102      	movs	r1, #2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fb4c 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001af6:	2320      	movs	r3, #32
 8001af8:	e004      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x33e>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0e9b      	lsrs	r3, r3, #26
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	e016      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x36c>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e004      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d106      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	2102      	movs	r1, #2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fb1d 	bl	8001198 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2103      	movs	r1, #3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fb01 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10a      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x3aa>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2103      	movs	r1, #3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff faf6 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	e017      	b.n	8001bba <HAL_ADC_ConfigChannel+0x3da>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2103      	movs	r1, #3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff faeb 	bl	800116c <LL_ADC_GetOffsetChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e003      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x3f2>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0e9b      	lsrs	r3, r3, #26
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	e011      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x416>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001be2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001bea:	2320      	movs	r3, #32
 8001bec:	e003      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d106      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2103      	movs	r1, #3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fac8 	bl	8001198 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fbf1 	bl	80013f4 <LL_ADC_IsEnabled>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 813d 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f7ff fb72 	bl	8001310 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4aa2      	ldr	r2, [pc, #648]	; (8001ebc <HAL_ADC_ConfigChannel+0x6dc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f040 812e 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10b      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x480>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	e019      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x4b4>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c70:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	e003      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2b09      	cmp	r3, #9
 8001c8c:	bf94      	ite	ls
 8001c8e:	2301      	movls	r3, #1
 8001c90:	2300      	movhi	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d079      	beq.n	8001d8c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x4d4>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	3301      	adds	r3, #1
 8001cac:	069b      	lsls	r3, r3, #26
 8001cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb2:	e015      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x500>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e003      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	069b      	lsls	r3, r3, #26
 8001cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x520>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	e017      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x550>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e003      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	ea42 0103 	orr.w	r1, r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x576>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	3301      	adds	r3, #1
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	051b      	lsls	r3, r3, #20
 8001d54:	e018      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x5a8>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	e07e      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x5c8>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0e9b      	lsrs	r3, r3, #26
 8001d9e:	3301      	adds	r3, #1
 8001da0:	069b      	lsls	r3, r3, #26
 8001da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da6:	e015      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x5f4>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	e003      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	069b      	lsls	r3, r3, #26
 8001dd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x614>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	3301      	adds	r3, #1
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	e017      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x644>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	61fb      	str	r3, [r7, #28]
  return result;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	e003      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	ea42 0103 	orr.w	r1, r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x670>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0e9b      	lsrs	r3, r3, #26
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	3b1e      	subs	r3, #30
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	e01b      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x6a8>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	613b      	str	r3, [r7, #16]
  return result;
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e003      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f003 021f 	and.w	r2, r3, #31
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b1e      	subs	r3, #30
 8001e82:	051b      	lsls	r3, r3, #20
 8001e84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7ff fa12 	bl	80012b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_ADC_ConfigChannel+0x6e0>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80be 	beq.w	800201e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eaa:	d004      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x6d6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_ADC_ConfigChannel+0x6e4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10a      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x6ec>
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <HAL_ADC_ConfigChannel+0x6e8>)
 8001eb8:	e009      	b.n	8001ece <HAL_ADC_ConfigChannel+0x6ee>
 8001eba:	bf00      	nop
 8001ebc:	407f0000 	.word	0x407f0000
 8001ec0:	80080000 	.word	0x80080000
 8001ec4:	50000100 	.word	0x50000100
 8001ec8:	50000300 	.word	0x50000300
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_ADC_ConfigChannel+0x854>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f91a 	bl	8001108 <LL_ADC_GetCommonPathInternalCh>
 8001ed4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a56      	ldr	r2, [pc, #344]	; (8002038 <HAL_ADC_ConfigChannel+0x858>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_ADC_ConfigChannel+0x70c>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a55      	ldr	r2, [pc, #340]	; (800203c <HAL_ADC_ConfigChannel+0x85c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d13a      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d134      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f00:	d005      	beq.n	8001f0e <HAL_ADC_ConfigChannel+0x72e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_ADC_ConfigChannel+0x860>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	f040 8085 	bne.w	8002018 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f16:	d004      	beq.n	8001f22 <HAL_ADC_ConfigChannel+0x742>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a49      	ldr	r2, [pc, #292]	; (8002044 <HAL_ADC_ConfigChannel+0x864>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x746>
 8001f22:	4a49      	ldr	r2, [pc, #292]	; (8002048 <HAL_ADC_ConfigChannel+0x868>)
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x748>
 8001f26:	4a43      	ldr	r2, [pc, #268]	; (8002034 <HAL_ADC_ConfigChannel+0x854>)
 8001f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f7ff f8d5 	bl	80010e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f38:	4b44      	ldr	r3, [pc, #272]	; (800204c <HAL_ADC_ConfigChannel+0x86c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	4a44      	ldr	r2, [pc, #272]	; (8002050 <HAL_ADC_ConfigChannel+0x870>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f52:	e002      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f9      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f60:	e05a      	b.n	8002018 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <HAL_ADC_ConfigChannel+0x874>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d125      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d11f      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <HAL_ADC_ConfigChannel+0x864>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d104      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x7ac>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a34      	ldr	r2, [pc, #208]	; (8002058 <HAL_ADC_ConfigChannel+0x878>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d047      	beq.n	800201c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f94:	d004      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x7c0>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <HAL_ADC_ConfigChannel+0x864>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x7c4>
 8001fa0:	4a29      	ldr	r2, [pc, #164]	; (8002048 <HAL_ADC_ConfigChannel+0x868>)
 8001fa2:	e000      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x7c6>
 8001fa4:	4a23      	ldr	r2, [pc, #140]	; (8002034 <HAL_ADC_ConfigChannel+0x854>)
 8001fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7ff f896 	bl	80010e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fb6:	e031      	b.n	800201c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <HAL_ADC_ConfigChannel+0x87c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d12d      	bne.n	800201e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d127      	bne.n	800201e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_ADC_ConfigChannel+0x864>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d022      	beq.n	800201e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe0:	d004      	beq.n	8001fec <HAL_ADC_ConfigChannel+0x80c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_ADC_ConfigChannel+0x864>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x810>
 8001fec:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_ADC_ConfigChannel+0x868>)
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x812>
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <HAL_ADC_ConfigChannel+0x854>)
 8001ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f7ff f870 	bl	80010e2 <LL_ADC_SetCommonPathInternalCh>
 8002002:	e00c      	b.n	800201e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002016:	e002      	b.n	800201e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002018:	bf00      	nop
 800201a:	e000      	b.n	800201e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800201c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002026:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800202a:	4618      	mov	r0, r3
 800202c:	37d8      	adds	r7, #216	; 0xd8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	50000700 	.word	0x50000700
 8002038:	c3210000 	.word	0xc3210000
 800203c:	90c00010 	.word	0x90c00010
 8002040:	50000600 	.word	0x50000600
 8002044:	50000100 	.word	0x50000100
 8002048:	50000300 	.word	0x50000300
 800204c:	20000000 	.word	0x20000000
 8002050:	053e2d63 	.word	0x053e2d63
 8002054:	c7520000 	.word	0xc7520000
 8002058:	50000500 	.word	0x50000500
 800205c:	cb840000 	.word	0xcb840000

08002060 <LL_ADC_IsEnabled>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <LL_ADC_IsEnabled+0x18>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <LL_ADC_IsEnabled+0x1a>
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_ADC_REG_IsConversionOngoing>:
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d101      	bne.n	800209e <LL_ADC_REG_IsConversionOngoing+0x18>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b0a1      	sub	sp, #132	; 0x84
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e0e7      	b.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020d2:	2300      	movs	r3, #0
 80020d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020d6:	2300      	movs	r3, #0
 80020d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e2:	d102      	bne.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020e4:	4b6f      	ldr	r3, [pc, #444]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	e009      	b.n	80020fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6e      	ldr	r2, [pc, #440]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d102      	bne.n	80020fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80020f4:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	e001      	b.n	80020fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0be      	b.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ffb1 	bl	8002086 <LL_ADC_REG_IsConversionOngoing>
 8002124:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ffab 	bl	8002086 <LL_ADC_REG_IsConversionOngoing>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 80a0 	bne.w	8002278 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 809c 	bne.w	8002278 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002148:	d004      	beq.n	8002154 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a55      	ldr	r2, [pc, #340]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002154:	4b56      	ldr	r3, [pc, #344]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002156:	e000      	b.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002158:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800215a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d04b      	beq.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002176:	035b      	lsls	r3, r3, #13
 8002178:	430b      	orrs	r3, r1
 800217a:	431a      	orrs	r2, r3
 800217c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800217e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002188:	d004      	beq.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a45      	ldr	r2, [pc, #276]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d10f      	bne.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002194:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002198:	f7ff ff62 	bl	8002060 <LL_ADC_IsEnabled>
 800219c:	4604      	mov	r4, r0
 800219e:	4841      	ldr	r0, [pc, #260]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021a0:	f7ff ff5e 	bl	8002060 <LL_ADC_IsEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4323      	orrs	r3, r4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e012      	b.n	80021da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80021b4:	483c      	ldr	r0, [pc, #240]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80021b6:	f7ff ff53 	bl	8002060 <LL_ADC_IsEnabled>
 80021ba:	4604      	mov	r4, r0
 80021bc:	483b      	ldr	r0, [pc, #236]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80021be:	f7ff ff4f 	bl	8002060 <LL_ADC_IsEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	431c      	orrs	r4, r3
 80021c6:	483c      	ldr	r0, [pc, #240]	; (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80021c8:	f7ff ff4a 	bl	8002060 <LL_ADC_IsEnabled>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4323      	orrs	r3, r4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d056      	beq.n	800228c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021e6:	f023 030f 	bic.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	6811      	ldr	r1, [r2, #0]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	6892      	ldr	r2, [r2, #8]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	431a      	orrs	r2, r3
 80021f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021fa:	e047      	b.n	800228c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002206:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002210:	d004      	beq.n	800221c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d10f      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800221c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002220:	f7ff ff1e 	bl	8002060 <LL_ADC_IsEnabled>
 8002224:	4604      	mov	r4, r0
 8002226:	481f      	ldr	r0, [pc, #124]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002228:	f7ff ff1a 	bl	8002060 <LL_ADC_IsEnabled>
 800222c:	4603      	mov	r3, r0
 800222e:	4323      	orrs	r3, r4
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e012      	b.n	8002262 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800223c:	481a      	ldr	r0, [pc, #104]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800223e:	f7ff ff0f 	bl	8002060 <LL_ADC_IsEnabled>
 8002242:	4604      	mov	r4, r0
 8002244:	4819      	ldr	r0, [pc, #100]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002246:	f7ff ff0b 	bl	8002060 <LL_ADC_IsEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	431c      	orrs	r4, r3
 800224e:	481a      	ldr	r0, [pc, #104]	; (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002250:	f7ff ff06 	bl	8002060 <LL_ADC_IsEnabled>
 8002254:	4603      	mov	r3, r0
 8002256:	4323      	orrs	r3, r4
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d012      	beq.n	800228c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800226e:	f023 030f 	bic.w	r3, r3, #15
 8002272:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002274:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002276:	e009      	b.n	800228c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	f043 0220 	orr.w	r2, r3, #32
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800228a:	e000      	b.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800228c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002296:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800229a:	4618      	mov	r0, r3
 800229c:	3784      	adds	r7, #132	; 0x84
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	50000100 	.word	0x50000100
 80022a8:	50000400 	.word	0x50000400
 80022ac:	50000500 	.word	0x50000500
 80022b0:	50000300 	.word	0x50000300
 80022b4:	50000700 	.word	0x50000700
 80022b8:	50000600 	.word	0x50000600

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ee:	4a04      	ldr	r2, [pc, #16]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60d3      	str	r3, [r2, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	; (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff40 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff90 	bl	80023b0 <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5f 	bl	800235c <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff33 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa4 	bl	8002418 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024ea:	e15a      	b.n	80027a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 814c 	beq.w	800279c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d005      	beq.n	800251c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002518:	2b02      	cmp	r3, #2
 800251a:	d130      	bne.n	800257e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002552:	2201      	movs	r2, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 0201 	and.w	r2, r3, #1
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b03      	cmp	r3, #3
 8002588:	d017      	beq.n	80025ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d123      	bne.n	800260e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	08da      	lsrs	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3208      	adds	r2, #8
 8002608:	6939      	ldr	r1, [r7, #16]
 800260a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0203 	and.w	r2, r3, #3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80a6 	beq.w	800279c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002650:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <HAL_GPIO_Init+0x2e4>)
 8002652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002654:	4a5a      	ldr	r2, [pc, #360]	; (80027c0 <HAL_GPIO_Init+0x2e4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6613      	str	r3, [r2, #96]	; 0x60
 800265c:	4b58      	ldr	r3, [pc, #352]	; (80027c0 <HAL_GPIO_Init+0x2e4>)
 800265e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002668:	4a56      	ldr	r2, [pc, #344]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002692:	d01f      	beq.n	80026d4 <HAL_GPIO_Init+0x1f8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d019      	beq.n	80026d0 <HAL_GPIO_Init+0x1f4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a4b      	ldr	r2, [pc, #300]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d013      	beq.n	80026cc <HAL_GPIO_Init+0x1f0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a4a      	ldr	r2, [pc, #296]	; (80027d0 <HAL_GPIO_Init+0x2f4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00d      	beq.n	80026c8 <HAL_GPIO_Init+0x1ec>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a49      	ldr	r2, [pc, #292]	; (80027d4 <HAL_GPIO_Init+0x2f8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d007      	beq.n	80026c4 <HAL_GPIO_Init+0x1e8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a48      	ldr	r2, [pc, #288]	; (80027d8 <HAL_GPIO_Init+0x2fc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_GPIO_Init+0x1e4>
 80026bc:	2305      	movs	r3, #5
 80026be:	e00a      	b.n	80026d6 <HAL_GPIO_Init+0x1fa>
 80026c0:	2306      	movs	r3, #6
 80026c2:	e008      	b.n	80026d6 <HAL_GPIO_Init+0x1fa>
 80026c4:	2304      	movs	r3, #4
 80026c6:	e006      	b.n	80026d6 <HAL_GPIO_Init+0x1fa>
 80026c8:	2303      	movs	r3, #3
 80026ca:	e004      	b.n	80026d6 <HAL_GPIO_Init+0x1fa>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x1fa>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_GPIO_Init+0x1fa>
 80026d4:	2300      	movs	r3, #0
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e6:	4937      	ldr	r1, [pc, #220]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026f4:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_GPIO_Init+0x300>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002718:	4a30      	ldr	r2, [pc, #192]	; (80027dc <HAL_GPIO_Init+0x300>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <HAL_GPIO_Init+0x300>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002742:	4a26      	ldr	r2, [pc, #152]	; (80027dc <HAL_GPIO_Init+0x300>)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_GPIO_Init+0x300>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800276c:	4a1b      	ldr	r2, [pc, #108]	; (80027dc <HAL_GPIO_Init+0x300>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_GPIO_Init+0x300>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002796:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_GPIO_Init+0x300>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f ae9d 	bne.w	80024ec <HAL_GPIO_Init+0x10>
  }
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010000 	.word	0x40010000
 80027c8:	48000400 	.word	0x48000400
 80027cc:	48000800 	.word	0x48000800
 80027d0:	48000c00 	.word	0x48000c00
 80027d4:	48001000 	.word	0x48001000
 80027d8:	48001400 	.word	0x48001400
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43d9      	mvns	r1, r3
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	400b      	ands	r3, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f806 	bl	8002874 <HAL_GPIO_EXTI_Callback>
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40010400 	.word	0x40010400

08002874 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d141      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800289a:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a6:	d131      	bne.n	800290c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028a8:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ae:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028c0:	4a41      	ldr	r2, [pc, #260]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028c8:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2232      	movs	r2, #50	; 0x32
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	4a3f      	ldr	r2, [pc, #252]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	0c9b      	lsrs	r3, r3, #18
 80028da:	3301      	adds	r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028de:	e002      	b.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d102      	bne.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f2      	bne.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028fa:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	d158      	bne.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e057      	b.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002912:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002918:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800291c:	e04d      	b.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	d141      	bne.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800292e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002932:	d131      	bne.n	8002998 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2232      	movs	r2, #50	; 0x32
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	0c9b      	lsrs	r3, r3, #18
 8002966:	3301      	adds	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296a:	e002      	b.n	8002972 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3b01      	subs	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297e:	d102      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f2      	bne.n	800296c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d112      	bne.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e011      	b.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029a8:	e007      	b.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40007000 	.word	0x40007000
 80029cc:	20000000 	.word	0x20000000
 80029d0:	431bde83 	.word	0x431bde83

080029d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e2:	6093      	str	r3, [r2, #8]
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40007000 	.word	0x40007000

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e2fe      	b.n	8003004 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d075      	beq.n	8002afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a12:	4b97      	ldr	r3, [pc, #604]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a1c:	4b94      	ldr	r3, [pc, #592]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3e>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d002      	beq.n	8002a38 <HAL_RCC_OscConfig+0x44>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d05b      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d157      	bne.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e2d9      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x74>
 8002a5a:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a84      	ldr	r2, [pc, #528]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x98>
 8002a72:	4b7f      	ldr	r3, [pc, #508]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7e      	ldr	r2, [pc, #504]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7b      	ldr	r2, [pc, #492]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a8c:	4b78      	ldr	r3, [pc, #480]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a77      	ldr	r2, [pc, #476]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a74      	ldr	r2, [pc, #464]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fad8 	bl	8001060 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fad4 	bl	8001060 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e29e      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xc0>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fac4 	bl	8001060 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe fac0 	bl	8001060 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e28a      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aee:	4b60      	ldr	r3, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0xe8>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d075      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0a:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b14:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_OscConfig+0x136>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_OscConfig+0x13c>
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d11f      	bne.n	8002b70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b30:	4b4f      	ldr	r3, [pc, #316]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_OscConfig+0x154>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e25d      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	4946      	ldr	r1, [pc, #280]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b5c:	4b45      	ldr	r3, [pc, #276]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe fa31 	bl	8000fc8 <HAL_InitTick>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d043      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e249      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d023      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b78:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fa6c 	bl	8001060 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fa68 	bl	8001060 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e232      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	492d      	ldr	r1, [pc, #180]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 8002bbe:	e01a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fa48 	bl	8001060 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fa44 	bl	8001060 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e20e      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1e0>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d041      	beq.n	8002c86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fa21 	bl	8001060 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c22:	f7fe fa1d 	bl	8001060 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e1e7      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ef      	beq.n	8002c22 <HAL_RCC_OscConfig+0x22e>
 8002c42:	e020      	b.n	8002c86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_OscConfig+0x27c>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fa04 	bl	8001060 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c5a:	e00d      	b.n	8002c78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fa00 	bl	8001060 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d906      	bls.n	8002c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1ca      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c78:	4b8c      	ldr	r3, [pc, #560]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ea      	bne.n	8002c5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80a6 	beq.w	8002de0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c98:	4b84      	ldr	r3, [pc, #528]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2b4>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x2b6>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b7f      	ldr	r3, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	4a7e      	ldr	r2, [pc, #504]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cba:	4b7c      	ldr	r3, [pc, #496]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cca:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a75      	ldr	r2, [pc, #468]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f9bd 	bl	8001060 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe f9b9 	bl	8001060 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e183      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d108      	bne.n	8002d22 <HAL_RCC_OscConfig+0x32e>
 8002d10:	4b66      	ldr	r3, [pc, #408]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	4a65      	ldr	r2, [pc, #404]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d20:	e024      	b.n	8002d6c <HAL_RCC_OscConfig+0x378>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d110      	bne.n	8002d4c <HAL_RCC_OscConfig+0x358>
 8002d2a:	4b60      	ldr	r3, [pc, #384]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d3a:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	4a5a      	ldr	r2, [pc, #360]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d4a:	e00f      	b.n	8002d6c <HAL_RCC_OscConfig+0x378>
 8002d4c:	4b57      	ldr	r3, [pc, #348]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a56      	ldr	r2, [pc, #344]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d016      	beq.n	8002da2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe f974 	bl	8001060 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f970 	bl	8001060 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e138      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d92:	4b46      	ldr	r3, [pc, #280]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ed      	beq.n	8002d7c <HAL_RCC_OscConfig+0x388>
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe f95d 	bl	8001060 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe f959 	bl	8001060 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e121      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dc0:	4b3a      	ldr	r3, [pc, #232]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ed      	bne.n	8002daa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	4a34      	ldr	r2, [pc, #208]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d03c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dfa:	4a2c      	ldr	r2, [pc, #176]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe f92c 	bl	8001060 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e0c:	f7fe f928 	bl	8001060 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0f2      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ef      	beq.n	8002e0c <HAL_RCC_OscConfig+0x418>
 8002e2c:	e01b      	b.n	8002e66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e34:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe f90f 	bl	8001060 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e46:	f7fe f90b 	bl	8001060 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0d5      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ef      	bne.n	8002e46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80c9 	beq.w	8003002 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	f000 8083 	beq.w	8002f84 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d15e      	bne.n	8002f44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe f8e5 	bl	8001060 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e98:	e00c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe f8e1 	bl	8001060 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d905      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0ab      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb4:	4b55      	ldr	r3, [pc, #340]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ec      	bne.n	8002e9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	4b52      	ldr	r3, [pc, #328]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b52      	ldr	r3, [pc, #328]	; (8003010 <HAL_RCC_OscConfig+0x61c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6a11      	ldr	r1, [r2, #32]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ed0:	3a01      	subs	r2, #1
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002eda:	0212      	lsls	r2, r2, #8
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ee2:	0852      	lsrs	r2, r2, #1
 8002ee4:	3a01      	subs	r2, #1
 8002ee6:	0552      	lsls	r2, r2, #21
 8002ee8:	4311      	orrs	r1, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eee:	0852      	lsrs	r2, r2, #1
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	0652      	lsls	r2, r2, #25
 8002ef4:	4311      	orrs	r1, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002efa:	06d2      	lsls	r2, r2, #27
 8002efc:	430a      	orrs	r2, r1
 8002efe:	4943      	ldr	r1, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a40      	ldr	r2, [pc, #256]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f10:	4b3e      	ldr	r3, [pc, #248]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a3d      	ldr	r2, [pc, #244]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f8a0 	bl	8001060 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe f89c 	bl	8001060 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e066      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x530>
 8002f42:	e05e      	b.n	8003002 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a30      	ldr	r2, [pc, #192]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe f886 	bl	8001060 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe f882 	bl	8001060 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e04c      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6a:	4b28      	ldr	r3, [pc, #160]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f76:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4924      	ldr	r1, [pc, #144]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_OscConfig+0x620>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60cb      	str	r3, [r1, #12]
 8002f82:	e03e      	b.n	8003002 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e039      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_OscConfig+0x618>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d12c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d123      	bne.n	8002ffe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d11b      	bne.n	8002ffe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d113      	bne.n	8002ffe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d109      	bne.n	8002ffe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	019f800c 	.word	0x019f800c
 8003014:	feeefffc 	.word	0xfeeefffc

08003018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e11e      	b.n	800326e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003030:	4b91      	ldr	r3, [pc, #580]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d910      	bls.n	8003060 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b8e      	ldr	r3, [pc, #568]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 020f 	bic.w	r2, r3, #15
 8003046:	498c      	ldr	r1, [pc, #560]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b8a      	ldr	r3, [pc, #552]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e106      	b.n	800326e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d073      	beq.n	8003154 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d129      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003074:	4b81      	ldr	r3, [pc, #516]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0f4      	b.n	800326e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003084:	f000 f99e 	bl	80033c4 <RCC_GetSysClockFreqFromPLLSource>
 8003088:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4a7c      	ldr	r2, [pc, #496]	; (8003280 <HAL_RCC_ClockConfig+0x268>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d93f      	bls.n	8003112 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003092:	4b7a      	ldr	r3, [pc, #488]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d033      	beq.n	8003112 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d12f      	bne.n	8003112 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030b2:	4b72      	ldr	r3, [pc, #456]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ba:	4a70      	ldr	r2, [pc, #448]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 80030bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e024      	b.n	8003112 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d0:	4b6a      	ldr	r3, [pc, #424]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0c6      	b.n	800326e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e0:	4b66      	ldr	r3, [pc, #408]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0be      	b.n	800326e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80030f0:	f000 f8ce 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4a61      	ldr	r2, [pc, #388]	; (8003280 <HAL_RCC_ClockConfig+0x268>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d909      	bls.n	8003112 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030fe:	4b5f      	ldr	r3, [pc, #380]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003106:	4a5d      	ldr	r2, [pc, #372]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b5a      	ldr	r3, [pc, #360]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4957      	ldr	r1, [pc, #348]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fd ff9c 	bl	8001060 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fd ff98 	bl	8001060 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e095      	b.n	800326e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b4e      	ldr	r3, [pc, #312]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d023      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b43      	ldr	r3, [pc, #268]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a42      	ldr	r2, [pc, #264]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003176:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003184:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800318c:	4a3b      	ldr	r2, [pc, #236]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 800318e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003192:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4936      	ldr	r1, [pc, #216]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
 80031a6:	e008      	b.n	80031ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031ae:	4b33      	ldr	r3, [pc, #204]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	4a32      	ldr	r2, [pc, #200]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 80031b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ba:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d21d      	bcs.n	8003204 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 020f 	bic.w	r2, r3, #15
 80031d0:	4929      	ldr	r1, [pc, #164]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031d8:	f7fd ff42 	bl	8001060 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fd ff3e 	bl	8001060 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e03b      	b.n	800326e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_ClockConfig+0x260>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d1ed      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4917      	ldr	r1, [pc, #92]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	490f      	ldr	r1, [pc, #60]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003242:	f000 f825 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8003246:	4602      	mov	r2, r0
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_RCC_ClockConfig+0x264>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	490c      	ldr	r1, [pc, #48]	; (8003284 <HAL_RCC_ClockConfig+0x26c>)
 8003254:	5ccb      	ldrb	r3, [r1, r3]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x270>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd feae 	bl	8000fc8 <HAL_InitTick>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000
 800327c:	40021000 	.word	0x40021000
 8003280:	04c4b400 	.word	0x04c4b400
 8003284:	08004638 	.word	0x08004638
 8003288:	20000000 	.word	0x20000000
 800328c:	20000004 	.word	0x20000004

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d102      	bne.n	80032a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032a2:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	e047      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032b4:	4b26      	ldr	r3, [pc, #152]	; (8003350 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	e03e      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80032ba:	4b23      	ldr	r3, [pc, #140]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d136      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3301      	adds	r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d10c      	bne.n	80032fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032e4:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	4a16      	ldr	r2, [pc, #88]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ee:	68d2      	ldr	r2, [r2, #12]
 80032f0:	0a12      	lsrs	r2, r2, #8
 80032f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	617b      	str	r3, [r7, #20]
      break;
 80032fc:	e00c      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032fe:	4a13      	ldr	r2, [pc, #76]	; (800334c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	4a10      	ldr	r2, [pc, #64]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003308:	68d2      	ldr	r2, [r2, #12]
 800330a:	0a12      	lsrs	r2, r2, #8
 800330c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
      break;
 8003316:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0e5b      	lsrs	r3, r3, #25
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e001      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003338:	693b      	ldr	r3, [r7, #16]
}
 800333a:	4618      	mov	r0, r3
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	00f42400 	.word	0x00f42400
 8003350:	016e3600 	.word	0x016e3600

08003354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4904      	ldr	r1, [pc, #16]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	08004648 	.word	0x08004648

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800339c:	f7ff ffda 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0adb      	lsrs	r3, r3, #11
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4904      	ldr	r1, [pc, #16]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	08004648 	.word	0x08004648

080033c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d10c      	bne.n	8003402 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	4a14      	ldr	r2, [pc, #80]	; (8003444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033f2:	68d2      	ldr	r2, [r2, #12]
 80033f4:	0a12      	lsrs	r2, r2, #8
 80033f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	617b      	str	r3, [r7, #20]
    break;
 8003400:	e00c      	b.n	800341c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	4a0e      	ldr	r2, [pc, #56]	; (8003444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	0a12      	lsrs	r2, r2, #8
 8003410:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
    break;
 800341a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0e5b      	lsrs	r3, r3, #25
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	3301      	adds	r3, #1
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003436:	687b      	ldr	r3, [r7, #4]
}
 8003438:	4618      	mov	r0, r3
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40021000 	.word	0x40021000
 8003448:	016e3600 	.word	0x016e3600
 800344c:	00f42400 	.word	0x00f42400

08003450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003458:	2300      	movs	r3, #0
 800345a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800345c:	2300      	movs	r3, #0
 800345e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8098 	beq.w	800359e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b43      	ldr	r3, [pc, #268]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b40      	ldr	r3, [pc, #256]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	4a3f      	ldr	r2, [pc, #252]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6593      	str	r3, [r2, #88]	; 0x58
 800348a:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800349a:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a39      	ldr	r2, [pc, #228]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a6:	f7fd fddb 	bl	8001060 <HAL_GetTick>
 80034aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ac:	e009      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fd fdd7 	bl	8001060 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d902      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	74fb      	strb	r3, [r7, #19]
        break;
 80034c0:	e005      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c2:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ef      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d159      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01e      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d019      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd fd97 	bl	8001060 <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003534:	e00b      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fd fd93 	bl	8001060 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d902      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	74fb      	strb	r3, [r7, #19]
            break;
 800354c:	e006      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ec      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003578:	e008      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	74bb      	strb	r3, [r7, #18]
 800357e:	e005      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003580:	40021000 	.word	0x40021000
 8003584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358c:	7c7b      	ldrb	r3, [r7, #17]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4ba7      	ldr	r3, [pc, #668]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4aa6      	ldr	r2, [pc, #664]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035aa:	4ba1      	ldr	r3, [pc, #644]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f023 0203 	bic.w	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	499d      	ldr	r1, [pc, #628]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035cc:	4b98      	ldr	r3, [pc, #608]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 020c 	bic.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4995      	ldr	r1, [pc, #596]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035ee:	4b90      	ldr	r3, [pc, #576]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	498c      	ldr	r1, [pc, #560]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003610:	4b87      	ldr	r3, [pc, #540]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	4984      	ldr	r1, [pc, #528]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003632:	4b7f      	ldr	r3, [pc, #508]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	497b      	ldr	r1, [pc, #492]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003654:	4b76      	ldr	r3, [pc, #472]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	4973      	ldr	r1, [pc, #460]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003676:	4b6e      	ldr	r3, [pc, #440]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	496a      	ldr	r1, [pc, #424]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003698:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4962      	ldr	r1, [pc, #392]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ba:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	4959      	ldr	r1, [pc, #356]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036dc:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036e2:	f023 0203 	bic.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	4951      	ldr	r1, [pc, #324]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036fe:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4948      	ldr	r1, [pc, #288]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4940      	ldr	r1, [pc, #256]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800373e:	d105      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003740:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a3a      	ldr	r2, [pc, #232]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800374a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	4932      	ldr	r1, [pc, #200]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003776:	d105      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003778:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800377e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003782:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d015      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	4924      	ldr	r1, [pc, #144]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ae:	d105      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	4916      	ldr	r1, [pc, #88]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e6:	d105      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a10      	ldr	r2, [pc, #64]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d019      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4908      	ldr	r1, [pc, #32]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800381e:	d109      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a02      	ldr	r2, [pc, #8]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382a:	60d3      	str	r3, [r2, #12]
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003840:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4926      	ldr	r1, [pc, #152]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800385e:	d105      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a20      	ldr	r2, [pc, #128]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d015      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003886:	4918      	ldr	r1, [pc, #96]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d105      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d015      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	490a      	ldr	r1, [pc, #40]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ce:	d105      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80038dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000

080038ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e042      	b.n	8003984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fd fa7b 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2224      	movs	r2, #36	; 0x24
 800391a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fb24 	bl	8003f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f825 	bl	800398c <UART_SetConfig>
 8003942:	4603      	mov	r3, r0
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e01b      	b.n	8003984 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800395a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800396a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fba3 	bl	80040c8 <UART_CheckIdleState>
 8003982:	4603      	mov	r3, r0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800398c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003990:	b08c      	sub	sp, #48	; 0x30
 8003992:	af00      	add	r7, sp, #0
 8003994:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4baa      	ldr	r3, [pc, #680]	; (8003c64 <UART_SetConfig+0x2d8>)
 80039bc:	4013      	ands	r3, r2
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a9f      	ldr	r2, [pc, #636]	; (8003c68 <UART_SetConfig+0x2dc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f4:	4313      	orrs	r3, r2
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	f023 010f 	bic.w	r1, r3, #15
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a90      	ldr	r2, [pc, #576]	; (8003c6c <UART_SetConfig+0x2e0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d125      	bne.n	8003a7c <UART_SetConfig+0xf0>
 8003a30:	4b8f      	ldr	r3, [pc, #572]	; (8003c70 <UART_SetConfig+0x2e4>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d81a      	bhi.n	8003a74 <UART_SetConfig+0xe8>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <UART_SetConfig+0xb8>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a65 	.word	0x08003a65
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a6d 	.word	0x08003a6d
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5a:	e116      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a62:	e112      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003a64:	2304      	movs	r3, #4
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6a:	e10e      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a72:	e10a      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003a74:	2310      	movs	r3, #16
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7a:	e106      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7c      	ldr	r2, [pc, #496]	; (8003c74 <UART_SetConfig+0x2e8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d138      	bne.n	8003af8 <UART_SetConfig+0x16c>
 8003a86:	4b7a      	ldr	r3, [pc, #488]	; (8003c70 <UART_SetConfig+0x2e4>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d82d      	bhi.n	8003af0 <UART_SetConfig+0x164>
 8003a94:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <UART_SetConfig+0x110>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003af1 	.word	0x08003af1
 8003aa4:	08003af1 	.word	0x08003af1
 8003aa8:	08003af1 	.word	0x08003af1
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003af1 	.word	0x08003af1
 8003ab4:	08003af1 	.word	0x08003af1
 8003ab8:	08003af1 	.word	0x08003af1
 8003abc:	08003ad9 	.word	0x08003ad9
 8003ac0:	08003af1 	.word	0x08003af1
 8003ac4:	08003af1 	.word	0x08003af1
 8003ac8:	08003af1 	.word	0x08003af1
 8003acc:	08003ae9 	.word	0x08003ae9
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	e0d8      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ade:	e0d4      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae6:	e0d0      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003ae8:	2308      	movs	r3, #8
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aee:	e0cc      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003af0:	2310      	movs	r3, #16
 8003af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af6:	e0c8      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a5e      	ldr	r2, [pc, #376]	; (8003c78 <UART_SetConfig+0x2ec>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d125      	bne.n	8003b4e <UART_SetConfig+0x1c2>
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <UART_SetConfig+0x2e4>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b0c:	2b30      	cmp	r3, #48	; 0x30
 8003b0e:	d016      	beq.n	8003b3e <UART_SetConfig+0x1b2>
 8003b10:	2b30      	cmp	r3, #48	; 0x30
 8003b12:	d818      	bhi.n	8003b46 <UART_SetConfig+0x1ba>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d00a      	beq.n	8003b2e <UART_SetConfig+0x1a2>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d814      	bhi.n	8003b46 <UART_SetConfig+0x1ba>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <UART_SetConfig+0x19a>
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d008      	beq.n	8003b36 <UART_SetConfig+0x1aa>
 8003b24:	e00f      	b.n	8003b46 <UART_SetConfig+0x1ba>
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2c:	e0ad      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b34:	e0a9      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b36:	2304      	movs	r3, #4
 8003b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3c:	e0a5      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b44:	e0a1      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b46:	2310      	movs	r3, #16
 8003b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4c:	e09d      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a4a      	ldr	r2, [pc, #296]	; (8003c7c <UART_SetConfig+0x2f0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d125      	bne.n	8003ba4 <UART_SetConfig+0x218>
 8003b58:	4b45      	ldr	r3, [pc, #276]	; (8003c70 <UART_SetConfig+0x2e4>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b62:	2bc0      	cmp	r3, #192	; 0xc0
 8003b64:	d016      	beq.n	8003b94 <UART_SetConfig+0x208>
 8003b66:	2bc0      	cmp	r3, #192	; 0xc0
 8003b68:	d818      	bhi.n	8003b9c <UART_SetConfig+0x210>
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d00a      	beq.n	8003b84 <UART_SetConfig+0x1f8>
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d814      	bhi.n	8003b9c <UART_SetConfig+0x210>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <UART_SetConfig+0x1f0>
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d008      	beq.n	8003b8c <UART_SetConfig+0x200>
 8003b7a:	e00f      	b.n	8003b9c <UART_SetConfig+0x210>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b82:	e082      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b84:	2302      	movs	r3, #2
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8a:	e07e      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b92:	e07a      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b94:	2308      	movs	r3, #8
 8003b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9a:	e076      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	e072      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a35      	ldr	r2, [pc, #212]	; (8003c80 <UART_SetConfig+0x2f4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d12a      	bne.n	8003c04 <UART_SetConfig+0x278>
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <UART_SetConfig+0x2e4>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bbc:	d01a      	beq.n	8003bf4 <UART_SetConfig+0x268>
 8003bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc2:	d81b      	bhi.n	8003bfc <UART_SetConfig+0x270>
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d00c      	beq.n	8003be4 <UART_SetConfig+0x258>
 8003bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bce:	d815      	bhi.n	8003bfc <UART_SetConfig+0x270>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <UART_SetConfig+0x250>
 8003bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd8:	d008      	beq.n	8003bec <UART_SetConfig+0x260>
 8003bda:	e00f      	b.n	8003bfc <UART_SetConfig+0x270>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be2:	e052      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003be4:	2302      	movs	r3, #2
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bea:	e04e      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003bec:	2304      	movs	r3, #4
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf2:	e04a      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfa:	e046      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c02:	e042      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a17      	ldr	r2, [pc, #92]	; (8003c68 <UART_SetConfig+0x2dc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d13a      	bne.n	8003c84 <UART_SetConfig+0x2f8>
 8003c0e:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <UART_SetConfig+0x2e4>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c1c:	d01a      	beq.n	8003c54 <UART_SetConfig+0x2c8>
 8003c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c22:	d81b      	bhi.n	8003c5c <UART_SetConfig+0x2d0>
 8003c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c28:	d00c      	beq.n	8003c44 <UART_SetConfig+0x2b8>
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2e:	d815      	bhi.n	8003c5c <UART_SetConfig+0x2d0>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <UART_SetConfig+0x2b0>
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c38:	d008      	beq.n	8003c4c <UART_SetConfig+0x2c0>
 8003c3a:	e00f      	b.n	8003c5c <UART_SetConfig+0x2d0>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c42:	e022      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4a:	e01e      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c52:	e01a      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003c54:	2308      	movs	r3, #8
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	e016      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c62:	e012      	b.n	8003c8a <UART_SetConfig+0x2fe>
 8003c64:	cfff69f3 	.word	0xcfff69f3
 8003c68:	40008000 	.word	0x40008000
 8003c6c:	40013800 	.word	0x40013800
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40004400 	.word	0x40004400
 8003c78:	40004800 	.word	0x40004800
 8003c7c:	40004c00 	.word	0x40004c00
 8003c80:	40005000 	.word	0x40005000
 8003c84:	2310      	movs	r3, #16
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4aae      	ldr	r2, [pc, #696]	; (8003f48 <UART_SetConfig+0x5bc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	f040 8097 	bne.w	8003dc4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d823      	bhi.n	8003ce6 <UART_SetConfig+0x35a>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0x318>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003ce7 	.word	0x08003ce7
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003ce7 	.word	0x08003ce7
 8003cb4:	08003cd7 	.word	0x08003cd7
 8003cb8:	08003ce7 	.word	0x08003ce7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003ce7 	.word	0x08003ce7
 8003cc4:	08003cdf 	.word	0x08003cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f7ff fb50 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8003ccc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cce:	e010      	b.n	8003cf2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd0:	4b9e      	ldr	r3, [pc, #632]	; (8003f4c <UART_SetConfig+0x5c0>)
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cd4:	e00d      	b.n	8003cf2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7ff fadb 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cdc:	e009      	b.n	8003cf2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ce4:	e005      	b.n	8003cf2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8130 	beq.w	8003f5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	4a94      	ldr	r2, [pc, #592]	; (8003f50 <UART_SetConfig+0x5c4>)
 8003d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d04:	461a      	mov	r2, r3
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d305      	bcc.n	8003d2a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d903      	bls.n	8003d32 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d30:	e113      	b.n	8003f5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	2200      	movs	r2, #0
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	60fa      	str	r2, [r7, #12]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	4a84      	ldr	r2, [pc, #528]	; (8003f50 <UART_SetConfig+0x5c4>)
 8003d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2200      	movs	r2, #0
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d54:	f7fc fa60 	bl	8000218 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	020b      	lsls	r3, r1, #8
 8003d6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d6e:	0202      	lsls	r2, r0, #8
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	6849      	ldr	r1, [r1, #4]
 8003d74:	0849      	lsrs	r1, r1, #1
 8003d76:	2000      	movs	r0, #0
 8003d78:	460c      	mov	r4, r1
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	eb12 0804 	adds.w	r8, r2, r4
 8003d80:	eb43 0905 	adc.w	r9, r3, r5
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	469a      	mov	sl, r3
 8003d8c:	4693      	mov	fp, r2
 8003d8e:	4652      	mov	r2, sl
 8003d90:	465b      	mov	r3, fp
 8003d92:	4640      	mov	r0, r8
 8003d94:	4649      	mov	r1, r9
 8003d96:	f7fc fa3f 	bl	8000218 <__aeabi_uldivmod>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4613      	mov	r3, r2
 8003da0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da8:	d308      	bcc.n	8003dbc <UART_SetConfig+0x430>
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db0:	d204      	bcs.n	8003dbc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a3a      	ldr	r2, [r7, #32]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	e0ce      	b.n	8003f5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dc2:	e0ca      	b.n	8003f5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dcc:	d166      	bne.n	8003e9c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003dce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d827      	bhi.n	8003e26 <UART_SetConfig+0x49a>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <UART_SetConfig+0x450>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e01 	.word	0x08003e01
 8003de0:	08003e09 	.word	0x08003e09
 8003de4:	08003e11 	.word	0x08003e11
 8003de8:	08003e27 	.word	0x08003e27
 8003dec:	08003e17 	.word	0x08003e17
 8003df0:	08003e27 	.word	0x08003e27
 8003df4:	08003e27 	.word	0x08003e27
 8003df8:	08003e27 	.word	0x08003e27
 8003dfc:	08003e1f 	.word	0x08003e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e00:	f7ff fab4 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8003e04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e06:	e014      	b.n	8003e32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e08:	f7ff fac6 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e0e:	e010      	b.n	8003e32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e10:	4b4e      	ldr	r3, [pc, #312]	; (8003f4c <UART_SetConfig+0x5c0>)
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e14:	e00d      	b.n	8003e32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e16:	f7ff fa3b 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8003e1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e1c:	e009      	b.n	8003e32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e24:	e005      	b.n	8003e32 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8090 	beq.w	8003f5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	4a44      	ldr	r2, [pc, #272]	; (8003f50 <UART_SetConfig+0x5c4>)
 8003e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e4c:	005a      	lsls	r2, r3, #1
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	441a      	add	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	d916      	bls.n	8003e94 <UART_SetConfig+0x508>
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d212      	bcs.n	8003e94 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f023 030f 	bic.w	r3, r3, #15
 8003e76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	8bfb      	ldrh	r3, [r7, #30]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	8bfa      	ldrh	r2, [r7, #30]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	e062      	b.n	8003f5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e9a:	e05e      	b.n	8003f5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d828      	bhi.n	8003ef6 <UART_SetConfig+0x56a>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <UART_SetConfig+0x520>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed9 	.word	0x08003ed9
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ef7 	.word	0x08003ef7
 8003ebc:	08003ee7 	.word	0x08003ee7
 8003ec0:	08003ef7 	.word	0x08003ef7
 8003ec4:	08003ef7 	.word	0x08003ef7
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003eef 	.word	0x08003eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7ff fa4c 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ed6:	e014      	b.n	8003f02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed8:	f7ff fa5e 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8003edc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ede:	e010      	b.n	8003f02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <UART_SetConfig+0x5c0>)
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ee4:	e00d      	b.n	8003f02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7ff f9d3 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8003eea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003eec:	e009      	b.n	8003f02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ef4:	e005      	b.n	8003f02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f00:	bf00      	nop
    }

    if (pclk != 0U)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d028      	beq.n	8003f5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	4a10      	ldr	r2, [pc, #64]	; (8003f50 <UART_SetConfig+0x5c4>)
 8003f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	441a      	add	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	d910      	bls.n	8003f54 <UART_SetConfig+0x5c8>
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d20c      	bcs.n	8003f54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	e009      	b.n	8003f5a <UART_SetConfig+0x5ce>
 8003f46:	bf00      	nop
 8003f48:	40008000 	.word	0x40008000
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	08004650 	.word	0x08004650
      }
      else
      {
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003f76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3730      	adds	r7, #48	; 0x30
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01a      	beq.n	800409a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004082:	d10a      	bne.n	800409a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b098      	sub	sp, #96	; 0x60
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d8:	f7fc ffc2 	bl	8001060 <HAL_GetTick>
 80040dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d12f      	bne.n	800414c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f4:	2200      	movs	r2, #0
 80040f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f88e 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d022      	beq.n	800414c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411a:	653b      	str	r3, [r7, #80]	; 0x50
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
 8004126:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800412a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e6      	bne.n	8004106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e063      	b.n	8004214 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b04      	cmp	r3, #4
 8004158:	d149      	bne.n	80041ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800415a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004162:	2200      	movs	r2, #0
 8004164:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f857 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d03c      	beq.n	80041ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	623b      	str	r3, [r7, #32]
   return(result);
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
 8004194:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e6      	bne.n	8004174 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3308      	adds	r3, #8
 80041ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c6:	61fa      	str	r2, [r7, #28]
 80041c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	69b9      	ldr	r1, [r7, #24]
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	617b      	str	r3, [r7, #20]
   return(result);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e012      	b.n	8004214 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3758      	adds	r7, #88	; 0x58
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422c:	e04f      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d04b      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fc ff13 	bl	8001060 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <UART_WaitOnFlagUntilTimeout+0x30>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e04e      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d037      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b80      	cmp	r3, #128	; 0x80
 8004262:	d034      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d031      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d110      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2208      	movs	r2, #8
 800427e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f838 	bl	80042f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2208      	movs	r2, #8
 800428a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e029      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a8:	d111      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f81e 	bl	80042f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00f      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d0a0      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b095      	sub	sp, #84	; 0x54
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431c:	643b      	str	r3, [r7, #64]	; 0x40
 800431e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e6      	bne.n	80042fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3308      	adds	r3, #8
 8004336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800435a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e3      	bne.n	8004330 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d118      	bne.n	80043a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	60bb      	str	r3, [r7, #8]
   return(result);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f023 0310 	bic.w	r3, r3, #16
 8004384:	647b      	str	r3, [r7, #68]	; 0x44
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	613b      	str	r3, [r7, #16]
   return(result);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e6      	bne.n	8004370 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80043b6:	bf00      	nop
 80043b8:	3754      	adds	r7, #84	; 0x54
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e027      	b.n	8004428 <HAL_UARTEx_DisableFifoMode+0x66>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2224      	movs	r2, #36	; 0x24
 80043e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004406:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004448:	2302      	movs	r3, #2
 800444a:	e02d      	b.n	80044a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f84f 	bl	800452c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e02d      	b.n	8004524 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	; 0x24
 80044d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f811 	bl	800452c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800454c:	e031      	b.n	80045b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800454e:	2308      	movs	r3, #8
 8004550:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004552:	2308      	movs	r3, #8
 8004554:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	0e5b      	lsrs	r3, r3, #25
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	0f5b      	lsrs	r3, r3, #29
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004576:	7bbb      	ldrb	r3, [r7, #14]
 8004578:	7b3a      	ldrb	r2, [r7, #12]
 800457a:	4911      	ldr	r1, [pc, #68]	; (80045c0 <UARTEx_SetNbDataToProcess+0x94>)
 800457c:	5c8a      	ldrb	r2, [r1, r2]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004582:	7b3a      	ldrb	r2, [r7, #12]
 8004584:	490f      	ldr	r1, [pc, #60]	; (80045c4 <UARTEx_SetNbDataToProcess+0x98>)
 8004586:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004588:	fb93 f3f2 	sdiv	r3, r3, r2
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	7b7a      	ldrb	r2, [r7, #13]
 8004598:	4909      	ldr	r1, [pc, #36]	; (80045c0 <UARTEx_SetNbDataToProcess+0x94>)
 800459a:	5c8a      	ldrb	r2, [r1, r2]
 800459c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045a0:	7b7a      	ldrb	r2, [r7, #13]
 80045a2:	4908      	ldr	r1, [pc, #32]	; (80045c4 <UARTEx_SetNbDataToProcess+0x98>)
 80045a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	08004668 	.word	0x08004668
 80045c4:	08004670 	.word	0x08004670

080045c8 <memset>:
 80045c8:	4402      	add	r2, r0
 80045ca:	4603      	mov	r3, r0
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d100      	bne.n	80045d2 <memset+0xa>
 80045d0:	4770      	bx	lr
 80045d2:	f803 1b01 	strb.w	r1, [r3], #1
 80045d6:	e7f9      	b.n	80045cc <memset+0x4>

080045d8 <__libc_init_array>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4d0d      	ldr	r5, [pc, #52]	; (8004610 <__libc_init_array+0x38>)
 80045dc:	4c0d      	ldr	r4, [pc, #52]	; (8004614 <__libc_init_array+0x3c>)
 80045de:	1b64      	subs	r4, r4, r5
 80045e0:	10a4      	asrs	r4, r4, #2
 80045e2:	2600      	movs	r6, #0
 80045e4:	42a6      	cmp	r6, r4
 80045e6:	d109      	bne.n	80045fc <__libc_init_array+0x24>
 80045e8:	4d0b      	ldr	r5, [pc, #44]	; (8004618 <__libc_init_array+0x40>)
 80045ea:	4c0c      	ldr	r4, [pc, #48]	; (800461c <__libc_init_array+0x44>)
 80045ec:	f000 f818 	bl	8004620 <_init>
 80045f0:	1b64      	subs	r4, r4, r5
 80045f2:	10a4      	asrs	r4, r4, #2
 80045f4:	2600      	movs	r6, #0
 80045f6:	42a6      	cmp	r6, r4
 80045f8:	d105      	bne.n	8004606 <__libc_init_array+0x2e>
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004600:	4798      	blx	r3
 8004602:	3601      	adds	r6, #1
 8004604:	e7ee      	b.n	80045e4 <__libc_init_array+0xc>
 8004606:	f855 3b04 	ldr.w	r3, [r5], #4
 800460a:	4798      	blx	r3
 800460c:	3601      	adds	r6, #1
 800460e:	e7f2      	b.n	80045f6 <__libc_init_array+0x1e>
 8004610:	08004680 	.word	0x08004680
 8004614:	08004680 	.word	0x08004680
 8004618:	08004680 	.word	0x08004680
 800461c:	08004684 	.word	0x08004684

08004620 <_init>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr

0800462c <_fini>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr
