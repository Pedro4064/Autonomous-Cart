
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aec  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d04  08007d04  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d0c  08007d0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  20000010  08007d24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  08007d24  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d62a  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b41  00000000  00000000  0003d6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  000411f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001369  00000000  00000000  00042ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ac4  00000000  00000000  00043e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000215e3  00000000  00000000  00047905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112447  00000000  00000000  00068ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a0c  00000000  00000000  0017b330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00181d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007cac 	.word	0x08007cac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007cac 	.word	0x08007cac

08000218 <__aeabi_d2uiz>:
 8000218:	004a      	lsls	r2, r1, #1
 800021a:	d211      	bcs.n	8000240 <__aeabi_d2uiz+0x28>
 800021c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000220:	d211      	bcs.n	8000246 <__aeabi_d2uiz+0x2e>
 8000222:	d50d      	bpl.n	8000240 <__aeabi_d2uiz+0x28>
 8000224:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000228:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800022c:	d40e      	bmi.n	800024c <__aeabi_d2uiz+0x34>
 800022e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000236:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800023a:	fa23 f002 	lsr.w	r0, r3, r2
 800023e:	4770      	bx	lr
 8000240:	f04f 0000 	mov.w	r0, #0
 8000244:	4770      	bx	lr
 8000246:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800024a:	d102      	bne.n	8000252 <__aeabi_d2uiz+0x3a>
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	4770      	bx	lr
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	4770      	bx	lr

08000258 <__aeabi_uldivmod>:
 8000258:	b953      	cbnz	r3, 8000270 <__aeabi_uldivmod+0x18>
 800025a:	b94a      	cbnz	r2, 8000270 <__aeabi_uldivmod+0x18>
 800025c:	2900      	cmp	r1, #0
 800025e:	bf08      	it	eq
 8000260:	2800      	cmpeq	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	f04f 31ff 	movne.w	r1, #4294967295
 8000268:	f04f 30ff 	movne.w	r0, #4294967295
 800026c:	f000 b970 	b.w	8000550 <__aeabi_idiv0>
 8000270:	f1ad 0c08 	sub.w	ip, sp, #8
 8000274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000284:	b004      	add	sp, #16
 8000286:	4770      	bx	lr

08000288 <__udivmoddi4>:
 8000288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800028c:	9e08      	ldr	r6, [sp, #32]
 800028e:	460d      	mov	r5, r1
 8000290:	4604      	mov	r4, r0
 8000292:	460f      	mov	r7, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14a      	bne.n	800032e <__udivmoddi4+0xa6>
 8000298:	428a      	cmp	r2, r1
 800029a:	4694      	mov	ip, r2
 800029c:	d965      	bls.n	800036a <__udivmoddi4+0xe2>
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	b143      	cbz	r3, 80002b6 <__udivmoddi4+0x2e>
 80002a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a8:	f1c3 0220 	rsb	r2, r3, #32
 80002ac:	409f      	lsls	r7, r3
 80002ae:	fa20 f202 	lsr.w	r2, r0, r2
 80002b2:	4317      	orrs	r7, r2
 80002b4:	409c      	lsls	r4, r3
 80002b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ba:	fa1f f58c 	uxth.w	r5, ip
 80002be:	fbb7 f1fe 	udiv	r1, r7, lr
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002cc:	fb01 f005 	mul.w	r0, r1, r5
 80002d0:	4290      	cmp	r0, r2
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x62>
 80002d4:	eb1c 0202 	adds.w	r2, ip, r2
 80002d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002dc:	f080 811c 	bcs.w	8000518 <__udivmoddi4+0x290>
 80002e0:	4290      	cmp	r0, r2
 80002e2:	f240 8119 	bls.w	8000518 <__udivmoddi4+0x290>
 80002e6:	3902      	subs	r1, #2
 80002e8:	4462      	add	r2, ip
 80002ea:	1a12      	subs	r2, r2, r0
 80002ec:	b2a4      	uxth	r4, r4
 80002ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fa:	fb00 f505 	mul.w	r5, r0, r5
 80002fe:	42a5      	cmp	r5, r4
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x90>
 8000302:	eb1c 0404 	adds.w	r4, ip, r4
 8000306:	f100 32ff 	add.w	r2, r0, #4294967295
 800030a:	f080 8107 	bcs.w	800051c <__udivmoddi4+0x294>
 800030e:	42a5      	cmp	r5, r4
 8000310:	f240 8104 	bls.w	800051c <__udivmoddi4+0x294>
 8000314:	4464      	add	r4, ip
 8000316:	3802      	subs	r0, #2
 8000318:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	2100      	movs	r1, #0
 8000320:	b11e      	cbz	r6, 800032a <__udivmoddi4+0xa2>
 8000322:	40dc      	lsrs	r4, r3
 8000324:	2300      	movs	r3, #0
 8000326:	e9c6 4300 	strd	r4, r3, [r6]
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	428b      	cmp	r3, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000332:	2e00      	cmp	r6, #0
 8000334:	f000 80ed 	beq.w	8000512 <__udivmoddi4+0x28a>
 8000338:	2100      	movs	r1, #0
 800033a:	e9c6 0500 	strd	r0, r5, [r6]
 800033e:	4608      	mov	r0, r1
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	fab3 f183 	clz	r1, r3
 8000348:	2900      	cmp	r1, #0
 800034a:	d149      	bne.n	80003e0 <__udivmoddi4+0x158>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d302      	bcc.n	8000356 <__udivmoddi4+0xce>
 8000350:	4282      	cmp	r2, r0
 8000352:	f200 80f8 	bhi.w	8000546 <__udivmoddi4+0x2be>
 8000356:	1a84      	subs	r4, r0, r2
 8000358:	eb65 0203 	sbc.w	r2, r5, r3
 800035c:	2001      	movs	r0, #1
 800035e:	4617      	mov	r7, r2
 8000360:	2e00      	cmp	r6, #0
 8000362:	d0e2      	beq.n	800032a <__udivmoddi4+0xa2>
 8000364:	e9c6 4700 	strd	r4, r7, [r6]
 8000368:	e7df      	b.n	800032a <__udivmoddi4+0xa2>
 800036a:	b902      	cbnz	r2, 800036e <__udivmoddi4+0xe6>
 800036c:	deff      	udf	#255	; 0xff
 800036e:	fab2 f382 	clz	r3, r2
 8000372:	2b00      	cmp	r3, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x210>
 8000378:	1a8a      	subs	r2, r1, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2101      	movs	r1, #1
 8000384:	fbb2 f5f7 	udiv	r5, r2, r7
 8000388:	fb07 2015 	mls	r0, r7, r5, r2
 800038c:	0c22      	lsrs	r2, r4, #16
 800038e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000392:	fb0e f005 	mul.w	r0, lr, r5
 8000396:	4290      	cmp	r0, r2
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x124>
 800039a:	eb1c 0202 	adds.w	r2, ip, r2
 800039e:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x122>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2b8>
 80003aa:	4645      	mov	r5, r8
 80003ac:	1a12      	subs	r2, r2, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b4:	fb07 2210 	mls	r2, r7, r0, r2
 80003b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x14e>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x14c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2c2>
 80003d4:	4610      	mov	r0, r2
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003de:	e79f      	b.n	8000320 <__udivmoddi4+0x98>
 80003e0:	f1c1 0720 	rsb	r7, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa05 f401 	lsl.w	r4, r5, r1
 80003f2:	fa20 f307 	lsr.w	r3, r0, r7
 80003f6:	40fd      	lsrs	r5, r7
 80003f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	fb09 5518 	mls	r5, r9, r8, r5
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000410:	fb08 f50e 	mul.w	r5, r8, lr
 8000414:	42a5      	cmp	r5, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	fa00 f001 	lsl.w	r0, r0, r1
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b0>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2b4>
 800042c:	42a5      	cmp	r5, r4
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2b4>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4464      	add	r4, ip
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	b29d      	uxth	r5, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000448:	fb03 fe0e 	mul.w	lr, r3, lr
 800044c:	45a6      	cmp	lr, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1da>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f103 35ff 	add.w	r5, r3, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2ac>
 800045a:	45a6      	cmp	lr, r4
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2ac>
 800045e:	3b02      	subs	r3, #2
 8000460:	4464      	add	r4, ip
 8000462:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000466:	fba3 9502 	umull	r9, r5, r3, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	42ac      	cmp	r4, r5
 8000470:	46c8      	mov	r8, r9
 8000472:	46ae      	mov	lr, r5
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x29c>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x298>
 8000478:	b156      	cbz	r6, 8000490 <__udivmoddi4+0x208>
 800047a:	ebb0 0208 	subs.w	r2, r0, r8
 800047e:	eb64 040e 	sbc.w	r4, r4, lr
 8000482:	fa04 f707 	lsl.w	r7, r4, r7
 8000486:	40ca      	lsrs	r2, r1
 8000488:	40cc      	lsrs	r4, r1
 800048a:	4317      	orrs	r7, r2
 800048c:	e9c6 7400 	strd	r7, r4, [r6]
 8000490:	4618      	mov	r0, r3
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	f1c3 0120 	rsb	r1, r3, #32
 800049c:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a0:	fa20 f201 	lsr.w	r2, r0, r1
 80004a4:	fa25 f101 	lsr.w	r1, r5, r1
 80004a8:	409d      	lsls	r5, r3
 80004aa:	432a      	orrs	r2, r5
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b8:	fb07 1510 	mls	r5, r7, r0, r1
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004c2:	fb00 f50e 	mul.w	r5, r0, lr
 80004c6:	428d      	cmp	r5, r1
 80004c8:	fa04 f403 	lsl.w	r4, r4, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x258>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b0>
 80004d8:	428d      	cmp	r5, r1
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b0>
 80004dc:	3802      	subs	r0, #2
 80004de:	4461      	add	r1, ip
 80004e0:	1b49      	subs	r1, r1, r5
 80004e2:	b292      	uxth	r2, r2
 80004e4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f0:	fb05 f10e 	mul.w	r1, r5, lr
 80004f4:	4291      	cmp	r1, r2
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x282>
 80004f8:	eb1c 0202 	adds.w	r2, ip, r2
 80004fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2a8>
 8000502:	4291      	cmp	r1, r2
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2a8>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	1a52      	subs	r2, r2, r1
 800050c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0xfc>
 8000512:	4631      	mov	r1, r6
 8000514:	4630      	mov	r0, r6
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xa2>
 8000518:	4639      	mov	r1, r7
 800051a:	e6e6      	b.n	80002ea <__udivmoddi4+0x62>
 800051c:	4610      	mov	r0, r2
 800051e:	e6fb      	b.n	8000318 <__udivmoddi4+0x90>
 8000520:	4548      	cmp	r0, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f0>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb65 0e0c 	sbc.w	lr, r5, ip
 800052c:	3b01      	subs	r3, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f0>
 8000530:	4645      	mov	r5, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x282>
 8000534:	462b      	mov	r3, r5
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1da>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x258>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b0>
 8000540:	3d02      	subs	r5, #2
 8000542:	4462      	add	r2, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x124>
 8000546:	4608      	mov	r0, r1
 8000548:	e70a      	b.n	8000360 <__udivmoddi4+0xd8>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x14e>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <vPowerTrainSystemInit+0x20>)
 800055a:	f004 fd9b 	bl	8005094 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 800055e:	2100      	movs	r1, #0
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <vPowerTrainSystemInit+0x20>)
 8000562:	f004 fed7 	bl	8005314 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 8000566:	2104      	movs	r1, #4
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <vPowerTrainSystemInit+0x20>)
 800056a:	f004 fed3 	bl	8005314 <HAL_TIM_PWM_Start>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000494 	.word	0x20000494

08000578 <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <vPowerTrainSystemSetMotorDirection+0x1c>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d01f      	beq.n	80005d2 <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000592:	e040      	b.n	8000616 <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10b      	bne.n	80005b2 <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005a2:	f003 fb81 	bl	8003ca8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005ae:	f003 fb7b 	bl	8003ca8 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d12b      	bne.n	8000610 <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4818      	ldr	r0, [pc, #96]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005c0:	f003 fb72 	bl	8003ca8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005cc:	f003 fb6c 	bl	8003ca8 <HAL_GPIO_WritePin>
			} break;
 80005d0:	e01e      	b.n	8000610 <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10b      	bne.n	80005f0 <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005de:	f003 fb63 	bl	8003ca8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f003 fb5c 	bl	8003ca8 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10e      	bne.n	8000614 <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005fc:	f003 fb54 	bl	8003ca8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f003 fb4d 	bl	8003ca8 <HAL_GPIO_WritePin>
			} break;
 800060e:	e001      	b.n	8000614 <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000614:	bf00      	nop
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	48000400 	.word	0x48000400

08000624 <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	ed87 0b00 	vstr	d0, [r7]
 8000630:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <vPowerTrainSystemSetMotorSpeed+0x1a>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d009      	beq.n	8000650 <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 800063c:	e011      	b.n	8000662 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000640:	681c      	ldr	r4, [r3, #0]
 8000642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000646:	f7ff fde7 	bl	8000218 <__aeabi_d2uiz>
 800064a:	4603      	mov	r3, r0
 800064c:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 800064e:	e008      	b.n	8000662 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000652:	681c      	ldr	r4, [r3, #0]
 8000654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000658:	f7ff fdde 	bl	8000218 <__aeabi_d2uiz>
 800065c:	4603      	mov	r3, r0
 800065e:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
 8000660:	bf00      	nop
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	20000494 	.word	0x20000494

08000670 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2220      	movs	r2, #32
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f007 fae3 	bl	8007c54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000694:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800069c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006fa:	f001 ff5f 	bl	80025bc <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000704:	f000 ff7a 	bl	80015fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4619      	mov	r1, r3
 8000712:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000714:	f002 fd74 	bl	8003200 <HAL_ADCEx_MultiModeConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 ff6d 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_ADC1_Init+0xec>)
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000726:	2306      	movs	r3, #6
 8000728:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072e:	237f      	movs	r3, #127	; 0x7f
 8000730:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000732:	2304      	movs	r3, #4
 8000734:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000740:	f002 f8f8 	bl	8002934 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800074a:	f000 ff57 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3730      	adds	r7, #48	; 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000002c 	.word	0x2000002c
 800075c:	04300002 	.word	0x04300002

08000760 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fa71 	bl	8007c54 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_ADC2_Init+0xdc>)
 8000774:	4a32      	ldr	r2, [pc, #200]	; (8000840 <MX_ADC2_Init+0xe0>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <MX_ADC2_Init+0xdc>)
 800077a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800077e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_ADC2_Init+0xdc>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_ADC2_Init+0xdc>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_ADC2_Init+0xdc>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_ADC2_Init+0xdc>)
 8000794:	2201      	movs	r2, #1
 8000796:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_ADC2_Init+0xdc>)
 800079a:	2204      	movs	r2, #4
 800079c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC2_Init+0xdc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_ADC2_Init+0xdc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_ADC2_Init+0xdc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ADC2_Init+0xdc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC2_Init+0xdc>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC2_Init+0xdc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_ADC2_Init+0xdc>)
 80007dc:	f001 feee 	bl	80025bc <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007e6:	f000 ff09 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ADC2_Init+0xe4>)
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ee:	2306      	movs	r3, #6
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	237f      	movs	r3, #127	; 0x7f
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fa:	2304      	movs	r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_ADC2_Init+0xdc>)
 8000808:	f002 f894 	bl	8002934 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 fef3 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_ADC2_Init+0xe8>)
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800081a:	230c      	movs	r3, #12
 800081c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_ADC2_Init+0xdc>)
 8000824:	f002 f886 	bl	8002934 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800082e:	f000 fee5 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000098 	.word	0x20000098
 8000840:	50000100 	.word	0x50000100
 8000844:	0c900008 	.word	0x0c900008
 8000848:	10c00010 	.word	0x10c00010

0800084c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2220      	movs	r2, #32
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f007 f9f5 	bl	8007c54 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_ADC3_Init+0xe4>)
 800086c:	4a31      	ldr	r2, [pc, #196]	; (8000934 <MX_ADC3_Init+0xe8>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000872:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000876:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000878:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_ADC3_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC3_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000892:	2204      	movs	r2, #4
 8000894:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_ADC3_Init+0xe4>)
 800089e:	2201      	movs	r2, #1
 80008a0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008d4:	f001 fe72 	bl	80025bc <HAL_ADC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 fe8d 	bl	80015fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008ee:	f002 fc87 	bl	8003200 <HAL_ADCEx_MultiModeConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008f8:	f000 fe80 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ADC3_Init+0xec>)
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000900:	2306      	movs	r3, #6
 8000902:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000904:	2302      	movs	r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000908:	237f      	movs	r3, #127	; 0x7f
 800090a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC3_Init+0xe4>)
 800091a:	f002 f80b 	bl	8002934 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000924:	f000 fe6a 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000104 	.word	0x20000104
 8000934:	50000400 	.word	0x50000400
 8000938:	14f00020 	.word	0x14f00020

0800093c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2220      	movs	r2, #32
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f007 f983 	bl	8007c54 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <MX_ADC4_Init+0xc4>)
 8000952:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000956:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800095a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_ADC4_Init+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC4_Init+0xc0>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000976:	2204      	movs	r2, #4
 8000978:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC4_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000982:	2201      	movs	r2, #1
 8000984:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000988:	2201      	movs	r2, #1
 800098a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_ADC4_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_ADC4_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009b8:	f001 fe00 	bl	80025bc <HAL_ADC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80009c2:	f000 fe1b 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_ADC4_Init+0xc8>)
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ca:	2306      	movs	r3, #6
 80009cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d2:	237f      	movs	r3, #127	; 0x7f
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d6:	2304      	movs	r3, #4
 80009d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009e4:	f001 ffa6 	bl	8002934 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80009ee:	f000 fe05 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000170 	.word	0x20000170
 8000a00:	50000500 	.word	0x50000500
 8000a04:	14f00020 	.word	0x14f00020

08000a08 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f007 f91d 	bl	8007c54 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <MX_ADC5_Init+0xc4>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a84:	f001 fd9a 	bl	80025bc <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000a8e:	f000 fdb5 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_ADC5_Init+0xc8>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9e:	237f      	movs	r3, #127	; 0x7f
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000ab0:	f001 ff40 	bl	8002934 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000aba:	f000 fd9f 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200001dc 	.word	0x200001dc
 8000acc:	50000600 	.word	0x50000600
 8000ad0:	08600004 	.word	0x08600004

08000ad4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0a6      	sub	sp, #152	; 0x98
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af0:	2254      	movs	r2, #84	; 0x54
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 f8ad 	bl	8007c54 <memset>
  if(adcHandle->Instance==ADC1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b02:	d16c      	bne.n	8000bde <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 f817 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b20:	f000 fd6c 	bl	80015fc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b24:	4ba0      	ldr	r3, [pc, #640]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a9f      	ldr	r2, [pc, #636]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b2e:	4b9e      	ldr	r3, [pc, #632]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d10b      	bne.n	8000b4e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b36:	4b9d      	ldr	r3, [pc, #628]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a9c      	ldr	r2, [pc, #624]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b9a      	ldr	r3, [pc, #616]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b97      	ldr	r3, [pc, #604]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a96      	ldr	r2, [pc, #600]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b94      	ldr	r3, [pc, #592]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f002 ff0f 	bl	80039a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b86:	4b8a      	ldr	r3, [pc, #552]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b88:	4a8a      	ldr	r2, [pc, #552]	; (8000db4 <HAL_ADC_MspInit+0x2e0>)
 8000b8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b8c:	4b88      	ldr	r3, [pc, #544]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b8e:	2205      	movs	r2, #5
 8000b90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b92:	4b87      	ldr	r3, [pc, #540]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b85      	ldr	r3, [pc, #532]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba4:	4b82      	ldr	r3, [pc, #520]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000baa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bac:	4b80      	ldr	r3, [pc, #512]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bb4:	4b7e      	ldr	r3, [pc, #504]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b7d      	ldr	r3, [pc, #500]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bc0:	487b      	ldr	r0, [pc, #492]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bc2:	f002 fd35 	bl	8003630 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000bcc:	f000 fd16 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a77      	ldr	r2, [pc, #476]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bd4:	655a      	str	r2, [r3, #84]	; 0x54
 8000bd6:	4a76      	ldr	r2, [pc, #472]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000bdc:	e1e0      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a75      	ldr	r2, [pc, #468]	; (8000db8 <HAL_ADC_MspInit+0x2e4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d16c      	bne.n	8000cc2 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bf2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 ffa5 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000c04:	f000 fcfa 	bl	80015fc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c08:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a66      	ldr	r2, [pc, #408]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c12:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10b      	bne.n	8000c32 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c1a:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a63      	ldr	r2, [pc, #396]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b61      	ldr	r3, [pc, #388]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a5d      	ldr	r2, [pc, #372]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000c4a:	23c0      	movs	r3, #192	; 0xc0
 8000c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c50:	2303      	movs	r3, #3
 8000c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f002 fe9d 	bl	80039a4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000c6a:	4b54      	ldr	r3, [pc, #336]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c6c:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <HAL_ADC_MspInit+0x2ec>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c72:	2224      	movs	r2, #36	; 0x24
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c76:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c96:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ca4:	4845      	ldr	r0, [pc, #276]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000ca6:	f002 fcc3 	bl	8003630 <HAL_DMA_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000cb0:	f000 fca4 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000cb8:	655a      	str	r2, [r3, #84]	; 0x54
 8000cba:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000cc0:	e16e      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a3f      	ldr	r2, [pc, #252]	; (8000dc4 <HAL_ADC_MspInit+0x2f0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	f040 8085 	bne.w	8000dd8 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000cd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000cd8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 ff32 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000cea:	f000 fc87 	bl	80015fc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a34      	ldr	r2, [pc, #208]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a29      	ldr	r2, [pc, #164]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a23      	ldr	r2, [pc, #140]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <HAL_ADC_MspInit+0x2f8>)
 8000d4c:	f002 fe2a 	bl	80039a4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_ADC_MspInit+0x300>)
 8000d54:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d58:	2225      	movs	r2, #37	; 0x25
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d8c:	f002 fc50 	bl	8003630 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000d96:	f000 fc31 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d9e:	655a      	str	r2, [r3, #84]	; 0x54
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000da6:	e0fb      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
 8000da8:	20000428 	.word	0x20000428
 8000dac:	40021000 	.word	0x40021000
 8000db0:	20000248 	.word	0x20000248
 8000db4:	40020008 	.word	0x40020008
 8000db8:	50000100 	.word	0x50000100
 8000dbc:	200002a8 	.word	0x200002a8
 8000dc0:	4002001c 	.word	0x4002001c
 8000dc4:	50000400 	.word	0x50000400
 8000dc8:	2000042c 	.word	0x2000042c
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	20000308 	.word	0x20000308
 8000dd4:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a72      	ldr	r2, [pc, #456]	; (8000fa8 <HAL_ADC_MspInit+0x4d4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d16c      	bne.n	8000ebc <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000de8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000dec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fea8 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000dfe:	f000 fbfd 	bl	80015fc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e02:	4b6a      	ldr	r3, [pc, #424]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	4a68      	ldr	r2, [pc, #416]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e0c:	4b67      	ldr	r3, [pc, #412]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10b      	bne.n	8000e2c <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000e14:	4b66      	ldr	r3, [pc, #408]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a65      	ldr	r2, [pc, #404]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4855      	ldr	r0, [pc, #340]	; (8000fb4 <HAL_ADC_MspInit+0x4e0>)
 8000e60:	f002 fda0 	bl	80039a4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e66:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <HAL_ADC_MspInit+0x4e8>)
 8000e68:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e6c:	2226      	movs	r2, #38	; 0x26
 8000e6e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e76:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e8a:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000e92:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e94:	2220      	movs	r2, #32
 8000e96:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000e9e:	4846      	ldr	r0, [pc, #280]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000ea0:	f002 fbc6 	bl	8003630 <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000eaa:	f000 fba7 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a41      	ldr	r2, [pc, #260]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000eba:	e071      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <HAL_ADC_MspInit+0x4ec>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d16c      	bne.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ed0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fe36 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000ee2:	f000 fb8b 	bl	80015fc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000eee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10b      	bne.n	8000f10 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f002 fd2d 	bl	80039a4 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_ADC_MspInit+0x4f4>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f52:	2227      	movs	r2, #39	; 0x27
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f86:	f002 fb53 	bl	8003630 <HAL_DMA_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000f90:	f000 fb34 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	3798      	adds	r7, #152	; 0x98
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	50000500 	.word	0x50000500
 8000fac:	2000042c 	.word	0x2000042c
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	20000368 	.word	0x20000368
 8000fbc:	40020044 	.word	0x40020044
 8000fc0:	50000600 	.word	0x50000600
 8000fc4:	200003c8 	.word	0x200003c8
 8000fc8:	40020058 	.word	0x40020058

08000fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_DMA_Init+0xb0>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <MX_DMA_Init+0xb0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6493      	str	r3, [r2, #72]	; 0x48
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_DMA_Init+0xb0>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_DMA_Init+0xb0>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_DMA_Init+0xb0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_DMA_Init+0xb0>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	200b      	movs	r0, #11
 8001008:	f002 fadd 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800100c:	200b      	movs	r0, #11
 800100e:	f002 faf4 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200c      	movs	r0, #12
 8001018:	f002 fad5 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800101c:	200c      	movs	r0, #12
 800101e:	f002 faec 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200d      	movs	r0, #13
 8001028:	f002 facd 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800102c:	200d      	movs	r0, #13
 800102e:	f002 fae4 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	200e      	movs	r0, #14
 8001038:	f002 fac5 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800103c:	200e      	movs	r0, #14
 800103e:	f002 fadc 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200f      	movs	r0, #15
 8001048:	f002 fabd 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800104c:	200f      	movs	r0, #15
 800104e:	f002 fad4 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2010      	movs	r0, #16
 8001058:	f002 fab5 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800105c:	2010      	movs	r0, #16
 800105e:	f002 facc 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2011      	movs	r0, #17
 8001068:	f002 faad 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800106c:	2011      	movs	r0, #17
 800106e:	f002 fac4 	bl	80035fa <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <vEncoderSystemInit>:
extern contador_encoder2;

static int* pLeftMotorCoun, pRightMotorCount;

//void vEncoderSystemInit(int pLeftMotorCount, int pRightMotorCount) {
void vEncoderSystemInit(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&LEFT_ENCODER_TIM, ENCODER_CHANNEL);
 8001084:	2100      	movs	r1, #0
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <vEncoderSystemInit+0x18>)
 8001088:	f004 fab8 	bl	80055fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&RIGHT_ENCODER_TIM, ENCODER_CHANNEL);
 800108c:	2100      	movs	r1, #0
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <vEncoderSystemInit+0x1c>)
 8001090:	f004 fab4 	bl	80055fc <HAL_TIM_IC_Start_IT>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000578 	.word	0x20000578
 800109c:	200005c4 	.word	0x200005c4

080010a0 <vEncoderSystemExecuteMeasurement>:
void vEncoderSystemExecuteMeasurement(){
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	   // Tempo de amostragem em segundos
	    //float tempo_amostragem_s = tempo_amostragem_ms / 1000.0;

	    // Calcula o RPM
	    //motor 80:1 e sao duas pas logo para uma rotacao temos 160 do encoder
	    rpm_d = (contador_encoder * 60) / (160 * tempo_amostragem_s);
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <vEncoderSystemExecuteMeasurement+0x60>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4619      	mov	r1, r3
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <vEncoderSystemExecuteMeasurement+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	015b      	lsls	r3, r3, #5
 80010be:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c2:	4a11      	ldr	r2, [pc, #68]	; (8001108 <vEncoderSystemExecuteMeasurement+0x68>)
 80010c4:	6013      	str	r3, [r2, #0]
	    rpm_e = (contador_encoder2 * 60) / (160 * tempo_amostragem_s);
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <vEncoderSystemExecuteMeasurement+0x6c>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4613      	mov	r3, r2
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4619      	mov	r1, r3
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <vEncoderSystemExecuteMeasurement+0x64>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <vEncoderSystemExecuteMeasurement+0x70>)
 80010e6:	6013      	str	r3, [r2, #0]
	    // Resetar o contador para a próxima amostragem
	    contador_encoder = 0;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <vEncoderSystemExecuteMeasurement+0x60>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
	    contador_encoder2 = 0;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <vEncoderSystemExecuteMeasurement+0x6c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2000048c 	.word	0x2000048c
 8001104:	20000000 	.word	0x20000000
 8001108:	20000430 	.word	0x20000430
 800110c:	20000490 	.word	0x20000490
 8001110:	20000434 	.word	0x20000434

08001114 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a65      	ldr	r2, [pc, #404]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b63      	ldr	r3, [pc, #396]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001142:	4b60      	ldr	r3, [pc, #384]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a5f      	ldr	r2, [pc, #380]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a59      	ldr	r2, [pc, #356]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b57      	ldr	r3, [pc, #348]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b54      	ldr	r3, [pc, #336]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4a53      	ldr	r2, [pc, #332]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117e:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	4b4e      	ldr	r3, [pc, #312]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <MX_GPIO_Init+0x1b0>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f002 fd7c 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 80011b6:	4844      	ldr	r0, [pc, #272]	; (80012c8 <MX_GPIO_Init+0x1b4>)
 80011b8:	f002 fd76 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 80011bc:	f242 33a0 	movw	r3, #9120	; 0x23a0
 80011c0:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	483e      	ldr	r0, [pc, #248]	; (80012cc <MX_GPIO_Init+0x1b8>)
 80011d4:	f002 fbe6 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 80011d8:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f4:	f002 fbd6 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 80011f8:	2304      	movs	r3, #4
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001208:	2303      	movs	r3, #3
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	482d      	ldr	r0, [pc, #180]	; (80012c8 <MX_GPIO_Init+0x1b4>)
 8001214:	f002 fbc6 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8001218:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800122a:	2307      	movs	r3, #7
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4824      	ldr	r0, [pc, #144]	; (80012c8 <MX_GPIO_Init+0x1b4>)
 8001236:	f002 fbb5 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 800123a:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	481d      	ldr	r0, [pc, #116]	; (80012c8 <MX_GPIO_Init+0x1b4>)
 8001254:	f002 fba6 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8001258:	2340      	movs	r3, #64	; 0x40
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001268:	2302      	movs	r3, #2
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <MX_GPIO_Init+0x1b8>)
 8001274:	f002 fb96 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8001278:	2304      	movs	r3, #4
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <MX_GPIO_Init+0x1bc>)
 800128e:	f002 fb89 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001296:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <MX_GPIO_Init+0x1b4>)
 80012a8:	f002 fb7c 	bl	80039a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2028      	movs	r0, #40	; 0x28
 80012b2:	f002 f988 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b6:	2028      	movs	r0, #40	; 0x28
 80012b8:	f002 f99f 	bl	80035fa <HAL_NVIC_EnableIRQ>

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000c00 	.word	0x48000c00

080012d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_I2C2_Init+0x74>)
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <MX_I2C2_Init+0x78>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_I2C2_Init+0x74>)
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <MX_I2C2_Init+0x7c>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_I2C2_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_I2C2_Init+0x74>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_I2C2_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_I2C2_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_I2C2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_I2C2_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_I2C2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800130e:	480e      	ldr	r0, [pc, #56]	; (8001348 <MX_I2C2_Init+0x74>)
 8001310:	f002 fd05 	bl	8003d1e <HAL_I2C_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800131a:	f000 f96f 	bl	80015fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <MX_I2C2_Init+0x74>)
 8001322:	f002 fd97 	bl	8003e54 <HAL_I2CEx_ConfigAnalogFilter>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800132c:	f000 f966 	bl	80015fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_I2C2_Init+0x74>)
 8001334:	f002 fdd9 	bl	8003eea <HAL_I2CEx_ConfigDigitalFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800133e:	f000 f95d 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000438 	.word	0x20000438
 800134c:	40005800 	.word	0x40005800
 8001350:	30a0a7fb 	.word	0x30a0a7fb

08001354 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0a0      	sub	sp, #128	; 0x80
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	2254      	movs	r2, #84	; 0x54
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f006 fc6d 	bl	8007c54 <memset>
  if(i2cHandle->Instance==I2C2)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <HAL_I2C_MspInit+0xe0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d153      	bne.n	800142c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001388:	2300      	movs	r3, #0
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fbd9 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800139c:	f000 f92e 	bl	80015fc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	4a24      	ldr	r2, [pc, #144]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 80013d0:	2310      	movs	r3, #16
 80013d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d4:	2312      	movs	r3, #18
 80013d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013e0:	2304      	movs	r3, #4
 80013e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013e8:	4619      	mov	r1, r3
 80013ea:	4814      	ldr	r0, [pc, #80]	; (800143c <HAL_I2C_MspInit+0xe8>)
 80013ec:	f002 fada 	bl	80039a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 80013f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f6:	2312      	movs	r3, #18
 80013f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001402:	2304      	movs	r3, #4
 8001404:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f002 fac8 	bl	80039a4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 800141a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800141e:	6593      	str	r3, [r2, #88]	; 0x58
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_I2C_MspInit+0xe4>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800142c:	bf00      	nop
 800142e:	3780      	adds	r7, #128	; 0x80
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40005800 	.word	0x40005800
 8001438:	40021000 	.word	0x40021000
 800143c:	48000800 	.word	0x48000800

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 fe51 	bl	80020ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f854 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f7ff fe62 	bl	8001114 <MX_GPIO_Init>
  MX_DMA_Init();
 8001450:	f7ff fdbc 	bl	8000fcc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001454:	f000 fd22 	bl	8001e9c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001458:	f7ff f90a 	bl	8000670 <MX_ADC1_Init>
  MX_ADC2_Init();
 800145c:	f7ff f980 	bl	8000760 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001460:	f7ff f9f4 	bl	800084c <MX_ADC3_Init>
  MX_TIM1_Init();
 8001464:	f000 f9a4 	bl	80017b0 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001468:	f000 fb42 	bl	8001af0 <MX_TIM16_Init>
  MX_TIM4_Init();
 800146c:	f000 fa5c 	bl	8001928 <MX_TIM4_Init>
  MX_ADC4_Init();
 8001470:	f7ff fa64 	bl	800093c <MX_ADC4_Init>
  MX_ADC5_Init();
 8001474:	f7ff fac8 	bl	8000a08 <MX_ADC5_Init>
  MX_I2C2_Init();
 8001478:	f7ff ff2c 	bl	80012d4 <MX_I2C2_Init>
  MX_TIM8_Init();
 800147c:	f000 faa4 	bl	80019c8 <MX_TIM8_Init>
  MX_TIM17_Init();
 8001480:	f000 fb80 	bl	8001b84 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERNAL_CLOCK);
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <main+0xb0>)
 8001486:	f003 fe75 	bl	8005174 <HAL_TIM_Base_Start_IT>
  vPowerTrainSystemInit();
 800148a:	f7ff f863 	bl	8000554 <vPowerTrainSystemInit>
  vEncoderSystemInit();
 800148e:	f7ff fdf7 	bl	8001080 <vEncoderSystemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001492:	2100      	movs	r1, #0
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff f86f 	bl	8000578 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR,CLOCKWISE);
 800149a:	2100      	movs	r1, #0
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff f86b 	bl	8000578 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 1000);
 80014a2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80014e0 <main+0xa0>
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff f8bc 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR, 1000);
 80014ac:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80014e0 <main+0xa0>
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff f8b7 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(60000);
 80014b6:	f64e 2060 	movw	r0, #60000	; 0xea60
 80014ba:	f000 fe87 	bl	80021cc <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 0);
 80014be:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80014e8 <main+0xa8>
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff f8ae 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 80014c8:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80014e8 <main+0xa8>
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff f8a9 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(10000);
 80014d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80014d6:	f000 fe79 	bl	80021cc <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 80014da:	e7da      	b.n	8001492 <main+0x52>
 80014dc:	f3af 8000 	nop.w
 80014e0:	00000000 	.word	0x00000000
 80014e4:	408f4000 	.word	0x408f4000
	...
 80014f0:	200004e0 	.word	0x200004e0

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	2238      	movs	r2, #56	; 0x38
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f006 fba6 	bl	8007c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001516:	2000      	movs	r0, #0
 8001518:	f002 fd34 	bl	8003f84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152e:	2302      	movs	r3, #2
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001532:	2304      	movs	r3, #4
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001536:	2355      	movs	r3, #85	; 0x55
 8001538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fdce 	bl	80040ec <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001556:	f000 f851 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2303      	movs	r3, #3
 8001560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2104      	movs	r1, #4
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f8cc 	bl	8004710 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800157e:	f000 f83d 	bl	80015fc <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3750      	adds	r7, #80	; 0x50
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d104      	bne.n	80015a8 <HAL_TIM_IC_CaptureCallback+0x1c>
        contador_encoder++;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_TIM_IC_CaptureCallback+0x40>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_TIM_IC_CaptureCallback+0x40>)
 80015a6:	6013      	str	r3, [r2, #0]
    } if (htim->Instance == TIM16) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d104      	bne.n	80015bc <HAL_TIM_IC_CaptureCallback+0x30>
    	contador_encoder2++;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x48>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x48>)
 80015ba:	6013      	str	r3, [r2, #0]
    }
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40014800 	.word	0x40014800
 80015cc:	2000048c 	.word	0x2000048c
 80015d0:	40014400 	.word	0x40014400
 80015d4:	20000490 	.word	0x20000490

080015d8 <HAL_TIM_PeriodElapsedCallback>:
// chama a funcao de calcular o rpm a cada 1 min
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x16>
    	vEncoderSystemExecuteMeasurement();
 80015ea:	f7ff fd59 	bl	80010a0 <vEncoderSystemExecuteMeasurement>
    }
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40000800 	.word	0x40000800

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x44>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x44>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6613      	str	r3, [r2, #96]	; 0x60
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x44>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_MspInit+0x44>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_MspInit+0x44>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800163e:	f002 fd45 	bl	80040cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 fd78 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Channel1_IRQHandler+0x10>)
 80016aa:	f002 f869 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000248 	.word	0x20000248

080016b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Channel2_IRQHandler+0x10>)
 80016be:	f002 f85f 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002a8 	.word	0x200002a8

080016cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <DMA1_Channel3_IRQHandler+0x10>)
 80016d2:	f002 f855 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000308 	.word	0x20000308

080016e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA1_Channel4_IRQHandler+0x10>)
 80016e6:	f002 f84b 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000368 	.word	0x20000368

080016f4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <DMA1_Channel5_IRQHandler+0x10>)
 80016fa:	f002 f841 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200003c8 	.word	0x200003c8

08001708 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <DMA1_Channel6_IRQHandler+0x10>)
 800170e:	f002 f837 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200006a4 	.word	0x200006a4

0800171c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA1_Channel7_IRQHandler+0x10>)
 8001722:	f002 f82d 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000704 	.word	0x20000704

08001730 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001736:	f004 f8b1 	bl	800589c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800173a:	4803      	ldr	r0, [pc, #12]	; (8001748 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800173c:	f004 f8ae 	bl	800589c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000494 	.word	0x20000494
 8001748:	20000578 	.word	0x20000578

0800174c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001752:	f004 f8a3 	bl	800589c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001756:	4803      	ldr	r0, [pc, #12]	; (8001764 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001758:	f004 f8a0 	bl	800589c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000494 	.word	0x20000494
 8001764:	200005c4 	.word	0x200005c4

08001768 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM4_IRQHandler+0x10>)
 800176e:	f004 f895 	bl	800589c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200004e0 	.word	0x200004e0

0800177c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001780:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001784:	f002 faa8 	bl	8003cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b09c      	sub	sp, #112	; 0x70
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2234      	movs	r2, #52	; 0x34
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 fa32 	bl	8007c54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f0:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <MX_TIM1_Init+0x170>)
 80017f2:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <MX_TIM1_Init+0x174>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <MX_TIM1_Init+0x170>)
 80017f8:	2210      	movs	r2, #16
 80017fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b48      	ldr	r3, [pc, #288]	; (8001920 <MX_TIM1_Init+0x170>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <MX_TIM1_Init+0x170>)
 8001804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001808:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b45      	ldr	r3, [pc, #276]	; (8001920 <MX_TIM1_Init+0x170>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <MX_TIM1_Init+0x170>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b42      	ldr	r3, [pc, #264]	; (8001920 <MX_TIM1_Init+0x170>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800181c:	4840      	ldr	r0, [pc, #256]	; (8001920 <MX_TIM1_Init+0x170>)
 800181e:	f003 fbe1 	bl	8004fe4 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001828:	f7ff fee8 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001832:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001836:	4619      	mov	r1, r3
 8001838:	4839      	ldr	r0, [pc, #228]	; (8001920 <MX_TIM1_Init+0x170>)
 800183a:	f004 fb2f 	bl	8005e9c <HAL_TIM_ConfigClockSource>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001844:	f7ff feda 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001848:	4835      	ldr	r0, [pc, #212]	; (8001920 <MX_TIM1_Init+0x170>)
 800184a:	f003 fd0b 	bl	8005264 <HAL_TIM_PWM_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001854:	f7ff fed2 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001864:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001868:	4619      	mov	r1, r3
 800186a:	482d      	ldr	r0, [pc, #180]	; (8001920 <MX_TIM1_Init+0x170>)
 800186c:	f005 fa14 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001876:	f7ff fec1 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187a:	2360      	movs	r3, #96	; 0x60
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001882:	2300      	movs	r3, #0
 8001884:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001896:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4820      	ldr	r0, [pc, #128]	; (8001920 <MX_TIM1_Init+0x170>)
 80018a0:	f004 f9e8 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018aa:	f7ff fea7 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018b2:	2204      	movs	r2, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	481a      	ldr	r0, [pc, #104]	; (8001920 <MX_TIM1_Init+0x170>)
 80018b8:	f004 f9dc 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80018c2:	f7ff fe9b 	bl	80015fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM1_Init+0x170>)
 8001904:	f005 fa5e 	bl	8006dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800190e:	f7ff fe75 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001912:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM1_Init+0x170>)
 8001914:	f000 fa64 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 8001918:	bf00      	nop
 800191a:	3770      	adds	r7, #112	; 0x70
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000494 	.word	0x20000494
 8001924:	40012c00 	.word	0x40012c00

08001928 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_TIM4_Init+0x98>)
 8001948:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <MX_TIM4_Init+0x9c>)
 800194a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2599;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_TIM4_Init+0x98>)
 800194e:	f640 2227 	movw	r2, #2599	; 0xa27
 8001952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_TIM4_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65383;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_TIM4_Init+0x98>)
 800195c:	f64f 7267 	movw	r2, #65383	; 0xff67
 8001960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_TIM4_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_TIM4_Init+0x98>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <MX_TIM4_Init+0x98>)
 8001970:	f003 fb38 	bl	8004fe4 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800197a:	f7ff fe3f 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_TIM4_Init+0x98>)
 800198c:	f004 fa86 	bl	8005e9c <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001996:	f7ff fe31 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_TIM4_Init+0x98>)
 80019a8:	f005 f976 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80019b2:	f7ff fe23 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200004e0 	.word	0x200004e0
 80019c4:	40000800 	.word	0x40000800

080019c8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b098      	sub	sp, #96	; 0x60
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2234      	movs	r2, #52	; 0x34
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f006 f92d 	bl	8007c54 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <MX_TIM8_Init+0x120>)
 80019fc:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <MX_TIM8_Init+0x124>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a1a:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a26:	4830      	ldr	r0, [pc, #192]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a28:	f003 fc1c 	bl	8005264 <HAL_TIM_PWM_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001a32:	f7ff fde3 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a46:	4619      	mov	r1, r3
 8001a48:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a4a:	f005 f925 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a54:	f7ff fdd2 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a58:	2360      	movs	r3, #96	; 0x60
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a60:	2300      	movs	r3, #0
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a64:	2300      	movs	r3, #0
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481a      	ldr	r0, [pc, #104]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001a7e:	f004 f8f9 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a88:	f7ff fdb8 	bl	80015fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001aca:	f005 f97b 	bl	8006dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001ad4:	f7ff fd92 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <MX_TIM8_Init+0x120>)
 8001ada:	f000 f981 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 8001ade:	bf00      	nop
 8001ae0:	3760      	adds	r7, #96	; 0x60
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000052c 	.word	0x2000052c
 8001aec:	40013400 	.word	0x40013400

08001af0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001af6:	463b      	mov	r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b04:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <MX_TIM16_Init+0x90>)
 8001b06:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b0a:	22a9      	movs	r2, #169	; 0xa9
 8001b0c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b16:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b1a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b2e:	4813      	ldr	r0, [pc, #76]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b30:	f003 fa58 	bl	8004fe4 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8001b3a:	f7ff fd5f 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001b3e:	480f      	ldr	r0, [pc, #60]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b40:	f003 fcfa 	bl	8005538 <HAL_TIM_IC_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001b4a:	f7ff fd57 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b52:	2301      	movs	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_TIM16_Init+0x8c>)
 8001b66:	f003 ffe8 	bl	8005b3a <HAL_TIM_IC_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001b70:	f7ff fd44 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000578 	.word	0x20000578
 8001b80:	40014400 	.word	0x40014400

08001b84 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001b98:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <MX_TIM17_Init+0x90>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001b9e:	22a9      	movs	r2, #169	; 0xa9
 8001ba0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001baa:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bae:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bc2:	4813      	ldr	r0, [pc, #76]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001bc4:	f003 fa0e 	bl	8004fe4 <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8001bce:	f7ff fd15 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001bd2:	480f      	ldr	r0, [pc, #60]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001bd4:	f003 fcb0 	bl	8005538 <HAL_TIM_IC_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001bde:	f7ff fd0d 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001be6:	2301      	movs	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_TIM17_Init+0x8c>)
 8001bfa:	f003 ff9e 	bl	8005b3a <HAL_TIM_IC_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8001c04:	f7ff fcfa 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200005c4 	.word	0x200005c4
 8001c14:	40014800 	.word	0x40014800

08001c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_TIM_Base_MspInit+0x170>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11c      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3e:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001c40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c44:	6613      	str	r3, [r2, #96]	; 0x60
 8001c46:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2019      	movs	r0, #25
 8001c58:	f001 fcb5 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c5c:	2019      	movs	r0, #25
 8001c5e:	f001 fccc 	bl	80035fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201a      	movs	r0, #26
 8001c68:	f001 fcad 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c6c:	201a      	movs	r0, #26
 8001c6e:	f001 fcc4 	bl	80035fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001c72:	e084      	b.n	8001d7e <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_TIM_Base_MspInit+0x178>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d114      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c7e:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	4a42      	ldr	r2, [pc, #264]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8a:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	201e      	movs	r0, #30
 8001c9c:	f001 fc93 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ca0:	201e      	movs	r0, #30
 8001ca2:	f001 fcaa 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8001ca6:	e06a      	b.n	8001d7e <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM16)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a39      	ldr	r2, [pc, #228]	; (8001d94 <HAL_TIM_Base_MspInit+0x17c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d130      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb6:	4a35      	ldr	r2, [pc, #212]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cbe:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4826      	ldr	r0, [pc, #152]	; (8001d98 <HAL_TIM_Base_MspInit+0x180>)
 8001cfe:	f001 fe51 	bl	80039a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2019      	movs	r0, #25
 8001d08:	f001 fc5d 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d0c:	2019      	movs	r0, #25
 8001d0e:	f001 fc74 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8001d12:	e034      	b.n	8001d7e <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM17)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_TIM_Base_MspInit+0x184>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12f      	bne.n	8001d7e <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_TIM_Base_MspInit+0x174>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001d5e:	230a      	movs	r3, #10
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d66:	4619      	mov	r1, r3
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <HAL_TIM_Base_MspInit+0x180>)
 8001d6a:	f001 fe1b 	bl	80039a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	201a      	movs	r0, #26
 8001d74:	f001 fc27 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d78:	201a      	movs	r0, #26
 8001d7a:	f001 fc3e 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3738      	adds	r7, #56	; 0x38
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40012c00 	.word	0x40012c00
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40014400 	.word	0x40014400
 8001d98:	48000400 	.word	0x48000400
 8001d9c:	40014800 	.word	0x40014800

08001da0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_TIM_PWM_MspInit+0x38>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d10b      	bne.n	8001dca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8001db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40013400 	.word	0x40013400
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_TIM_MspPostInit+0xac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d11c      	bne.n	8001e3c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_TIM_MspPostInit+0xb0>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_TIM_MspPostInit+0xb0>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_TIM_MspPostInit+0xb0>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4817      	ldr	r0, [pc, #92]	; (8001e94 <HAL_TIM_MspPostInit+0xb4>)
 8001e36:	f001 fdb5 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e3a:	e022      	b.n	8001e82 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <HAL_TIM_MspPostInit+0xb8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d11d      	bne.n	8001e82 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_TIM_MspPostInit+0xb0>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_TIM_MspPostInit+0xb0>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_TIM_MspPostInit+0xb0>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001e70:	2302      	movs	r3, #2
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f001 fd91 	bl	80039a4 <HAL_GPIO_Init>
}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40021000 	.word	0x40021000
 8001e94:	48000800 	.word	0x48000800
 8001e98:	40013400 	.word	0x40013400

08001e9c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ea2:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <MX_LPUART1_UART_Init+0x90>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ede:	4812      	ldr	r0, [pc, #72]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ee0:	f005 f84a 	bl	8006f78 <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001eea:	f7ff fb87 	bl	80015fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eee:	2100      	movs	r1, #0
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001ef2:	f005 fde5 	bl	8007ac0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001efc:	f7ff fb7e 	bl	80015fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f00:	2100      	movs	r1, #0
 8001f02:	4809      	ldr	r0, [pc, #36]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001f04:	f005 fe1a 	bl	8007b3c <HAL_UARTEx_SetRxFifoThreshold>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001f0e:	f7ff fb75 	bl	80015fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_LPUART1_UART_Init+0x8c>)
 8001f14:	f005 fd9b 	bl	8007a4e <HAL_UARTEx_DisableFifoMode>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001f1e:	f7ff fb6d 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000610 	.word	0x20000610
 8001f2c:	40008000 	.word	0x40008000

08001f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b09e      	sub	sp, #120	; 0x78
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	2254      	movs	r2, #84	; 0x54
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f005 fe7f 	bl	8007c54 <memset>
  if(uartHandle->Instance==LPUART1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a49      	ldr	r2, [pc, #292]	; (8002080 <HAL_UART_MspInit+0x150>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f040 808a 	bne.w	8002076 <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f62:	2320      	movs	r3, #32
 8001f64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6a:	f107 0310 	add.w	r3, r7, #16
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fdea 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f7a:	f7ff fb3f 	bl	80015fc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f7e:	4b41      	ldr	r3, [pc, #260]	; (8002084 <HAL_UART_MspInit+0x154>)
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	4a40      	ldr	r2, [pc, #256]	; (8002084 <HAL_UART_MspInit+0x154>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <HAL_UART_MspInit+0x154>)
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_UART_MspInit+0x154>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a3a      	ldr	r2, [pc, #232]	; (8002084 <HAL_UART_MspInit+0x154>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_UART_MspInit+0x154>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001fae:	230c      	movs	r3, #12
 8001fb0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fcc:	f001 fcea 	bl	80039a4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001fd2:	4a2e      	ldr	r2, [pc, #184]	; (800208c <HAL_UART_MspInit+0x15c>)
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001fd8:	2222      	movs	r2, #34	; 0x22
 8001fda:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_UART_MspInit+0x158>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002006:	4820      	ldr	r0, [pc, #128]	; (8002088 <HAL_UART_MspInit+0x158>)
 8002008:	f001 fb12 	bl	8003630 <HAL_DMA_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002012:	f7ff faf3 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <HAL_UART_MspInit+0x158>)
 800201a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_UART_MspInit+0x158>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_UART_MspInit+0x160>)
 8002026:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <HAL_UART_MspInit+0x164>)
 8002028:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_UART_MspInit+0x160>)
 800202c:	2223      	movs	r2, #35	; 0x23
 800202e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_UART_MspInit+0x160>)
 8002032:	2210      	movs	r2, #16
 8002034:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_UART_MspInit+0x160>)
 8002038:	2200      	movs	r2, #0
 800203a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_UART_MspInit+0x160>)
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_UART_MspInit+0x160>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_MspInit+0x160>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_UART_MspInit+0x160>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_UART_MspInit+0x160>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800205a:	480d      	ldr	r0, [pc, #52]	; (8002090 <HAL_UART_MspInit+0x160>)
 800205c:	f001 fae8 	bl	8003630 <HAL_DMA_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002066:	f7ff fac9 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_UART_MspInit+0x160>)
 800206e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_UART_MspInit+0x160>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002076:	bf00      	nop
 8002078:	3778      	adds	r7, #120	; 0x78
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40008000 	.word	0x40008000
 8002084:	40021000 	.word	0x40021000
 8002088:	200006a4 	.word	0x200006a4
 800208c:	4002006c 	.word	0x4002006c
 8002090:	20000704 	.word	0x20000704
 8002094:	40020080 	.word	0x40020080

08002098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800209a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800209c:	f7ff fb76 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020a2:	490d      	ldr	r1, [pc, #52]	; (80020d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <LoopForever+0xe>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b8:	4c0a      	ldr	r4, [pc, #40]	; (80020e4 <LoopForever+0x16>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020c6:	f005 fdcd 	bl	8007c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ca:	f7ff f9b9 	bl	8001440 <main>

080020ce <LoopForever>:

LoopForever:
    b LoopForever
 80020ce:	e7fe      	b.n	80020ce <LoopForever>
  ldr   r0, =_estack
 80020d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80020dc:	08007d14 	.word	0x08007d14
  ldr r2, =_sbss
 80020e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80020e4:	20000768 	.word	0x20000768

080020e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC1_2_IRQHandler>

080020ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f001 fa5b 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f80e 	bl	800211c <HAL_InitTick>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	e001      	b.n	8002110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800210c:	f7ff fa7c 	bl	8001608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002110:	79fb      	ldrb	r3, [r7, #7]

}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_InitTick+0x68>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d022      	beq.n	8002176 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_InitTick+0x6c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_InitTick+0x68>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800213c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f001 fa66 	bl	8003616 <HAL_SYSTICK_Config>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10f      	bne.n	8002170 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d809      	bhi.n	800216a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002156:	2200      	movs	r2, #0
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	f04f 30ff 	mov.w	r0, #4294967295
 800215e:	f001 fa32 	bl	80035c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_InitTick+0x70>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e007      	b.n	800217a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	e004      	b.n	800217a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e001      	b.n	800217a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000000c 	.word	0x2000000c
 8002188:	20000004 	.word	0x20000004
 800218c:	20000008 	.word	0x20000008

08002190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_IncTick+0x1c>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_IncTick+0x20>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4413      	add	r3, r2
 800219e:	4a03      	ldr	r2, [pc, #12]	; (80021ac <HAL_IncTick+0x1c>)
 80021a0:	6013      	str	r3, [r2, #0]
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	20000764 	.word	0x20000764
 80021b0:	2000000c 	.word	0x2000000c

080021b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTick+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000764 	.word	0x20000764

080021cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ffee 	bl	80021b4 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d004      	beq.n	80021f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_Delay+0x40>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f0:	bf00      	nop
 80021f2:	f7ff ffdf 	bl	80021b4 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d8f7      	bhi.n	80021f2 <HAL_Delay+0x26>
  {
  }
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000000c 	.word	0x2000000c

08002210 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	609a      	str	r2, [r3, #8]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	609a      	str	r2, [r3, #8]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3360      	adds	r3, #96	; 0x60
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <LL_ADC_SetOffset+0x44>)
 800229a:	4013      	ands	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	03fff000 	.word	0x03fff000

080022c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3360      	adds	r3, #96	; 0x60
 80022ce:	461a      	mov	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3360      	adds	r3, #96	; 0x60
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002322:	b480      	push	{r7}
 8002324:	b087      	sub	sp, #28
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3360      	adds	r3, #96	; 0x60
 8002332:	461a      	mov	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	431a      	orrs	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3360      	adds	r3, #96	; 0x60
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	431a      	orrs	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	615a      	str	r2, [r3, #20]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3330      	adds	r3, #48	; 0x30
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	4413      	add	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	211f      	movs	r1, #31
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	f003 011f 	and.w	r1, r3, #31
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	431a      	orrs	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3314      	adds	r3, #20
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	0e5b      	lsrs	r3, r3, #25
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	4413      	add	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	0d1b      	lsrs	r3, r3, #20
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2107      	movs	r1, #7
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	401a      	ands	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	0d1b      	lsrs	r3, r3, #20
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	43db      	mvns	r3, r3
 800247e:	401a      	ands	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0318 	and.w	r3, r3, #24
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002488:	40d9      	lsrs	r1, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	400b      	ands	r3, r1
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	431a      	orrs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	0007ffff 	.word	0x0007ffff

080024ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6093      	str	r3, [r2, #8]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e4:	d101      	bne.n	80024ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800250c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002534:	d101      	bne.n	800253a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <LL_ADC_IsEnabled+0x18>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <LL_ADC_IsEnabled+0x1a>
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d101      	bne.n	8002586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d101      	bne.n	80025ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1a9      	b.n	800292a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe fa75 	bl	8000ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff67 	bl	80024d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff4d 	bl	80024ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff82 	bl	8002520 <LL_ADC_IsInternalRegulatorEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d115      	bne.n	800264e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff66 	bl	80024f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800262c:	4b9c      	ldr	r3, [pc, #624]	; (80028a0 <HAL_ADC_Init+0x2e4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	4a9c      	ldr	r2, [pc, #624]	; (80028a4 <HAL_ADC_Init+0x2e8>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002640:	e002      	b.n	8002648 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff64 	bl	8002520 <LL_ADC_IsInternalRegulatorEnabled>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	f043 0210 	orr.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff75 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 8002684:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 8142 	bne.w	8002918 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 813e 	bne.w	8002918 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026a4:	f043 0202 	orr.w	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff49 	bl	8002548 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d141      	bne.n	8002740 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c4:	d004      	beq.n	80026d0 <HAL_ADC_Init+0x114>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a77      	ldr	r2, [pc, #476]	; (80028a8 <HAL_ADC_Init+0x2ec>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10f      	bne.n	80026f0 <HAL_ADC_Init+0x134>
 80026d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026d4:	f7ff ff38 	bl	8002548 <LL_ADC_IsEnabled>
 80026d8:	4604      	mov	r4, r0
 80026da:	4873      	ldr	r0, [pc, #460]	; (80028a8 <HAL_ADC_Init+0x2ec>)
 80026dc:	f7ff ff34 	bl	8002548 <LL_ADC_IsEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4323      	orrs	r3, r4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e012      	b.n	8002716 <HAL_ADC_Init+0x15a>
 80026f0:	486e      	ldr	r0, [pc, #440]	; (80028ac <HAL_ADC_Init+0x2f0>)
 80026f2:	f7ff ff29 	bl	8002548 <LL_ADC_IsEnabled>
 80026f6:	4604      	mov	r4, r0
 80026f8:	486d      	ldr	r0, [pc, #436]	; (80028b0 <HAL_ADC_Init+0x2f4>)
 80026fa:	f7ff ff25 	bl	8002548 <LL_ADC_IsEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	431c      	orrs	r4, r3
 8002702:	486c      	ldr	r0, [pc, #432]	; (80028b4 <HAL_ADC_Init+0x2f8>)
 8002704:	f7ff ff20 	bl	8002548 <LL_ADC_IsEnabled>
 8002708:	4603      	mov	r3, r0
 800270a:	4323      	orrs	r3, r4
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002722:	d004      	beq.n	800272e <HAL_ADC_Init+0x172>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5f      	ldr	r2, [pc, #380]	; (80028a8 <HAL_ADC_Init+0x2ec>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_ADC_Init+0x176>
 800272e:	4a62      	ldr	r2, [pc, #392]	; (80028b8 <HAL_ADC_Init+0x2fc>)
 8002730:	e000      	b.n	8002734 <HAL_ADC_Init+0x178>
 8002732:	4a62      	ldr	r2, [pc, #392]	; (80028bc <HAL_ADC_Init+0x300>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f7ff fd68 	bl	8002210 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7f5b      	ldrb	r3, [r3, #29]
 8002744:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800274a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002750:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002756:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800276a:	2b01      	cmp	r3, #1
 800276c:	d106      	bne.n	800277c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	3b01      	subs	r3, #1
 8002774:	045b      	lsls	r3, r3, #17
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <HAL_ADC_Init+0x304>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fee4 	bl	8002594 <LL_ADC_INJ_IsConversionOngoing>
 80027cc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d17f      	bne.n	80028d4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d17c      	bne.n	80028d4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027de:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f6:	f023 0302 	bic.w	r3, r3, #2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	430b      	orrs	r3, r1
 8002802:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d017      	beq.n	800283c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800281a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002824:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6911      	ldr	r1, [r2, #16]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	430b      	orrs	r3, r1
 8002836:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800283a:	e013      	b.n	8002864 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800284a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800285c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002860:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286a:	2b01      	cmp	r3, #1
 800286c:	d12a      	bne.n	80028c4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002884:	4311      	orrs	r1, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002890:	430a      	orrs	r2, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	e019      	b.n	80028d4 <HAL_ADC_Init+0x318>
 80028a0:	20000004 	.word	0x20000004
 80028a4:	053e2d63 	.word	0x053e2d63
 80028a8:	50000100 	.word	0x50000100
 80028ac:	50000400 	.word	0x50000400
 80028b0:	50000500 	.word	0x50000500
 80028b4:	50000600 	.word	0x50000600
 80028b8:	50000300 	.word	0x50000300
 80028bc:	50000700 	.word	0x50000700
 80028c0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10c      	bne.n	80028f6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f023 010f 	bic.w	r1, r3, #15
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	1e5a      	subs	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
 80028f4:	e007      	b.n	8002906 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 020f 	bic.w	r2, r2, #15
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	65da      	str	r2, [r3, #92]	; 0x5c
 8002916:	e007      	b.n	8002928 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f043 0210 	orr.w	r2, r3, #16
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002928:	7ffb      	ldrb	r3, [r7, #31]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	bf00      	nop

08002934 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0b6      	sub	sp, #216	; 0xd8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800294e:	2b01      	cmp	r3, #1
 8002950:	d102      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x24>
 8002952:	2302      	movs	r3, #2
 8002954:	f000 bc13 	b.w	800317e <HAL_ADC_ConfigChannel+0x84a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fe02 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	f040 83f3 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	f7ff fd18 	bl	80023b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fdf0 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 800298e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fdfc 	bl	8002594 <LL_ADC_INJ_IsConversionOngoing>
 800299c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 81d9 	bne.w	8002d5c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 81d4 	bne.w	8002d5c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029bc:	d10f      	bne.n	80029de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7ff fd1f 	bl	800240c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fcd9 	bl	800238e <LL_ADC_SetSamplingTimeCommonConfig>
 80029dc:	e00e      	b.n	80029fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f7ff fd0e 	bl	800240c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fcc9 	bl	800238e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d022      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a2e:	f7ff fc23 	bl	8002278 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6919      	ldr	r1, [r3, #16]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f7ff fc6f 	bl	8002322 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x126>
 8002a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a58:	e000      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x128>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f7ff fc7b 	bl	8002358 <LL_ADC_SetOffsetSaturation>
 8002a62:	e17b      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fc28 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x15c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fc1d 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 021f 	and.w	r2, r3, #31
 8002a8e:	e01e      	b.n	8002ace <HAL_ADC_ConfigChannel+0x19a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fc12 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e004      	b.n	8002acc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0e9b      	lsrs	r3, r3, #26
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	e018      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x1e4>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002afe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e004      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d106      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fbe1 	bl	80022ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fbc5 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x222>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fbba 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	e01e      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x260>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fbaf 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e004      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x278>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	e018      	b.n	8002bde <HAL_ADC_ConfigChannel+0x2aa>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e004      	b.n	8002bde <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d106      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fb7e 	bl	80022ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fb62 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x2e8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fb57 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	f003 021f 	and.w	r2, r3, #31
 8002c1a:	e01e      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x326>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fb4c 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e004      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x33e>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	0e9b      	lsrs	r3, r3, #26
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	e016      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x36c>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e004      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d106      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2102      	movs	r1, #2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fb1d 	bl	80022ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2103      	movs	r1, #3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fb01 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x3aa>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2103      	movs	r1, #3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff faf6 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	e017      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x3da>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff faeb 	bl	80022c0 <LL_ADC_GetOffsetChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d00:	2320      	movs	r3, #32
 8002d02:	e003      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x3f2>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	e011      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x416>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d3e:	2320      	movs	r3, #32
 8002d40:	e003      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d106      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2200      	movs	r2, #0
 8002d54:	2103      	movs	r1, #3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fac8 	bl	80022ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fbf1 	bl	8002548 <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 813d 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f7ff fb72 	bl	8002464 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4aa2      	ldr	r2, [pc, #648]	; (8003010 <HAL_ADC_ConfigChannel+0x6dc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	f040 812e 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x480>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	3301      	adds	r3, #1
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2b09      	cmp	r3, #9
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e019      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x4b4>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002dcc:	2320      	movs	r3, #32
 8002dce:	e003      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2b09      	cmp	r3, #9
 8002de0:	bf94      	ite	ls
 8002de2:	2301      	movls	r3, #1
 8002de4:	2300      	movhi	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d079      	beq.n	8002ee0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x4d4>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	3301      	adds	r3, #1
 8002e00:	069b      	lsls	r3, r3, #26
 8002e02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e06:	e015      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x500>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e003      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	069b      	lsls	r3, r3, #26
 8002e30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x520>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	3301      	adds	r3, #1
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	e017      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x550>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	ea42 0103 	orr.w	r1, r2, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x576>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f003 021f 	and.w	r2, r3, #31
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	051b      	lsls	r3, r3, #20
 8002ea8:	e018      	b.n	8002edc <HAL_ADC_ConfigChannel+0x5a8>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e003      	b.n	8002ece <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002edc:	430b      	orrs	r3, r1
 8002ede:	e07e      	b.n	8002fde <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x5c8>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	069b      	lsls	r3, r3, #26
 8002ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efa:	e015      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x5f4>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e003      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	069b      	lsls	r3, r3, #26
 8002f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x614>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	2101      	movs	r1, #1
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	e017      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x644>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	61fb      	str	r3, [r7, #28]
  return result;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10d      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x670>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	3b1e      	subs	r3, #30
 8002f9c:	051b      	lsls	r3, r3, #20
 8002f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	e01b      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x6a8>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	613b      	str	r3, [r7, #16]
  return result;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e003      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 021f 	and.w	r2, r3, #31
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3b1e      	subs	r3, #30
 8002fd6:	051b      	lsls	r3, r3, #20
 8002fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fdc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7ff fa12 	bl	800240c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_ADC_ConfigChannel+0x6e0>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80be 	beq.w	8003172 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_ConfigChannel+0x6d6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_ADC_ConfigChannel+0x6e4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10a      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x6ec>
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <HAL_ADC_ConfigChannel+0x6e8>)
 800300c:	e009      	b.n	8003022 <HAL_ADC_ConfigChannel+0x6ee>
 800300e:	bf00      	nop
 8003010:	407f0000 	.word	0x407f0000
 8003014:	80080000 	.word	0x80080000
 8003018:	50000100 	.word	0x50000100
 800301c:	50000300 	.word	0x50000300
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_ADC_ConfigChannel+0x854>)
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f91a 	bl	800225c <LL_ADC_GetCommonPathInternalCh>
 8003028:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a56      	ldr	r2, [pc, #344]	; (800318c <HAL_ADC_ConfigChannel+0x858>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_ADC_ConfigChannel+0x70c>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a55      	ldr	r2, [pc, #340]	; (8003190 <HAL_ADC_ConfigChannel+0x85c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d13a      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d134      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003054:	d005      	beq.n	8003062 <HAL_ADC_ConfigChannel+0x72e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a4e      	ldr	r2, [pc, #312]	; (8003194 <HAL_ADC_ConfigChannel+0x860>)
 800305c:	4293      	cmp	r3, r2
 800305e:	f040 8085 	bne.w	800316c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306a:	d004      	beq.n	8003076 <HAL_ADC_ConfigChannel+0x742>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_ADC_ConfigChannel+0x864>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x746>
 8003076:	4a49      	ldr	r2, [pc, #292]	; (800319c <HAL_ADC_ConfigChannel+0x868>)
 8003078:	e000      	b.n	800307c <HAL_ADC_ConfigChannel+0x748>
 800307a:	4a43      	ldr	r2, [pc, #268]	; (8003188 <HAL_ADC_ConfigChannel+0x854>)
 800307c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f7ff f8d5 	bl	8002236 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800308c:	4b44      	ldr	r3, [pc, #272]	; (80031a0 <HAL_ADC_ConfigChannel+0x86c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	4a44      	ldr	r2, [pc, #272]	; (80031a4 <HAL_ADC_ConfigChannel+0x870>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030a6:	e002      	b.n	80030ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f9      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b4:	e05a      	b.n	800316c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <HAL_ADC_ConfigChannel+0x874>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d125      	bne.n	800310c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11f      	bne.n	800310c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a31      	ldr	r2, [pc, #196]	; (8003198 <HAL_ADC_ConfigChannel+0x864>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d104      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x7ac>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_ADC_ConfigChannel+0x878>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d047      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e8:	d004      	beq.n	80030f4 <HAL_ADC_ConfigChannel+0x7c0>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <HAL_ADC_ConfigChannel+0x864>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x7c4>
 80030f4:	4a29      	ldr	r2, [pc, #164]	; (800319c <HAL_ADC_ConfigChannel+0x868>)
 80030f6:	e000      	b.n	80030fa <HAL_ADC_ConfigChannel+0x7c6>
 80030f8:	4a23      	ldr	r2, [pc, #140]	; (8003188 <HAL_ADC_ConfigChannel+0x854>)
 80030fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7ff f896 	bl	8002236 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800310a:	e031      	b.n	8003170 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a27      	ldr	r2, [pc, #156]	; (80031b0 <HAL_ADC_ConfigChannel+0x87c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d12d      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d127      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <HAL_ADC_ConfigChannel+0x864>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d022      	beq.n	8003172 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003134:	d004      	beq.n	8003140 <HAL_ADC_ConfigChannel+0x80c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_ADC_ConfigChannel+0x864>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x810>
 8003140:	4a16      	ldr	r2, [pc, #88]	; (800319c <HAL_ADC_ConfigChannel+0x868>)
 8003142:	e000      	b.n	8003146 <HAL_ADC_ConfigChannel+0x812>
 8003144:	4a10      	ldr	r2, [pc, #64]	; (8003188 <HAL_ADC_ConfigChannel+0x854>)
 8003146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800314a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7ff f870 	bl	8002236 <LL_ADC_SetCommonPathInternalCh>
 8003156:	e00c      	b.n	8003172 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800316a:	e002      	b.n	8003172 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003170:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800317a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800317e:	4618      	mov	r0, r3
 8003180:	37d8      	adds	r7, #216	; 0xd8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	50000700 	.word	0x50000700
 800318c:	c3210000 	.word	0xc3210000
 8003190:	90c00010 	.word	0x90c00010
 8003194:	50000600 	.word	0x50000600
 8003198:	50000100 	.word	0x50000100
 800319c:	50000300 	.word	0x50000300
 80031a0:	20000004 	.word	0x20000004
 80031a4:	053e2d63 	.word	0x053e2d63
 80031a8:	c7520000 	.word	0xc7520000
 80031ac:	50000500 	.word	0x50000500
 80031b0:	cb840000 	.word	0xcb840000

080031b4 <LL_ADC_IsEnabled>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <LL_ADC_IsEnabled+0x18>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <LL_ADC_IsEnabled+0x1a>
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_ADC_REG_IsConversionOngoing>:
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d101      	bne.n	80031f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b0a1      	sub	sp, #132	; 0x84
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800321a:	2302      	movs	r3, #2
 800321c:	e0e7      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003226:	2300      	movs	r3, #0
 8003228:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800322a:	2300      	movs	r3, #0
 800322c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003236:	d102      	bne.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003238:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	e009      	b.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6e      	ldr	r2, [pc, #440]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d102      	bne.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003248:	4b6d      	ldr	r3, [pc, #436]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	e001      	b.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	f043 0220 	orr.w	r2, r3, #32
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0be      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ffb1 	bl	80031da <LL_ADC_REG_IsConversionOngoing>
 8003278:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ffab 	bl	80031da <LL_ADC_REG_IsConversionOngoing>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 80a0 	bne.w	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800328c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 809c 	bne.w	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329c:	d004      	beq.n	80032a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a55      	ldr	r2, [pc, #340]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032a8:	4b56      	ldr	r3, [pc, #344]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032aa:	e000      	b.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032ac:	4b56      	ldr	r3, [pc, #344]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d04b      	beq.n	8003350 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ca:	035b      	lsls	r3, r3, #13
 80032cc:	430b      	orrs	r3, r1
 80032ce:	431a      	orrs	r2, r3
 80032d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032dc:	d004      	beq.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a45      	ldr	r2, [pc, #276]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10f      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80032e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032ec:	f7ff ff62 	bl	80031b4 <LL_ADC_IsEnabled>
 80032f0:	4604      	mov	r4, r0
 80032f2:	4841      	ldr	r0, [pc, #260]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f4:	f7ff ff5e 	bl	80031b4 <LL_ADC_IsEnabled>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4323      	orrs	r3, r4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	e012      	b.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003308:	483c      	ldr	r0, [pc, #240]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800330a:	f7ff ff53 	bl	80031b4 <LL_ADC_IsEnabled>
 800330e:	4604      	mov	r4, r0
 8003310:	483b      	ldr	r0, [pc, #236]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003312:	f7ff ff4f 	bl	80031b4 <LL_ADC_IsEnabled>
 8003316:	4603      	mov	r3, r0
 8003318:	431c      	orrs	r4, r3
 800331a:	483c      	ldr	r0, [pc, #240]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800331c:	f7ff ff4a 	bl	80031b4 <LL_ADC_IsEnabled>
 8003320:	4603      	mov	r3, r0
 8003322:	4323      	orrs	r3, r4
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d056      	beq.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	6811      	ldr	r1, [r2, #0]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	6892      	ldr	r2, [r2, #8]
 8003346:	430a      	orrs	r2, r1
 8003348:	431a      	orrs	r2, r3
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800334e:	e047      	b.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003364:	d004      	beq.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d10f      	bne.n	8003390 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003370:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003374:	f7ff ff1e 	bl	80031b4 <LL_ADC_IsEnabled>
 8003378:	4604      	mov	r4, r0
 800337a:	481f      	ldr	r0, [pc, #124]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800337c:	f7ff ff1a 	bl	80031b4 <LL_ADC_IsEnabled>
 8003380:	4603      	mov	r3, r0
 8003382:	4323      	orrs	r3, r4
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e012      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003390:	481a      	ldr	r0, [pc, #104]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003392:	f7ff ff0f 	bl	80031b4 <LL_ADC_IsEnabled>
 8003396:	4604      	mov	r4, r0
 8003398:	4819      	ldr	r0, [pc, #100]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800339a:	f7ff ff0b 	bl	80031b4 <LL_ADC_IsEnabled>
 800339e:	4603      	mov	r3, r0
 80033a0:	431c      	orrs	r4, r3
 80033a2:	481a      	ldr	r0, [pc, #104]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033a4:	f7ff ff06 	bl	80031b4 <LL_ADC_IsEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4323      	orrs	r3, r4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033c2:	f023 030f 	bic.w	r3, r3, #15
 80033c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033ca:	e009      	b.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033de:	e000      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3784      	adds	r7, #132	; 0x84
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	50000100 	.word	0x50000100
 80033fc:	50000400 	.word	0x50000400
 8003400:	50000500 	.word	0x50000500
 8003404:	50000300 	.word	0x50000300
 8003408:	50000700 	.word	0x50000700
 800340c:	50000600 	.word	0x50000600

08003410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800343c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003442:	4a04      	ldr	r2, [pc, #16]	; (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	60d3      	str	r3, [r2, #12]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <__NVIC_GetPriorityGrouping+0x18>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	f003 0307 	and.w	r3, r3, #7
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db0b      	blt.n	800349e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4907      	ldr	r1, [pc, #28]	; (80034ac <__NVIC_EnableIRQ+0x38>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db0a      	blt.n	80034da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	490c      	ldr	r1, [pc, #48]	; (80034fc <__NVIC_SetPriority+0x4c>)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d8:	e00a      	b.n	80034f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4908      	ldr	r1, [pc, #32]	; (8003500 <__NVIC_SetPriority+0x50>)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f1c3 0307 	rsb	r3, r3, #7
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf28      	it	cs
 8003522:	2304      	movcs	r3, #4
 8003524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	2b06      	cmp	r3, #6
 800352c:	d902      	bls.n	8003534 <NVIC_EncodePriority+0x30>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3b03      	subs	r3, #3
 8003532:	e000      	b.n	8003536 <NVIC_EncodePriority+0x32>
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	401a      	ands	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43d9      	mvns	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	4313      	orrs	r3, r2
         );
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	; 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357c:	d301      	bcc.n	8003582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <SysTick_Config+0x40>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358a:	210f      	movs	r1, #15
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f7ff ff8e 	bl	80034b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <SysTick_Config+0x40>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <SysTick_Config+0x40>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff29 	bl	8003410 <__NVIC_SetPriorityGrouping>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d4:	f7ff ff40 	bl	8003458 <__NVIC_GetPriorityGrouping>
 80035d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	6978      	ldr	r0, [r7, #20]
 80035e0:	f7ff ff90 	bl	8003504 <NVIC_EncodePriority>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff5f 	bl	80034b0 <__NVIC_SetPriority>
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	4603      	mov	r3, r0
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff33 	bl	8003474 <__NVIC_EnableIRQ>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ffa4 	bl	800356c <SysTick_Config>
 8003624:	4603      	mov	r3, r0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e08d      	b.n	800375e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_DMA_Init+0x138>)
 800364a:	429a      	cmp	r2, r3
 800364c:	d80f      	bhi.n	800366e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4b45      	ldr	r3, [pc, #276]	; (800376c <HAL_DMA_Init+0x13c>)
 8003656:	4413      	add	r3, r2
 8003658:	4a45      	ldr	r2, [pc, #276]	; (8003770 <HAL_DMA_Init+0x140>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	009a      	lsls	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a42      	ldr	r2, [pc, #264]	; (8003774 <HAL_DMA_Init+0x144>)
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
 800366c:	e00e      	b.n	800368c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	4b40      	ldr	r3, [pc, #256]	; (8003778 <HAL_DMA_Init+0x148>)
 8003676:	4413      	add	r3, r2
 8003678:	4a3d      	ldr	r2, [pc, #244]	; (8003770 <HAL_DMA_Init+0x140>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	009a      	lsls	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a3c      	ldr	r2, [pc, #240]	; (800377c <HAL_DMA_Init+0x14c>)
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8fe 	bl	80038e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ec:	d102      	bne.n	80036f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003708:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d010      	beq.n	8003734 <HAL_DMA_Init+0x104>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d80c      	bhi.n	8003734 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f91e 	bl	800395c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e008      	b.n	8003746 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40020407 	.word	0x40020407
 800376c:	bffdfff8 	.word	0xbffdfff8
 8003770:	cccccccd 	.word	0xcccccccd
 8003774:	40020000 	.word	0x40020000
 8003778:	bffdfbf8 	.word	0xbffdfbf8
 800377c:	40020400 	.word	0x40020400

08003780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	2204      	movs	r2, #4
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d026      	beq.n	80037fa <HAL_DMA_IRQHandler+0x7a>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d021      	beq.n	80037fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0204 	bic.w	r2, r2, #4
 80037d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	2104      	movs	r1, #4
 80037e2:	fa01 f202 	lsl.w	r2, r1, r2
 80037e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d071      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037f8:	e06c      	b.n	80038d4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2202      	movs	r2, #2
 8003804:	409a      	lsls	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02e      	beq.n	800386c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d029      	beq.n	800386c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 020a 	bic.w	r2, r2, #10
 8003834:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f003 021f 	and.w	r2, r3, #31
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2102      	movs	r1, #2
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d038      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800386a:	e033      	b.n	80038d4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2208      	movs	r2, #8
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d02a      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d025      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 020e 	bic.w	r2, r2, #14
 8003898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f003 021f 	and.w	r2, r3, #31
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
}
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d802      	bhi.n	80038fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e001      	b.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3b08      	subs	r3, #8
 800390a:	4a12      	ldr	r2, [pc, #72]	; (8003954 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800392a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	651a      	str	r2, [r3, #80]	; 0x50
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40020407 	.word	0x40020407
 800394c:	40020800 	.word	0x40020800
 8003950:	40020820 	.word	0x40020820
 8003954:	cccccccd 	.word	0xcccccccd
 8003958:	40020880 	.word	0x40020880

0800395c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800397e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3b01      	subs	r3, #1
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2201      	movs	r2, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	1000823f 	.word	0x1000823f
 80039a0:	40020940 	.word	0x40020940

080039a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039b2:	e15a      	b.n	8003c6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	4013      	ands	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 814c 	beq.w	8003c64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d005      	beq.n	80039e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d130      	bne.n	8003a46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0201 	and.w	r2, r3, #1
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d017      	beq.n	8003a82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d123      	bne.n	8003ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	08da      	lsrs	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3208      	adds	r2, #8
 8003a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	220f      	movs	r2, #15
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	6939      	ldr	r1, [r7, #16]
 8003ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0203 	and.w	r2, r3, #3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80a6 	beq.w	8003c64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b18:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <HAL_GPIO_Init+0x2e4>)
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1c:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_GPIO_Init+0x2e4>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6613      	str	r3, [r2, #96]	; 0x60
 8003b24:	4b58      	ldr	r3, [pc, #352]	; (8003c88 <HAL_GPIO_Init+0x2e4>)
 8003b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b30:	4a56      	ldr	r2, [pc, #344]	; (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	3302      	adds	r3, #2
 8003b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	220f      	movs	r2, #15
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b5a:	d01f      	beq.n	8003b9c <HAL_GPIO_Init+0x1f8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a4c      	ldr	r2, [pc, #304]	; (8003c90 <HAL_GPIO_Init+0x2ec>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d019      	beq.n	8003b98 <HAL_GPIO_Init+0x1f4>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a4b      	ldr	r2, [pc, #300]	; (8003c94 <HAL_GPIO_Init+0x2f0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_GPIO_Init+0x1f0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a4a      	ldr	r2, [pc, #296]	; (8003c98 <HAL_GPIO_Init+0x2f4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00d      	beq.n	8003b90 <HAL_GPIO_Init+0x1ec>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a49      	ldr	r2, [pc, #292]	; (8003c9c <HAL_GPIO_Init+0x2f8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <HAL_GPIO_Init+0x1e8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a48      	ldr	r2, [pc, #288]	; (8003ca0 <HAL_GPIO_Init+0x2fc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_GPIO_Init+0x1e4>
 8003b84:	2305      	movs	r3, #5
 8003b86:	e00a      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b88:	2306      	movs	r3, #6
 8003b8a:	e008      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e006      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b90:	2303      	movs	r3, #3
 8003b92:	e004      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e002      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	f002 0203 	and.w	r2, r2, #3
 8003ba4:	0092      	lsls	r2, r2, #2
 8003ba6:	4093      	lsls	r3, r2
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bae:	4937      	ldr	r1, [pc, #220]	; (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003be0:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003be6:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c0a:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c34:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c5e:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3301      	adds	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f47f ae9d 	bne.w	80039b4 <HAL_GPIO_Init+0x10>
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	48000400 	.word	0x48000400
 8003c94:	48000800 	.word	0x48000800
 8003c98:	48000c00 	.word	0x48000c00
 8003c9c:	48001000 	.word	0x48001000
 8003ca0:	48001400 	.word	0x48001400
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb8:	787b      	ldrb	r3, [r7, #1]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d006      	beq.n	8003cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cee:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f806 	bl	8003d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40010400 	.word	0x40010400

08003d08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e08d      	b.n	8003e4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fd fb05 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2224      	movs	r2, #36	; 0x24
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d107      	bne.n	8003d98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d94:	609a      	str	r2, [r3, #8]
 8003d96:	e006      	b.n	8003da6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003da4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d108      	bne.n	8003dc0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	e007      	b.n	8003dd0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69d9      	ldr	r1, [r3, #28]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d138      	bne.n	8003edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e032      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d139      	bne.n	8003f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e033      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2224      	movs	r2, #36	; 0x24
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d141      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f92:	4b4b      	ldr	r3, [pc, #300]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9e:	d131      	bne.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fa0:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa6:	4a46      	ldr	r2, [pc, #280]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fb0:	4b43      	ldr	r3, [pc, #268]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fb8:	4a41      	ldr	r2, [pc, #260]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fc0:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2232      	movs	r2, #50	; 0x32
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	0c9b      	lsrs	r3, r3, #18
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fd6:	e002      	b.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fde:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fea:	d102      	bne.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f2      	bne.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ff2:	4b33      	ldr	r3, [pc, #204]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffe:	d158      	bne.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e057      	b.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004004:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400a:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004014:	e04d      	b.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401c:	d141      	bne.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800401e:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402a:	d131      	bne.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800402c:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004044:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800404a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2232      	movs	r2, #50	; 0x32
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	0c9b      	lsrs	r3, r3, #18
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004062:	e002      	b.n	800406a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b01      	subs	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d102      	bne.n	800407e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f2      	bne.n	8004064 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408a:	d112      	bne.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e011      	b.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040a0:	e007      	b.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040aa:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40007000 	.word	0x40007000
 80040c4:	20000004 	.word	0x20000004
 80040c8:	431bde83 	.word	0x431bde83

080040cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040da:	6093      	str	r3, [r2, #8]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40007000 	.word	0x40007000

080040ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e2fe      	b.n	80046fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d075      	beq.n	80041f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410a:	4b97      	ldr	r3, [pc, #604]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004114:	4b94      	ldr	r3, [pc, #592]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	d102      	bne.n	800412a <HAL_RCC_OscConfig+0x3e>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d002      	beq.n	8004130 <HAL_RCC_OscConfig+0x44>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d10b      	bne.n	8004148 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	4b8d      	ldr	r3, [pc, #564]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d05b      	beq.n	80041f4 <HAL_RCC_OscConfig+0x108>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d157      	bne.n	80041f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e2d9      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d106      	bne.n	8004160 <HAL_RCC_OscConfig+0x74>
 8004152:	4b85      	ldr	r3, [pc, #532]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a84      	ldr	r2, [pc, #528]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e01d      	b.n	800419c <HAL_RCC_OscConfig+0xb0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0x98>
 800416a:	4b7f      	ldr	r3, [pc, #508]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7e      	ldr	r2, [pc, #504]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b7c      	ldr	r3, [pc, #496]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7b      	ldr	r2, [pc, #492]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e00b      	b.n	800419c <HAL_RCC_OscConfig+0xb0>
 8004184:	4b78      	ldr	r3, [pc, #480]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a77      	ldr	r2, [pc, #476]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b75      	ldr	r3, [pc, #468]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a74      	ldr	r2, [pc, #464]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fe f806 	bl	80021b4 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fe f802 	bl	80021b4 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e29e      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041be:	4b6a      	ldr	r3, [pc, #424]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0xc0>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fff2 	bl	80021b4 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd ffee 	bl	80021b4 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e28a      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041e6:	4b60      	ldr	r3, [pc, #384]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0xe8>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d075      	beq.n	80042ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004202:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	4b56      	ldr	r3, [pc, #344]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d102      	bne.n	8004222 <HAL_RCC_OscConfig+0x136>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d002      	beq.n	8004228 <HAL_RCC_OscConfig+0x13c>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b04      	cmp	r3, #4
 8004226:	d11f      	bne.n	8004268 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004228:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_OscConfig+0x154>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e25d      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b49      	ldr	r3, [pc, #292]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	4946      	ldr	r1, [pc, #280]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004254:	4b45      	ldr	r3, [pc, #276]	; (800436c <HAL_RCC_OscConfig+0x280>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd ff5f 	bl	800211c <HAL_InitTick>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d043      	beq.n	80042ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e249      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d023      	beq.n	80042b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004270:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3c      	ldr	r2, [pc, #240]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd ff9a 	bl	80021b4 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004284:	f7fd ff96 	bl	80021b4 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e232      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004296:	4b34      	ldr	r3, [pc, #208]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a2:	4b31      	ldr	r3, [pc, #196]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	492d      	ldr	r1, [pc, #180]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	604b      	str	r3, [r1, #4]
 80042b6:	e01a      	b.n	80042ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 80042be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd ff76 	bl	80021b4 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042cc:	f7fd ff72 	bl	80021b4 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e20e      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042de:	4b22      	ldr	r3, [pc, #136]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x1e0>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d041      	beq.n	800437e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01c      	beq.n	800433c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004302:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004308:	4a17      	ldr	r2, [pc, #92]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7fd ff4f 	bl	80021b4 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431a:	f7fd ff4b 	bl	80021b4 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1e7      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0ef      	beq.n	800431a <HAL_RCC_OscConfig+0x22e>
 800433a:	e020      	b.n	800437e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 800433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fd ff32 	bl	80021b4 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004352:	e00d      	b.n	8004370 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004354:	f7fd ff2e 	bl	80021b4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d906      	bls.n	8004370 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e1ca      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000
 800436c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004370:	4b8c      	ldr	r3, [pc, #560]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ea      	bne.n	8004354 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80a6 	beq.w	80044d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438c:	2300      	movs	r3, #0
 800438e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004390:	4b84      	ldr	r3, [pc, #528]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2b4>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x2b6>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a6:	4b7f      	ldr	r3, [pc, #508]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	4a7e      	ldr	r2, [pc, #504]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
 80043b2:	4b7c      	ldr	r3, [pc, #496]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043be:	2301      	movs	r3, #1
 80043c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c2:	4b79      	ldr	r3, [pc, #484]	; (80045a8 <HAL_RCC_OscConfig+0x4bc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d118      	bne.n	8004400 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ce:	4b76      	ldr	r3, [pc, #472]	; (80045a8 <HAL_RCC_OscConfig+0x4bc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a75      	ldr	r2, [pc, #468]	; (80045a8 <HAL_RCC_OscConfig+0x4bc>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043da:	f7fd feeb 	bl	80021b4 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e2:	f7fd fee7 	bl	80021b4 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e183      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f4:	4b6c      	ldr	r3, [pc, #432]	; (80045a8 <HAL_RCC_OscConfig+0x4bc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d108      	bne.n	800441a <HAL_RCC_OscConfig+0x32e>
 8004408:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	4a65      	ldr	r2, [pc, #404]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004418:	e024      	b.n	8004464 <HAL_RCC_OscConfig+0x378>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b05      	cmp	r3, #5
 8004420:	d110      	bne.n	8004444 <HAL_RCC_OscConfig+0x358>
 8004422:	4b60      	ldr	r3, [pc, #384]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	4a5e      	ldr	r2, [pc, #376]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 800442a:	f043 0304 	orr.w	r3, r3, #4
 800442e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004432:	4b5c      	ldr	r3, [pc, #368]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	4a5a      	ldr	r2, [pc, #360]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004442:	e00f      	b.n	8004464 <HAL_RCC_OscConfig+0x378>
 8004444:	4b57      	ldr	r3, [pc, #348]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	4a56      	ldr	r2, [pc, #344]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004454:	4b53      	ldr	r3, [pc, #332]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	4a52      	ldr	r2, [pc, #328]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f023 0304 	bic.w	r3, r3, #4
 8004460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d016      	beq.n	800449a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd fea2 	bl	80021b4 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004472:	e00a      	b.n	800448a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004474:	f7fd fe9e 	bl	80021b4 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e138      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ed      	beq.n	8004474 <HAL_RCC_OscConfig+0x388>
 8004498:	e015      	b.n	80044c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd fe8b 	bl	80021b4 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fd fe87 	bl	80021b4 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e121      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044b8:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1ed      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044c6:	7ffb      	ldrb	r3, [r7, #31]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d105      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044cc:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	4a34      	ldr	r2, [pc, #208]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d03c      	beq.n	800455e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01c      	beq.n	8004526 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044ec:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 80044ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f2:	4a2c      	ldr	r2, [pc, #176]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fd fe5a 	bl	80021b4 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004504:	f7fd fe56 	bl	80021b4 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0f2      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004516:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ef      	beq.n	8004504 <HAL_RCC_OscConfig+0x418>
 8004524:	e01b      	b.n	800455e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004526:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452c:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fd fe3d 	bl	80021b4 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800453e:	f7fd fe39 	bl	80021b4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0d5      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1ef      	bne.n	800453e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80c9 	beq.w	80046fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b0c      	cmp	r3, #12
 8004572:	f000 8083 	beq.w	800467c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d15e      	bne.n	800463c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a08      	ldr	r2, [pc, #32]	; (80045a4 <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fd fe13 	bl	80021b4 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004590:	e00c      	b.n	80045ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004592:	f7fd fe0f 	bl	80021b4 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d905      	bls.n	80045ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0ab      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ac:	4b55      	ldr	r3, [pc, #340]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ec      	bne.n	8004592 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045b8:	4b52      	ldr	r3, [pc, #328]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	4b52      	ldr	r3, [pc, #328]	; (8004708 <HAL_RCC_OscConfig+0x61c>)
 80045be:	4013      	ands	r3, r2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6a11      	ldr	r1, [r2, #32]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045c8:	3a01      	subs	r2, #1
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	4311      	orrs	r1, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045d2:	0212      	lsls	r2, r2, #8
 80045d4:	4311      	orrs	r1, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045da:	0852      	lsrs	r2, r2, #1
 80045dc:	3a01      	subs	r2, #1
 80045de:	0552      	lsls	r2, r2, #21
 80045e0:	4311      	orrs	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e6:	0852      	lsrs	r2, r2, #1
 80045e8:	3a01      	subs	r2, #1
 80045ea:	0652      	lsls	r2, r2, #25
 80045ec:	4311      	orrs	r1, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045f2:	06d2      	lsls	r2, r2, #27
 80045f4:	430a      	orrs	r2, r1
 80045f6:	4943      	ldr	r1, [pc, #268]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045fc:	4b41      	ldr	r3, [pc, #260]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a40      	ldr	r2, [pc, #256]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 8004602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004606:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004608:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a3d      	ldr	r2, [pc, #244]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 800460e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004612:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd fdce 	bl	80021b4 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd fdca 	bl	80021b4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e066      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462e:	4b35      	ldr	r3, [pc, #212]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x530>
 800463a:	e05e      	b.n	80046fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463c:	4b31      	ldr	r3, [pc, #196]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a30      	ldr	r2, [pc, #192]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 8004642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fd fdb4 	bl	80021b4 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fd fdb0 	bl	80021b4 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e04c      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004662:	4b28      	ldr	r3, [pc, #160]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800466e:	4b25      	ldr	r3, [pc, #148]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	4924      	ldr	r1, [pc, #144]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <HAL_RCC_OscConfig+0x620>)
 8004676:	4013      	ands	r3, r2
 8004678:	60cb      	str	r3, [r1, #12]
 800467a:	e03e      	b.n	80046fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e039      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCC_OscConfig+0x618>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 0203 	and.w	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	429a      	cmp	r2, r3
 800469a:	d12c      	bne.n	80046f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	3b01      	subs	r3, #1
 80046a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d123      	bne.n	80046f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d11b      	bne.n	80046f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d113      	bne.n	80046f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	3b01      	subs	r3, #1
 80046dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d109      	bne.n	80046f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	3b01      	subs	r3, #1
 80046f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3720      	adds	r7, #32
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	019f800c 	.word	0x019f800c
 800470c:	feeefffc 	.word	0xfeeefffc

08004710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e11e      	b.n	8004966 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004728:	4b91      	ldr	r3, [pc, #580]	; (8004970 <HAL_RCC_ClockConfig+0x260>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d910      	bls.n	8004758 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b8e      	ldr	r3, [pc, #568]	; (8004970 <HAL_RCC_ClockConfig+0x260>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 020f 	bic.w	r2, r3, #15
 800473e:	498c      	ldr	r1, [pc, #560]	; (8004970 <HAL_RCC_ClockConfig+0x260>)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b8a      	ldr	r3, [pc, #552]	; (8004970 <HAL_RCC_ClockConfig+0x260>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e106      	b.n	8004966 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d073      	beq.n	800484c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d129      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476c:	4b81      	ldr	r3, [pc, #516]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0f4      	b.n	8004966 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800477c:	f000 f99e 	bl	8004abc <RCC_GetSysClockFreqFromPLLSource>
 8004780:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4a7c      	ldr	r2, [pc, #496]	; (8004978 <HAL_RCC_ClockConfig+0x268>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d93f      	bls.n	800480a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800478a:	4b7a      	ldr	r3, [pc, #488]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d033      	beq.n	800480a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d12f      	bne.n	800480a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047aa:	4b72      	ldr	r3, [pc, #456]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b2:	4a70      	ldr	r2, [pc, #448]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e024      	b.n	800480a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0c6      	b.n	8004966 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d8:	4b66      	ldr	r3, [pc, #408]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0be      	b.n	8004966 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047e8:	f000 f8ce 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4a61      	ldr	r2, [pc, #388]	; (8004978 <HAL_RCC_ClockConfig+0x268>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d909      	bls.n	800480a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047f6:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047fe:	4a5d      	ldr	r2, [pc, #372]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800480a:	4b5a      	ldr	r3, [pc, #360]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4957      	ldr	r1, [pc, #348]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 8004818:	4313      	orrs	r3, r2
 800481a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fd fcca 	bl	80021b4 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	e00a      	b.n	800483a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fd fcc6 	bl	80021b4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e095      	b.n	8004966 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	4b4e      	ldr	r3, [pc, #312]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 020c 	and.w	r2, r3, #12
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	429a      	cmp	r2, r3
 800484a:	d1eb      	bne.n	8004824 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d023      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004864:	4b43      	ldr	r3, [pc, #268]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a42      	ldr	r2, [pc, #264]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800486a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800487c:	4b3d      	ldr	r3, [pc, #244]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004884:	4a3b      	ldr	r2, [pc, #236]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 8004886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800488a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b39      	ldr	r3, [pc, #228]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4936      	ldr	r1, [pc, #216]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
 800489e:	e008      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d105      	bne.n	80048b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048a6:	4b33      	ldr	r3, [pc, #204]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4a32      	ldr	r2, [pc, #200]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 80048ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b2:	4b2f      	ldr	r3, [pc, #188]	; (8004970 <HAL_RCC_ClockConfig+0x260>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d21d      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c0:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <HAL_RCC_ClockConfig+0x260>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 020f 	bic.w	r2, r3, #15
 80048c8:	4929      	ldr	r1, [pc, #164]	; (8004970 <HAL_RCC_ClockConfig+0x260>)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048d0:	f7fd fc70 	bl	80021b4 <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d8:	f7fd fc6c 	bl	80021b4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e03b      	b.n	8004966 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b20      	ldr	r3, [pc, #128]	; (8004970 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d1ed      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4917      	ldr	r1, [pc, #92]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	490f      	ldr	r1, [pc, #60]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800493a:	f000 f825 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 800493e:	4602      	mov	r2, r0
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_RCC_ClockConfig+0x264>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	490c      	ldr	r1, [pc, #48]	; (800497c <HAL_RCC_ClockConfig+0x26c>)
 800494c:	5ccb      	ldrb	r3, [r1, r3]
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	fa22 f303 	lsr.w	r3, r2, r3
 8004956:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <HAL_RCC_ClockConfig+0x270>)
 8004958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_RCC_ClockConfig+0x274>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7fd fbdc 	bl	800211c <HAL_InitTick>
 8004964:	4603      	mov	r3, r0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40022000 	.word	0x40022000
 8004974:	40021000 	.word	0x40021000
 8004978:	04c4b400 	.word	0x04c4b400
 800497c:	08007cc4 	.word	0x08007cc4
 8004980:	20000004 	.word	0x20000004
 8004984:	20000008 	.word	0x20000008

08004988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800498e:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d102      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800499a:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xbc>)
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e047      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049a0:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d102      	bne.n	80049b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049ac:	4b26      	ldr	r3, [pc, #152]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	e03e      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d136      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	3301      	adds	r3, #1
 80049d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d10c      	bne.n	80049f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049dc:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e6:	68d2      	ldr	r2, [r2, #12]
 80049e8:	0a12      	lsrs	r2, r2, #8
 80049ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	617b      	str	r3, [r7, #20]
      break;
 80049f4:	e00c      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049f6:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a00:	68d2      	ldr	r2, [r2, #12]
 8004a02:	0a12      	lsrs	r2, r2, #8
 8004a04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]
      break;
 8004a0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	0e5b      	lsrs	r3, r3, #25
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e001      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a30:	693b      	ldr	r3, [r7, #16]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	016e3600 	.word	0x016e3600

08004a4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a52:	681b      	ldr	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000004 	.word	0x20000004

08004a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a68:	f7ff fff0 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4904      	ldr	r1, [pc, #16]	; (8004a8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	08007cd4 	.word	0x08007cd4

08004a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a94:	f7ff ffda 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0adb      	lsrs	r3, r3, #11
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4904      	ldr	r1, [pc, #16]	; (8004ab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	08007cd4 	.word	0x08007cd4

08004abc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ac2:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d10c      	bne.n	8004afa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ae0:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aea:	68d2      	ldr	r2, [r2, #12]
 8004aec:	0a12      	lsrs	r2, r2, #8
 8004aee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	617b      	str	r3, [r7, #20]
    break;
 8004af8:	e00c      	b.n	8004b14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004afa:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b02:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b04:	68d2      	ldr	r2, [r2, #12]
 8004b06:	0a12      	lsrs	r2, r2, #8
 8004b08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]
    break;
 8004b12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	0e5b      	lsrs	r3, r3, #25
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b2e:	687b      	ldr	r3, [r7, #4]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	016e3600 	.word	0x016e3600
 8004b44:	00f42400 	.word	0x00f42400

08004b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b50:	2300      	movs	r3, #0
 8004b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b54:	2300      	movs	r3, #0
 8004b56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8098 	beq.w	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6a:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10d      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b76:	4b40      	ldr	r3, [pc, #256]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7a:	4a3f      	ldr	r2, [pc, #252]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6593      	str	r3, [r2, #88]	; 0x58
 8004b82:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b92:	4b3a      	ldr	r3, [pc, #232]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a39      	ldr	r2, [pc, #228]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b9e:	f7fd fb09 	bl	80021b4 <HAL_GetTick>
 8004ba2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ba4:	e009      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba6:	f7fd fb05 	bl	80021b4 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d902      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	74fb      	strb	r3, [r7, #19]
        break;
 8004bb8:	e005      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bba:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0ef      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bc6:	7cfb      	ldrb	r3, [r7, #19]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d159      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bcc:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d01e      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d019      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004be8:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c04:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c14:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d016      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7fd fac5 	bl	80021b4 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2c:	e00b      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2e:	f7fd fac1 	bl	80021b4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d902      	bls.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	74fb      	strb	r3, [r7, #19]
            break;
 8004c44:	e006      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ec      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	4903      	ldr	r1, [pc, #12]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c70:	e008      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c72:	7cfb      	ldrb	r3, [r7, #19]
 8004c74:	74bb      	strb	r3, [r7, #18]
 8004c76:	e005      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c84:	7c7b      	ldrb	r3, [r7, #17]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d105      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4ba7      	ldr	r3, [pc, #668]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	4aa6      	ldr	r2, [pc, #664]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ca2:	4ba1      	ldr	r3, [pc, #644]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f023 0203 	bic.w	r2, r3, #3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	499d      	ldr	r1, [pc, #628]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cc4:	4b98      	ldr	r3, [pc, #608]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f023 020c 	bic.w	r2, r3, #12
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	4995      	ldr	r1, [pc, #596]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ce6:	4b90      	ldr	r3, [pc, #576]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	498c      	ldr	r1, [pc, #560]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d08:	4b87      	ldr	r3, [pc, #540]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	4984      	ldr	r1, [pc, #528]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d2a:	4b7f      	ldr	r3, [pc, #508]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	497b      	ldr	r1, [pc, #492]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d4c:	4b76      	ldr	r3, [pc, #472]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	4973      	ldr	r1, [pc, #460]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d6e:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	496a      	ldr	r1, [pc, #424]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d90:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	4962      	ldr	r1, [pc, #392]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004db2:	4b5d      	ldr	r3, [pc, #372]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	4959      	ldr	r1, [pc, #356]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dd4:	4b54      	ldr	r3, [pc, #336]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dda:	f023 0203 	bic.w	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	4951      	ldr	r1, [pc, #324]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004df6:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4948      	ldr	r1, [pc, #288]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d015      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e18:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	4940      	ldr	r1, [pc, #256]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e36:	d105      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e38:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4a3a      	ldr	r2, [pc, #232]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d015      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e50:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	4932      	ldr	r1, [pc, #200]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6e:	d105      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e70:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d015      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e88:	4b27      	ldr	r3, [pc, #156]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	4924      	ldr	r1, [pc, #144]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea8:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	4916      	ldr	r1, [pc, #88]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ede:	d105      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d019      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	4908      	ldr	r1, [pc, #32]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f16:	d109      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f18:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a02      	ldr	r2, [pc, #8]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f22:	60d3      	str	r3, [r2, #12]
 8004f24:	e002      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d015      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f38:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	4926      	ldr	r1, [pc, #152]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f56:	d105      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f58:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f70:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7e:	4918      	ldr	r1, [pc, #96]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	490a      	ldr	r1, [pc, #40]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fc6:	d105      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000

08004fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e049      	b.n	800508a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc fe04 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f001 f86e 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d001      	beq.n	80050ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e04c      	b.n	8005146 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a26      	ldr	r2, [pc, #152]	; (8005154 <HAL_TIM_Base_Start+0xc0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d022      	beq.n	8005104 <HAL_TIM_Base_Start+0x70>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d01d      	beq.n	8005104 <HAL_TIM_Base_Start+0x70>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a22      	ldr	r2, [pc, #136]	; (8005158 <HAL_TIM_Base_Start+0xc4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d018      	beq.n	8005104 <HAL_TIM_Base_Start+0x70>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	; (800515c <HAL_TIM_Base_Start+0xc8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <HAL_TIM_Base_Start+0x70>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <HAL_TIM_Base_Start+0xcc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <HAL_TIM_Base_Start+0x70>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <HAL_TIM_Base_Start+0xd0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_TIM_Base_Start+0x70>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_TIM_Base_Start+0xd4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIM_Base_Start+0x70>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1b      	ldr	r2, [pc, #108]	; (800516c <HAL_TIM_Base_Start+0xd8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d115      	bne.n	8005130 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_TIM_Base_Start+0xdc>)
 800510c:	4013      	ands	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b06      	cmp	r3, #6
 8005114:	d015      	beq.n	8005142 <HAL_TIM_Base_Start+0xae>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d011      	beq.n	8005142 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	e008      	b.n	8005142 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e000      	b.n	8005144 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40013400 	.word	0x40013400
 8005168:	40014000 	.word	0x40014000
 800516c:	40015000 	.word	0x40015000
 8005170:	00010007 	.word	0x00010007

08005174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e054      	b.n	8005236 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a26      	ldr	r2, [pc, #152]	; (8005244 <HAL_TIM_Base_Start_IT+0xd0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b6:	d01d      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <HAL_TIM_Base_Start_IT+0xd4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a21      	ldr	r2, [pc, #132]	; (800524c <HAL_TIM_Base_Start_IT+0xd8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <HAL_TIM_Base_Start_IT+0xdc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <HAL_TIM_Base_Start_IT+0xe0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <HAL_TIM_Base_Start_IT+0xe4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1b      	ldr	r2, [pc, #108]	; (800525c <HAL_TIM_Base_Start_IT+0xe8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d115      	bne.n	8005220 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	4b19      	ldr	r3, [pc, #100]	; (8005260 <HAL_TIM_Base_Start_IT+0xec>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b06      	cmp	r3, #6
 8005204:	d015      	beq.n	8005232 <HAL_TIM_Base_Start_IT+0xbe>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d011      	beq.n	8005232 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0201 	orr.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	e008      	b.n	8005232 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e000      	b.n	8005234 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40013400 	.word	0x40013400
 8005258:	40014000 	.word	0x40014000
 800525c:	40015000 	.word	0x40015000
 8005260:	00010007 	.word	0x00010007

08005264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e049      	b.n	800530a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc fd88 	bl	8001da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f000 ff2e 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_TIM_PWM_Start+0x24>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e03c      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b04      	cmp	r3, #4
 800533c:	d109      	bne.n	8005352 <HAL_TIM_PWM_Start+0x3e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	bf14      	ite	ne
 800534a:	2301      	movne	r3, #1
 800534c:	2300      	moveq	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	e02f      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d109      	bne.n	800536c <HAL_TIM_PWM_Start+0x58>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e022      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d109      	bne.n	8005386 <HAL_TIM_PWM_Start+0x72>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b01      	cmp	r3, #1
 800537c:	bf14      	ite	ne
 800537e:	2301      	movne	r3, #1
 8005380:	2300      	moveq	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	e015      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b10      	cmp	r3, #16
 800538a:	d109      	bne.n	80053a0 <HAL_TIM_PWM_Start+0x8c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e008      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e0a6      	b.n	8005508 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d104      	bne.n	80053ca <HAL_TIM_PWM_Start+0xb6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c8:	e023      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d104      	bne.n	80053da <HAL_TIM_PWM_Start+0xc6>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d8:	e01b      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d104      	bne.n	80053ea <HAL_TIM_PWM_Start+0xd6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e8:	e013      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_PWM_Start+0xe6>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053f8:	e00b      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d104      	bne.n	800540a <HAL_TIM_PWM_Start+0xf6>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005408:	e003      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2201      	movs	r2, #1
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fc16 	bl	8006c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3a      	ldr	r2, [pc, #232]	; (8005510 <HAL_TIM_PWM_Start+0x1fc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a39      	ldr	r2, [pc, #228]	; (8005514 <HAL_TIM_PWM_Start+0x200>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a37      	ldr	r2, [pc, #220]	; (8005518 <HAL_TIM_PWM_Start+0x204>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a36      	ldr	r2, [pc, #216]	; (800551c <HAL_TIM_PWM_Start+0x208>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a34      	ldr	r2, [pc, #208]	; (8005520 <HAL_TIM_PWM_Start+0x20c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a33      	ldr	r2, [pc, #204]	; (8005524 <HAL_TIM_PWM_Start+0x210>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <HAL_TIM_PWM_Start+0x14c>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <HAL_TIM_PWM_Start+0x14e>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a25      	ldr	r2, [pc, #148]	; (8005510 <HAL_TIM_PWM_Start+0x1fc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005488:	d01d      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a26      	ldr	r2, [pc, #152]	; (8005528 <HAL_TIM_PWM_Start+0x214>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a24      	ldr	r2, [pc, #144]	; (800552c <HAL_TIM_PWM_Start+0x218>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a23      	ldr	r2, [pc, #140]	; (8005530 <HAL_TIM_PWM_Start+0x21c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a19      	ldr	r2, [pc, #100]	; (8005514 <HAL_TIM_PWM_Start+0x200>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_TIM_PWM_Start+0x204>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_TIM_PWM_Start+0x210>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d115      	bne.n	80054f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_TIM_PWM_Start+0x220>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b06      	cmp	r3, #6
 80054d6:	d015      	beq.n	8005504 <HAL_TIM_PWM_Start+0x1f0>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054de:	d011      	beq.n	8005504 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	e008      	b.n	8005504 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e000      	b.n	8005506 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800
 8005524:	40015000 	.word	0x40015000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	00010007 	.word	0x00010007

08005538 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e049      	b.n	80055de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f841 	bl	80055e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f000 fdc4 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_TIM_IC_Start_IT+0x1e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e023      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x66>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d104      	bne.n	800562a <HAL_TIM_IC_Start_IT+0x2e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005626:	b2db      	uxtb	r3, r3
 8005628:	e01b      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x66>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d104      	bne.n	800563a <HAL_TIM_IC_Start_IT+0x3e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005636:	b2db      	uxtb	r3, r3
 8005638:	e013      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x66>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d104      	bne.n	800564a <HAL_TIM_IC_Start_IT+0x4e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005646:	b2db      	uxtb	r3, r3
 8005648:	e00b      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x66>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b10      	cmp	r3, #16
 800564e:	d104      	bne.n	800565a <HAL_TIM_IC_Start_IT+0x5e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005656:	b2db      	uxtb	r3, r3
 8005658:	e003      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x66>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005660:	b2db      	uxtb	r3, r3
 8005662:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <HAL_TIM_IC_Start_IT+0x78>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e013      	b.n	800569c <HAL_TIM_IC_Start_IT+0xa0>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b04      	cmp	r3, #4
 8005678:	d104      	bne.n	8005684 <HAL_TIM_IC_Start_IT+0x88>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e00b      	b.n	800569c <HAL_TIM_IC_Start_IT+0xa0>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b08      	cmp	r3, #8
 8005688:	d104      	bne.n	8005694 <HAL_TIM_IC_Start_IT+0x98>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e003      	b.n	800569c <HAL_TIM_IC_Start_IT+0xa0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800569a:	b2db      	uxtb	r3, r3
 800569c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d102      	bne.n	80056aa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80056a4:	7b7b      	ldrb	r3, [r7, #13]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d001      	beq.n	80056ae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e0e2      	b.n	8005874 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_TIM_IC_Start_IT+0xc2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	e023      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x10a>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_IC_Start_IT+0xd2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056cc:	e01b      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x10a>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d104      	bne.n	80056de <HAL_TIM_IC_Start_IT+0xe2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056dc:	e013      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x10a>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b0c      	cmp	r3, #12
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_IC_Start_IT+0xf2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ec:	e00b      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x10a>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_IC_Start_IT+0x102>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056fc:	e003      	b.n	8005706 <HAL_TIM_IC_Start_IT+0x10a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <HAL_TIM_IC_Start_IT+0x11a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005714:	e013      	b.n	800573e <HAL_TIM_IC_Start_IT+0x142>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b04      	cmp	r3, #4
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Start_IT+0x12a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005724:	e00b      	b.n	800573e <HAL_TIM_IC_Start_IT+0x142>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d104      	bne.n	8005736 <HAL_TIM_IC_Start_IT+0x13a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005734:	e003      	b.n	800573e <HAL_TIM_IC_Start_IT+0x142>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b0c      	cmp	r3, #12
 8005742:	d841      	bhi.n	80057c8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <HAL_TIM_IC_Start_IT+0x150>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005781 	.word	0x08005781
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057c9 	.word	0x080057c9
 8005758:	080057c9 	.word	0x080057c9
 800575c:	08005793 	.word	0x08005793
 8005760:	080057c9 	.word	0x080057c9
 8005764:	080057c9 	.word	0x080057c9
 8005768:	080057c9 	.word	0x080057c9
 800576c:	080057a5 	.word	0x080057a5
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057c9 	.word	0x080057c9
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057b7 	.word	0x080057b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0202 	orr.w	r2, r2, #2
 800578e:	60da      	str	r2, [r3, #12]
      break;
 8005790:	e01d      	b.n	80057ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0204 	orr.w	r2, r2, #4
 80057a0:	60da      	str	r2, [r3, #12]
      break;
 80057a2:	e014      	b.n	80057ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	60da      	str	r2, [r3, #12]
      break;
 80057b4:	e00b      	b.n	80057ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0210 	orr.w	r2, r2, #16
 80057c4:	60da      	str	r2, [r3, #12]
      break;
 80057c6:	e002      	b.n	80057ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      break;
 80057cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d14e      	bne.n	8005872 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f001 fa35 	bl	8006c4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a25      	ldr	r2, [pc, #148]	; (800587c <HAL_TIM_IC_Start_IT+0x280>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d022      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x236>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f4:	d01d      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x236>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a21      	ldr	r2, [pc, #132]	; (8005880 <HAL_TIM_IC_Start_IT+0x284>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d018      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x236>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <HAL_TIM_IC_Start_IT+0x288>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x236>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1e      	ldr	r2, [pc, #120]	; (8005888 <HAL_TIM_IC_Start_IT+0x28c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x236>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_TIM_IC_Start_IT+0x290>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x236>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <HAL_TIM_IC_Start_IT+0x294>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_TIM_IC_Start_IT+0x236>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a19      	ldr	r2, [pc, #100]	; (8005894 <HAL_TIM_IC_Start_IT+0x298>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d115      	bne.n	800585e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <HAL_TIM_IC_Start_IT+0x29c>)
 800583a:	4013      	ands	r3, r2
 800583c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b06      	cmp	r3, #6
 8005842:	d015      	beq.n	8005870 <HAL_TIM_IC_Start_IT+0x274>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584a:	d011      	beq.n	8005870 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	e008      	b.n	8005870 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e000      	b.n	8005872 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005870:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40013400 	.word	0x40013400
 8005890:	40014000 	.word	0x40014000
 8005894:	40015000 	.word	0x40015000
 8005898:	00010007 	.word	0x00010007

0800589c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d020      	beq.n	8005900 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0202 	mvn.w	r2, #2
 80058d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fb fe50 	bl	800158c <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fbea 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fbf1 	bl	80060dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01b      	beq.n	800594c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0204 	mvn.w	r2, #4
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fb fe2a 	bl	800158c <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fbc4 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fbcb 	bl	80060dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0208 	mvn.w	r2, #8
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2204      	movs	r2, #4
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fe04 	bl	800158c <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fb9e 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fba5 	bl	80060dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d020      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0210 	mvn.w	r2, #16
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2208      	movs	r2, #8
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fb fdde 	bl	800158c <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fb78 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fb7f 	bl	80060dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0201 	mvn.w	r2, #1
 8005a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fb fde8 	bl	80015d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fa65 	bl	8006f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fa5d 	bl	8006f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00c      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fb39 	bl	80060f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00c      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f06f 0220 	mvn.w	r2, #32
 8005a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 fa25 	bl	8006eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fa31 	bl	8006f28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 fa29 	bl	8006f3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00c      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fa21 	bl	8006f50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 fa19 	bl	8006f64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b086      	sub	sp, #24
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e088      	b.n	8005c6a <HAL_TIM_IC_ConfigChannel+0x130>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d11b      	bne.n	8005b9e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b76:	f000 fea3 	bl	80068c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 020c 	bic.w	r2, r2, #12
 8005b88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6999      	ldr	r1, [r3, #24]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	619a      	str	r2, [r3, #24]
 8005b9c:	e060      	b.n	8005c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d11c      	bne.n	8005bde <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005bb4:	f000 ff27 	bl	8006a06 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bc6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]
 8005bdc:	e040      	b.n	8005c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005bf4:	f000 ff74 	bl	8006ae0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 020c 	bic.w	r2, r2, #12
 8005c06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69d9      	ldr	r1, [r3, #28]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	61da      	str	r2, [r3, #28]
 8005c1a:	e021      	b.n	8005c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	d11c      	bne.n	8005c5c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c32:	f000 ff91 	bl	8006b58 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c44:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69d9      	ldr	r1, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	021a      	lsls	r2, r3, #8
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	61da      	str	r2, [r3, #28]
 8005c5a:	e001      	b.n	8005c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e0ff      	b.n	8005e92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b14      	cmp	r3, #20
 8005c9e:	f200 80f0 	bhi.w	8005e82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005e83 	.word	0x08005e83
 8005cb0:	08005e83 	.word	0x08005e83
 8005cb4:	08005e83 	.word	0x08005e83
 8005cb8:	08005d3d 	.word	0x08005d3d
 8005cbc:	08005e83 	.word	0x08005e83
 8005cc0:	08005e83 	.word	0x08005e83
 8005cc4:	08005e83 	.word	0x08005e83
 8005cc8:	08005d7f 	.word	0x08005d7f
 8005ccc:	08005e83 	.word	0x08005e83
 8005cd0:	08005e83 	.word	0x08005e83
 8005cd4:	08005e83 	.word	0x08005e83
 8005cd8:	08005dbf 	.word	0x08005dbf
 8005cdc:	08005e83 	.word	0x08005e83
 8005ce0:	08005e83 	.word	0x08005e83
 8005ce4:	08005e83 	.word	0x08005e83
 8005ce8:	08005e01 	.word	0x08005e01
 8005cec:	08005e83 	.word	0x08005e83
 8005cf0:	08005e83 	.word	0x08005e83
 8005cf4:	08005e83 	.word	0x08005e83
 8005cf8:	08005e41 	.word	0x08005e41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fab2 	bl	800626c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0204 	bic.w	r2, r2, #4
 8005d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6999      	ldr	r1, [r3, #24]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	619a      	str	r2, [r3, #24]
      break;
 8005d3a:	e0a5      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fb2c 	bl	80063a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6999      	ldr	r1, [r3, #24]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	021a      	lsls	r2, r3, #8
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	619a      	str	r2, [r3, #24]
      break;
 8005d7c:	e084      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fb9f 	bl	80064c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0208 	orr.w	r2, r2, #8
 8005d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0204 	bic.w	r2, r2, #4
 8005da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69d9      	ldr	r1, [r3, #28]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	61da      	str	r2, [r3, #28]
      break;
 8005dbc:	e064      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fc11 	bl	80065ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69d9      	ldr	r1, [r3, #28]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	021a      	lsls	r2, r3, #8
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	61da      	str	r2, [r3, #28]
      break;
 8005dfe:	e043      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fc84 	bl	8006714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0208 	orr.w	r2, r2, #8
 8005e1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0204 	bic.w	r2, r2, #4
 8005e2a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e3e:	e023      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fcce 	bl	80067e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e80:	e002      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	75fb      	strb	r3, [r7, #23]
      break;
 8005e86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop

08005e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e0f6      	b.n	80060a6 <HAL_TIM_ConfigClockSource+0x20a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a6f      	ldr	r2, [pc, #444]	; (80060b0 <HAL_TIM_ConfigClockSource+0x214>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f000 80c1 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005ef8:	4a6d      	ldr	r2, [pc, #436]	; (80060b0 <HAL_TIM_ConfigClockSource+0x214>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f200 80c6 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f00:	4a6c      	ldr	r2, [pc, #432]	; (80060b4 <HAL_TIM_ConfigClockSource+0x218>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	f000 80b9 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f08:	4a6a      	ldr	r2, [pc, #424]	; (80060b4 <HAL_TIM_ConfigClockSource+0x218>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	f200 80be 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f10:	4a69      	ldr	r2, [pc, #420]	; (80060b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f000 80b1 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f18:	4a67      	ldr	r2, [pc, #412]	; (80060b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	f200 80b6 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f20:	4a66      	ldr	r2, [pc, #408]	; (80060bc <HAL_TIM_ConfigClockSource+0x220>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	f000 80a9 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f28:	4a64      	ldr	r2, [pc, #400]	; (80060bc <HAL_TIM_ConfigClockSource+0x220>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	f200 80ae 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f30:	4a63      	ldr	r2, [pc, #396]	; (80060c0 <HAL_TIM_ConfigClockSource+0x224>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f000 80a1 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f38:	4a61      	ldr	r2, [pc, #388]	; (80060c0 <HAL_TIM_ConfigClockSource+0x224>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	f200 80a6 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f40:	4a60      	ldr	r2, [pc, #384]	; (80060c4 <HAL_TIM_ConfigClockSource+0x228>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f000 8099 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f48:	4a5e      	ldr	r2, [pc, #376]	; (80060c4 <HAL_TIM_ConfigClockSource+0x228>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	f200 809e 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f54:	f000 8091 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f5c:	f200 8096 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f64:	f000 8089 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f6c:	f200 808e 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f74:	d03e      	beq.n	8005ff4 <HAL_TIM_ConfigClockSource+0x158>
 8005f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7a:	f200 8087 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	f000 8086 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1f6>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8a:	d87f      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f8c:	2b70      	cmp	r3, #112	; 0x70
 8005f8e:	d01a      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x12a>
 8005f90:	2b70      	cmp	r3, #112	; 0x70
 8005f92:	d87b      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f94:	2b60      	cmp	r3, #96	; 0x60
 8005f96:	d050      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x19e>
 8005f98:	2b60      	cmp	r3, #96	; 0x60
 8005f9a:	d877      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f9c:	2b50      	cmp	r3, #80	; 0x50
 8005f9e:	d03c      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x17e>
 8005fa0:	2b50      	cmp	r3, #80	; 0x50
 8005fa2:	d873      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa4:	2b40      	cmp	r3, #64	; 0x40
 8005fa6:	d058      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x1be>
 8005fa8:	2b40      	cmp	r3, #64	; 0x40
 8005faa:	d86f      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fac:	2b30      	cmp	r3, #48	; 0x30
 8005fae:	d064      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005fb0:	2b30      	cmp	r3, #48	; 0x30
 8005fb2:	d86b      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d060      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d867      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05c      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d05a      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005fc4:	e062      	b.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd6:	f000 fe19 	bl	8006c0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	609a      	str	r2, [r3, #8]
      break;
 8005ff2:	e04f      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006004:	f000 fe02 	bl	8006c0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006016:	609a      	str	r2, [r3, #8]
      break;
 8006018:	e03c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006026:	461a      	mov	r2, r3
 8006028:	f000 fcbe 	bl	80069a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2150      	movs	r1, #80	; 0x50
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fdcd 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 8006038:	e02c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006046:	461a      	mov	r2, r3
 8006048:	f000 fd1a 	bl	8006a80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2160      	movs	r1, #96	; 0x60
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fdbd 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 8006058:	e01c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006066:	461a      	mov	r2, r3
 8006068:	f000 fc9e 	bl	80069a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fdad 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 8006078:	e00c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f000 fda4 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 800608a:	e003      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      break;
 8006090:	e000      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	00100070 	.word	0x00100070
 80060b4:	00100060 	.word	0x00100060
 80060b8:	00100050 	.word	0x00100050
 80060bc:	00100040 	.word	0x00100040
 80060c0:	00100030 	.word	0x00100030
 80060c4:	00100020 	.word	0x00100020

080060c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a4c      	ldr	r2, [pc, #304]	; (8006248 <TIM_Base_SetConfig+0x144>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d017      	beq.n	800614c <TIM_Base_SetConfig+0x48>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006122:	d013      	beq.n	800614c <TIM_Base_SetConfig+0x48>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a49      	ldr	r2, [pc, #292]	; (800624c <TIM_Base_SetConfig+0x148>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00f      	beq.n	800614c <TIM_Base_SetConfig+0x48>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a48      	ldr	r2, [pc, #288]	; (8006250 <TIM_Base_SetConfig+0x14c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <TIM_Base_SetConfig+0x48>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a47      	ldr	r2, [pc, #284]	; (8006254 <TIM_Base_SetConfig+0x150>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_Base_SetConfig+0x48>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a46      	ldr	r2, [pc, #280]	; (8006258 <TIM_Base_SetConfig+0x154>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_Base_SetConfig+0x48>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a45      	ldr	r2, [pc, #276]	; (800625c <TIM_Base_SetConfig+0x158>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d108      	bne.n	800615e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a39      	ldr	r2, [pc, #228]	; (8006248 <TIM_Base_SetConfig+0x144>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d023      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d01f      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a36      	ldr	r2, [pc, #216]	; (800624c <TIM_Base_SetConfig+0x148>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d01b      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a35      	ldr	r2, [pc, #212]	; (8006250 <TIM_Base_SetConfig+0x14c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d017      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a34      	ldr	r2, [pc, #208]	; (8006254 <TIM_Base_SetConfig+0x150>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a33      	ldr	r2, [pc, #204]	; (8006258 <TIM_Base_SetConfig+0x154>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00f      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a33      	ldr	r2, [pc, #204]	; (8006260 <TIM_Base_SetConfig+0x15c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00b      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a32      	ldr	r2, [pc, #200]	; (8006264 <TIM_Base_SetConfig+0x160>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a31      	ldr	r2, [pc, #196]	; (8006268 <TIM_Base_SetConfig+0x164>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <TIM_Base_SetConfig+0xaa>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a2c      	ldr	r2, [pc, #176]	; (800625c <TIM_Base_SetConfig+0x158>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a18      	ldr	r2, [pc, #96]	; (8006248 <TIM_Base_SetConfig+0x144>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d013      	beq.n	8006214 <TIM_Base_SetConfig+0x110>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <TIM_Base_SetConfig+0x154>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00f      	beq.n	8006214 <TIM_Base_SetConfig+0x110>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <TIM_Base_SetConfig+0x15c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00b      	beq.n	8006214 <TIM_Base_SetConfig+0x110>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a19      	ldr	r2, [pc, #100]	; (8006264 <TIM_Base_SetConfig+0x160>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <TIM_Base_SetConfig+0x110>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a18      	ldr	r2, [pc, #96]	; (8006268 <TIM_Base_SetConfig+0x164>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_Base_SetConfig+0x110>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a13      	ldr	r2, [pc, #76]	; (800625c <TIM_Base_SetConfig+0x158>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d103      	bne.n	800621c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	d105      	bne.n	800623a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f023 0201 	bic.w	r2, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	611a      	str	r2, [r3, #16]
  }
}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40000400 	.word	0x40000400
 8006250:	40000800 	.word	0x40000800
 8006254:	40000c00 	.word	0x40000c00
 8006258:	40013400 	.word	0x40013400
 800625c:	40015000 	.word	0x40015000
 8006260:	40014000 	.word	0x40014000
 8006264:	40014400 	.word	0x40014400
 8006268:	40014800 	.word	0x40014800

0800626c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	f023 0201 	bic.w	r2, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f023 0302 	bic.w	r3, r3, #2
 80062b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a30      	ldr	r2, [pc, #192]	; (8006388 <TIM_OC1_SetConfig+0x11c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d013      	beq.n	80062f4 <TIM_OC1_SetConfig+0x88>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a2f      	ldr	r2, [pc, #188]	; (800638c <TIM_OC1_SetConfig+0x120>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00f      	beq.n	80062f4 <TIM_OC1_SetConfig+0x88>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a2e      	ldr	r2, [pc, #184]	; (8006390 <TIM_OC1_SetConfig+0x124>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00b      	beq.n	80062f4 <TIM_OC1_SetConfig+0x88>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a2d      	ldr	r2, [pc, #180]	; (8006394 <TIM_OC1_SetConfig+0x128>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d007      	beq.n	80062f4 <TIM_OC1_SetConfig+0x88>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <TIM_OC1_SetConfig+0x12c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_OC1_SetConfig+0x88>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a2b      	ldr	r2, [pc, #172]	; (800639c <TIM_OC1_SetConfig+0x130>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d10c      	bne.n	800630e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 0308 	bic.w	r3, r3, #8
 80062fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 0304 	bic.w	r3, r3, #4
 800630c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a1d      	ldr	r2, [pc, #116]	; (8006388 <TIM_OC1_SetConfig+0x11c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <TIM_OC1_SetConfig+0xd2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1c      	ldr	r2, [pc, #112]	; (800638c <TIM_OC1_SetConfig+0x120>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00f      	beq.n	800633e <TIM_OC1_SetConfig+0xd2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <TIM_OC1_SetConfig+0x124>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00b      	beq.n	800633e <TIM_OC1_SetConfig+0xd2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a1a      	ldr	r2, [pc, #104]	; (8006394 <TIM_OC1_SetConfig+0x128>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d007      	beq.n	800633e <TIM_OC1_SetConfig+0xd2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a19      	ldr	r2, [pc, #100]	; (8006398 <TIM_OC1_SetConfig+0x12c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC1_SetConfig+0xd2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a18      	ldr	r2, [pc, #96]	; (800639c <TIM_OC1_SetConfig+0x130>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d111      	bne.n	8006362 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	621a      	str	r2, [r3, #32]
}
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40013400 	.word	0x40013400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800
 800639c:	40015000 	.word	0x40015000

080063a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f023 0210 	bic.w	r2, r3, #16
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <TIM_OC2_SetConfig+0x110>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <TIM_OC2_SetConfig+0x74>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a2b      	ldr	r2, [pc, #172]	; (80064b4 <TIM_OC2_SetConfig+0x114>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_OC2_SetConfig+0x74>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a2a      	ldr	r2, [pc, #168]	; (80064b8 <TIM_OC2_SetConfig+0x118>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d10d      	bne.n	8006430 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a1f      	ldr	r2, [pc, #124]	; (80064b0 <TIM_OC2_SetConfig+0x110>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <TIM_OC2_SetConfig+0xc0>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a1e      	ldr	r2, [pc, #120]	; (80064b4 <TIM_OC2_SetConfig+0x114>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00f      	beq.n	8006460 <TIM_OC2_SetConfig+0xc0>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <TIM_OC2_SetConfig+0x11c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00b      	beq.n	8006460 <TIM_OC2_SetConfig+0xc0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <TIM_OC2_SetConfig+0x120>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d007      	beq.n	8006460 <TIM_OC2_SetConfig+0xc0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <TIM_OC2_SetConfig+0x124>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_OC2_SetConfig+0xc0>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <TIM_OC2_SetConfig+0x118>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d113      	bne.n	8006488 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800646e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40013400 	.word	0x40013400
 80064b8:	40015000 	.word	0x40015000
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800

080064c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0303 	bic.w	r3, r3, #3
 8006502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2b      	ldr	r2, [pc, #172]	; (80065d4 <TIM_OC3_SetConfig+0x10c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d007      	beq.n	800653a <TIM_OC3_SetConfig+0x72>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <TIM_OC3_SetConfig+0x110>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_OC3_SetConfig+0x72>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a29      	ldr	r2, [pc, #164]	; (80065dc <TIM_OC3_SetConfig+0x114>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10d      	bne.n	8006556 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <TIM_OC3_SetConfig+0x10c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <TIM_OC3_SetConfig+0xbe>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <TIM_OC3_SetConfig+0x110>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00f      	beq.n	8006586 <TIM_OC3_SetConfig+0xbe>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a1d      	ldr	r2, [pc, #116]	; (80065e0 <TIM_OC3_SetConfig+0x118>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00b      	beq.n	8006586 <TIM_OC3_SetConfig+0xbe>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <TIM_OC3_SetConfig+0x11c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <TIM_OC3_SetConfig+0xbe>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <TIM_OC3_SetConfig+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_OC3_SetConfig+0xbe>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a16      	ldr	r2, [pc, #88]	; (80065dc <TIM_OC3_SetConfig+0x114>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d113      	bne.n	80065ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800658c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	621a      	str	r2, [r3, #32]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	40012c00 	.word	0x40012c00
 80065d8:	40013400 	.word	0x40013400
 80065dc:	40015000 	.word	0x40015000
 80065e0:	40014000 	.word	0x40014000
 80065e4:	40014400 	.word	0x40014400
 80065e8:	40014800 	.word	0x40014800

080065ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800663a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	031b      	lsls	r3, r3, #12
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <TIM_OC4_SetConfig+0x110>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d007      	beq.n	8006660 <TIM_OC4_SetConfig+0x74>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2b      	ldr	r2, [pc, #172]	; (8006700 <TIM_OC4_SetConfig+0x114>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_OC4_SetConfig+0x74>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a2a      	ldr	r2, [pc, #168]	; (8006704 <TIM_OC4_SetConfig+0x118>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10d      	bne.n	800667c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	031b      	lsls	r3, r3, #12
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800667a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a1f      	ldr	r2, [pc, #124]	; (80066fc <TIM_OC4_SetConfig+0x110>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d013      	beq.n	80066ac <TIM_OC4_SetConfig+0xc0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1e      	ldr	r2, [pc, #120]	; (8006700 <TIM_OC4_SetConfig+0x114>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00f      	beq.n	80066ac <TIM_OC4_SetConfig+0xc0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <TIM_OC4_SetConfig+0x11c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_OC4_SetConfig+0xc0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a1d      	ldr	r2, [pc, #116]	; (800670c <TIM_OC4_SetConfig+0x120>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_OC4_SetConfig+0xc0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <TIM_OC4_SetConfig+0x124>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC4_SetConfig+0xc0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a17      	ldr	r2, [pc, #92]	; (8006704 <TIM_OC4_SetConfig+0x118>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d113      	bne.n	80066d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	019b      	lsls	r3, r3, #6
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40015000 	.word	0x40015000
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800

08006714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a19      	ldr	r2, [pc, #100]	; (80067d0 <TIM_OC5_SetConfig+0xbc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <TIM_OC5_SetConfig+0x82>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <TIM_OC5_SetConfig+0xc0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00f      	beq.n	8006796 <TIM_OC5_SetConfig+0x82>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <TIM_OC5_SetConfig+0xc4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00b      	beq.n	8006796 <TIM_OC5_SetConfig+0x82>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a16      	ldr	r2, [pc, #88]	; (80067dc <TIM_OC5_SetConfig+0xc8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d007      	beq.n	8006796 <TIM_OC5_SetConfig+0x82>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <TIM_OC5_SetConfig+0xcc>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_OC5_SetConfig+0x82>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <TIM_OC5_SetConfig+0xd0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d109      	bne.n	80067aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800679c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40012c00 	.word	0x40012c00
 80067d4:	40013400 	.word	0x40013400
 80067d8:	40014000 	.word	0x40014000
 80067dc:	40014400 	.word	0x40014400
 80067e0:	40014800 	.word	0x40014800
 80067e4:	40015000 	.word	0x40015000

080067e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800682e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	051b      	lsls	r3, r3, #20
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a1a      	ldr	r2, [pc, #104]	; (80068a8 <TIM_OC6_SetConfig+0xc0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d013      	beq.n	800686c <TIM_OC6_SetConfig+0x84>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a19      	ldr	r2, [pc, #100]	; (80068ac <TIM_OC6_SetConfig+0xc4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00f      	beq.n	800686c <TIM_OC6_SetConfig+0x84>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <TIM_OC6_SetConfig+0xc8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00b      	beq.n	800686c <TIM_OC6_SetConfig+0x84>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a17      	ldr	r2, [pc, #92]	; (80068b4 <TIM_OC6_SetConfig+0xcc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d007      	beq.n	800686c <TIM_OC6_SetConfig+0x84>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a16      	ldr	r2, [pc, #88]	; (80068b8 <TIM_OC6_SetConfig+0xd0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_OC6_SetConfig+0x84>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a15      	ldr	r2, [pc, #84]	; (80068bc <TIM_OC6_SetConfig+0xd4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d109      	bne.n	8006880 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006872:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	029b      	lsls	r3, r3, #10
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	621a      	str	r2, [r3, #32]
}
 800689a:	bf00      	nop
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	40013400 	.word	0x40013400
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800
 80068bc:	40015000 	.word	0x40015000

080068c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f023 0201 	bic.w	r2, r3, #1
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4a28      	ldr	r2, [pc, #160]	; (800698c <TIM_TI1_SetConfig+0xcc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01b      	beq.n	8006926 <TIM_TI1_SetConfig+0x66>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f4:	d017      	beq.n	8006926 <TIM_TI1_SetConfig+0x66>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a25      	ldr	r2, [pc, #148]	; (8006990 <TIM_TI1_SetConfig+0xd0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <TIM_TI1_SetConfig+0x66>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <TIM_TI1_SetConfig+0xd4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00f      	beq.n	8006926 <TIM_TI1_SetConfig+0x66>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4a23      	ldr	r2, [pc, #140]	; (8006998 <TIM_TI1_SetConfig+0xd8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00b      	beq.n	8006926 <TIM_TI1_SetConfig+0x66>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a22      	ldr	r2, [pc, #136]	; (800699c <TIM_TI1_SetConfig+0xdc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d007      	beq.n	8006926 <TIM_TI1_SetConfig+0x66>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a21      	ldr	r2, [pc, #132]	; (80069a0 <TIM_TI1_SetConfig+0xe0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d003      	beq.n	8006926 <TIM_TI1_SetConfig+0x66>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <TIM_TI1_SetConfig+0xe4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d101      	bne.n	800692a <TIM_TI1_SetConfig+0x6a>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <TIM_TI1_SetConfig+0x6c>
 800692a:	2300      	movs	r3, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0303 	bic.w	r3, r3, #3
 8006936:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e003      	b.n	800694a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	b2db      	uxtb	r3, r3
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f023 030a 	bic.w	r3, r3, #10
 8006964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f003 030a 	and.w	r3, r3, #10
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00
 800699c:	40013400 	.word	0x40013400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	40015000 	.word	0x40015000

080069a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f023 0201 	bic.w	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f023 030a 	bic.w	r3, r3, #10
 80069e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b087      	sub	sp, #28
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0210 	bic.w	r2, r3, #16
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	031b      	lsls	r3, r3, #12
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a58:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	621a      	str	r2, [r3, #32]
}
 8006a74:	bf00      	nop
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0210 	bic.w	r2, r3, #16
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	031b      	lsls	r3, r3, #12
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006abc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f023 0303 	bic.w	r3, r3, #3
 8006b0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b30:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	621a      	str	r2, [r3, #32]
}
 8006b4c:	bf00      	nop
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	031b      	lsls	r3, r3, #12
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006baa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	031b      	lsls	r3, r3, #12
 8006bb0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f043 0307 	orr.w	r3, r3, #7
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	021a      	lsls	r2, r3, #8
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	609a      	str	r2, [r3, #8]
}
 8006c40:	bf00      	nop
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	2201      	movs	r2, #1
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1a      	ldr	r2, [r3, #32]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	401a      	ands	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	fa01 f303 	lsl.w	r3, r1, r3
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
	...

08006c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e074      	b.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a33      	ldr	r2, [pc, #204]	; (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a31      	ldr	r2, [pc, #196]	; (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d108      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a21      	ldr	r2, [pc, #132]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d30:	d01d      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1f      	ldr	r2, [pc, #124]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1d      	ldr	r2, [pc, #116]	; (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a18      	ldr	r2, [pc, #96]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a11      	ldr	r2, [pc, #68]	; (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10c      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40012c00 	.word	0x40012c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40015000 	.word	0x40015000
 8006db4:	40000400 	.word	0x40000400
 8006db8:	40000800 	.word	0x40000800
 8006dbc:	40000c00 	.word	0x40000c00
 8006dc0:	40014000 	.word	0x40014000

08006dc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e078      	b.n	8006ed2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1b      	ldr	r2, [pc, #108]	; (8006ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a19      	ldr	r2, [pc, #100]	; (8006ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d11c      	bne.n	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	051b      	lsls	r3, r3, #20
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40013400 	.word	0x40013400
 8006ee8:	40015000 	.word	0x40015000

08006eec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e042      	b.n	8007010 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d106      	bne.n	8006fa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fa ffc7 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2224      	movs	r2, #36	; 0x24
 8006fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0201 	bic.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fb24 	bl	8007610 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f825 	bl	8007018 <UART_SetConfig>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e01b      	b.n	8007010 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fba3 	bl	8007754 <UART_CheckIdleState>
 800700e:	4603      	mov	r3, r0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800701c:	b08c      	sub	sp, #48	; 0x30
 800701e:	af00      	add	r7, sp, #0
 8007020:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	431a      	orrs	r2, r3
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	431a      	orrs	r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	4313      	orrs	r3, r2
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4baa      	ldr	r3, [pc, #680]	; (80072f0 <UART_SetConfig+0x2d8>)
 8007048:	4013      	ands	r3, r2
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007050:	430b      	orrs	r3, r1
 8007052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a9f      	ldr	r2, [pc, #636]	; (80072f4 <UART_SetConfig+0x2dc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	4313      	orrs	r3, r2
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800708e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007098:	430b      	orrs	r3, r1
 800709a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	f023 010f 	bic.w	r1, r3, #15
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a90      	ldr	r2, [pc, #576]	; (80072f8 <UART_SetConfig+0x2e0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d125      	bne.n	8007108 <UART_SetConfig+0xf0>
 80070bc:	4b8f      	ldr	r3, [pc, #572]	; (80072fc <UART_SetConfig+0x2e4>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d81a      	bhi.n	8007100 <UART_SetConfig+0xe8>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0xb8>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	080070e1 	.word	0x080070e1
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	080070f9 	.word	0x080070f9
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e6:	e116      	b.n	8007316 <UART_SetConfig+0x2fe>
 80070e8:	2302      	movs	r3, #2
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ee:	e112      	b.n	8007316 <UART_SetConfig+0x2fe>
 80070f0:	2304      	movs	r3, #4
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f6:	e10e      	b.n	8007316 <UART_SetConfig+0x2fe>
 80070f8:	2308      	movs	r3, #8
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fe:	e10a      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007100:	2310      	movs	r3, #16
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007106:	e106      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a7c      	ldr	r2, [pc, #496]	; (8007300 <UART_SetConfig+0x2e8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d138      	bne.n	8007184 <UART_SetConfig+0x16c>
 8007112:	4b7a      	ldr	r3, [pc, #488]	; (80072fc <UART_SetConfig+0x2e4>)
 8007114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007118:	f003 030c 	and.w	r3, r3, #12
 800711c:	2b0c      	cmp	r3, #12
 800711e:	d82d      	bhi.n	800717c <UART_SetConfig+0x164>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <UART_SetConfig+0x110>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	0800715d 	.word	0x0800715d
 800712c:	0800717d 	.word	0x0800717d
 8007130:	0800717d 	.word	0x0800717d
 8007134:	0800717d 	.word	0x0800717d
 8007138:	0800716d 	.word	0x0800716d
 800713c:	0800717d 	.word	0x0800717d
 8007140:	0800717d 	.word	0x0800717d
 8007144:	0800717d 	.word	0x0800717d
 8007148:	08007165 	.word	0x08007165
 800714c:	0800717d 	.word	0x0800717d
 8007150:	0800717d 	.word	0x0800717d
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007175 	.word	0x08007175
 800715c:	2300      	movs	r3, #0
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e0d8      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007164:	2302      	movs	r3, #2
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716a:	e0d4      	b.n	8007316 <UART_SetConfig+0x2fe>
 800716c:	2304      	movs	r3, #4
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007172:	e0d0      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007174:	2308      	movs	r3, #8
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717a:	e0cc      	b.n	8007316 <UART_SetConfig+0x2fe>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007182:	e0c8      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a5e      	ldr	r2, [pc, #376]	; (8007304 <UART_SetConfig+0x2ec>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d125      	bne.n	80071da <UART_SetConfig+0x1c2>
 800718e:	4b5b      	ldr	r3, [pc, #364]	; (80072fc <UART_SetConfig+0x2e4>)
 8007190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007194:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007198:	2b30      	cmp	r3, #48	; 0x30
 800719a:	d016      	beq.n	80071ca <UART_SetConfig+0x1b2>
 800719c:	2b30      	cmp	r3, #48	; 0x30
 800719e:	d818      	bhi.n	80071d2 <UART_SetConfig+0x1ba>
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d00a      	beq.n	80071ba <UART_SetConfig+0x1a2>
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d814      	bhi.n	80071d2 <UART_SetConfig+0x1ba>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <UART_SetConfig+0x19a>
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d008      	beq.n	80071c2 <UART_SetConfig+0x1aa>
 80071b0:	e00f      	b.n	80071d2 <UART_SetConfig+0x1ba>
 80071b2:	2300      	movs	r3, #0
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b8:	e0ad      	b.n	8007316 <UART_SetConfig+0x2fe>
 80071ba:	2302      	movs	r3, #2
 80071bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c0:	e0a9      	b.n	8007316 <UART_SetConfig+0x2fe>
 80071c2:	2304      	movs	r3, #4
 80071c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c8:	e0a5      	b.n	8007316 <UART_SetConfig+0x2fe>
 80071ca:	2308      	movs	r3, #8
 80071cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d0:	e0a1      	b.n	8007316 <UART_SetConfig+0x2fe>
 80071d2:	2310      	movs	r3, #16
 80071d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d8:	e09d      	b.n	8007316 <UART_SetConfig+0x2fe>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a4a      	ldr	r2, [pc, #296]	; (8007308 <UART_SetConfig+0x2f0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d125      	bne.n	8007230 <UART_SetConfig+0x218>
 80071e4:	4b45      	ldr	r3, [pc, #276]	; (80072fc <UART_SetConfig+0x2e4>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071ee:	2bc0      	cmp	r3, #192	; 0xc0
 80071f0:	d016      	beq.n	8007220 <UART_SetConfig+0x208>
 80071f2:	2bc0      	cmp	r3, #192	; 0xc0
 80071f4:	d818      	bhi.n	8007228 <UART_SetConfig+0x210>
 80071f6:	2b80      	cmp	r3, #128	; 0x80
 80071f8:	d00a      	beq.n	8007210 <UART_SetConfig+0x1f8>
 80071fa:	2b80      	cmp	r3, #128	; 0x80
 80071fc:	d814      	bhi.n	8007228 <UART_SetConfig+0x210>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <UART_SetConfig+0x1f0>
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d008      	beq.n	8007218 <UART_SetConfig+0x200>
 8007206:	e00f      	b.n	8007228 <UART_SetConfig+0x210>
 8007208:	2300      	movs	r3, #0
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720e:	e082      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007210:	2302      	movs	r3, #2
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007216:	e07e      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007218:	2304      	movs	r3, #4
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721e:	e07a      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007220:	2308      	movs	r3, #8
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007226:	e076      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007228:	2310      	movs	r3, #16
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722e:	e072      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a35      	ldr	r2, [pc, #212]	; (800730c <UART_SetConfig+0x2f4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d12a      	bne.n	8007290 <UART_SetConfig+0x278>
 800723a:	4b30      	ldr	r3, [pc, #192]	; (80072fc <UART_SetConfig+0x2e4>)
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007248:	d01a      	beq.n	8007280 <UART_SetConfig+0x268>
 800724a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800724e:	d81b      	bhi.n	8007288 <UART_SetConfig+0x270>
 8007250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007254:	d00c      	beq.n	8007270 <UART_SetConfig+0x258>
 8007256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800725a:	d815      	bhi.n	8007288 <UART_SetConfig+0x270>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <UART_SetConfig+0x250>
 8007260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007264:	d008      	beq.n	8007278 <UART_SetConfig+0x260>
 8007266:	e00f      	b.n	8007288 <UART_SetConfig+0x270>
 8007268:	2300      	movs	r3, #0
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e052      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007270:	2302      	movs	r3, #2
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007276:	e04e      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727e:	e04a      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007286:	e046      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728e:	e042      	b.n	8007316 <UART_SetConfig+0x2fe>
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <UART_SetConfig+0x2dc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d13a      	bne.n	8007310 <UART_SetConfig+0x2f8>
 800729a:	4b18      	ldr	r3, [pc, #96]	; (80072fc <UART_SetConfig+0x2e4>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072a8:	d01a      	beq.n	80072e0 <UART_SetConfig+0x2c8>
 80072aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ae:	d81b      	bhi.n	80072e8 <UART_SetConfig+0x2d0>
 80072b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b4:	d00c      	beq.n	80072d0 <UART_SetConfig+0x2b8>
 80072b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ba:	d815      	bhi.n	80072e8 <UART_SetConfig+0x2d0>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <UART_SetConfig+0x2b0>
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c4:	d008      	beq.n	80072d8 <UART_SetConfig+0x2c0>
 80072c6:	e00f      	b.n	80072e8 <UART_SetConfig+0x2d0>
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e022      	b.n	8007316 <UART_SetConfig+0x2fe>
 80072d0:	2302      	movs	r3, #2
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e01e      	b.n	8007316 <UART_SetConfig+0x2fe>
 80072d8:	2304      	movs	r3, #4
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072de:	e01a      	b.n	8007316 <UART_SetConfig+0x2fe>
 80072e0:	2308      	movs	r3, #8
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e6:	e016      	b.n	8007316 <UART_SetConfig+0x2fe>
 80072e8:	2310      	movs	r3, #16
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ee:	e012      	b.n	8007316 <UART_SetConfig+0x2fe>
 80072f0:	cfff69f3 	.word	0xcfff69f3
 80072f4:	40008000 	.word	0x40008000
 80072f8:	40013800 	.word	0x40013800
 80072fc:	40021000 	.word	0x40021000
 8007300:	40004400 	.word	0x40004400
 8007304:	40004800 	.word	0x40004800
 8007308:	40004c00 	.word	0x40004c00
 800730c:	40005000 	.word	0x40005000
 8007310:	2310      	movs	r3, #16
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4aae      	ldr	r2, [pc, #696]	; (80075d4 <UART_SetConfig+0x5bc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	f040 8097 	bne.w	8007450 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007326:	2b08      	cmp	r3, #8
 8007328:	d823      	bhi.n	8007372 <UART_SetConfig+0x35a>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x318>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007355 	.word	0x08007355
 8007334:	08007373 	.word	0x08007373
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007373 	.word	0x08007373
 8007340:	08007363 	.word	0x08007363
 8007344:	08007373 	.word	0x08007373
 8007348:	08007373 	.word	0x08007373
 800734c:	08007373 	.word	0x08007373
 8007350:	0800736b 	.word	0x0800736b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007354:	f7fd fb86 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8007358:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800735a:	e010      	b.n	800737e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800735c:	4b9e      	ldr	r3, [pc, #632]	; (80075d8 <UART_SetConfig+0x5c0>)
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007360:	e00d      	b.n	800737e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007362:	f7fd fb11 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8007366:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007368:	e009      	b.n	800737e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007370:	e005      	b.n	800737e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800737c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8130 	beq.w	80075e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	4a94      	ldr	r2, [pc, #592]	; (80075dc <UART_SetConfig+0x5c4>)
 800738c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007390:	461a      	mov	r2, r3
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	fbb3 f3f2 	udiv	r3, r3, r2
 8007398:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4413      	add	r3, r2
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d305      	bcc.n	80073b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d903      	bls.n	80073be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073bc:	e113      	b.n	80075e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	2200      	movs	r2, #0
 80073c2:	60bb      	str	r3, [r7, #8]
 80073c4:	60fa      	str	r2, [r7, #12]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	4a84      	ldr	r2, [pc, #528]	; (80075dc <UART_SetConfig+0x5c4>)
 80073cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2200      	movs	r2, #0
 80073d4:	603b      	str	r3, [r7, #0]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073e0:	f7f8 ff3a 	bl	8000258 <__aeabi_uldivmod>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4610      	mov	r0, r2
 80073ea:	4619      	mov	r1, r3
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	f04f 0300 	mov.w	r3, #0
 80073f4:	020b      	lsls	r3, r1, #8
 80073f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073fa:	0202      	lsls	r2, r0, #8
 80073fc:	6979      	ldr	r1, [r7, #20]
 80073fe:	6849      	ldr	r1, [r1, #4]
 8007400:	0849      	lsrs	r1, r1, #1
 8007402:	2000      	movs	r0, #0
 8007404:	460c      	mov	r4, r1
 8007406:	4605      	mov	r5, r0
 8007408:	eb12 0804 	adds.w	r8, r2, r4
 800740c:	eb43 0905 	adc.w	r9, r3, r5
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	469a      	mov	sl, r3
 8007418:	4693      	mov	fp, r2
 800741a:	4652      	mov	r2, sl
 800741c:	465b      	mov	r3, fp
 800741e:	4640      	mov	r0, r8
 8007420:	4649      	mov	r1, r9
 8007422:	f7f8 ff19 	bl	8000258 <__aeabi_uldivmod>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4613      	mov	r3, r2
 800742c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007434:	d308      	bcc.n	8007448 <UART_SetConfig+0x430>
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800743c:	d204      	bcs.n	8007448 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	60da      	str	r2, [r3, #12]
 8007446:	e0ce      	b.n	80075e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800744e:	e0ca      	b.n	80075e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007458:	d166      	bne.n	8007528 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800745a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800745e:	2b08      	cmp	r3, #8
 8007460:	d827      	bhi.n	80074b2 <UART_SetConfig+0x49a>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <UART_SetConfig+0x450>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	0800748d 	.word	0x0800748d
 800746c:	08007495 	.word	0x08007495
 8007470:	0800749d 	.word	0x0800749d
 8007474:	080074b3 	.word	0x080074b3
 8007478:	080074a3 	.word	0x080074a3
 800747c:	080074b3 	.word	0x080074b3
 8007480:	080074b3 	.word	0x080074b3
 8007484:	080074b3 	.word	0x080074b3
 8007488:	080074ab 	.word	0x080074ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fd faea 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8007490:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007492:	e014      	b.n	80074be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007494:	f7fd fafc 	bl	8004a90 <HAL_RCC_GetPCLK2Freq>
 8007498:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800749a:	e010      	b.n	80074be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800749c:	4b4e      	ldr	r3, [pc, #312]	; (80075d8 <UART_SetConfig+0x5c0>)
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074a0:	e00d      	b.n	80074be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074a2:	f7fd fa71 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 80074a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074a8:	e009      	b.n	80074be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074b0:	e005      	b.n	80074be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 8090 	beq.w	80075e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	4a44      	ldr	r2, [pc, #272]	; (80075dc <UART_SetConfig+0x5c4>)
 80074cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d0:	461a      	mov	r2, r3
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074d8:	005a      	lsls	r2, r3, #1
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	441a      	add	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b0f      	cmp	r3, #15
 80074f0:	d916      	bls.n	8007520 <UART_SetConfig+0x508>
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f8:	d212      	bcs.n	8007520 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f023 030f 	bic.w	r3, r3, #15
 8007502:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	b29b      	uxth	r3, r3
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	b29a      	uxth	r2, r3
 8007510:	8bfb      	ldrh	r3, [r7, #30]
 8007512:	4313      	orrs	r3, r2
 8007514:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	8bfa      	ldrh	r2, [r7, #30]
 800751c:	60da      	str	r2, [r3, #12]
 800751e:	e062      	b.n	80075e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007526:	e05e      	b.n	80075e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007528:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800752c:	2b08      	cmp	r3, #8
 800752e:	d828      	bhi.n	8007582 <UART_SetConfig+0x56a>
 8007530:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <UART_SetConfig+0x520>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	0800755d 	.word	0x0800755d
 800753c:	08007565 	.word	0x08007565
 8007540:	0800756d 	.word	0x0800756d
 8007544:	08007583 	.word	0x08007583
 8007548:	08007573 	.word	0x08007573
 800754c:	08007583 	.word	0x08007583
 8007550:	08007583 	.word	0x08007583
 8007554:	08007583 	.word	0x08007583
 8007558:	0800757b 	.word	0x0800757b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800755c:	f7fd fa82 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8007560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007562:	e014      	b.n	800758e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007564:	f7fd fa94 	bl	8004a90 <HAL_RCC_GetPCLK2Freq>
 8007568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800756a:	e010      	b.n	800758e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800756c:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <UART_SetConfig+0x5c0>)
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007570:	e00d      	b.n	800758e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007572:	f7fd fa09 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8007576:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007578:	e009      	b.n	800758e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800757a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007580:	e005      	b.n	800758e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800758c:	bf00      	nop
    }

    if (pclk != 0U)
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d028      	beq.n	80075e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	4a10      	ldr	r2, [pc, #64]	; (80075dc <UART_SetConfig+0x5c4>)
 800759a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800759e:	461a      	mov	r2, r3
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	085b      	lsrs	r3, r3, #1
 80075ac:	441a      	add	r2, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	2b0f      	cmp	r3, #15
 80075bc:	d910      	bls.n	80075e0 <UART_SetConfig+0x5c8>
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c4:	d20c      	bcs.n	80075e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60da      	str	r2, [r3, #12]
 80075d0:	e009      	b.n	80075e6 <UART_SetConfig+0x5ce>
 80075d2:	bf00      	nop
 80075d4:	40008000 	.word	0x40008000
 80075d8:	00f42400 	.word	0x00f42400
 80075dc:	08007cdc 	.word	0x08007cdc
      }
      else
      {
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2200      	movs	r2, #0
 80075fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2200      	movs	r2, #0
 8007600:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007602:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007606:	4618      	mov	r0, r3
 8007608:	3730      	adds	r7, #48	; 0x30
 800760a:	46bd      	mov	sp, r7
 800760c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	f003 0310 	and.w	r3, r3, #16
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01a      	beq.n	8007726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800770e:	d10a      	bne.n	8007726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	605a      	str	r2, [r3, #4]
  }
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b098      	sub	sp, #96	; 0x60
 8007758:	af02      	add	r7, sp, #8
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007764:	f7fa fd26 	bl	80021b4 <HAL_GetTick>
 8007768:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b08      	cmp	r3, #8
 8007776:	d12f      	bne.n	80077d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007780:	2200      	movs	r2, #0
 8007782:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f88e 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d022      	beq.n	80077d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a6:	653b      	str	r3, [r7, #80]	; 0x50
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b0:	647b      	str	r3, [r7, #68]	; 0x44
 80077b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e6      	bne.n	8007792 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e063      	b.n	80078a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d149      	bne.n	800787a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ee:	2200      	movs	r2, #0
 80077f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f857 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d03c      	beq.n	800787a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	623b      	str	r3, [r7, #32]
   return(result);
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781e:	633b      	str	r3, [r7, #48]	; 0x30
 8007820:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e6      	bne.n	8007800 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	60fb      	str	r3, [r7, #12]
   return(result);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	64bb      	str	r3, [r7, #72]	; 0x48
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007852:	61fa      	str	r2, [r7, #28]
 8007854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	69b9      	ldr	r1, [r7, #24]
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	617b      	str	r3, [r7, #20]
   return(result);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e5      	bne.n	8007832 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e012      	b.n	80078a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3758      	adds	r7, #88	; 0x58
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	4613      	mov	r3, r2
 80078b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b8:	e04f      	b.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d04b      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c2:	f7fa fc77 	bl	80021b4 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e04e      	b.n	800797a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d037      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b80      	cmp	r3, #128	; 0x80
 80078ee:	d034      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d031      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b08      	cmp	r3, #8
 8007902:	d110      	bne.n	8007926 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2208      	movs	r2, #8
 800790a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f838 	bl	8007982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2208      	movs	r2, #8
 8007916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e029      	b.n	800797a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007934:	d111      	bne.n	800795a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800793e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f81e 	bl	8007982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2220      	movs	r2, #32
 800794a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e00f      	b.n	800797a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69da      	ldr	r2, [r3, #28]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4013      	ands	r3, r2
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	bf0c      	ite	eq
 800796a:	2301      	moveq	r3, #1
 800796c:	2300      	movne	r3, #0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	429a      	cmp	r2, r3
 8007976:	d0a0      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007982:	b480      	push	{r7}
 8007984:	b095      	sub	sp, #84	; 0x54
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800799e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	643b      	str	r3, [r7, #64]	; 0x40
 80079aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e6      	bne.n	800798a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e3      	bne.n	80079bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d118      	bne.n	8007a2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f023 0310 	bic.w	r3, r3, #16
 8007a10:	647b      	str	r3, [r7, #68]	; 0x44
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a1a:	61bb      	str	r3, [r7, #24]
 8007a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6979      	ldr	r1, [r7, #20]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	613b      	str	r3, [r7, #16]
   return(result);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e6      	bne.n	80079fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a42:	bf00      	nop
 8007a44:	3754      	adds	r7, #84	; 0x54
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b085      	sub	sp, #20
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e027      	b.n	8007ab4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0201 	bic.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e02d      	b.n	8007b34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2224      	movs	r2, #36	; 0x24
 8007ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0201 	bic.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f84f 	bl	8007bb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e02d      	b.n	8007bb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2224      	movs	r2, #36	; 0x24
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0201 	bic.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f811 	bl	8007bb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d108      	bne.n	8007bda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bd8:	e031      	b.n	8007c3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bda:	2308      	movs	r3, #8
 8007bdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bde:	2308      	movs	r3, #8
 8007be0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	0e5b      	lsrs	r3, r3, #25
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	0f5b      	lsrs	r3, r3, #29
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	f003 0307 	and.w	r3, r3, #7
 8007c00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	7b3a      	ldrb	r2, [r7, #12]
 8007c06:	4911      	ldr	r1, [pc, #68]	; (8007c4c <UARTEx_SetNbDataToProcess+0x94>)
 8007c08:	5c8a      	ldrb	r2, [r1, r2]
 8007c0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c0e:	7b3a      	ldrb	r2, [r7, #12]
 8007c10:	490f      	ldr	r1, [pc, #60]	; (8007c50 <UARTEx_SetNbDataToProcess+0x98>)
 8007c12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c14:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	7b7a      	ldrb	r2, [r7, #13]
 8007c24:	4909      	ldr	r1, [pc, #36]	; (8007c4c <UARTEx_SetNbDataToProcess+0x94>)
 8007c26:	5c8a      	ldrb	r2, [r1, r2]
 8007c28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c2c:	7b7a      	ldrb	r2, [r7, #13]
 8007c2e:	4908      	ldr	r1, [pc, #32]	; (8007c50 <UARTEx_SetNbDataToProcess+0x98>)
 8007c30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c32:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	08007cf4 	.word	0x08007cf4
 8007c50:	08007cfc 	.word	0x08007cfc

08007c54 <memset>:
 8007c54:	4402      	add	r2, r0
 8007c56:	4603      	mov	r3, r0
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d100      	bne.n	8007c5e <memset+0xa>
 8007c5c:	4770      	bx	lr
 8007c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c62:	e7f9      	b.n	8007c58 <memset+0x4>

08007c64 <__libc_init_array>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4d0d      	ldr	r5, [pc, #52]	; (8007c9c <__libc_init_array+0x38>)
 8007c68:	4c0d      	ldr	r4, [pc, #52]	; (8007ca0 <__libc_init_array+0x3c>)
 8007c6a:	1b64      	subs	r4, r4, r5
 8007c6c:	10a4      	asrs	r4, r4, #2
 8007c6e:	2600      	movs	r6, #0
 8007c70:	42a6      	cmp	r6, r4
 8007c72:	d109      	bne.n	8007c88 <__libc_init_array+0x24>
 8007c74:	4d0b      	ldr	r5, [pc, #44]	; (8007ca4 <__libc_init_array+0x40>)
 8007c76:	4c0c      	ldr	r4, [pc, #48]	; (8007ca8 <__libc_init_array+0x44>)
 8007c78:	f000 f818 	bl	8007cac <_init>
 8007c7c:	1b64      	subs	r4, r4, r5
 8007c7e:	10a4      	asrs	r4, r4, #2
 8007c80:	2600      	movs	r6, #0
 8007c82:	42a6      	cmp	r6, r4
 8007c84:	d105      	bne.n	8007c92 <__libc_init_array+0x2e>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8c:	4798      	blx	r3
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7ee      	b.n	8007c70 <__libc_init_array+0xc>
 8007c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c96:	4798      	blx	r3
 8007c98:	3601      	adds	r6, #1
 8007c9a:	e7f2      	b.n	8007c82 <__libc_init_array+0x1e>
 8007c9c:	08007d0c 	.word	0x08007d0c
 8007ca0:	08007d0c 	.word	0x08007d0c
 8007ca4:	08007d0c 	.word	0x08007d0c
 8007ca8:	08007d10 	.word	0x08007d10

08007cac <_init>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	bf00      	nop
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr

08007cb8 <_fini>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	bf00      	nop
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr
