
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007984  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba4  08007ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  2000000c  08007bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  08007bb8  00020758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd05  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000396a  00000000  00000000  0003cd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  000406f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000133e  00000000  00000000  00041f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003875  00000000  00000000  000432d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ce9  00000000  00000000  00046b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112317  00000000  00000000  00067834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006964  00000000  00000000  00179b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001804b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b44 	.word	0x08007b44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007b44 	.word	0x08007b44

08000218 <__aeabi_d2uiz>:
 8000218:	004a      	lsls	r2, r1, #1
 800021a:	d211      	bcs.n	8000240 <__aeabi_d2uiz+0x28>
 800021c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000220:	d211      	bcs.n	8000246 <__aeabi_d2uiz+0x2e>
 8000222:	d50d      	bpl.n	8000240 <__aeabi_d2uiz+0x28>
 8000224:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000228:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800022c:	d40e      	bmi.n	800024c <__aeabi_d2uiz+0x34>
 800022e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000236:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800023a:	fa23 f002 	lsr.w	r0, r3, r2
 800023e:	4770      	bx	lr
 8000240:	f04f 0000 	mov.w	r0, #0
 8000244:	4770      	bx	lr
 8000246:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800024a:	d102      	bne.n	8000252 <__aeabi_d2uiz+0x3a>
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	4770      	bx	lr
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	4770      	bx	lr

08000258 <__aeabi_uldivmod>:
 8000258:	b953      	cbnz	r3, 8000270 <__aeabi_uldivmod+0x18>
 800025a:	b94a      	cbnz	r2, 8000270 <__aeabi_uldivmod+0x18>
 800025c:	2900      	cmp	r1, #0
 800025e:	bf08      	it	eq
 8000260:	2800      	cmpeq	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	f04f 31ff 	movne.w	r1, #4294967295
 8000268:	f04f 30ff 	movne.w	r0, #4294967295
 800026c:	f000 b970 	b.w	8000550 <__aeabi_idiv0>
 8000270:	f1ad 0c08 	sub.w	ip, sp, #8
 8000274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000284:	b004      	add	sp, #16
 8000286:	4770      	bx	lr

08000288 <__udivmoddi4>:
 8000288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800028c:	9e08      	ldr	r6, [sp, #32]
 800028e:	460d      	mov	r5, r1
 8000290:	4604      	mov	r4, r0
 8000292:	460f      	mov	r7, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14a      	bne.n	800032e <__udivmoddi4+0xa6>
 8000298:	428a      	cmp	r2, r1
 800029a:	4694      	mov	ip, r2
 800029c:	d965      	bls.n	800036a <__udivmoddi4+0xe2>
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	b143      	cbz	r3, 80002b6 <__udivmoddi4+0x2e>
 80002a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a8:	f1c3 0220 	rsb	r2, r3, #32
 80002ac:	409f      	lsls	r7, r3
 80002ae:	fa20 f202 	lsr.w	r2, r0, r2
 80002b2:	4317      	orrs	r7, r2
 80002b4:	409c      	lsls	r4, r3
 80002b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ba:	fa1f f58c 	uxth.w	r5, ip
 80002be:	fbb7 f1fe 	udiv	r1, r7, lr
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002cc:	fb01 f005 	mul.w	r0, r1, r5
 80002d0:	4290      	cmp	r0, r2
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x62>
 80002d4:	eb1c 0202 	adds.w	r2, ip, r2
 80002d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002dc:	f080 811c 	bcs.w	8000518 <__udivmoddi4+0x290>
 80002e0:	4290      	cmp	r0, r2
 80002e2:	f240 8119 	bls.w	8000518 <__udivmoddi4+0x290>
 80002e6:	3902      	subs	r1, #2
 80002e8:	4462      	add	r2, ip
 80002ea:	1a12      	subs	r2, r2, r0
 80002ec:	b2a4      	uxth	r4, r4
 80002ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fa:	fb00 f505 	mul.w	r5, r0, r5
 80002fe:	42a5      	cmp	r5, r4
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x90>
 8000302:	eb1c 0404 	adds.w	r4, ip, r4
 8000306:	f100 32ff 	add.w	r2, r0, #4294967295
 800030a:	f080 8107 	bcs.w	800051c <__udivmoddi4+0x294>
 800030e:	42a5      	cmp	r5, r4
 8000310:	f240 8104 	bls.w	800051c <__udivmoddi4+0x294>
 8000314:	4464      	add	r4, ip
 8000316:	3802      	subs	r0, #2
 8000318:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	2100      	movs	r1, #0
 8000320:	b11e      	cbz	r6, 800032a <__udivmoddi4+0xa2>
 8000322:	40dc      	lsrs	r4, r3
 8000324:	2300      	movs	r3, #0
 8000326:	e9c6 4300 	strd	r4, r3, [r6]
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	428b      	cmp	r3, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000332:	2e00      	cmp	r6, #0
 8000334:	f000 80ed 	beq.w	8000512 <__udivmoddi4+0x28a>
 8000338:	2100      	movs	r1, #0
 800033a:	e9c6 0500 	strd	r0, r5, [r6]
 800033e:	4608      	mov	r0, r1
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	fab3 f183 	clz	r1, r3
 8000348:	2900      	cmp	r1, #0
 800034a:	d149      	bne.n	80003e0 <__udivmoddi4+0x158>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d302      	bcc.n	8000356 <__udivmoddi4+0xce>
 8000350:	4282      	cmp	r2, r0
 8000352:	f200 80f8 	bhi.w	8000546 <__udivmoddi4+0x2be>
 8000356:	1a84      	subs	r4, r0, r2
 8000358:	eb65 0203 	sbc.w	r2, r5, r3
 800035c:	2001      	movs	r0, #1
 800035e:	4617      	mov	r7, r2
 8000360:	2e00      	cmp	r6, #0
 8000362:	d0e2      	beq.n	800032a <__udivmoddi4+0xa2>
 8000364:	e9c6 4700 	strd	r4, r7, [r6]
 8000368:	e7df      	b.n	800032a <__udivmoddi4+0xa2>
 800036a:	b902      	cbnz	r2, 800036e <__udivmoddi4+0xe6>
 800036c:	deff      	udf	#255	; 0xff
 800036e:	fab2 f382 	clz	r3, r2
 8000372:	2b00      	cmp	r3, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x210>
 8000378:	1a8a      	subs	r2, r1, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2101      	movs	r1, #1
 8000384:	fbb2 f5f7 	udiv	r5, r2, r7
 8000388:	fb07 2015 	mls	r0, r7, r5, r2
 800038c:	0c22      	lsrs	r2, r4, #16
 800038e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000392:	fb0e f005 	mul.w	r0, lr, r5
 8000396:	4290      	cmp	r0, r2
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x124>
 800039a:	eb1c 0202 	adds.w	r2, ip, r2
 800039e:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x122>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2b8>
 80003aa:	4645      	mov	r5, r8
 80003ac:	1a12      	subs	r2, r2, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b4:	fb07 2210 	mls	r2, r7, r0, r2
 80003b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x14e>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x14c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2c2>
 80003d4:	4610      	mov	r0, r2
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003de:	e79f      	b.n	8000320 <__udivmoddi4+0x98>
 80003e0:	f1c1 0720 	rsb	r7, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa05 f401 	lsl.w	r4, r5, r1
 80003f2:	fa20 f307 	lsr.w	r3, r0, r7
 80003f6:	40fd      	lsrs	r5, r7
 80003f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	fb09 5518 	mls	r5, r9, r8, r5
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000410:	fb08 f50e 	mul.w	r5, r8, lr
 8000414:	42a5      	cmp	r5, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	fa00 f001 	lsl.w	r0, r0, r1
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b0>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2b4>
 800042c:	42a5      	cmp	r5, r4
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2b4>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4464      	add	r4, ip
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	b29d      	uxth	r5, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000448:	fb03 fe0e 	mul.w	lr, r3, lr
 800044c:	45a6      	cmp	lr, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1da>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f103 35ff 	add.w	r5, r3, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2ac>
 800045a:	45a6      	cmp	lr, r4
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2ac>
 800045e:	3b02      	subs	r3, #2
 8000460:	4464      	add	r4, ip
 8000462:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000466:	fba3 9502 	umull	r9, r5, r3, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	42ac      	cmp	r4, r5
 8000470:	46c8      	mov	r8, r9
 8000472:	46ae      	mov	lr, r5
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x29c>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x298>
 8000478:	b156      	cbz	r6, 8000490 <__udivmoddi4+0x208>
 800047a:	ebb0 0208 	subs.w	r2, r0, r8
 800047e:	eb64 040e 	sbc.w	r4, r4, lr
 8000482:	fa04 f707 	lsl.w	r7, r4, r7
 8000486:	40ca      	lsrs	r2, r1
 8000488:	40cc      	lsrs	r4, r1
 800048a:	4317      	orrs	r7, r2
 800048c:	e9c6 7400 	strd	r7, r4, [r6]
 8000490:	4618      	mov	r0, r3
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	f1c3 0120 	rsb	r1, r3, #32
 800049c:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a0:	fa20 f201 	lsr.w	r2, r0, r1
 80004a4:	fa25 f101 	lsr.w	r1, r5, r1
 80004a8:	409d      	lsls	r5, r3
 80004aa:	432a      	orrs	r2, r5
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b8:	fb07 1510 	mls	r5, r7, r0, r1
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004c2:	fb00 f50e 	mul.w	r5, r0, lr
 80004c6:	428d      	cmp	r5, r1
 80004c8:	fa04 f403 	lsl.w	r4, r4, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x258>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b0>
 80004d8:	428d      	cmp	r5, r1
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b0>
 80004dc:	3802      	subs	r0, #2
 80004de:	4461      	add	r1, ip
 80004e0:	1b49      	subs	r1, r1, r5
 80004e2:	b292      	uxth	r2, r2
 80004e4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f0:	fb05 f10e 	mul.w	r1, r5, lr
 80004f4:	4291      	cmp	r1, r2
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x282>
 80004f8:	eb1c 0202 	adds.w	r2, ip, r2
 80004fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2a8>
 8000502:	4291      	cmp	r1, r2
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2a8>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	1a52      	subs	r2, r2, r1
 800050c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0xfc>
 8000512:	4631      	mov	r1, r6
 8000514:	4630      	mov	r0, r6
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xa2>
 8000518:	4639      	mov	r1, r7
 800051a:	e6e6      	b.n	80002ea <__udivmoddi4+0x62>
 800051c:	4610      	mov	r0, r2
 800051e:	e6fb      	b.n	8000318 <__udivmoddi4+0x90>
 8000520:	4548      	cmp	r0, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f0>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb65 0e0c 	sbc.w	lr, r5, ip
 800052c:	3b01      	subs	r3, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f0>
 8000530:	4645      	mov	r5, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x282>
 8000534:	462b      	mov	r3, r5
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1da>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x258>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b0>
 8000540:	3d02      	subs	r5, #2
 8000542:	4462      	add	r2, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x124>
 8000546:	4608      	mov	r0, r1
 8000548:	e70a      	b.n	8000360 <__udivmoddi4+0xd8>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x14e>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <vPowerTrainSystemInit+0x20>)
 800055a:	f004 fd55 	bl	8005008 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 800055e:	2100      	movs	r1, #0
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <vPowerTrainSystemInit+0x20>)
 8000562:	f004 fe19 	bl	8005198 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 8000566:	2104      	movs	r1, #4
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <vPowerTrainSystemInit+0x20>)
 800056a:	f004 fe15 	bl	8005198 <HAL_TIM_PWM_Start>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000484 	.word	0x20000484

08000578 <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <vPowerTrainSystemSetMotorDirection+0x1c>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d01f      	beq.n	80005d2 <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000592:	e040      	b.n	8000616 <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10b      	bne.n	80005b2 <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005a2:	f003 fb3b 	bl	8003c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005ae:	f003 fb35 	bl	8003c1c <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d12b      	bne.n	8000610 <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4818      	ldr	r0, [pc, #96]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005c0:	f003 fb2c 	bl	8003c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005cc:	f003 fb26 	bl	8003c1c <HAL_GPIO_WritePin>
			} break;
 80005d0:	e01e      	b.n	8000610 <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10b      	bne.n	80005f0 <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005de:	f003 fb1d 	bl	8003c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f003 fb16 	bl	8003c1c <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10e      	bne.n	8000614 <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <vPowerTrainSystemSetMotorDirection+0xa8>)
 80005fc:	f003 fb0e 	bl	8003c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f003 fb07 	bl	8003c1c <HAL_GPIO_WritePin>
			} break;
 800060e:	e001      	b.n	8000614 <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000614:	bf00      	nop
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	48000400 	.word	0x48000400

08000624 <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	ed87 0b00 	vstr	d0, [r7]
 8000630:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <vPowerTrainSystemSetMotorSpeed+0x1a>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d009      	beq.n	8000650 <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 800063c:	e011      	b.n	8000662 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000640:	681c      	ldr	r4, [r3, #0]
 8000642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000646:	f7ff fde7 	bl	8000218 <__aeabi_d2uiz>
 800064a:	4603      	mov	r3, r0
 800064c:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 800064e:	e008      	b.n	8000662 <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000652:	681c      	ldr	r4, [r3, #0]
 8000654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000658:	f7ff fdde 	bl	8000218 <__aeabi_d2uiz>
 800065c:	4603      	mov	r3, r0
 800065e:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
 8000660:	bf00      	nop
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	20000484 	.word	0x20000484

08000670 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2220      	movs	r2, #32
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f007 fa2f 	bl	8007aec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000694:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800069c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006fa:	f001 ff19 	bl	8002530 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000704:	f000 ff2a 	bl	800155c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4619      	mov	r1, r3
 8000712:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000714:	f002 fd2e 	bl	8003174 <HAL_ADCEx_MultiModeConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 ff1d 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_ADC1_Init+0xec>)
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000726:	2306      	movs	r3, #6
 8000728:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072e:	237f      	movs	r3, #127	; 0x7f
 8000730:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000732:	2304      	movs	r3, #4
 8000734:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000740:	f002 f8b2 	bl	80028a8 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800074a:	f000 ff07 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3730      	adds	r7, #48	; 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000028 	.word	0x20000028
 800075c:	04300002 	.word	0x04300002

08000760 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f007 f9bd 	bl	8007aec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_ADC2_Init+0xdc>)
 8000774:	4a32      	ldr	r2, [pc, #200]	; (8000840 <MX_ADC2_Init+0xe0>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <MX_ADC2_Init+0xdc>)
 800077a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800077e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_ADC2_Init+0xdc>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_ADC2_Init+0xdc>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_ADC2_Init+0xdc>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_ADC2_Init+0xdc>)
 8000794:	2201      	movs	r2, #1
 8000796:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_ADC2_Init+0xdc>)
 800079a:	2204      	movs	r2, #4
 800079c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC2_Init+0xdc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_ADC2_Init+0xdc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_ADC2_Init+0xdc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ADC2_Init+0xdc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC2_Init+0xdc>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC2_Init+0xdc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC2_Init+0xdc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_ADC2_Init+0xdc>)
 80007dc:	f001 fea8 	bl	8002530 <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007e6:	f000 feb9 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ADC2_Init+0xe4>)
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ee:	2306      	movs	r3, #6
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	237f      	movs	r3, #127	; 0x7f
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fa:	2304      	movs	r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_ADC2_Init+0xdc>)
 8000808:	f002 f84e 	bl	80028a8 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 fea3 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_ADC2_Init+0xe8>)
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800081a:	230c      	movs	r3, #12
 800081c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_ADC2_Init+0xdc>)
 8000824:	f002 f840 	bl	80028a8 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800082e:	f000 fe95 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094
 8000840:	50000100 	.word	0x50000100
 8000844:	0c900008 	.word	0x0c900008
 8000848:	10c00010 	.word	0x10c00010

0800084c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2220      	movs	r2, #32
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f007 f941 	bl	8007aec <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_ADC3_Init+0xe4>)
 800086c:	4a31      	ldr	r2, [pc, #196]	; (8000934 <MX_ADC3_Init+0xe8>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000872:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000876:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000878:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_ADC3_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC3_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000892:	2204      	movs	r2, #4
 8000894:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_ADC3_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_ADC3_Init+0xe4>)
 800089e:	2201      	movs	r2, #1
 80008a0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008d4:	f001 fe2c 	bl	8002530 <HAL_ADC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 fe3d 	bl	800155c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_ADC3_Init+0xe4>)
 80008ee:	f002 fc41 	bl	8003174 <HAL_ADCEx_MultiModeConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008f8:	f000 fe30 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ADC3_Init+0xec>)
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000900:	2306      	movs	r3, #6
 8000902:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000904:	2302      	movs	r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000908:	237f      	movs	r3, #127	; 0x7f
 800090a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC3_Init+0xe4>)
 800091a:	f001 ffc5 	bl	80028a8 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000924:	f000 fe1a 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000100 	.word	0x20000100
 8000934:	50000400 	.word	0x50000400
 8000938:	14f00020 	.word	0x14f00020

0800093c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2220      	movs	r2, #32
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f007 f8cf 	bl	8007aec <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <MX_ADC4_Init+0xc4>)
 8000952:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000956:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800095a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_ADC4_Init+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC4_Init+0xc0>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000976:	2204      	movs	r2, #4
 8000978:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC4_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000982:	2201      	movs	r2, #1
 8000984:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000988:	2201      	movs	r2, #1
 800098a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_ADC4_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_ADC4_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_ADC4_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009b8:	f001 fdba 	bl	8002530 <HAL_ADC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80009c2:	f000 fdcb 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_ADC4_Init+0xc8>)
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ca:	2306      	movs	r3, #6
 80009cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d2:	237f      	movs	r3, #127	; 0x7f
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d6:	2304      	movs	r3, #4
 80009d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_ADC4_Init+0xc0>)
 80009e4:	f001 ff60 	bl	80028a8 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80009ee:	f000 fdb5 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000016c 	.word	0x2000016c
 8000a00:	50000500 	.word	0x50000500
 8000a04:	14f00020 	.word	0x14f00020

08000a08 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f007 f869 	bl	8007aec <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <MX_ADC5_Init+0xc4>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000a84:	f001 fd54 	bl	8002530 <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000a8e:	f000 fd65 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_ADC5_Init+0xc8>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9e:	237f      	movs	r3, #127	; 0x7f
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_ADC5_Init+0xc0>)
 8000ab0:	f001 fefa 	bl	80028a8 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000aba:	f000 fd4f 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200001d8 	.word	0x200001d8
 8000acc:	50000600 	.word	0x50000600
 8000ad0:	08600004 	.word	0x08600004

08000ad4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0a6      	sub	sp, #152	; 0x98
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af0:	2254      	movs	r2, #84	; 0x54
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f006 fff9 	bl	8007aec <memset>
  if(adcHandle->Instance==ADC1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b02:	d16c      	bne.n	8000bde <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 ffd1 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b20:	f000 fd1c 	bl	800155c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b24:	4ba0      	ldr	r3, [pc, #640]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a9f      	ldr	r2, [pc, #636]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b2e:	4b9e      	ldr	r3, [pc, #632]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d10b      	bne.n	8000b4e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b36:	4b9d      	ldr	r3, [pc, #628]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a9c      	ldr	r2, [pc, #624]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b9a      	ldr	r3, [pc, #616]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b97      	ldr	r3, [pc, #604]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a96      	ldr	r2, [pc, #600]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b94      	ldr	r3, [pc, #592]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f002 fec9 	bl	8003918 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b86:	4b8a      	ldr	r3, [pc, #552]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b88:	4a8a      	ldr	r2, [pc, #552]	; (8000db4 <HAL_ADC_MspInit+0x2e0>)
 8000b8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b8c:	4b88      	ldr	r3, [pc, #544]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b8e:	2205      	movs	r2, #5
 8000b90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b92:	4b87      	ldr	r3, [pc, #540]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b85      	ldr	r3, [pc, #532]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba4:	4b82      	ldr	r3, [pc, #520]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000baa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bac:	4b80      	ldr	r3, [pc, #512]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bb4:	4b7e      	ldr	r3, [pc, #504]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b7d      	ldr	r3, [pc, #500]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bc0:	487b      	ldr	r0, [pc, #492]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bc2:	f002 fcef 	bl	80035a4 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000bcc:	f000 fcc6 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a77      	ldr	r2, [pc, #476]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bd4:	655a      	str	r2, [r3, #84]	; 0x54
 8000bd6:	4a76      	ldr	r2, [pc, #472]	; (8000db0 <HAL_ADC_MspInit+0x2dc>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000bdc:	e1e0      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a75      	ldr	r2, [pc, #468]	; (8000db8 <HAL_ADC_MspInit+0x2e4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d16c      	bne.n	8000cc2 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bf2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 ff5f 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000c04:	f000 fcaa 	bl	800155c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c08:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a66      	ldr	r2, [pc, #408]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c12:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <HAL_ADC_MspInit+0x2d4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10b      	bne.n	8000c32 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c1a:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a63      	ldr	r2, [pc, #396]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b61      	ldr	r3, [pc, #388]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a5d      	ldr	r2, [pc, #372]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000c4a:	23c0      	movs	r3, #192	; 0xc0
 8000c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c50:	2303      	movs	r3, #3
 8000c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f002 fe57 	bl	8003918 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000c6a:	4b54      	ldr	r3, [pc, #336]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c6c:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <HAL_ADC_MspInit+0x2ec>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c72:	2224      	movs	r2, #36	; 0x24
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c76:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c96:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ca4:	4845      	ldr	r0, [pc, #276]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000ca6:	f002 fc7d 	bl	80035a4 <HAL_DMA_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000cb0:	f000 fc54 	bl	800155c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000cb8:	655a      	str	r2, [r3, #84]	; 0x54
 8000cba:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <HAL_ADC_MspInit+0x2e8>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000cc0:	e16e      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a3f      	ldr	r2, [pc, #252]	; (8000dc4 <HAL_ADC_MspInit+0x2f0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	f040 8085 	bne.w	8000dd8 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000cd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000cd8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 feec 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000cea:	f000 fc37 	bl	800155c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a34      	ldr	r2, [pc, #208]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_ADC_MspInit+0x2f4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a29      	ldr	r2, [pc, #164]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a23      	ldr	r2, [pc, #140]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_ADC_MspInit+0x2d8>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <HAL_ADC_MspInit+0x2f8>)
 8000d4c:	f002 fde4 	bl	8003918 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_ADC_MspInit+0x300>)
 8000d54:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d58:	2225      	movs	r2, #37	; 0x25
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d8c:	f002 fc0a 	bl	80035a4 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000d96:	f000 fbe1 	bl	800155c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000d9e:	655a      	str	r2, [r3, #84]	; 0x54
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_ADC_MspInit+0x2fc>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000da6:	e0fb      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
 8000da8:	20000424 	.word	0x20000424
 8000dac:	40021000 	.word	0x40021000
 8000db0:	20000244 	.word	0x20000244
 8000db4:	40020008 	.word	0x40020008
 8000db8:	50000100 	.word	0x50000100
 8000dbc:	200002a4 	.word	0x200002a4
 8000dc0:	4002001c 	.word	0x4002001c
 8000dc4:	50000400 	.word	0x50000400
 8000dc8:	20000428 	.word	0x20000428
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	20000304 	.word	0x20000304
 8000dd4:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a72      	ldr	r2, [pc, #456]	; (8000fa8 <HAL_ADC_MspInit+0x4d4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d16c      	bne.n	8000ebc <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000de8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000dec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fe62 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000dfe:	f000 fbad 	bl	800155c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e02:	4b6a      	ldr	r3, [pc, #424]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	4a68      	ldr	r2, [pc, #416]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e0c:	4b67      	ldr	r3, [pc, #412]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10b      	bne.n	8000e2c <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000e14:	4b66      	ldr	r3, [pc, #408]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a65      	ldr	r2, [pc, #404]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4855      	ldr	r0, [pc, #340]	; (8000fb4 <HAL_ADC_MspInit+0x4e0>)
 8000e60:	f002 fd5a 	bl	8003918 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e66:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <HAL_ADC_MspInit+0x4e8>)
 8000e68:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e6c:	2226      	movs	r2, #38	; 0x26
 8000e6e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e76:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e8a:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000e92:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e94:	2220      	movs	r2, #32
 8000e96:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000e9e:	4846      	ldr	r0, [pc, #280]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000ea0:	f002 fb80 	bl	80035a4 <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000eaa:	f000 fb57 	bl	800155c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a41      	ldr	r2, [pc, #260]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <HAL_ADC_MspInit+0x4e4>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000eba:	e071      	b.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <HAL_ADC_MspInit+0x4ec>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d16c      	bne.n	8000fa0 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ed0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fdf0 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000ee2:	f000 fb3b 	bl	800155c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000eee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_ADC_MspInit+0x4d8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10b      	bne.n	8000f10 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_ADC_MspInit+0x4dc>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f002 fce7 	bl	8003918 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_ADC_MspInit+0x4f4>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f52:	2227      	movs	r2, #39	; 0x27
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f86:	f002 fb0d 	bl	80035a4 <HAL_DMA_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000f90:	f000 fae4 	bl	800155c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_ADC_MspInit+0x4f0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	3798      	adds	r7, #152	; 0x98
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	50000500 	.word	0x50000500
 8000fac:	20000428 	.word	0x20000428
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	20000364 	.word	0x20000364
 8000fbc:	40020044 	.word	0x40020044
 8000fc0:	50000600 	.word	0x50000600
 8000fc4:	200003c4 	.word	0x200003c4
 8000fc8:	40020058 	.word	0x40020058

08000fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_DMA_Init+0xb0>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <MX_DMA_Init+0xb0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6493      	str	r3, [r2, #72]	; 0x48
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_DMA_Init+0xb0>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_DMA_Init+0xb0>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_DMA_Init+0xb0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_DMA_Init+0xb0>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	200b      	movs	r0, #11
 8001008:	f002 fa97 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800100c:	200b      	movs	r0, #11
 800100e:	f002 faae 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200c      	movs	r0, #12
 8001018:	f002 fa8f 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800101c:	200c      	movs	r0, #12
 800101e:	f002 faa6 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200d      	movs	r0, #13
 8001028:	f002 fa87 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800102c:	200d      	movs	r0, #13
 800102e:	f002 fa9e 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	200e      	movs	r0, #14
 8001038:	f002 fa7f 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800103c:	200e      	movs	r0, #14
 800103e:	f002 fa96 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200f      	movs	r0, #15
 8001048:	f002 fa77 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800104c:	200f      	movs	r0, #15
 800104e:	f002 fa8e 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2010      	movs	r0, #16
 8001058:	f002 fa6f 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800105c:	2010      	movs	r0, #16
 800105e:	f002 fa86 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2011      	movs	r0, #17
 8001068:	f002 fa67 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800106c:	2011      	movs	r0, #17
 800106e:	f002 fa7e 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b66      	ldr	r3, [pc, #408]	; (8001230 <MX_GPIO_Init+0x1b0>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a65      	ldr	r2, [pc, #404]	; (8001230 <MX_GPIO_Init+0x1b0>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b63      	ldr	r3, [pc, #396]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ae:	4b60      	ldr	r3, [pc, #384]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a5f      	ldr	r2, [pc, #380]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a59      	ldr	r2, [pc, #356]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b57      	ldr	r3, [pc, #348]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b54      	ldr	r3, [pc, #336]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a53      	ldr	r2, [pc, #332]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b51      	ldr	r3, [pc, #324]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b4e      	ldr	r3, [pc, #312]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a4d      	ldr	r2, [pc, #308]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <MX_GPIO_Init+0x1b0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f002 fd80 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8001122:	4844      	ldr	r0, [pc, #272]	; (8001234 <MX_GPIO_Init+0x1b4>)
 8001124:	f002 fd7a 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 8001128:	f242 33a0 	movw	r3, #9120	; 0x23a0
 800112c:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	483e      	ldr	r0, [pc, #248]	; (8001238 <MX_GPIO_Init+0x1b8>)
 8001140:	f002 fbea 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8001144:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f002 fbda 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 8001164:	2304      	movs	r3, #4
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001174:	2303      	movs	r3, #3
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	482d      	ldr	r0, [pc, #180]	; (8001234 <MX_GPIO_Init+0x1b4>)
 8001180:	f002 fbca 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8001184:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001196:	2307      	movs	r3, #7
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4824      	ldr	r0, [pc, #144]	; (8001234 <MX_GPIO_Init+0x1b4>)
 80011a2:	f002 fbb9 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 80011a6:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	481d      	ldr	r0, [pc, #116]	; (8001234 <MX_GPIO_Init+0x1b4>)
 80011c0:	f002 fbaa 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011d4:	2302      	movs	r3, #2
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4816      	ldr	r0, [pc, #88]	; (8001238 <MX_GPIO_Init+0x1b8>)
 80011e0:	f002 fb9a 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 80011e4:	2304      	movs	r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4810      	ldr	r0, [pc, #64]	; (800123c <MX_GPIO_Init+0x1bc>)
 80011fa:	f002 fb8d 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 80011fe:	2340      	movs	r3, #64	; 0x40
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001202:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <MX_GPIO_Init+0x1b4>)
 8001214:	f002 fb80 	bl	8003918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	2028      	movs	r0, #40	; 0x28
 800121e:	f002 f98c 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001222:	2028      	movs	r0, #40	; 0x28
 8001224:	f002 f9a3 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800
 800123c:	48000c00 	.word	0x48000c00

08001240 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_I2C2_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_I2C2_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_I2C2_Init+0x74>)
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <MX_I2C2_Init+0x7c>)
 800124e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_I2C2_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_I2C2_Init+0x74>)
 8001258:	2201      	movs	r2, #1
 800125a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_I2C2_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_I2C2_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C2_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C2_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C2_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <MX_I2C2_Init+0x74>)
 800127c:	f002 fd09 	bl	8003c92 <HAL_I2C_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001286:	f000 f969 	bl	800155c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128a:	2100      	movs	r1, #0
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <MX_I2C2_Init+0x74>)
 800128e:	f002 fd9b 	bl	8003dc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001298:	f000 f960 	bl	800155c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_I2C2_Init+0x74>)
 80012a0:	f002 fddd 	bl	8003e5e <HAL_I2CEx_ConfigDigitalFilter>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 f957 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000042c 	.word	0x2000042c
 80012b8:	40005800 	.word	0x40005800
 80012bc:	30a0a7fb 	.word	0x30a0a7fb

080012c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0a0      	sub	sp, #128	; 0x80
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	2254      	movs	r2, #84	; 0x54
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f006 fc03 	bl	8007aec <memset>
  if(i2cHandle->Instance==I2C2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a2d      	ldr	r2, [pc, #180]	; (80013a0 <HAL_I2C_MspInit+0xe0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d153      	bne.n	8001398 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 fbdd 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001308:	f000 f928 	bl	800155c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 800133c:	2310      	movs	r3, #16
 800133e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800134c:	2304      	movs	r3, #4
 800134e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001354:	4619      	mov	r1, r3
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <HAL_I2C_MspInit+0xe8>)
 8001358:	f002 fade 	bl	8003918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 800135c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001360:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001362:	2312      	movs	r3, #18
 8001364:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800136e:	2304      	movs	r3, #4
 8001370:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f002 facc 	bl	8003918 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138a:	6593      	str	r3, [r2, #88]	; 0x58
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001398:	bf00      	nop
 800139a:	3780      	adds	r7, #128	; 0x80
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40005800 	.word	0x40005800
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000800 	.word	0x48000800
 80013ac:	00000000 	.word	0x00000000

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f000 fe53 	bl	800205e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f86c 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f7ff fe60 	bl	8001080 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c0:	f7ff fe04 	bl	8000fcc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80013c4:	f000 fd24 	bl	8001e10 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80013c8:	f7ff f952 	bl	8000670 <MX_ADC1_Init>
  MX_ADC2_Init();
 80013cc:	f7ff f9c8 	bl	8000760 <MX_ADC2_Init>
  MX_ADC3_Init();
 80013d0:	f7ff fa3c 	bl	800084c <MX_ADC3_Init>
  MX_TIM1_Init();
 80013d4:	f000 f984 	bl	80016e0 <MX_TIM1_Init>
  MX_TIM16_Init();
 80013d8:	f000 fb22 	bl	8001a20 <MX_TIM16_Init>
  MX_TIM4_Init();
 80013dc:	f000 fa3c 	bl	8001858 <MX_TIM4_Init>
  MX_ADC4_Init();
 80013e0:	f7ff faac 	bl	800093c <MX_ADC4_Init>
  MX_ADC5_Init();
 80013e4:	f7ff fb10 	bl	8000a08 <MX_ADC5_Init>
  MX_I2C2_Init();
 80013e8:	f7ff ff2a 	bl	8001240 <MX_I2C2_Init>
  MX_TIM8_Init();
 80013ec:	f000 fa84 	bl	80018f8 <MX_TIM8_Init>
  MX_TIM17_Init();
 80013f0:	f000 fb90 	bl	8001b14 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  vPowerTrainSystemInit();
 80013f4:	f7ff f8ae 	bl	8000554 <vPowerTrainSystemInit>
  HAL_TIM_IC_Start_IT(&htim17, TIM_CHANNEL_1);
 80013f8:	2100      	movs	r1, #0
 80013fa:	4825      	ldr	r0, [pc, #148]	; (8001490 <main+0xe0>)
 80013fc:	f004 f840 	bl	8005480 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001400:	2100      	movs	r1, #0
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff f8b8 	bl	8000578 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR, COUNTER_CLOCKWISE);
 8001408:	2101      	movs	r1, #1
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff f8b4 	bl	8000578 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,1000);
 8001410:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001478 <main+0xc8>
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff f905 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 500);
 800141a:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001480 <main+0xd0>
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff f900 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(3000);
 8001424:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001428:	f000 fe8a 	bl	8002140 <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,0);
 800142c:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001488 <main+0xd8>
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff f8f7 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 8001436:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001488 <main+0xd8>
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff f8f2 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(1000);
 8001440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001444:	f000 fe7c 	bl	8002140 <HAL_Delay>

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, COUNTER_CLOCKWISE);
 8001448:	2101      	movs	r1, #1
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff f894 	bl	8000578 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR, CLOCKWISE);
 8001450:	2100      	movs	r1, #0
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff f890 	bl	8000578 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR,1000);
 8001458:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001478 <main+0xc8>
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff f8e1 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 500);
 8001462:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001480 <main+0xd0>
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff f8dc 	bl	8000624 <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(3000);
 800146c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001470:	f000 fe66 	bl	8002140 <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001474:	e7c4      	b.n	8001400 <main+0x50>
 8001476:	bf00      	nop
 8001478:	00000000 	.word	0x00000000
 800147c:	408f4000 	.word	0x408f4000
 8001480:	00000000 	.word	0x00000000
 8001484:	407f4000 	.word	0x407f4000
	...
 8001490:	200005b4 	.word	0x200005b4

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	; 0x50
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 0318 	add.w	r3, r7, #24
 800149e:	2238      	movs	r2, #56	; 0x38
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 fb22 	bl	8007aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f002 fd1e 	bl	8003ef8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c6:	2340      	movs	r3, #64	; 0x40
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2302      	movs	r3, #2
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ce:	2302      	movs	r3, #2
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014d6:	2355      	movs	r3, #85	; 0x55
 80014d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014da:	2302      	movs	r3, #2
 80014dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014de:	2302      	movs	r3, #2
 80014e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014e2:	2302      	movs	r3, #2
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fdb8 	bl	8004060 <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014f6:	f000 f831 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fa:	230f      	movs	r3, #15
 80014fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fe:	2303      	movs	r3, #3
 8001500:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2104      	movs	r1, #4
 8001512:	4618      	mov	r0, r3
 8001514:	f003 f8b6 	bl	8004684 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800151e:	f000 f81d 	bl	800155c <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3750      	adds	r7, #80	; 0x50
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x28>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d104      	bne.n	8001548 <HAL_TIM_IC_CaptureCallback+0x1c>
        contador_encoder++;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001546:	6013      	str	r3, [r2, #0]
        //valor_capturado = HAL_TIM_ReadCapturedValue(&htim17, TIM_CHANNEL_1);

    }
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40014800 	.word	0x40014800
 8001558:	20000480 	.word	0x20000480

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x44>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_MspInit+0x44>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6613      	str	r3, [r2, #96]	; 0x60
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_MspInit+0x44>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x44>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x44>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6593      	str	r3, [r2, #88]	; 0x58
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x44>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800159e:	f002 fd4f 	bl	8004040 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 fd82 	bl	8002104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <DMA1_Channel1_IRQHandler+0x10>)
 800160a:	f002 f873 	bl	80036f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000244 	.word	0x20000244

08001618 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Channel2_IRQHandler+0x10>)
 800161e:	f002 f869 	bl	80036f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200002a4 	.word	0x200002a4

0800162c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA1_Channel3_IRQHandler+0x10>)
 8001632:	f002 f85f 	bl	80036f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000304 	.word	0x20000304

08001640 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <DMA1_Channel4_IRQHandler+0x10>)
 8001646:	f002 f855 	bl	80036f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000364 	.word	0x20000364

08001654 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA1_Channel5_IRQHandler+0x10>)
 800165a:	f002 f84b 	bl	80036f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003c4 	.word	0x200003c4

08001668 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA1_Channel6_IRQHandler+0x10>)
 800166e:	f002 f841 	bl	80036f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000694 	.word	0x20000694

0800167c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Channel7_IRQHandler+0x10>)
 8001682:	f002 f837 	bl	80036f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200006f4 	.word	0x200006f4

08001690 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001696:	f004 f843 	bl	8005720 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800169c:	f004 f840 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000484 	.word	0x20000484
 80016a8:	200005b4 	.word	0x200005b4

080016ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016b4:	f002 faca 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <SystemInit+0x20>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <SystemInit+0x20>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09c      	sub	sp, #112	; 0x70
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001700:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2234      	movs	r2, #52	; 0x34
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f006 f9e6 	bl	8007aec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <MX_TIM1_Init+0x170>)
 8001722:	4a4c      	ldr	r2, [pc, #304]	; (8001854 <MX_TIM1_Init+0x174>)
 8001724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8001726:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <MX_TIM1_Init+0x170>)
 8001728:	2210      	movs	r2, #16
 800172a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <MX_TIM1_Init+0x170>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <MX_TIM1_Init+0x170>)
 8001734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001738:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b45      	ldr	r3, [pc, #276]	; (8001850 <MX_TIM1_Init+0x170>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <MX_TIM1_Init+0x170>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <MX_TIM1_Init+0x170>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800174c:	4840      	ldr	r0, [pc, #256]	; (8001850 <MX_TIM1_Init+0x170>)
 800174e:	f003 fc03 	bl	8004f58 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001758:	f7ff ff00 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001762:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001766:	4619      	mov	r1, r3
 8001768:	4839      	ldr	r0, [pc, #228]	; (8001850 <MX_TIM1_Init+0x170>)
 800176a:	f004 fad9 	bl	8005d20 <HAL_TIM_ConfigClockSource>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001774:	f7ff fef2 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001778:	4835      	ldr	r0, [pc, #212]	; (8001850 <MX_TIM1_Init+0x170>)
 800177a:	f003 fcb5 	bl	80050e8 <HAL_TIM_PWM_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001784:	f7ff feea 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001794:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001798:	4619      	mov	r1, r3
 800179a:	482d      	ldr	r0, [pc, #180]	; (8001850 <MX_TIM1_Init+0x170>)
 800179c:	f005 f9c8 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017a6:	f7ff fed9 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017aa:	2360      	movs	r3, #96	; 0x60
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b6:	2300      	movs	r3, #0
 80017b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	4820      	ldr	r0, [pc, #128]	; (8001850 <MX_TIM1_Init+0x170>)
 80017d0:	f004 f992 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017da:	f7ff febf 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e2:	2204      	movs	r2, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	481a      	ldr	r0, [pc, #104]	; (8001850 <MX_TIM1_Init+0x170>)
 80017e8:	f004 f986 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80017f2:	f7ff feb3 	bl	800155c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800180a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800181c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4619      	mov	r1, r3
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <MX_TIM1_Init+0x170>)
 8001834:	f005 fa12 	bl	8006c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800183e:	f7ff fe8d 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <MX_TIM1_Init+0x170>)
 8001844:	f000 fa60 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001848:	bf00      	nop
 800184a:	3770      	adds	r7, #112	; 0x70
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000484 	.word	0x20000484
 8001854:	40012c00 	.word	0x40012c00

08001858 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_TIM4_Init+0x98>)
 8001878:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <MX_TIM4_Init+0x9c>)
 800187a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_TIM4_Init+0x98>)
 800187e:	f244 2267 	movw	r2, #16999	; 0x4267
 8001882:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_TIM4_Init+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM4_Init+0x98>)
 800188c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001890:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_TIM4_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_TIM4_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800189e:	4814      	ldr	r0, [pc, #80]	; (80018f0 <MX_TIM4_Init+0x98>)
 80018a0:	f003 fb5a 	bl	8004f58 <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80018aa:	f7ff fe57 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_TIM4_Init+0x98>)
 80018bc:	f004 fa30 	bl	8005d20 <HAL_TIM_ConfigClockSource>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80018c6:	f7ff fe49 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_TIM4_Init+0x98>)
 80018d8:	f005 f92a 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80018e2:	f7ff fe3b 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200004d0 	.word	0x200004d0
 80018f4:	40000800 	.word	0x40000800

080018f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b098      	sub	sp, #96	; 0x60
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2234      	movs	r2, #52	; 0x34
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f006 f8e1 	bl	8007aec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <MX_TIM8_Init+0x120>)
 800192c:	4a3b      	ldr	r2, [pc, #236]	; (8001a1c <MX_TIM8_Init+0x124>)
 800192e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <MX_TIM8_Init+0x120>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <MX_TIM8_Init+0x120>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <MX_TIM8_Init+0x120>)
 800193e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001942:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <MX_TIM8_Init+0x120>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <MX_TIM8_Init+0x120>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <MX_TIM8_Init+0x120>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001956:	4830      	ldr	r0, [pc, #192]	; (8001a18 <MX_TIM8_Init+0x120>)
 8001958:	f003 fbc6 	bl	80050e8 <HAL_TIM_PWM_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001962:	f7ff fdfb 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001972:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001976:	4619      	mov	r1, r3
 8001978:	4827      	ldr	r0, [pc, #156]	; (8001a18 <MX_TIM8_Init+0x120>)
 800197a:	f005 f8d9 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001984:	f7ff fdea 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001988:	2360      	movs	r3, #96	; 0x60
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001990:	2300      	movs	r3, #0
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	481a      	ldr	r0, [pc, #104]	; (8001a18 <MX_TIM8_Init+0x120>)
 80019ae:	f004 f8a3 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80019b8:	f7ff fdd0 	bl	800155c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM8_Init+0x120>)
 80019fa:	f005 f92f 	bl	8006c5c <HAL_TIMEx_ConfigBreakDeadTime>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001a04:	f7ff fdaa 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM8_Init+0x120>)
 8001a0a:	f000 f97d 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001a0e:	bf00      	nop
 8001a10:	3760      	adds	r7, #96	; 0x60
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000051c 	.word	0x2000051c
 8001a1c:	40013400 	.word	0x40013400

08001a20 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	; 0x50
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2234      	movs	r2, #52	; 0x34
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f006 f853 	bl	8007aec <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <MX_TIM16_Init+0xf0>)
 8001a4a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a5a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a5e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a72:	4826      	ldr	r0, [pc, #152]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a74:	f003 fa70 	bl	8004f58 <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001a7e:	f7ff fd6d 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001a82:	4822      	ldr	r0, [pc, #136]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a84:	f003 fb30 	bl	80050e8 <HAL_TIM_PWM_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001a8e:	f7ff fd65 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a92:	2360      	movs	r3, #96	; 0x60
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4815      	ldr	r0, [pc, #84]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001ab8:	f004 f81e 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001ac2:	f7ff fd4b 	bl	800155c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ade:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001aee:	f005 f8b5 	bl	8006c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001af8:	f7ff fd30 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001afe:	f000 f903 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	; 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000568 	.word	0x20000568
 8001b10:	40014400 	.word	0x40014400

08001b14 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b28:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <MX_TIM17_Init+0x90>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b2e:	22a9      	movs	r2, #169	; 0xa9
 8001b30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b52:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b54:	f003 fa00 	bl	8004f58 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8001b5e:	f7ff fcfd 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001b62:	480f      	ldr	r0, [pc, #60]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b64:	f003 fc2a 	bl	80053bc <HAL_TIM_IC_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001b6e:	f7ff fcf5 	bl	800155c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b76:	2301      	movs	r3, #1
 8001b78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_TIM17_Init+0x8c>)
 8001b8a:	f003 ff18 	bl	80059be <HAL_TIM_IC_ConfigChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8001b94:	f7ff fce2 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200005b4 	.word	0x200005b4
 8001ba4:	40014800 	.word	0x40014800

08001ba8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <HAL_TIM_Base_MspInit+0x108>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d114      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	4a39      	ldr	r2, [pc, #228]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	201a      	movs	r0, #26
 8001be8:	f001 fca7 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001bec:	201a      	movs	r0, #26
 8001bee:	f001 fcbe 	bl	800356e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001bf2:	e058      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM4)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <HAL_TIM_Base_MspInit+0x110>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10c      	bne.n	8001c18 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]
}
 8001c16:	e046      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM16)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <HAL_TIM_Base_MspInit+0x114>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10c      	bne.n	8001c3c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	4a23      	ldr	r2, [pc, #140]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
}
 8001c3a:	e034      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM17)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_TIM_Base_MspInit+0x118>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12f      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6613      	str	r3, [r2, #96]	; 0x60
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_TIM_Base_MspInit+0x10c>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8001c76:	2320      	movs	r3, #32
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001c86:	230a      	movs	r3, #10
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <HAL_TIM_Base_MspInit+0x11c>)
 8001c92:	f001 fe41 	bl	8003918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	201a      	movs	r0, #26
 8001c9c:	f001 fc4d 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001ca0:	201a      	movs	r0, #26
 8001ca2:	f001 fc64 	bl	800356e <HAL_NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	; 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40014400 	.word	0x40014400
 8001cc0:	40014800 	.word	0x40014800
 8001cc4:	48000400 	.word	0x48000400

08001cc8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_TIM_PWM_MspInit+0x38>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40013400 	.word	0x40013400
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a34      	ldr	r2, [pc, #208]	; (8001df8 <HAL_TIM_MspPostInit+0xf0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11c      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	4a33      	ldr	r2, [pc, #204]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001d42:	2303      	movs	r3, #3
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d52:	2302      	movs	r3, #2
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4828      	ldr	r0, [pc, #160]	; (8001e00 <HAL_TIM_MspPostInit+0xf8>)
 8001d5e:	f001 fddb 	bl	8003918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001d62:	e044      	b.n	8001dee <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_TIM_MspPostInit+0xfc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d11e      	bne.n	8001dac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da6:	f001 fdb7 	bl	8003918 <HAL_GPIO_Init>
}
 8001daa:	e020      	b.n	8001dee <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM16)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_TIM_MspPostInit+0x100>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d11b      	bne.n	8001dee <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001dde:	2301      	movs	r3, #1
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4808      	ldr	r0, [pc, #32]	; (8001e0c <HAL_TIM_MspPostInit+0x104>)
 8001dea:	f001 fd95 	bl	8003918 <HAL_GPIO_Init>
}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000800 	.word	0x48000800
 8001e04:	40013400 	.word	0x40013400
 8001e08:	40014400 	.word	0x40014400
 8001e0c:	48000400 	.word	0x48000400

08001e10 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e16:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <MX_LPUART1_UART_Init+0x90>)
 8001e18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e52:	4812      	ldr	r0, [pc, #72]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e54:	f004 ffdc 	bl	8006e10 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e5e:	f7ff fb7d 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e62:	2100      	movs	r1, #0
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e66:	f005 fd77 	bl	8007958 <HAL_UARTEx_SetTxFifoThreshold>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001e70:	f7ff fb74 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e74:	2100      	movs	r1, #0
 8001e76:	4809      	ldr	r0, [pc, #36]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e78:	f005 fdac 	bl	80079d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001e82:	f7ff fb6b 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_LPUART1_UART_Init+0x8c>)
 8001e88:	f005 fd2d 	bl	80078e6 <HAL_UARTEx_DisableFifoMode>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001e92:	f7ff fb63 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000600 	.word	0x20000600
 8001ea0:	40008000 	.word	0x40008000

08001ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b09e      	sub	sp, #120	; 0x78
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	2254      	movs	r2, #84	; 0x54
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 fe11 	bl	8007aec <memset>
  if(uartHandle->Instance==LPUART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a49      	ldr	r2, [pc, #292]	; (8001ff4 <HAL_UART_MspInit+0x150>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	f040 808a 	bne.w	8001fea <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fdea 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001eee:	f7ff fb35 	bl	800155c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_UART_MspInit+0x154>)
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <HAL_UART_MspInit+0x154>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001efe:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_UART_MspInit+0x154>)
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_UART_MspInit+0x154>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <HAL_UART_MspInit+0x154>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_UART_MspInit+0x154>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001f22:	230c      	movs	r3, #12
 8001f24:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f32:	230c      	movs	r3, #12
 8001f34:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f001 fcea 	bl	8003918 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8001f44:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f46:	4a2e      	ldr	r2, [pc, #184]	; (8002000 <HAL_UART_MspInit+0x15c>)
 8001f48:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f4c:	2222      	movs	r2, #34	; 0x22
 8001f4e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001f6e:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001f7a:	4820      	ldr	r0, [pc, #128]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f7c:	f001 fb12 	bl	80035a4 <HAL_DMA_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001f86:	f7ff fae9 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001f92:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <HAL_UART_MspInit+0x158>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <HAL_UART_MspInit+0x164>)
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fa0:	2223      	movs	r2, #35	; 0x23
 8001fa2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fd0:	f001 fae8 	bl	80035a4 <HAL_DMA_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001fda:	f7ff fabf 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fe2:	67da      	str	r2, [r3, #124]	; 0x7c
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_UART_MspInit+0x160>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001fea:	bf00      	nop
 8001fec:	3778      	adds	r7, #120	; 0x78
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40008000 	.word	0x40008000
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	20000694 	.word	0x20000694
 8002000:	4002006c 	.word	0x4002006c
 8002004:	200006f4 	.word	0x200006f4
 8002008:	40020080 	.word	0x40020080

0800200c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800200e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002010:	f7ff fb54 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002014:	480c      	ldr	r0, [pc, #48]	; (8002048 <LoopForever+0x6>)
  ldr r1, =_edata
 8002016:	490d      	ldr	r1, [pc, #52]	; (800204c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <LoopForever+0xe>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800202c:	4c0a      	ldr	r4, [pc, #40]	; (8002058 <LoopForever+0x16>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203a:	f005 fd5f 	bl	8007afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800203e:	f7ff f9b7 	bl	80013b0 <main>

08002042 <LoopForever>:

LoopForever:
    b LoopForever
 8002042:	e7fe      	b.n	8002042 <LoopForever>
  ldr   r0, =_estack
 8002044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002050:	08007bac 	.word	0x08007bac
  ldr r2, =_sbss
 8002054:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002058:	20000758 	.word	0x20000758

0800205c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC1_2_IRQHandler>

0800205e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f001 fa5b 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800206e:	2000      	movs	r0, #0
 8002070:	f000 f80e 	bl	8002090 <HAL_InitTick>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	e001      	b.n	8002084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002080:	f7ff fa72 	bl	8001568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002084:	79fb      	ldrb	r3, [r7, #7]

}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_InitTick+0x68>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d022      	beq.n	80020ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_InitTick+0x6c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_InitTick+0x68>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 fa66 	bl	800358a <HAL_SYSTICK_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10f      	bne.n	80020e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	d809      	bhi.n	80020de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ca:	2200      	movs	r2, #0
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	f001 fa32 	bl	800353a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_InitTick+0x70>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e007      	b.n	80020ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e004      	b.n	80020ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e001      	b.n	80020ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000008 	.word	0x20000008
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_IncTick+0x1c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_IncTick+0x20>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4413      	add	r3, r2
 8002112:	4a03      	ldr	r2, [pc, #12]	; (8002120 <HAL_IncTick+0x1c>)
 8002114:	6013      	str	r3, [r2, #0]
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	20000754 	.word	0x20000754
 8002124:	20000008 	.word	0x20000008

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000754 	.word	0x20000754

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d004      	beq.n	8002164 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_Delay+0x40>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002164:	bf00      	nop
 8002166:	f7ff ffdf 	bl	8002128 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	429a      	cmp	r2, r3
 8002174:	d8f7      	bhi.n	8002166 <HAL_Delay+0x26>
  {
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000008 	.word	0x20000008

08002184 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	609a      	str	r2, [r3, #8]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3360      	adds	r3, #96	; 0x60
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <LL_ADC_SetOffset+0x44>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	4313      	orrs	r3, r2
 800221c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002224:	bf00      	nop
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	03fff000 	.word	0x03fff000

08002234 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3360      	adds	r3, #96	; 0x60
 8002242:	461a      	mov	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3360      	adds	r3, #96	; 0x60
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	431a      	orrs	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002296:	b480      	push	{r7}
 8002298:	b087      	sub	sp, #28
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3360      	adds	r3, #96	; 0x60
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3360      	adds	r3, #96	; 0x60
 80022dc:	461a      	mov	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	615a      	str	r2, [r3, #20]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3330      	adds	r3, #48	; 0x30
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	4413      	add	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	211f      	movs	r1, #31
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 011f 	and.w	r1, r3, #31
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	431a      	orrs	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002374:	bf00      	nop
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3314      	adds	r3, #20
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0e5b      	lsrs	r3, r3, #25
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	4413      	add	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0d1b      	lsrs	r3, r3, #20
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2107      	movs	r1, #7
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	401a      	ands	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	0d1b      	lsrs	r3, r3, #20
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	431a      	orrs	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0318 	and.w	r3, r3, #24
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <LL_ADC_SetChannelSingleDiff+0x44>)
 80023fc:	40d9      	lsrs	r1, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	400b      	ands	r3, r1
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	431a      	orrs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	0007ffff 	.word	0x0007ffff

08002420 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6093      	str	r3, [r2, #8]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002458:	d101      	bne.n	800245e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800247c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002480:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a8:	d101      	bne.n	80024ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <LL_ADC_IsEnabled+0x18>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <LL_ADC_IsEnabled+0x1a>
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d101      	bne.n	80024fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b08      	cmp	r3, #8
 800251a:	d101      	bne.n	8002520 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1a9      	b.n	800289e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe fabb 	bl	8000ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff67 	bl	8002444 <LL_ADC_IsDeepPowerDownEnabled>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff4d 	bl	8002420 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff82 	bl	8002494 <LL_ADC_IsInternalRegulatorEnabled>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d115      	bne.n	80025c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff66 	bl	800246c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025a0:	4b9c      	ldr	r3, [pc, #624]	; (8002814 <HAL_ADC_Init+0x2e4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	4a9c      	ldr	r2, [pc, #624]	; (8002818 <HAL_ADC_Init+0x2e8>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	3301      	adds	r3, #1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025b4:	e002      	b.n	80025bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f9      	bne.n	80025b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff64 	bl	8002494 <LL_ADC_IsInternalRegulatorEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10d      	bne.n	80025ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	f043 0210 	orr.w	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff75 	bl	80024e2 <LL_ADC_REG_IsConversionOngoing>
 80025f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 8142 	bne.w	800288c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 813e 	bne.w	800288c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002618:	f043 0202 	orr.w	r2, r3, #2
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff49 	bl	80024bc <LL_ADC_IsEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d141      	bne.n	80026b4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002638:	d004      	beq.n	8002644 <HAL_ADC_Init+0x114>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a77      	ldr	r2, [pc, #476]	; (800281c <HAL_ADC_Init+0x2ec>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d10f      	bne.n	8002664 <HAL_ADC_Init+0x134>
 8002644:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002648:	f7ff ff38 	bl	80024bc <LL_ADC_IsEnabled>
 800264c:	4604      	mov	r4, r0
 800264e:	4873      	ldr	r0, [pc, #460]	; (800281c <HAL_ADC_Init+0x2ec>)
 8002650:	f7ff ff34 	bl	80024bc <LL_ADC_IsEnabled>
 8002654:	4603      	mov	r3, r0
 8002656:	4323      	orrs	r3, r4
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e012      	b.n	800268a <HAL_ADC_Init+0x15a>
 8002664:	486e      	ldr	r0, [pc, #440]	; (8002820 <HAL_ADC_Init+0x2f0>)
 8002666:	f7ff ff29 	bl	80024bc <LL_ADC_IsEnabled>
 800266a:	4604      	mov	r4, r0
 800266c:	486d      	ldr	r0, [pc, #436]	; (8002824 <HAL_ADC_Init+0x2f4>)
 800266e:	f7ff ff25 	bl	80024bc <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	431c      	orrs	r4, r3
 8002676:	486c      	ldr	r0, [pc, #432]	; (8002828 <HAL_ADC_Init+0x2f8>)
 8002678:	f7ff ff20 	bl	80024bc <LL_ADC_IsEnabled>
 800267c:	4603      	mov	r3, r0
 800267e:	4323      	orrs	r3, r4
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002696:	d004      	beq.n	80026a2 <HAL_ADC_Init+0x172>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a5f      	ldr	r2, [pc, #380]	; (800281c <HAL_ADC_Init+0x2ec>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_Init+0x176>
 80026a2:	4a62      	ldr	r2, [pc, #392]	; (800282c <HAL_ADC_Init+0x2fc>)
 80026a4:	e000      	b.n	80026a8 <HAL_ADC_Init+0x178>
 80026a6:	4a62      	ldr	r2, [pc, #392]	; (8002830 <HAL_ADC_Init+0x300>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f7ff fd68 	bl	8002184 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7f5b      	ldrb	r3, [r3, #29]
 80026b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d106      	bne.n	80026f0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	3b01      	subs	r3, #1
 80026e8:	045b      	lsls	r3, r3, #17
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d009      	beq.n	800270c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	4b48      	ldr	r3, [pc, #288]	; (8002834 <HAL_ADC_Init+0x304>)
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	69b9      	ldr	r1, [r7, #24]
 800271c:	430b      	orrs	r3, r1
 800271e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fee4 	bl	8002508 <LL_ADC_INJ_IsConversionOngoing>
 8002740:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d17f      	bne.n	8002848 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d17c      	bne.n	8002848 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002752:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800275a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800276a:	f023 0302 	bic.w	r3, r3, #2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	430b      	orrs	r3, r1
 8002776:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d017      	beq.n	80027b0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800278e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002798:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800279c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6911      	ldr	r1, [r2, #16]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027ae:	e013      	b.n	80027d8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d12a      	bne.n	8002838 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f8:	4311      	orrs	r1, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027fe:	4311      	orrs	r1, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002804:	430a      	orrs	r2, r1
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	e019      	b.n	8002848 <HAL_ADC_Init+0x318>
 8002814:	20000000 	.word	0x20000000
 8002818:	053e2d63 	.word	0x053e2d63
 800281c:	50000100 	.word	0x50000100
 8002820:	50000400 	.word	0x50000400
 8002824:	50000500 	.word	0x50000500
 8002828:	50000600 	.word	0x50000600
 800282c:	50000300 	.word	0x50000300
 8002830:	50000700 	.word	0x50000700
 8002834:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d10c      	bne.n	800286a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f023 010f 	bic.w	r1, r3, #15
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
 8002868:	e007      	b.n	800287a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 020f 	bic.w	r2, r2, #15
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	f023 0303 	bic.w	r3, r3, #3
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	65da      	str	r2, [r3, #92]	; 0x5c
 800288a:	e007      	b.n	800289c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	f043 0210 	orr.w	r2, r3, #16
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800289c:	7ffb      	ldrb	r3, [r7, #31]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	bf00      	nop

080028a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0b6      	sub	sp, #216	; 0xd8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x24>
 80028c6:	2302      	movs	r3, #2
 80028c8:	f000 bc13 	b.w	80030f2 <HAL_ADC_ConfigChannel+0x84a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fe02 	bl	80024e2 <LL_ADC_REG_IsConversionOngoing>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 83f3 	bne.w	80030cc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f7ff fd18 	bl	8002328 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fdf0 	bl	80024e2 <LL_ADC_REG_IsConversionOngoing>
 8002902:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fdfc 	bl	8002508 <LL_ADC_INJ_IsConversionOngoing>
 8002910:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002914:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 81d9 	bne.w	8002cd0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800291e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 81d4 	bne.w	8002cd0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002930:	d10f      	bne.n	8002952 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	4619      	mov	r1, r3
 800293e:	f7ff fd1f 	bl	8002380 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fcd9 	bl	8002302 <LL_ADC_SetSamplingTimeCommonConfig>
 8002950:	e00e      	b.n	8002970 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	461a      	mov	r2, r3
 8002960:	f7ff fd0e 	bl	8002380 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fcc9 	bl	8002302 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	08db      	lsrs	r3, r3, #3
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b04      	cmp	r3, #4
 8002990:	d022      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6919      	ldr	r1, [r3, #16]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a2:	f7ff fc23 	bl	80021ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6919      	ldr	r1, [r3, #16]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7ff fc6f 	bl	8002296 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x126>
 80029c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029cc:	e000      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x128>
 80029ce:	2300      	movs	r3, #0
 80029d0:	461a      	mov	r2, r3
 80029d2:	f7ff fc7b 	bl	80022cc <LL_ADC_SetOffsetSaturation>
 80029d6:	e17b      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fc28 	bl	8002234 <LL_ADC_GetOffsetChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x15c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fc1d 	bl	8002234 <LL_ADC_GetOffsetChannel>
 80029fa:	4603      	mov	r3, r0
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	f003 021f 	and.w	r2, r3, #31
 8002a02:	e01e      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x19a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fc12 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a32:	2320      	movs	r3, #32
 8002a34:	e004      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x1b2>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	e018      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x1e4>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	e004      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d106      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fbe1 	bl	8002260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fbc5 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x222>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fbba 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	e01e      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x260>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fbaf 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ae8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002af0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e004      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x278>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	e018      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x2aa>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e004      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d106      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fb7e 	bl	8002260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2102      	movs	r1, #2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fb62 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x2e8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2102      	movs	r1, #2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fb57 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002b86:	4603      	mov	r3, r0
 8002b88:	0e9b      	lsrs	r3, r3, #26
 8002b8a:	f003 021f 	and.w	r2, r3, #31
 8002b8e:	e01e      	b.n	8002bce <HAL_ADC_ConfigChannel+0x326>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2102      	movs	r1, #2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fb4c 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	e004      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x33e>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0e9b      	lsrs	r3, r3, #26
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	e016      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x36c>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e004      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d106      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fb1d 	bl	8002260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fb01 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x3aa>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2103      	movs	r1, #3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff faf6 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	e017      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x3da>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2103      	movs	r1, #3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff faeb 	bl	8002234 <LL_ADC_GetOffsetChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x3f2>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	e011      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x416>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002caa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	e003      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d106      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2103      	movs	r1, #3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fac8 	bl	8002260 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fbf1 	bl	80024bc <LL_ADC_IsEnabled>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 813d 	bne.w	8002f5c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f7ff fb72 	bl	80023d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4aa2      	ldr	r2, [pc, #648]	; (8002f84 <HAL_ADC_ConfigChannel+0x6dc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	f040 812e 	bne.w	8002f5c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x480>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	3301      	adds	r3, #1
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2b09      	cmp	r3, #9
 8002d1e:	bf94      	ite	ls
 8002d20:	2301      	movls	r3, #1
 8002d22:	2300      	movhi	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e019      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x4b4>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d38:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e003      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2b09      	cmp	r3, #9
 8002d54:	bf94      	ite	ls
 8002d56:	2301      	movls	r3, #1
 8002d58:	2300      	movhi	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d079      	beq.n	8002e54 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x4d4>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	3301      	adds	r3, #1
 8002d74:	069b      	lsls	r3, r3, #26
 8002d76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d7a:	e015      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x500>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	069b      	lsls	r3, r3, #26
 8002da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x520>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0e9b      	lsrs	r3, r3, #26
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	e017      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x550>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e003      	b.n	8002dec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	3301      	adds	r3, #1
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	ea42 0103 	orr.w	r1, r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x576>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	051b      	lsls	r3, r3, #20
 8002e1c:	e018      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x5a8>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e003      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e50:	430b      	orrs	r3, r1
 8002e52:	e07e      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d107      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x5c8>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	3301      	adds	r3, #1
 8002e68:	069b      	lsls	r3, r3, #26
 8002e6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e6e:	e015      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x5f4>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e88:	2320      	movs	r3, #32
 8002e8a:	e003      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	069b      	lsls	r3, r3, #26
 8002e98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x614>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0e9b      	lsrs	r3, r3, #26
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	e017      	b.n	8002eec <HAL_ADC_ConfigChannel+0x644>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	61fb      	str	r3, [r7, #28]
  return result;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e003      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	ea42 0103 	orr.w	r1, r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10d      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x670>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	3301      	adds	r3, #1
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3b1e      	subs	r3, #30
 8002f10:	051b      	lsls	r3, r3, #20
 8002f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f16:	e01b      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x6a8>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	613b      	str	r3, [r7, #16]
  return result;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f003 021f 	and.w	r2, r3, #31
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	3b1e      	subs	r3, #30
 8002f4a:	051b      	lsls	r3, r3, #20
 8002f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7ff fa12 	bl	8002380 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_ADC_ConfigChannel+0x6e0>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80be 	beq.w	80030e6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f72:	d004      	beq.n	8002f7e <HAL_ADC_ConfigChannel+0x6d6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_ADC_ConfigChannel+0x6e4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10a      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x6ec>
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_ADC_ConfigChannel+0x6e8>)
 8002f80:	e009      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x6ee>
 8002f82:	bf00      	nop
 8002f84:	407f0000 	.word	0x407f0000
 8002f88:	80080000 	.word	0x80080000
 8002f8c:	50000100 	.word	0x50000100
 8002f90:	50000300 	.word	0x50000300
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_ADC_ConfigChannel+0x854>)
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f91a 	bl	80021d0 <LL_ADC_GetCommonPathInternalCh>
 8002f9c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a56      	ldr	r2, [pc, #344]	; (8003100 <HAL_ADC_ConfigChannel+0x858>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x70c>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a55      	ldr	r2, [pc, #340]	; (8003104 <HAL_ADC_ConfigChannel+0x85c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d13a      	bne.n	800302a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d134      	bne.n	800302a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc8:	d005      	beq.n	8002fd6 <HAL_ADC_ConfigChannel+0x72e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a4e      	ldr	r2, [pc, #312]	; (8003108 <HAL_ADC_ConfigChannel+0x860>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	f040 8085 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fde:	d004      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x742>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a49      	ldr	r2, [pc, #292]	; (800310c <HAL_ADC_ConfigChannel+0x864>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x746>
 8002fea:	4a49      	ldr	r2, [pc, #292]	; (8003110 <HAL_ADC_ConfigChannel+0x868>)
 8002fec:	e000      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x748>
 8002fee:	4a43      	ldr	r2, [pc, #268]	; (80030fc <HAL_ADC_ConfigChannel+0x854>)
 8002ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7ff f8d5 	bl	80021aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003000:	4b44      	ldr	r3, [pc, #272]	; (8003114 <HAL_ADC_ConfigChannel+0x86c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	4a44      	ldr	r2, [pc, #272]	; (8003118 <HAL_ADC_ConfigChannel+0x870>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800301a:	e002      	b.n	8003022 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3b01      	subs	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f9      	bne.n	800301c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003028:	e05a      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3b      	ldr	r2, [pc, #236]	; (800311c <HAL_ADC_ConfigChannel+0x874>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d125      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11f      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_ADC_ConfigChannel+0x864>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d104      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x7ac>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <HAL_ADC_ConfigChannel+0x878>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d047      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305c:	d004      	beq.n	8003068 <HAL_ADC_ConfigChannel+0x7c0>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2a      	ldr	r2, [pc, #168]	; (800310c <HAL_ADC_ConfigChannel+0x864>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x7c4>
 8003068:	4a29      	ldr	r2, [pc, #164]	; (8003110 <HAL_ADC_ConfigChannel+0x868>)
 800306a:	e000      	b.n	800306e <HAL_ADC_ConfigChannel+0x7c6>
 800306c:	4a23      	ldr	r2, [pc, #140]	; (80030fc <HAL_ADC_ConfigChannel+0x854>)
 800306e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7ff f896 	bl	80021aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800307e:	e031      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a27      	ldr	r2, [pc, #156]	; (8003124 <HAL_ADC_ConfigChannel+0x87c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d12d      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800308a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800308e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d127      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_ADC_ConfigChannel+0x864>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d022      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a8:	d004      	beq.n	80030b4 <HAL_ADC_ConfigChannel+0x80c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_ADC_ConfigChannel+0x864>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x810>
 80030b4:	4a16      	ldr	r2, [pc, #88]	; (8003110 <HAL_ADC_ConfigChannel+0x868>)
 80030b6:	e000      	b.n	80030ba <HAL_ADC_ConfigChannel+0x812>
 80030b8:	4a10      	ldr	r2, [pc, #64]	; (80030fc <HAL_ADC_ConfigChannel+0x854>)
 80030ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f7ff f870 	bl	80021aa <LL_ADC_SetCommonPathInternalCh>
 80030ca:	e00c      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80030de:	e002      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	37d8      	adds	r7, #216	; 0xd8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	50000700 	.word	0x50000700
 8003100:	c3210000 	.word	0xc3210000
 8003104:	90c00010 	.word	0x90c00010
 8003108:	50000600 	.word	0x50000600
 800310c:	50000100 	.word	0x50000100
 8003110:	50000300 	.word	0x50000300
 8003114:	20000000 	.word	0x20000000
 8003118:	053e2d63 	.word	0x053e2d63
 800311c:	c7520000 	.word	0xc7520000
 8003120:	50000500 	.word	0x50000500
 8003124:	cb840000 	.word	0xcb840000

08003128 <LL_ADC_IsEnabled>:
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <LL_ADC_IsEnabled+0x18>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <LL_ADC_IsEnabled+0x1a>
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_REG_IsConversionOngoing>:
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d101      	bne.n	8003166 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b0a1      	sub	sp, #132	; 0x84
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800318e:	2302      	movs	r3, #2
 8003190:	e0e7      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800319a:	2300      	movs	r3, #0
 800319c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800319e:	2300      	movs	r3, #0
 80031a0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031aa:	d102      	bne.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031ac:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	e009      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6e      	ldr	r2, [pc, #440]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80031bc:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	e001      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0be      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ffb1 	bl	800314e <LL_ADC_REG_IsConversionOngoing>
 80031ec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ffab 	bl	800314e <LL_ADC_REG_IsConversionOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 80a0 	bne.w	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 809c 	bne.w	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a55      	ldr	r2, [pc, #340]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800321c:	4b56      	ldr	r3, [pc, #344]	; (8003378 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800321e:	e000      	b.n	8003222 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003220:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003222:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d04b      	beq.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800322c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800323e:	035b      	lsls	r3, r3, #13
 8003240:	430b      	orrs	r3, r1
 8003242:	431a      	orrs	r2, r3
 8003244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003246:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003250:	d004      	beq.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a45      	ldr	r2, [pc, #276]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10f      	bne.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800325c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003260:	f7ff ff62 	bl	8003128 <LL_ADC_IsEnabled>
 8003264:	4604      	mov	r4, r0
 8003266:	4841      	ldr	r0, [pc, #260]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003268:	f7ff ff5e 	bl	8003128 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	4323      	orrs	r3, r4
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e012      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800327c:	483c      	ldr	r0, [pc, #240]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800327e:	f7ff ff53 	bl	8003128 <LL_ADC_IsEnabled>
 8003282:	4604      	mov	r4, r0
 8003284:	483b      	ldr	r0, [pc, #236]	; (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003286:	f7ff ff4f 	bl	8003128 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	431c      	orrs	r4, r3
 800328e:	483c      	ldr	r0, [pc, #240]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003290:	f7ff ff4a 	bl	8003128 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d056      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	6892      	ldr	r2, [r2, #8]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	431a      	orrs	r2, r3
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c2:	e047      	b.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d8:	d004      	beq.n	80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10f      	bne.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80032e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032e8:	f7ff ff1e 	bl	8003128 <LL_ADC_IsEnabled>
 80032ec:	4604      	mov	r4, r0
 80032ee:	481f      	ldr	r0, [pc, #124]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f0:	f7ff ff1a 	bl	8003128 <LL_ADC_IsEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4323      	orrs	r3, r4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003304:	481a      	ldr	r0, [pc, #104]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003306:	f7ff ff0f 	bl	8003128 <LL_ADC_IsEnabled>
 800330a:	4604      	mov	r4, r0
 800330c:	4819      	ldr	r0, [pc, #100]	; (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800330e:	f7ff ff0b 	bl	8003128 <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	431c      	orrs	r4, r3
 8003316:	481a      	ldr	r0, [pc, #104]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003318:	f7ff ff06 	bl	8003128 <LL_ADC_IsEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	4323      	orrs	r3, r4
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800332e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800333c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800333e:	e009      	b.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003352:	e000      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003354:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800335e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003362:	4618      	mov	r0, r3
 8003364:	3784      	adds	r7, #132	; 0x84
 8003366:	46bd      	mov	sp, r7
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	bf00      	nop
 800336c:	50000100 	.word	0x50000100
 8003370:	50000400 	.word	0x50000400
 8003374:	50000500 	.word	0x50000500
 8003378:	50000300 	.word	0x50000300
 800337c:	50000700 	.word	0x50000700
 8003380:	50000600 	.word	0x50000600

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <__NVIC_EnableIRQ+0x38>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f0:	d301      	bcc.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00f      	b.n	8003516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <SysTick_Config+0x40>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	210f      	movs	r1, #15
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f7ff ff8e 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x40>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x40>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff29 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff40 	bl	80033cc <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff90 	bl	8003478 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff5f 	bl	8003424 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff33 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffa4 	bl	80034e0 <SysTick_Config>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e08d      	b.n	80036d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_DMA_Init+0x138>)
 80035be:	429a      	cmp	r2, r3
 80035c0:	d80f      	bhi.n	80035e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <HAL_DMA_Init+0x13c>)
 80035ca:	4413      	add	r3, r2
 80035cc:	4a45      	ldr	r2, [pc, #276]	; (80036e4 <HAL_DMA_Init+0x140>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	009a      	lsls	r2, r3, #2
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a42      	ldr	r2, [pc, #264]	; (80036e8 <HAL_DMA_Init+0x144>)
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
 80035e0:	e00e      	b.n	8003600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_DMA_Init+0x148>)
 80035ea:	4413      	add	r3, r2
 80035ec:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <HAL_DMA_Init+0x140>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	009a      	lsls	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a3c      	ldr	r2, [pc, #240]	; (80036f0 <HAL_DMA_Init+0x14c>)
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8fe 	bl	8003854 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003660:	d102      	bne.n	8003668 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800367c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <HAL_DMA_Init+0x104>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d80c      	bhi.n	80036a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f91e 	bl	80038d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	e008      	b.n	80036ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40020407 	.word	0x40020407
 80036e0:	bffdfff8 	.word	0xbffdfff8
 80036e4:	cccccccd 	.word	0xcccccccd
 80036e8:	40020000 	.word	0x40020000
 80036ec:	bffdfbf8 	.word	0xbffdfbf8
 80036f0:	40020400 	.word	0x40020400

080036f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2204      	movs	r2, #4
 8003716:	409a      	lsls	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d026      	beq.n	800376e <HAL_DMA_IRQHandler+0x7a>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d021      	beq.n	800376e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0204 	bic.w	r2, r2, #4
 8003746:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2104      	movs	r1, #4
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	2b00      	cmp	r3, #0
 8003762:	d071      	beq.n	8003848 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800376c:	e06c      	b.n	8003848 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2202      	movs	r2, #2
 8003778:	409a      	lsls	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d02e      	beq.n	80037e0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d029      	beq.n	80037e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 020a 	bic.w	r2, r2, #10
 80037a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f003 021f 	and.w	r2, r3, #31
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	2102      	movs	r1, #2
 80037c0:	fa01 f202 	lsl.w	r2, r1, r2
 80037c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d038      	beq.n	8003848 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037de:	e033      	b.n	8003848 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2208      	movs	r2, #8
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02a      	beq.n	800384a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d025      	beq.n	800384a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 020e 	bic.w	r2, r2, #14
 800380c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f003 021f 	and.w	r2, r3, #31
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f202 	lsl.w	r2, r1, r2
 8003820:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003848:	bf00      	nop
 800384a:	bf00      	nop
}
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003864:	429a      	cmp	r2, r3
 8003866:	d802      	bhi.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e001      	b.n	8003872 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003870:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3b08      	subs	r3, #8
 800387e:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	009a      	lsls	r2, r3, #2
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800389e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40020407 	.word	0x40020407
 80038c0:	40020800 	.word	0x40020800
 80038c4:	40020820 	.word	0x40020820
 80038c8:	cccccccd 	.word	0xcccccccd
 80038cc:	40020880 	.word	0x40020880

080038d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	461a      	mov	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a08      	ldr	r2, [pc, #32]	; (8003914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038f2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2201      	movs	r2, #1
 80038fe:	409a      	lsls	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	1000823f 	.word	0x1000823f
 8003914:	40020940 	.word	0x40020940

08003918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003926:	e15a      	b.n	8003bde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	4013      	ands	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 814c 	beq.w	8003bd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d005      	beq.n	8003958 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003954:	2b02      	cmp	r3, #2
 8003956:	d130      	bne.n	80039ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800398e:	2201      	movs	r2, #1
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	f003 0201 	and.w	r2, r3, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d017      	beq.n	80039f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d123      	bne.n	8003a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	08da      	lsrs	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	220f      	movs	r2, #15
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	6939      	ldr	r1, [r7, #16]
 8003a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	2203      	movs	r2, #3
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0203 	and.w	r2, r3, #3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a6 	beq.w	8003bd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8c:	4b5b      	ldr	r3, [pc, #364]	; (8003bfc <HAL_GPIO_Init+0x2e4>)
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a90:	4a5a      	ldr	r2, [pc, #360]	; (8003bfc <HAL_GPIO_Init+0x2e4>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6613      	str	r3, [r2, #96]	; 0x60
 8003a98:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <HAL_GPIO_Init+0x2e4>)
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa4:	4a56      	ldr	r2, [pc, #344]	; (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	3302      	adds	r3, #2
 8003aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	220f      	movs	r2, #15
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ace:	d01f      	beq.n	8003b10 <HAL_GPIO_Init+0x1f8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a4c      	ldr	r2, [pc, #304]	; (8003c04 <HAL_GPIO_Init+0x2ec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d019      	beq.n	8003b0c <HAL_GPIO_Init+0x1f4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a4b      	ldr	r2, [pc, #300]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_GPIO_Init+0x1f0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_GPIO_Init+0x2f4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00d      	beq.n	8003b04 <HAL_GPIO_Init+0x1ec>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a49      	ldr	r2, [pc, #292]	; (8003c10 <HAL_GPIO_Init+0x2f8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d007      	beq.n	8003b00 <HAL_GPIO_Init+0x1e8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a48      	ldr	r2, [pc, #288]	; (8003c14 <HAL_GPIO_Init+0x2fc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_GPIO_Init+0x1e4>
 8003af8:	2305      	movs	r3, #5
 8003afa:	e00a      	b.n	8003b12 <HAL_GPIO_Init+0x1fa>
 8003afc:	2306      	movs	r3, #6
 8003afe:	e008      	b.n	8003b12 <HAL_GPIO_Init+0x1fa>
 8003b00:	2304      	movs	r3, #4
 8003b02:	e006      	b.n	8003b12 <HAL_GPIO_Init+0x1fa>
 8003b04:	2303      	movs	r3, #3
 8003b06:	e004      	b.n	8003b12 <HAL_GPIO_Init+0x1fa>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e002      	b.n	8003b12 <HAL_GPIO_Init+0x1fa>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_GPIO_Init+0x1fa>
 8003b10:	2300      	movs	r3, #0
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	f002 0203 	and.w	r2, r2, #3
 8003b18:	0092      	lsls	r2, r2, #2
 8003b1a:	4093      	lsls	r3, r2
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b22:	4937      	ldr	r1, [pc, #220]	; (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	3302      	adds	r3, #2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b54:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b7e:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b84:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bae:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bd2:	4a11      	ldr	r2, [pc, #68]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f47f ae9d 	bne.w	8003928 <HAL_GPIO_Init+0x10>
  }
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40010000 	.word	0x40010000
 8003c04:	48000400 	.word	0x48000400
 8003c08:	48000800 	.word	0x48000800
 8003c0c:	48000c00 	.word	0x48000c00
 8003c10:	48001000 	.word	0x48001000
 8003c14:	48001400 	.word	0x48001400
 8003c18:	40010400 	.word	0x40010400

08003c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c2c:	787b      	ldrb	r3, [r7, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c38:	e002      	b.n	8003c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d006      	beq.n	8003c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f806 	bl	8003c7c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40010400 	.word	0x40010400

08003c7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e08d      	b.n	8003dc0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fd fb01 	bl	80012c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2224      	movs	r2, #36	; 0x24
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ce2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cf2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	e006      	b.n	8003d1a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d108      	bne.n	8003d34 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	e007      	b.n	8003d44 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d42:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d56:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69d9      	ldr	r1, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d138      	bne.n	8003e50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e032      	b.n	8003e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	; 0x24
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d139      	bne.n	8003ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e033      	b.n	8003eea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2224      	movs	r2, #36	; 0x24
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003eb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d141      	bne.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f06:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d131      	bne.n	8003f78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f14:	4b47      	ldr	r3, [pc, #284]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1a:	4a46      	ldr	r2, [pc, #280]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f24:	4b43      	ldr	r3, [pc, #268]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f2c:	4a41      	ldr	r2, [pc, #260]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2232      	movs	r2, #50	; 0x32
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	4a3f      	ldr	r2, [pc, #252]	; (800403c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0c9b      	lsrs	r3, r3, #18
 8003f46:	3301      	adds	r3, #1
 8003f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f4a:	e002      	b.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f52:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5e:	d102      	bne.n	8003f66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f2      	bne.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f66:	4b33      	ldr	r3, [pc, #204]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f72:	d158      	bne.n	8004026 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e057      	b.n	8004028 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f78:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7e:	4a2d      	ldr	r2, [pc, #180]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f88:	e04d      	b.n	8004026 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d141      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f92:	4b28      	ldr	r3, [pc, #160]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9e:	d131      	bne.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fa0:	4b24      	ldr	r3, [pc, #144]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa6:	4a23      	ldr	r2, [pc, #140]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fb0:	4b20      	ldr	r3, [pc, #128]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fb8:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2232      	movs	r2, #50	; 0x32
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	0c9b      	lsrs	r3, r3, #18
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fd6:	e002      	b.n	8003fde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fea:	d102      	bne.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f2      	bne.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffe:	d112      	bne.n	8004026 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e011      	b.n	8004028 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004014:	e007      	b.n	8004026 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800401e:	4a05      	ldr	r2, [pc, #20]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004024:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40007000 	.word	0x40007000
 8004038:	20000000 	.word	0x20000000
 800403c:	431bde83 	.word	0x431bde83

08004040 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800404a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800404e:	6093      	str	r3, [r2, #8]
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40007000 	.word	0x40007000

08004060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e2fe      	b.n	8004670 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d075      	beq.n	800416a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407e:	4b97      	ldr	r3, [pc, #604]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004088:	4b94      	ldr	r3, [pc, #592]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d102      	bne.n	800409e <HAL_RCC_OscConfig+0x3e>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b03      	cmp	r3, #3
 800409c:	d002      	beq.n	80040a4 <HAL_RCC_OscConfig+0x44>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d10b      	bne.n	80040bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a4:	4b8d      	ldr	r3, [pc, #564]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d05b      	beq.n	8004168 <HAL_RCC_OscConfig+0x108>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d157      	bne.n	8004168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e2d9      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d106      	bne.n	80040d4 <HAL_RCC_OscConfig+0x74>
 80040c6:	4b85      	ldr	r3, [pc, #532]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a84      	ldr	r2, [pc, #528]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	e01d      	b.n	8004110 <HAL_RCC_OscConfig+0xb0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x98>
 80040de:	4b7f      	ldr	r3, [pc, #508]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a7e      	ldr	r2, [pc, #504]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b7c      	ldr	r3, [pc, #496]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7b      	ldr	r2, [pc, #492]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0xb0>
 80040f8:	4b78      	ldr	r3, [pc, #480]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a77      	ldr	r2, [pc, #476]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b75      	ldr	r3, [pc, #468]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a74      	ldr	r2, [pc, #464]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 800410a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fe f806 	bl	8002128 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004120:	f7fe f802 	bl	8002128 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e29e      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004132:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0xc0>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fd fff2 	bl	8002128 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7fd ffee 	bl	8002128 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e28a      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800415a:	4b60      	ldr	r3, [pc, #384]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0xe8>
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d075      	beq.n	8004262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004176:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004180:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b0c      	cmp	r3, #12
 800418e:	d102      	bne.n	8004196 <HAL_RCC_OscConfig+0x136>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d002      	beq.n	800419c <HAL_RCC_OscConfig+0x13c>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b04      	cmp	r3, #4
 800419a:	d11f      	bne.n	80041dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800419c:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_OscConfig+0x154>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e25d      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b4:	4b49      	ldr	r3, [pc, #292]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	4946      	ldr	r1, [pc, #280]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041c8:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd ff5f 	bl	8002090 <HAL_InitTick>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d043      	beq.n	8004260 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e249      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d023      	beq.n	800422c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e4:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd ff9a 	bl	8002128 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f8:	f7fd ff96 	bl	8002128 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e232      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800420a:	4b34      	ldr	r3, [pc, #208]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	4b31      	ldr	r3, [pc, #196]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	061b      	lsls	r3, r3, #24
 8004224:	492d      	ldr	r1, [pc, #180]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	604b      	str	r3, [r1, #4]
 800422a:	e01a      	b.n	8004262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2a      	ldr	r2, [pc, #168]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd ff76 	bl	8002128 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004240:	f7fd ff72 	bl	8002128 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e20e      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1e0>
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004260:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d041      	beq.n	80042f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01c      	beq.n	80042b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427c:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fd ff4f 	bl	8002128 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800428e:	f7fd ff4b 	bl	8002128 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e1e7      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ef      	beq.n	800428e <HAL_RCC_OscConfig+0x22e>
 80042ae:	e020      	b.n	80042f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80042b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fd ff32 	bl	8002128 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042c6:	e00d      	b.n	80042e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fd ff2e 	bl	8002128 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d906      	bls.n	80042e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1ca      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e4:	4b8c      	ldr	r3, [pc, #560]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ea      	bne.n	80042c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80a6 	beq.w	800444c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004304:	4b84      	ldr	r3, [pc, #528]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_OscConfig+0x2b4>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x2b6>
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	4b7f      	ldr	r3, [pc, #508]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4a7e      	ldr	r2, [pc, #504]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
 8004326:	4b7c      	ldr	r3, [pc, #496]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004336:	4b79      	ldr	r3, [pc, #484]	; (800451c <HAL_RCC_OscConfig+0x4bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d118      	bne.n	8004374 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004342:	4b76      	ldr	r3, [pc, #472]	; (800451c <HAL_RCC_OscConfig+0x4bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a75      	ldr	r2, [pc, #468]	; (800451c <HAL_RCC_OscConfig+0x4bc>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434e:	f7fd feeb 	bl	8002128 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004356:	f7fd fee7 	bl	8002128 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e183      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004368:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCC_OscConfig+0x4bc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d108      	bne.n	800438e <HAL_RCC_OscConfig+0x32e>
 800437c:	4b66      	ldr	r3, [pc, #408]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	4a65      	ldr	r2, [pc, #404]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800438c:	e024      	b.n	80043d8 <HAL_RCC_OscConfig+0x378>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d110      	bne.n	80043b8 <HAL_RCC_OscConfig+0x358>
 8004396:	4b60      	ldr	r3, [pc, #384]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	4a5e      	ldr	r2, [pc, #376]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a6:	4b5c      	ldr	r3, [pc, #368]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	4a5a      	ldr	r2, [pc, #360]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b6:	e00f      	b.n	80043d8 <HAL_RCC_OscConfig+0x378>
 80043b8:	4b57      	ldr	r3, [pc, #348]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	4a56      	ldr	r2, [pc, #344]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c8:	4b53      	ldr	r3, [pc, #332]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d016      	beq.n	800440e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd fea2 	bl	8002128 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fd fe9e 	bl	8002128 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e138      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fe:	4b46      	ldr	r3, [pc, #280]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ed      	beq.n	80043e8 <HAL_RCC_OscConfig+0x388>
 800440c:	e015      	b.n	800443a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fd fe8b 	bl	8002128 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd fe87 	bl	8002128 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e121      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800442c:	4b3a      	ldr	r3, [pc, #232]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ed      	bne.n	8004416 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800443a:	7ffb      	ldrb	r3, [r7, #31]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004440:	4b35      	ldr	r3, [pc, #212]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	4a34      	ldr	r2, [pc, #208]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d03c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01c      	beq.n	800449a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004466:	4a2c      	ldr	r2, [pc, #176]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7fd fe5a 	bl	8002128 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004478:	f7fd fe56 	bl	8002128 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e0f2      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 800448c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ef      	beq.n	8004478 <HAL_RCC_OscConfig+0x418>
 8004498:	e01b      	b.n	80044d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800449a:	4b1f      	ldr	r3, [pc, #124]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 800449c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044aa:	f7fd fe3d 	bl	8002128 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b2:	f7fd fe39 	bl	8002128 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0d5      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80044c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1ef      	bne.n	80044b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80c9 	beq.w	800466e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044dc:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	f000 8083 	beq.w	80045f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d15e      	bne.n	80045b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a08      	ldr	r2, [pc, #32]	; (8004518 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fd fe13 	bl	8002128 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004504:	e00c      	b.n	8004520 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fd fe0f 	bl	8002128 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d905      	bls.n	8004520 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0ab      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
 8004518:	40021000 	.word	0x40021000
 800451c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004520:	4b55      	ldr	r3, [pc, #340]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ec      	bne.n	8004506 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452c:	4b52      	ldr	r3, [pc, #328]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	4b52      	ldr	r3, [pc, #328]	; (800467c <HAL_RCC_OscConfig+0x61c>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6a11      	ldr	r1, [r2, #32]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800453c:	3a01      	subs	r2, #1
 800453e:	0112      	lsls	r2, r2, #4
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004546:	0212      	lsls	r2, r2, #8
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800454e:	0852      	lsrs	r2, r2, #1
 8004550:	3a01      	subs	r2, #1
 8004552:	0552      	lsls	r2, r2, #21
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800455a:	0852      	lsrs	r2, r2, #1
 800455c:	3a01      	subs	r2, #1
 800455e:	0652      	lsls	r2, r2, #25
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004566:	06d2      	lsls	r2, r2, #27
 8004568:	430a      	orrs	r2, r1
 800456a:	4943      	ldr	r1, [pc, #268]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 800456c:	4313      	orrs	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004570:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a40      	ldr	r2, [pc, #256]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800457c:	4b3e      	ldr	r3, [pc, #248]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a3d      	ldr	r2, [pc, #244]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fdce 	bl	8002128 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd fdca 	bl	8002128 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e066      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	4b35      	ldr	r3, [pc, #212]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x530>
 80045ae:	e05e      	b.n	800466e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b0:	4b31      	ldr	r3, [pc, #196]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a30      	ldr	r2, [pc, #192]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 80045b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fdb4 	bl	8002128 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fd fdb0 	bl	8002128 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e04c      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d6:	4b28      	ldr	r3, [pc, #160]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045e2:	4b25      	ldr	r3, [pc, #148]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	4924      	ldr	r1, [pc, #144]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <HAL_RCC_OscConfig+0x620>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	60cb      	str	r3, [r1, #12]
 80045ee:	e03e      	b.n	800466e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e039      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_RCC_OscConfig+0x618>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	429a      	cmp	r2, r3
 800460e:	d12c      	bne.n	800466a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	3b01      	subs	r3, #1
 800461c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d123      	bne.n	800466a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d11b      	bne.n	800466a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d113      	bne.n	800466a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	3b01      	subs	r3, #1
 8004650:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d109      	bne.n	800466a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	3b01      	subs	r3, #1
 8004664:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d001      	beq.n	800466e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	019f800c 	.word	0x019f800c
 8004680:	feeefffc 	.word	0xfeeefffc

08004684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e11e      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b91      	ldr	r3, [pc, #580]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d910      	bls.n	80046cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b8e      	ldr	r3, [pc, #568]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 020f 	bic.w	r2, r3, #15
 80046b2:	498c      	ldr	r1, [pc, #560]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b8a      	ldr	r3, [pc, #552]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e106      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d073      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d129      	bne.n	8004734 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e0:	4b81      	ldr	r3, [pc, #516]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0f4      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046f0:	f000 f99e 	bl	8004a30 <RCC_GetSysClockFreqFromPLLSource>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4a7c      	ldr	r2, [pc, #496]	; (80048ec <HAL_RCC_ClockConfig+0x268>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d93f      	bls.n	800477e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046fe:	4b7a      	ldr	r3, [pc, #488]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004712:	2b00      	cmp	r3, #0
 8004714:	d033      	beq.n	800477e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800471a:	2b00      	cmp	r3, #0
 800471c:	d12f      	bne.n	800477e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800471e:	4b72      	ldr	r3, [pc, #456]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004726:	4a70      	ldr	r2, [pc, #448]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e024      	b.n	800477e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d107      	bne.n	800474c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473c:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0c6      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800474c:	4b66      	ldr	r3, [pc, #408]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0be      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800475c:	f000 f8ce 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8004760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4a61      	ldr	r2, [pc, #388]	; (80048ec <HAL_RCC_ClockConfig+0x268>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d909      	bls.n	800477e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800476a:	4b5f      	ldr	r3, [pc, #380]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004772:	4a5d      	ldr	r2, [pc, #372]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800477e:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4957      	ldr	r1, [pc, #348]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800478c:	4313      	orrs	r3, r2
 800478e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004790:	f7fd fcca 	bl	8002128 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	e00a      	b.n	80047ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fd fcc6 	bl	8002128 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e095      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	4b4e      	ldr	r3, [pc, #312]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 020c 	and.w	r2, r3, #12
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1eb      	bne.n	8004798 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d023      	beq.n	8004814 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d8:	4b43      	ldr	r3, [pc, #268]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a42      	ldr	r2, [pc, #264]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047f0:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047f8:	4a3b      	ldr	r2, [pc, #236]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4936      	ldr	r1, [pc, #216]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
 8004812:	e008      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d105      	bne.n	8004826 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800481a:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004824:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004826:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d21d      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 020f 	bic.w	r2, r3, #15
 800483c:	4929      	ldr	r1, [pc, #164]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004844:	f7fd fc70 	bl	8002128 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484c:	f7fd fc6c 	bl	8002128 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e03b      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d1ed      	bne.n	800484c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4917      	ldr	r1, [pc, #92]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	490f      	ldr	r1, [pc, #60]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ae:	f000 f825 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	490c      	ldr	r1, [pc, #48]	; (80048f0 <HAL_RCC_ClockConfig+0x26c>)
 80048c0:	5ccb      	ldrb	r3, [r1, r3]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x270>)
 80048cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x274>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd fbdc 	bl	8002090 <HAL_InitTick>
 80048d8:	4603      	mov	r3, r0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40022000 	.word	0x40022000
 80048e8:	40021000 	.word	0x40021000
 80048ec:	04c4b400 	.word	0x04c4b400
 80048f0:	08007b5c 	.word	0x08007b5c
 80048f4:	20000000 	.word	0x20000000
 80048f8:	20000004 	.word	0x20000004

080048fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004902:	4b2c      	ldr	r3, [pc, #176]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b04      	cmp	r3, #4
 800490c:	d102      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800490e:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e047      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004914:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b08      	cmp	r3, #8
 800491e:	d102      	bne.n	8004926 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	e03e      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004926:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b0c      	cmp	r3, #12
 8004930:	d136      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800493c:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3301      	adds	r3, #1
 8004948:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d10c      	bne.n	800496a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800495a:	68d2      	ldr	r2, [r2, #12]
 800495c:	0a12      	lsrs	r2, r2, #8
 800495e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	617b      	str	r3, [r7, #20]
      break;
 8004968:	e00c      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004974:	68d2      	ldr	r2, [r2, #12]
 8004976:	0a12      	lsrs	r2, r2, #8
 8004978:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
      break;
 8004982:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0e5b      	lsrs	r3, r3, #25
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	3301      	adds	r3, #1
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e001      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049a4:	693b      	ldr	r3, [r7, #16]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000
 80049b8:	00f42400 	.word	0x00f42400
 80049bc:	016e3600 	.word	0x016e3600

080049c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000000 	.word	0x20000000

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049dc:	f7ff fff0 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4904      	ldr	r1, [pc, #16]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	08007b6c 	.word	0x08007b6c

08004a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a08:	f7ff ffda 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0adb      	lsrs	r3, r3, #11
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	08007b6c 	.word	0x08007b6c

08004a30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a36:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d10c      	bne.n	8004a6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a5e:	68d2      	ldr	r2, [r2, #12]
 8004a60:	0a12      	lsrs	r2, r2, #8
 8004a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	617b      	str	r3, [r7, #20]
    break;
 8004a6c:	e00c      	b.n	8004a88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	4a0e      	ldr	r2, [pc, #56]	; (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a78:	68d2      	ldr	r2, [r2, #12]
 8004a7a:	0a12      	lsrs	r2, r2, #8
 8004a7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]
    break;
 8004a86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	0e5b      	lsrs	r3, r3, #25
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004aa2:	687b      	ldr	r3, [r7, #4]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	016e3600 	.word	0x016e3600
 8004ab8:	00f42400 	.word	0x00f42400

08004abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ac8:	2300      	movs	r3, #0
 8004aca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8098 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ade:	4b43      	ldr	r3, [pc, #268]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10d      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aea:	4b40      	ldr	r3, [pc, #256]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	4a3f      	ldr	r2, [pc, #252]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6593      	str	r3, [r2, #88]	; 0x58
 8004af6:	4b3d      	ldr	r3, [pc, #244]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b02:	2301      	movs	r3, #1
 8004b04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b06:	4b3a      	ldr	r3, [pc, #232]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a39      	ldr	r2, [pc, #228]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b12:	f7fd fb09 	bl	8002128 <HAL_GetTick>
 8004b16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b18:	e009      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1a:	f7fd fb05 	bl	8002128 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d902      	bls.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b2c:	e005      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b2e:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ef      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d159      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b40:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01e      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d019      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b5c:	4b23      	ldr	r3, [pc, #140]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b68:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	4a1f      	ldr	r2, [pc, #124]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b78:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b88:	4a18      	ldr	r2, [pc, #96]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fd fac5 	bl	8002128 <HAL_GetTick>
 8004b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba0:	e00b      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fd fac1 	bl	8002128 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d902      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ec      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bdc:	4903      	ldr	r1, [pc, #12]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	74bb      	strb	r3, [r7, #18]
 8004bea:	e005      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf8:	7c7b      	ldrb	r3, [r7, #17]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	4ba7      	ldr	r3, [pc, #668]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	4aa6      	ldr	r2, [pc, #664]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c16:	4ba1      	ldr	r3, [pc, #644]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f023 0203 	bic.w	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	499d      	ldr	r1, [pc, #628]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c38:	4b98      	ldr	r3, [pc, #608]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f023 020c 	bic.w	r2, r3, #12
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4995      	ldr	r1, [pc, #596]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c5a:	4b90      	ldr	r3, [pc, #576]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	498c      	ldr	r1, [pc, #560]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c7c:	4b87      	ldr	r3, [pc, #540]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	4984      	ldr	r1, [pc, #528]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c9e:	4b7f      	ldr	r3, [pc, #508]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	497b      	ldr	r1, [pc, #492]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc0:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	4973      	ldr	r1, [pc, #460]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce2:	4b6e      	ldr	r3, [pc, #440]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	496a      	ldr	r1, [pc, #424]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d04:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4962      	ldr	r1, [pc, #392]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d26:	4b5d      	ldr	r3, [pc, #372]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	4959      	ldr	r1, [pc, #356]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d48:	4b54      	ldr	r3, [pc, #336]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	4951      	ldr	r1, [pc, #324]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6a:	4b4c      	ldr	r3, [pc, #304]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4948      	ldr	r1, [pc, #288]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d8c:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	4940      	ldr	r1, [pc, #256]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004daa:	d105      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dac:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a3a      	ldr	r2, [pc, #232]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dc4:	4b35      	ldr	r3, [pc, #212]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	4932      	ldr	r1, [pc, #200]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de2:	d105      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a2c      	ldr	r2, [pc, #176]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	4924      	ldr	r1, [pc, #144]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	4b1f      	ldr	r3, [pc, #124]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e34:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	4916      	ldr	r1, [pc, #88]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e52:	d105      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a10      	ldr	r2, [pc, #64]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d019      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4908      	ldr	r1, [pc, #32]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8a:	d109      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a02      	ldr	r2, [pc, #8]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
 8004e98:	e002      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004eac:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	4926      	ldr	r1, [pc, #152]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ecc:	4b21      	ldr	r3, [pc, #132]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef2:	4918      	ldr	r1, [pc, #96]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f04:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	490a      	ldr	r1, [pc, #40]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a04      	ldr	r2, [pc, #16]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f48:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e049      	b.n	8004ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc fe12 	bl	8001ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f001 f800 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d001      	beq.n	8005020 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e04c      	b.n	80050ba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a26      	ldr	r2, [pc, #152]	; (80050c8 <HAL_TIM_Base_Start+0xc0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d022      	beq.n	8005078 <HAL_TIM_Base_Start+0x70>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503a:	d01d      	beq.n	8005078 <HAL_TIM_Base_Start+0x70>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_TIM_Base_Start+0xc4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_TIM_Base_Start+0x70>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <HAL_TIM_Base_Start+0xc8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_TIM_Base_Start+0x70>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_TIM_Base_Start+0xcc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_TIM_Base_Start+0x70>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_TIM_Base_Start+0xd0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_TIM_Base_Start+0x70>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_TIM_Base_Start+0xd4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_Base_Start+0x70>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_TIM_Base_Start+0xd8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d115      	bne.n	80050a4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_TIM_Base_Start+0xdc>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b06      	cmp	r3, #6
 8005088:	d015      	beq.n	80050b6 <HAL_TIM_Base_Start+0xae>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d011      	beq.n	80050b6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40013400 	.word	0x40013400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40015000 	.word	0x40015000
 80050e4:	00010007 	.word	0x00010007

080050e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e049      	b.n	800518e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc fdda 	bl	8001cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 ff38 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <HAL_TIM_PWM_Start+0x24>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e03c      	b.n	8005236 <HAL_TIM_PWM_Start+0x9e>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d109      	bne.n	80051d6 <HAL_TIM_PWM_Start+0x3e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	bf14      	ite	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	2300      	moveq	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	e02f      	b.n	8005236 <HAL_TIM_PWM_Start+0x9e>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d109      	bne.n	80051f0 <HAL_TIM_PWM_Start+0x58>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	e022      	b.n	8005236 <HAL_TIM_PWM_Start+0x9e>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d109      	bne.n	800520a <HAL_TIM_PWM_Start+0x72>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e015      	b.n	8005236 <HAL_TIM_PWM_Start+0x9e>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b10      	cmp	r3, #16
 800520e:	d109      	bne.n	8005224 <HAL_TIM_PWM_Start+0x8c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e008      	b.n	8005236 <HAL_TIM_PWM_Start+0x9e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0a6      	b.n	800538c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_TIM_PWM_Start+0xb6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	e023      	b.n	8005296 <HAL_TIM_PWM_Start+0xfe>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d104      	bne.n	800525e <HAL_TIM_PWM_Start+0xc6>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800525c:	e01b      	b.n	8005296 <HAL_TIM_PWM_Start+0xfe>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d104      	bne.n	800526e <HAL_TIM_PWM_Start+0xd6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800526c:	e013      	b.n	8005296 <HAL_TIM_PWM_Start+0xfe>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	d104      	bne.n	800527e <HAL_TIM_PWM_Start+0xe6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800527c:	e00b      	b.n	8005296 <HAL_TIM_PWM_Start+0xfe>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b10      	cmp	r3, #16
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xf6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800528c:	e003      	b.n	8005296 <HAL_TIM_PWM_Start+0xfe>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2201      	movs	r2, #1
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 fc20 	bl	8006ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a3a      	ldr	r2, [pc, #232]	; (8005394 <HAL_TIM_PWM_Start+0x1fc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x148>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a39      	ldr	r2, [pc, #228]	; (8005398 <HAL_TIM_PWM_Start+0x200>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x148>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a37      	ldr	r2, [pc, #220]	; (800539c <HAL_TIM_PWM_Start+0x204>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x148>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a36      	ldr	r2, [pc, #216]	; (80053a0 <HAL_TIM_PWM_Start+0x208>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x148>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a34      	ldr	r2, [pc, #208]	; (80053a4 <HAL_TIM_PWM_Start+0x20c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x148>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a33      	ldr	r2, [pc, #204]	; (80053a8 <HAL_TIM_PWM_Start+0x210>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x14c>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_TIM_PWM_Start+0x14e>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a25      	ldr	r2, [pc, #148]	; (8005394 <HAL_TIM_PWM_Start+0x1fc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_TIM_PWM_Start+0x1b2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d01d      	beq.n	800534a <HAL_TIM_PWM_Start+0x1b2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a26      	ldr	r2, [pc, #152]	; (80053ac <HAL_TIM_PWM_Start+0x214>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIM_PWM_Start+0x1b2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <HAL_TIM_PWM_Start+0x218>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_TIM_PWM_Start+0x1b2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <HAL_TIM_PWM_Start+0x21c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIM_PWM_Start+0x1b2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <HAL_TIM_PWM_Start+0x200>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIM_PWM_Start+0x1b2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a18      	ldr	r2, [pc, #96]	; (800539c <HAL_TIM_PWM_Start+0x204>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIM_PWM_Start+0x1b2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_TIM_PWM_Start+0x210>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d115      	bne.n	8005376 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_TIM_PWM_Start+0x220>)
 8005352:	4013      	ands	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b06      	cmp	r3, #6
 800535a:	d015      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1f0>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005362:	d011      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	e008      	b.n	8005388 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e000      	b.n	800538a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005388:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40013400 	.word	0x40013400
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800
 80053a8:	40015000 	.word	0x40015000
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	00010007 	.word	0x00010007

080053bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e049      	b.n	8005462 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f841 	bl	800546a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f000 fdce 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <HAL_TIM_IC_Start_IT+0x1e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549a:	b2db      	uxtb	r3, r3
 800549c:	e023      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x66>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_IC_Start_IT+0x2e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e01b      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x66>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d104      	bne.n	80054be <HAL_TIM_IC_Start_IT+0x3e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e013      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x66>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b0c      	cmp	r3, #12
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_IC_Start_IT+0x4e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e00b      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x66>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d104      	bne.n	80054de <HAL_TIM_IC_Start_IT+0x5e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	e003      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x66>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <HAL_TIM_IC_Start_IT+0x78>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e013      	b.n	8005520 <HAL_TIM_IC_Start_IT+0xa0>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d104      	bne.n	8005508 <HAL_TIM_IC_Start_IT+0x88>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e00b      	b.n	8005520 <HAL_TIM_IC_Start_IT+0xa0>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b08      	cmp	r3, #8
 800550c:	d104      	bne.n	8005518 <HAL_TIM_IC_Start_IT+0x98>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005514:	b2db      	uxtb	r3, r3
 8005516:	e003      	b.n	8005520 <HAL_TIM_IC_Start_IT+0xa0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800551e:	b2db      	uxtb	r3, r3
 8005520:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005522:	7bbb      	ldrb	r3, [r7, #14]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d102      	bne.n	800552e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005528:	7b7b      	ldrb	r3, [r7, #13]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d001      	beq.n	8005532 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0e2      	b.n	80056f8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0xc2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	e023      	b.n	800558a <HAL_TIM_IC_Start_IT+0x10a>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d104      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0xd2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005550:	e01b      	b.n	800558a <HAL_TIM_IC_Start_IT+0x10a>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d104      	bne.n	8005562 <HAL_TIM_IC_Start_IT+0xe2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005560:	e013      	b.n	800558a <HAL_TIM_IC_Start_IT+0x10a>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b0c      	cmp	r3, #12
 8005566:	d104      	bne.n	8005572 <HAL_TIM_IC_Start_IT+0xf2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005570:	e00b      	b.n	800558a <HAL_TIM_IC_Start_IT+0x10a>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b10      	cmp	r3, #16
 8005576:	d104      	bne.n	8005582 <HAL_TIM_IC_Start_IT+0x102>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005580:	e003      	b.n	800558a <HAL_TIM_IC_Start_IT+0x10a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <HAL_TIM_IC_Start_IT+0x11a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005598:	e013      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x142>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d104      	bne.n	80055aa <HAL_TIM_IC_Start_IT+0x12a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x142>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_IC_Start_IT+0x13a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055b8:	e003      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x142>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b0c      	cmp	r3, #12
 80055c6:	d841      	bhi.n	800564c <HAL_TIM_IC_Start_IT+0x1cc>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <HAL_TIM_IC_Start_IT+0x150>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	08005605 	.word	0x08005605
 80055d4:	0800564d 	.word	0x0800564d
 80055d8:	0800564d 	.word	0x0800564d
 80055dc:	0800564d 	.word	0x0800564d
 80055e0:	08005617 	.word	0x08005617
 80055e4:	0800564d 	.word	0x0800564d
 80055e8:	0800564d 	.word	0x0800564d
 80055ec:	0800564d 	.word	0x0800564d
 80055f0:	08005629 	.word	0x08005629
 80055f4:	0800564d 	.word	0x0800564d
 80055f8:	0800564d 	.word	0x0800564d
 80055fc:	0800564d 	.word	0x0800564d
 8005600:	0800563b 	.word	0x0800563b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0202 	orr.w	r2, r2, #2
 8005612:	60da      	str	r2, [r3, #12]
      break;
 8005614:	e01d      	b.n	8005652 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0204 	orr.w	r2, r2, #4
 8005624:	60da      	str	r2, [r3, #12]
      break;
 8005626:	e014      	b.n	8005652 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0208 	orr.w	r2, r2, #8
 8005636:	60da      	str	r2, [r3, #12]
      break;
 8005638:	e00b      	b.n	8005652 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0210 	orr.w	r2, r2, #16
 8005648:	60da      	str	r2, [r3, #12]
      break;
 800564a:	e002      	b.n	8005652 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
      break;
 8005650:	bf00      	nop
  }

  if (status == HAL_OK)
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d14e      	bne.n	80056f6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2201      	movs	r2, #1
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f001 fa3f 	bl	8006ae4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a25      	ldr	r2, [pc, #148]	; (8005700 <HAL_TIM_IC_Start_IT+0x280>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d022      	beq.n	80056b6 <HAL_TIM_IC_Start_IT+0x236>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d01d      	beq.n	80056b6 <HAL_TIM_IC_Start_IT+0x236>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a21      	ldr	r2, [pc, #132]	; (8005704 <HAL_TIM_IC_Start_IT+0x284>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d018      	beq.n	80056b6 <HAL_TIM_IC_Start_IT+0x236>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <HAL_TIM_IC_Start_IT+0x288>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_TIM_IC_Start_IT+0x236>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <HAL_TIM_IC_Start_IT+0x28c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <HAL_TIM_IC_Start_IT+0x236>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <HAL_TIM_IC_Start_IT+0x290>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_TIM_IC_Start_IT+0x236>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_TIM_IC_Start_IT+0x294>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <HAL_TIM_IC_Start_IT+0x236>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a19      	ldr	r2, [pc, #100]	; (8005718 <HAL_TIM_IC_Start_IT+0x298>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d115      	bne.n	80056e2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	4b17      	ldr	r3, [pc, #92]	; (800571c <HAL_TIM_IC_Start_IT+0x29c>)
 80056be:	4013      	ands	r3, r2
 80056c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b06      	cmp	r3, #6
 80056c6:	d015      	beq.n	80056f4 <HAL_TIM_IC_Start_IT+0x274>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ce:	d011      	beq.n	80056f4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	e008      	b.n	80056f4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e000      	b.n	80056f6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40012c00 	.word	0x40012c00
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	40013400 	.word	0x40013400
 8005714:	40014000 	.word	0x40014000
 8005718:	40015000 	.word	0x40015000
 800571c:	00010007 	.word	0x00010007

08005720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d020      	beq.n	8005784 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01b      	beq.n	8005784 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0202 	mvn.w	r2, #2
 8005754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fb fede 	bl	800152c <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fbf4 	bl	8005f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fbfb 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d020      	beq.n	80057d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0204 	mvn.w	r2, #4
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fb feb8 	bl	800152c <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fbce 	bl	8005f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fbd5 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d020      	beq.n	800581c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01b      	beq.n	800581c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0208 	mvn.w	r2, #8
 80057ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2204      	movs	r2, #4
 80057f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fb fe92 	bl	800152c <HAL_TIM_IC_CaptureCallback>
 8005808:	e005      	b.n	8005816 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fba8 	bl	8005f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fbaf 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b00      	cmp	r3, #0
 8005824:	d020      	beq.n	8005868 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01b      	beq.n	8005868 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0210 	mvn.w	r2, #16
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2208      	movs	r2, #8
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fb fe6c 	bl	800152c <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fb82 	bl	8005f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fb89 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0201 	mvn.w	r2, #1
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fb60 	bl	8005f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d104      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00c      	beq.n	80058ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80058b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fa6f 	bl	8006d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fa67 	bl	8006dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00c      	beq.n	8005902 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fb43 	bl	8005f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f06f 0220 	mvn.w	r2, #32
 800591e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fa2f 	bl	8006d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00c      	beq.n	800594a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 fa3b 	bl	8006dc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fa33 	bl	8006dd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00c      	beq.n	8005992 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800598a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fa2b 	bl	8006de8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00c      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80059ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fa23 	bl	8006dfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIM_IC_ConfigChannel+0x1e>
 80059d8:	2302      	movs	r3, #2
 80059da:	e088      	b.n	8005aee <HAL_TIM_IC_ConfigChannel+0x130>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d11b      	bne.n	8005a22 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059fa:	f000 fead 	bl	8006758 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 020c 	bic.w	r2, r2, #12
 8005a0c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6999      	ldr	r1, [r3, #24]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	619a      	str	r2, [r3, #24]
 8005a20:	e060      	b.n	8005ae4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d11c      	bne.n	8005a62 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005a38:	f000 ff31 	bl	800689e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a4a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6999      	ldr	r1, [r3, #24]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	021a      	lsls	r2, r3, #8
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	619a      	str	r2, [r3, #24]
 8005a60:	e040      	b.n	8005ae4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d11b      	bne.n	8005aa0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a78:	f000 ff7e 	bl	8006978 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 020c 	bic.w	r2, r2, #12
 8005a8a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69d9      	ldr	r1, [r3, #28]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	61da      	str	r2, [r3, #28]
 8005a9e:	e021      	b.n	8005ae4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005ab6:	f000 ff9b 	bl	80069f0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ac8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69d9      	ldr	r1, [r3, #28]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	021a      	lsls	r2, r3, #8
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	61da      	str	r2, [r3, #28]
 8005ade:	e001      	b.n	8005ae4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0ff      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b14      	cmp	r3, #20
 8005b22:	f200 80f0 	bhi.w	8005d06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005d07 	.word	0x08005d07
 8005b34:	08005d07 	.word	0x08005d07
 8005b38:	08005d07 	.word	0x08005d07
 8005b3c:	08005bc1 	.word	0x08005bc1
 8005b40:	08005d07 	.word	0x08005d07
 8005b44:	08005d07 	.word	0x08005d07
 8005b48:	08005d07 	.word	0x08005d07
 8005b4c:	08005c03 	.word	0x08005c03
 8005b50:	08005d07 	.word	0x08005d07
 8005b54:	08005d07 	.word	0x08005d07
 8005b58:	08005d07 	.word	0x08005d07
 8005b5c:	08005c43 	.word	0x08005c43
 8005b60:	08005d07 	.word	0x08005d07
 8005b64:	08005d07 	.word	0x08005d07
 8005b68:	08005d07 	.word	0x08005d07
 8005b6c:	08005c85 	.word	0x08005c85
 8005b70:	08005d07 	.word	0x08005d07
 8005b74:	08005d07 	.word	0x08005d07
 8005b78:	08005d07 	.word	0x08005d07
 8005b7c:	08005cc5 	.word	0x08005cc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fabc 	bl	8006104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0208 	orr.w	r2, r2, #8
 8005b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0204 	bic.w	r2, r2, #4
 8005baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6999      	ldr	r1, [r3, #24]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	619a      	str	r2, [r3, #24]
      break;
 8005bbe:	e0a5      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fb36 	bl	8006238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6999      	ldr	r1, [r3, #24]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	021a      	lsls	r2, r3, #8
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	619a      	str	r2, [r3, #24]
      break;
 8005c00:	e084      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fba9 	bl	8006360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0208 	orr.w	r2, r2, #8
 8005c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0204 	bic.w	r2, r2, #4
 8005c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69d9      	ldr	r1, [r3, #28]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	61da      	str	r2, [r3, #28]
      break;
 8005c40:	e064      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fc1b 	bl	8006484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69d9      	ldr	r1, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	021a      	lsls	r2, r3, #8
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	61da      	str	r2, [r3, #28]
      break;
 8005c82:	e043      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fc8e 	bl	80065ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0208 	orr.w	r2, r2, #8
 8005c9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0204 	bic.w	r2, r2, #4
 8005cae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005cc2:	e023      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fcd8 	bl	8006680 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	021a      	lsls	r2, r3, #8
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005d04:	e002      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop

08005d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_TIM_ConfigClockSource+0x1c>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e0f6      	b.n	8005f2a <HAL_TIM_ConfigClockSource+0x20a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a6f      	ldr	r2, [pc, #444]	; (8005f34 <HAL_TIM_ConfigClockSource+0x214>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	f000 80c1 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005d7c:	4a6d      	ldr	r2, [pc, #436]	; (8005f34 <HAL_TIM_ConfigClockSource+0x214>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	f200 80c6 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d84:	4a6c      	ldr	r2, [pc, #432]	; (8005f38 <HAL_TIM_ConfigClockSource+0x218>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	f000 80b9 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005d8c:	4a6a      	ldr	r2, [pc, #424]	; (8005f38 <HAL_TIM_ConfigClockSource+0x218>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f200 80be 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d94:	4a69      	ldr	r2, [pc, #420]	; (8005f3c <HAL_TIM_ConfigClockSource+0x21c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f000 80b1 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005d9c:	4a67      	ldr	r2, [pc, #412]	; (8005f3c <HAL_TIM_ConfigClockSource+0x21c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f200 80b6 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005da4:	4a66      	ldr	r2, [pc, #408]	; (8005f40 <HAL_TIM_ConfigClockSource+0x220>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	f000 80a9 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005dac:	4a64      	ldr	r2, [pc, #400]	; (8005f40 <HAL_TIM_ConfigClockSource+0x220>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	f200 80ae 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005db4:	4a63      	ldr	r2, [pc, #396]	; (8005f44 <HAL_TIM_ConfigClockSource+0x224>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	f000 80a1 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005dbc:	4a61      	ldr	r2, [pc, #388]	; (8005f44 <HAL_TIM_ConfigClockSource+0x224>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	f200 80a6 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dc4:	4a60      	ldr	r2, [pc, #384]	; (8005f48 <HAL_TIM_ConfigClockSource+0x228>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f000 8099 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005dcc:	4a5e      	ldr	r2, [pc, #376]	; (8005f48 <HAL_TIM_ConfigClockSource+0x228>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	f200 809e 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005dd8:	f000 8091 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005ddc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005de0:	f200 8096 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de8:	f000 8089 	beq.w	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df0:	f200 808e 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df8:	d03e      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x158>
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	f200 8087 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e06:	f000 8086 	beq.w	8005f16 <HAL_TIM_ConfigClockSource+0x1f6>
 8005e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0e:	d87f      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e10:	2b70      	cmp	r3, #112	; 0x70
 8005e12:	d01a      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x12a>
 8005e14:	2b70      	cmp	r3, #112	; 0x70
 8005e16:	d87b      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e18:	2b60      	cmp	r3, #96	; 0x60
 8005e1a:	d050      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x19e>
 8005e1c:	2b60      	cmp	r3, #96	; 0x60
 8005e1e:	d877      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e20:	2b50      	cmp	r3, #80	; 0x50
 8005e22:	d03c      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x17e>
 8005e24:	2b50      	cmp	r3, #80	; 0x50
 8005e26:	d873      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d058      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x1be>
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d86f      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e30:	2b30      	cmp	r3, #48	; 0x30
 8005e32:	d064      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d86b      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d060      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d867      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05c      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d05a      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x1de>
 8005e48:	e062      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e5a:	f000 fe23 	bl	8006aa4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	609a      	str	r2, [r3, #8]
      break;
 8005e76:	e04f      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e88:	f000 fe0c 	bl	8006aa4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e9a:	609a      	str	r2, [r3, #8]
      break;
 8005e9c:	e03c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f000 fcc8 	bl	8006840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2150      	movs	r1, #80	; 0x50
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fdd7 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 8005ebc:	e02c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f000 fd24 	bl	8006918 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2160      	movs	r1, #96	; 0x60
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fdc7 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 8005edc:	e01c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 fca8 	bl	8006840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2140      	movs	r1, #64	; 0x40
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fdb7 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 8005efc:	e00c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f000 fdae 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 8005f0e:	e003      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	e000      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	00100070 	.word	0x00100070
 8005f38:	00100060 	.word	0x00100060
 8005f3c:	00100050 	.word	0x00100050
 8005f40:	00100040 	.word	0x00100040
 8005f44:	00100030 	.word	0x00100030
 8005f48:	00100020 	.word	0x00100020

08005f4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a4c      	ldr	r2, [pc, #304]	; (80060e0 <TIM_Base_SetConfig+0x144>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d017      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d013      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a49      	ldr	r2, [pc, #292]	; (80060e4 <TIM_Base_SetConfig+0x148>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a48      	ldr	r2, [pc, #288]	; (80060e8 <TIM_Base_SetConfig+0x14c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a47      	ldr	r2, [pc, #284]	; (80060ec <TIM_Base_SetConfig+0x150>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a46      	ldr	r2, [pc, #280]	; (80060f0 <TIM_Base_SetConfig+0x154>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0x48>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a45      	ldr	r2, [pc, #276]	; (80060f4 <TIM_Base_SetConfig+0x158>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a39      	ldr	r2, [pc, #228]	; (80060e0 <TIM_Base_SetConfig+0x144>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d023      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d01f      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a36      	ldr	r2, [pc, #216]	; (80060e4 <TIM_Base_SetConfig+0x148>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01b      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a35      	ldr	r2, [pc, #212]	; (80060e8 <TIM_Base_SetConfig+0x14c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d017      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a34      	ldr	r2, [pc, #208]	; (80060ec <TIM_Base_SetConfig+0x150>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a33      	ldr	r2, [pc, #204]	; (80060f0 <TIM_Base_SetConfig+0x154>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00f      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a33      	ldr	r2, [pc, #204]	; (80060f8 <TIM_Base_SetConfig+0x15c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a32      	ldr	r2, [pc, #200]	; (80060fc <TIM_Base_SetConfig+0x160>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a31      	ldr	r2, [pc, #196]	; (8006100 <TIM_Base_SetConfig+0x164>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0xaa>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <TIM_Base_SetConfig+0x158>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <TIM_Base_SetConfig+0x144>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a1a      	ldr	r2, [pc, #104]	; (80060f0 <TIM_Base_SetConfig+0x154>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00f      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <TIM_Base_SetConfig+0x15c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a19      	ldr	r2, [pc, #100]	; (80060fc <TIM_Base_SetConfig+0x160>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a18      	ldr	r2, [pc, #96]	; (8006100 <TIM_Base_SetConfig+0x164>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_Base_SetConfig+0x110>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a13      	ldr	r2, [pc, #76]	; (80060f4 <TIM_Base_SetConfig+0x158>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d103      	bne.n	80060b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d105      	bne.n	80060d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	611a      	str	r2, [r3, #16]
  }
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40013400 	.word	0x40013400
 80060f4:	40015000 	.word	0x40015000
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800

08006104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f023 0201 	bic.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0303 	bic.w	r3, r3, #3
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 0302 	bic.w	r3, r3, #2
 8006150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a30      	ldr	r2, [pc, #192]	; (8006220 <TIM_OC1_SetConfig+0x11c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <TIM_OC1_SetConfig+0x120>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00f      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a2e      	ldr	r2, [pc, #184]	; (8006228 <TIM_OC1_SetConfig+0x124>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00b      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a2d      	ldr	r2, [pc, #180]	; (800622c <TIM_OC1_SetConfig+0x128>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <TIM_OC1_SetConfig+0x12c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a2b      	ldr	r2, [pc, #172]	; (8006234 <TIM_OC1_SetConfig+0x130>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d10c      	bne.n	80061a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0308 	bic.w	r3, r3, #8
 8006192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0304 	bic.w	r3, r3, #4
 80061a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <TIM_OC1_SetConfig+0x11c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <TIM_OC1_SetConfig+0x120>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00f      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <TIM_OC1_SetConfig+0x124>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00b      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1a      	ldr	r2, [pc, #104]	; (800622c <TIM_OC1_SetConfig+0x128>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d007      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <TIM_OC1_SetConfig+0x12c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a18      	ldr	r2, [pc, #96]	; (8006234 <TIM_OC1_SetConfig+0x130>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d111      	bne.n	80061fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40013400 	.word	0x40013400
 8006228:	40014000 	.word	0x40014000
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800
 8006234:	40015000 	.word	0x40015000

08006238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f023 0210 	bic.w	r2, r3, #16
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0320 	bic.w	r3, r3, #32
 8006286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a2c      	ldr	r2, [pc, #176]	; (8006348 <TIM_OC2_SetConfig+0x110>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_OC2_SetConfig+0x74>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a2b      	ldr	r2, [pc, #172]	; (800634c <TIM_OC2_SetConfig+0x114>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC2_SetConfig+0x74>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <TIM_OC2_SetConfig+0x118>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d10d      	bne.n	80062c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <TIM_OC2_SetConfig+0x110>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <TIM_OC2_SetConfig+0x114>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00f      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <TIM_OC2_SetConfig+0x11c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <TIM_OC2_SetConfig+0x120>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <TIM_OC2_SetConfig+0x124>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a17      	ldr	r2, [pc, #92]	; (8006350 <TIM_OC2_SetConfig+0x118>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d113      	bne.n	8006320 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40015000 	.word	0x40015000
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400
 800635c:	40014800 	.word	0x40014800

08006360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a2b      	ldr	r2, [pc, #172]	; (800646c <TIM_OC3_SetConfig+0x10c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <TIM_OC3_SetConfig+0x72>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2a      	ldr	r2, [pc, #168]	; (8006470 <TIM_OC3_SetConfig+0x110>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC3_SetConfig+0x72>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a29      	ldr	r2, [pc, #164]	; (8006474 <TIM_OC3_SetConfig+0x114>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d10d      	bne.n	80063ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a1e      	ldr	r2, [pc, #120]	; (800646c <TIM_OC3_SetConfig+0x10c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <TIM_OC3_SetConfig+0x110>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00f      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a1d      	ldr	r2, [pc, #116]	; (8006478 <TIM_OC3_SetConfig+0x118>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00b      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1c      	ldr	r2, [pc, #112]	; (800647c <TIM_OC3_SetConfig+0x11c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d007      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <TIM_OC3_SetConfig+0x120>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a16      	ldr	r2, [pc, #88]	; (8006474 <TIM_OC3_SetConfig+0x114>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d113      	bne.n	8006446 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800642c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40013400 	.word	0x40013400
 8006474:	40015000 	.word	0x40015000
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800

08006484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	031b      	lsls	r3, r3, #12
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <TIM_OC4_SetConfig+0x110>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d007      	beq.n	80064f8 <TIM_OC4_SetConfig+0x74>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <TIM_OC4_SetConfig+0x114>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d003      	beq.n	80064f8 <TIM_OC4_SetConfig+0x74>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <TIM_OC4_SetConfig+0x118>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10d      	bne.n	8006514 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006512:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <TIM_OC4_SetConfig+0x110>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <TIM_OC4_SetConfig+0x114>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00f      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <TIM_OC4_SetConfig+0x11c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00b      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <TIM_OC4_SetConfig+0x120>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d007      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <TIM_OC4_SetConfig+0x124>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a17      	ldr	r2, [pc, #92]	; (800659c <TIM_OC4_SetConfig+0x118>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d113      	bne.n	800656c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006552:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	019b      	lsls	r3, r3, #6
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	019b      	lsls	r3, r3, #6
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40015000 	.word	0x40015000
 80065a0:	40014000 	.word	0x40014000
 80065a4:	40014400 	.word	0x40014400
 80065a8:	40014800 	.word	0x40014800

080065ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	041b      	lsls	r3, r3, #16
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a19      	ldr	r2, [pc, #100]	; (8006668 <TIM_OC5_SetConfig+0xbc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a18      	ldr	r2, [pc, #96]	; (800666c <TIM_OC5_SetConfig+0xc0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00f      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a17      	ldr	r2, [pc, #92]	; (8006670 <TIM_OC5_SetConfig+0xc4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00b      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a16      	ldr	r2, [pc, #88]	; (8006674 <TIM_OC5_SetConfig+0xc8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d007      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a15      	ldr	r2, [pc, #84]	; (8006678 <TIM_OC5_SetConfig+0xcc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a14      	ldr	r2, [pc, #80]	; (800667c <TIM_OC5_SetConfig+0xd0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d109      	bne.n	8006642 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006634:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800
 800667c:	40015000 	.word	0x40015000

08006680 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	051b      	lsls	r3, r3, #20
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a1a      	ldr	r2, [pc, #104]	; (8006740 <TIM_OC6_SetConfig+0xc0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a19      	ldr	r2, [pc, #100]	; (8006744 <TIM_OC6_SetConfig+0xc4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00f      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a18      	ldr	r2, [pc, #96]	; (8006748 <TIM_OC6_SetConfig+0xc8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00b      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a17      	ldr	r2, [pc, #92]	; (800674c <TIM_OC6_SetConfig+0xcc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a16      	ldr	r2, [pc, #88]	; (8006750 <TIM_OC6_SetConfig+0xd0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a15      	ldr	r2, [pc, #84]	; (8006754 <TIM_OC6_SetConfig+0xd4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d109      	bne.n	8006718 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40013400 	.word	0x40013400
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800
 8006754:	40015000 	.word	0x40015000

08006758 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	f023 0201 	bic.w	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4a28      	ldr	r2, [pc, #160]	; (8006824 <TIM_TI1_SetConfig+0xcc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01b      	beq.n	80067be <TIM_TI1_SetConfig+0x66>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678c:	d017      	beq.n	80067be <TIM_TI1_SetConfig+0x66>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a25      	ldr	r2, [pc, #148]	; (8006828 <TIM_TI1_SetConfig+0xd0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <TIM_TI1_SetConfig+0x66>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a24      	ldr	r2, [pc, #144]	; (800682c <TIM_TI1_SetConfig+0xd4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00f      	beq.n	80067be <TIM_TI1_SetConfig+0x66>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a23      	ldr	r2, [pc, #140]	; (8006830 <TIM_TI1_SetConfig+0xd8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00b      	beq.n	80067be <TIM_TI1_SetConfig+0x66>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4a22      	ldr	r2, [pc, #136]	; (8006834 <TIM_TI1_SetConfig+0xdc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d007      	beq.n	80067be <TIM_TI1_SetConfig+0x66>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a21      	ldr	r2, [pc, #132]	; (8006838 <TIM_TI1_SetConfig+0xe0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_TI1_SetConfig+0x66>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a20      	ldr	r2, [pc, #128]	; (800683c <TIM_TI1_SetConfig+0xe4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d101      	bne.n	80067c2 <TIM_TI1_SetConfig+0x6a>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <TIM_TI1_SetConfig+0x6c>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0303 	bic.w	r3, r3, #3
 80067ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e003      	b.n	80067e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f023 030a 	bic.w	r3, r3, #10
 80067fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f003 030a 	and.w	r3, r3, #10
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40014000 	.word	0x40014000
 800683c:	40015000 	.word	0x40015000

08006840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f023 0201 	bic.w	r2, r3, #1
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800686a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 030a 	bic.w	r3, r3, #10
 800687c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800689e:	b480      	push	{r7}
 80068a0:	b087      	sub	sp, #28
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
 80068aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f023 0210 	bic.w	r2, r3, #16
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	031b      	lsls	r3, r3, #12
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	621a      	str	r2, [r3, #32]
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f023 0210 	bic.w	r2, r3, #16
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	031b      	lsls	r3, r3, #12
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006954:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	621a      	str	r2, [r3, #32]
}
 800696c:	bf00      	nop
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f023 0303 	bic.w	r3, r3, #3
 80069a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80069c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a2e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	031b      	lsls	r3, r3, #12
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006a42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	031b      	lsls	r3, r3, #12
 8006a48:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f043 0307 	orr.w	r3, r3, #7
 8006a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	609a      	str	r2, [r3, #8]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	021a      	lsls	r2, r3, #8
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 031f 	and.w	r3, r3, #31
 8006af6:	2201      	movs	r2, #1
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
	...

08006b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e074      	b.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a34      	ldr	r2, [pc, #208]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d009      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a33      	ldr	r2, [pc, #204]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a31      	ldr	r2, [pc, #196]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d108      	bne.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d022      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc8:	d01d      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a11      	ldr	r2, [pc, #68]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d10c      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40015000 	.word	0x40015000
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40014000 	.word	0x40014000

08006c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e078      	b.n	8006d6a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	041b      	lsls	r3, r3, #16
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d009      	beq.n	8006d1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d004      	beq.n	8006d1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a19      	ldr	r2, [pc, #100]	; (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d11c      	bne.n	8006d58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	051b      	lsls	r3, r3, #20
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40012c00 	.word	0x40012c00
 8006d7c:	40013400 	.word	0x40013400
 8006d80:	40015000 	.word	0x40015000

08006d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e042      	b.n	8006ea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fb f835 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2224      	movs	r2, #36	; 0x24
 8006e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fb24 	bl	80074a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f825 	bl	8006eb0 <UART_SetConfig>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e01b      	b.n	8006ea8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fba3 	bl	80075ec <UART_CheckIdleState>
 8006ea6:	4603      	mov	r3, r0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb4:	b08c      	sub	sp, #48	; 0x30
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4baa      	ldr	r3, [pc, #680]	; (8007188 <UART_SetConfig+0x2d8>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a9f      	ldr	r2, [pc, #636]	; (800718c <UART_SetConfig+0x2dc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	6812      	ldr	r2, [r2, #0]
 8006f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	f023 010f 	bic.w	r1, r3, #15
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a90      	ldr	r2, [pc, #576]	; (8007190 <UART_SetConfig+0x2e0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d125      	bne.n	8006fa0 <UART_SetConfig+0xf0>
 8006f54:	4b8f      	ldr	r3, [pc, #572]	; (8007194 <UART_SetConfig+0x2e4>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d81a      	bhi.n	8006f98 <UART_SetConfig+0xe8>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <UART_SetConfig+0xb8>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f79 	.word	0x08006f79
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	08006f81 	.word	0x08006f81
 8006f74:	08006f91 	.word	0x08006f91
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7e:	e116      	b.n	80071ae <UART_SetConfig+0x2fe>
 8006f80:	2302      	movs	r3, #2
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f86:	e112      	b.n	80071ae <UART_SetConfig+0x2fe>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f8e:	e10e      	b.n	80071ae <UART_SetConfig+0x2fe>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f96:	e10a      	b.n	80071ae <UART_SetConfig+0x2fe>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9e:	e106      	b.n	80071ae <UART_SetConfig+0x2fe>
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a7c      	ldr	r2, [pc, #496]	; (8007198 <UART_SetConfig+0x2e8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d138      	bne.n	800701c <UART_SetConfig+0x16c>
 8006faa:	4b7a      	ldr	r3, [pc, #488]	; (8007194 <UART_SetConfig+0x2e4>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb0:	f003 030c 	and.w	r3, r3, #12
 8006fb4:	2b0c      	cmp	r3, #12
 8006fb6:	d82d      	bhi.n	8007014 <UART_SetConfig+0x164>
 8006fb8:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <UART_SetConfig+0x110>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08006ff5 	.word	0x08006ff5
 8006fc4:	08007015 	.word	0x08007015
 8006fc8:	08007015 	.word	0x08007015
 8006fcc:	08007015 	.word	0x08007015
 8006fd0:	08007005 	.word	0x08007005
 8006fd4:	08007015 	.word	0x08007015
 8006fd8:	08007015 	.word	0x08007015
 8006fdc:	08007015 	.word	0x08007015
 8006fe0:	08006ffd 	.word	0x08006ffd
 8006fe4:	08007015 	.word	0x08007015
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	08007015 	.word	0x08007015
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ffa:	e0d8      	b.n	80071ae <UART_SetConfig+0x2fe>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007002:	e0d4      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007004:	2304      	movs	r3, #4
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700a:	e0d0      	b.n	80071ae <UART_SetConfig+0x2fe>
 800700c:	2308      	movs	r3, #8
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007012:	e0cc      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007014:	2310      	movs	r3, #16
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701a:	e0c8      	b.n	80071ae <UART_SetConfig+0x2fe>
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a5e      	ldr	r2, [pc, #376]	; (800719c <UART_SetConfig+0x2ec>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d125      	bne.n	8007072 <UART_SetConfig+0x1c2>
 8007026:	4b5b      	ldr	r3, [pc, #364]	; (8007194 <UART_SetConfig+0x2e4>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007030:	2b30      	cmp	r3, #48	; 0x30
 8007032:	d016      	beq.n	8007062 <UART_SetConfig+0x1b2>
 8007034:	2b30      	cmp	r3, #48	; 0x30
 8007036:	d818      	bhi.n	800706a <UART_SetConfig+0x1ba>
 8007038:	2b20      	cmp	r3, #32
 800703a:	d00a      	beq.n	8007052 <UART_SetConfig+0x1a2>
 800703c:	2b20      	cmp	r3, #32
 800703e:	d814      	bhi.n	800706a <UART_SetConfig+0x1ba>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <UART_SetConfig+0x19a>
 8007044:	2b10      	cmp	r3, #16
 8007046:	d008      	beq.n	800705a <UART_SetConfig+0x1aa>
 8007048:	e00f      	b.n	800706a <UART_SetConfig+0x1ba>
 800704a:	2300      	movs	r3, #0
 800704c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007050:	e0ad      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007052:	2302      	movs	r3, #2
 8007054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007058:	e0a9      	b.n	80071ae <UART_SetConfig+0x2fe>
 800705a:	2304      	movs	r3, #4
 800705c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007060:	e0a5      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007062:	2308      	movs	r3, #8
 8007064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007068:	e0a1      	b.n	80071ae <UART_SetConfig+0x2fe>
 800706a:	2310      	movs	r3, #16
 800706c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007070:	e09d      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a4a      	ldr	r2, [pc, #296]	; (80071a0 <UART_SetConfig+0x2f0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d125      	bne.n	80070c8 <UART_SetConfig+0x218>
 800707c:	4b45      	ldr	r3, [pc, #276]	; (8007194 <UART_SetConfig+0x2e4>)
 800707e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007082:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007086:	2bc0      	cmp	r3, #192	; 0xc0
 8007088:	d016      	beq.n	80070b8 <UART_SetConfig+0x208>
 800708a:	2bc0      	cmp	r3, #192	; 0xc0
 800708c:	d818      	bhi.n	80070c0 <UART_SetConfig+0x210>
 800708e:	2b80      	cmp	r3, #128	; 0x80
 8007090:	d00a      	beq.n	80070a8 <UART_SetConfig+0x1f8>
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d814      	bhi.n	80070c0 <UART_SetConfig+0x210>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <UART_SetConfig+0x1f0>
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	d008      	beq.n	80070b0 <UART_SetConfig+0x200>
 800709e:	e00f      	b.n	80070c0 <UART_SetConfig+0x210>
 80070a0:	2300      	movs	r3, #0
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a6:	e082      	b.n	80071ae <UART_SetConfig+0x2fe>
 80070a8:	2302      	movs	r3, #2
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ae:	e07e      	b.n	80071ae <UART_SetConfig+0x2fe>
 80070b0:	2304      	movs	r3, #4
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b6:	e07a      	b.n	80071ae <UART_SetConfig+0x2fe>
 80070b8:	2308      	movs	r3, #8
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070be:	e076      	b.n	80071ae <UART_SetConfig+0x2fe>
 80070c0:	2310      	movs	r3, #16
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c6:	e072      	b.n	80071ae <UART_SetConfig+0x2fe>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a35      	ldr	r2, [pc, #212]	; (80071a4 <UART_SetConfig+0x2f4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d12a      	bne.n	8007128 <UART_SetConfig+0x278>
 80070d2:	4b30      	ldr	r3, [pc, #192]	; (8007194 <UART_SetConfig+0x2e4>)
 80070d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070e0:	d01a      	beq.n	8007118 <UART_SetConfig+0x268>
 80070e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070e6:	d81b      	bhi.n	8007120 <UART_SetConfig+0x270>
 80070e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ec:	d00c      	beq.n	8007108 <UART_SetConfig+0x258>
 80070ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f2:	d815      	bhi.n	8007120 <UART_SetConfig+0x270>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <UART_SetConfig+0x250>
 80070f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fc:	d008      	beq.n	8007110 <UART_SetConfig+0x260>
 80070fe:	e00f      	b.n	8007120 <UART_SetConfig+0x270>
 8007100:	2300      	movs	r3, #0
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007106:	e052      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007108:	2302      	movs	r3, #2
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710e:	e04e      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007116:	e04a      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711e:	e046      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007126:	e042      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a17      	ldr	r2, [pc, #92]	; (800718c <UART_SetConfig+0x2dc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d13a      	bne.n	80071a8 <UART_SetConfig+0x2f8>
 8007132:	4b18      	ldr	r3, [pc, #96]	; (8007194 <UART_SetConfig+0x2e4>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800713c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007140:	d01a      	beq.n	8007178 <UART_SetConfig+0x2c8>
 8007142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007146:	d81b      	bhi.n	8007180 <UART_SetConfig+0x2d0>
 8007148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714c:	d00c      	beq.n	8007168 <UART_SetConfig+0x2b8>
 800714e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007152:	d815      	bhi.n	8007180 <UART_SetConfig+0x2d0>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <UART_SetConfig+0x2b0>
 8007158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800715c:	d008      	beq.n	8007170 <UART_SetConfig+0x2c0>
 800715e:	e00f      	b.n	8007180 <UART_SetConfig+0x2d0>
 8007160:	2300      	movs	r3, #0
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007166:	e022      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007168:	2302      	movs	r3, #2
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716e:	e01e      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007176:	e01a      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717e:	e016      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007186:	e012      	b.n	80071ae <UART_SetConfig+0x2fe>
 8007188:	cfff69f3 	.word	0xcfff69f3
 800718c:	40008000 	.word	0x40008000
 8007190:	40013800 	.word	0x40013800
 8007194:	40021000 	.word	0x40021000
 8007198:	40004400 	.word	0x40004400
 800719c:	40004800 	.word	0x40004800
 80071a0:	40004c00 	.word	0x40004c00
 80071a4:	40005000 	.word	0x40005000
 80071a8:	2310      	movs	r3, #16
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4aae      	ldr	r2, [pc, #696]	; (800746c <UART_SetConfig+0x5bc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	f040 8097 	bne.w	80072e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d823      	bhi.n	800720a <UART_SetConfig+0x35a>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0x318>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	0800720b 	.word	0x0800720b
 80071d0:	080071f5 	.word	0x080071f5
 80071d4:	0800720b 	.word	0x0800720b
 80071d8:	080071fb 	.word	0x080071fb
 80071dc:	0800720b 	.word	0x0800720b
 80071e0:	0800720b 	.word	0x0800720b
 80071e4:	0800720b 	.word	0x0800720b
 80071e8:	08007203 	.word	0x08007203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ec:	f7fd fbf4 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80071f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071f2:	e010      	b.n	8007216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f4:	4b9e      	ldr	r3, [pc, #632]	; (8007470 <UART_SetConfig+0x5c0>)
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071f8:	e00d      	b.n	8007216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071fa:	f7fd fb7f 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80071fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007200:	e009      	b.n	8007216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007208:	e005      	b.n	8007216 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8130 	beq.w	800747e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	4a94      	ldr	r2, [pc, #592]	; (8007474 <UART_SetConfig+0x5c4>)
 8007224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007228:	461a      	mov	r2, r3
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007230:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	4613      	mov	r3, r2
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	4413      	add	r3, r2
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	429a      	cmp	r2, r3
 8007240:	d305      	bcc.n	800724e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	429a      	cmp	r2, r3
 800724c:	d903      	bls.n	8007256 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007254:	e113      	b.n	800747e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	2200      	movs	r2, #0
 800725a:	60bb      	str	r3, [r7, #8]
 800725c:	60fa      	str	r2, [r7, #12]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	4a84      	ldr	r2, [pc, #528]	; (8007474 <UART_SetConfig+0x5c4>)
 8007264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007268:	b29b      	uxth	r3, r3
 800726a:	2200      	movs	r2, #0
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007278:	f7f8 ffee 	bl	8000258 <__aeabi_uldivmod>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	020b      	lsls	r3, r1, #8
 800728e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007292:	0202      	lsls	r2, r0, #8
 8007294:	6979      	ldr	r1, [r7, #20]
 8007296:	6849      	ldr	r1, [r1, #4]
 8007298:	0849      	lsrs	r1, r1, #1
 800729a:	2000      	movs	r0, #0
 800729c:	460c      	mov	r4, r1
 800729e:	4605      	mov	r5, r0
 80072a0:	eb12 0804 	adds.w	r8, r2, r4
 80072a4:	eb43 0905 	adc.w	r9, r3, r5
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	469a      	mov	sl, r3
 80072b0:	4693      	mov	fp, r2
 80072b2:	4652      	mov	r2, sl
 80072b4:	465b      	mov	r3, fp
 80072b6:	4640      	mov	r0, r8
 80072b8:	4649      	mov	r1, r9
 80072ba:	f7f8 ffcd 	bl	8000258 <__aeabi_uldivmod>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4613      	mov	r3, r2
 80072c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072cc:	d308      	bcc.n	80072e0 <UART_SetConfig+0x430>
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072d4:	d204      	bcs.n	80072e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6a3a      	ldr	r2, [r7, #32]
 80072dc:	60da      	str	r2, [r3, #12]
 80072de:	e0ce      	b.n	800747e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072e6:	e0ca      	b.n	800747e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072f0:	d166      	bne.n	80073c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80072f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072f6:	2b08      	cmp	r3, #8
 80072f8:	d827      	bhi.n	800734a <UART_SetConfig+0x49a>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <UART_SetConfig+0x450>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007325 	.word	0x08007325
 8007304:	0800732d 	.word	0x0800732d
 8007308:	08007335 	.word	0x08007335
 800730c:	0800734b 	.word	0x0800734b
 8007310:	0800733b 	.word	0x0800733b
 8007314:	0800734b 	.word	0x0800734b
 8007318:	0800734b 	.word	0x0800734b
 800731c:	0800734b 	.word	0x0800734b
 8007320:	08007343 	.word	0x08007343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007324:	f7fd fb58 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8007328:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800732a:	e014      	b.n	8007356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800732c:	f7fd fb6a 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8007330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007332:	e010      	b.n	8007356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007334:	4b4e      	ldr	r3, [pc, #312]	; (8007470 <UART_SetConfig+0x5c0>)
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007338:	e00d      	b.n	8007356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800733a:	f7fd fadf 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 800733e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007340:	e009      	b.n	8007356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007348:	e005      	b.n	8007356 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8090 	beq.w	800747e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	4a44      	ldr	r2, [pc, #272]	; (8007474 <UART_SetConfig+0x5c4>)
 8007364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007368:	461a      	mov	r2, r3
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007370:	005a      	lsls	r2, r3, #1
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	441a      	add	r2, r3
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	2b0f      	cmp	r3, #15
 8007388:	d916      	bls.n	80073b8 <UART_SetConfig+0x508>
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007390:	d212      	bcs.n	80073b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f023 030f 	bic.w	r3, r3, #15
 800739a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	085b      	lsrs	r3, r3, #1
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	8bfb      	ldrh	r3, [r7, #30]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	8bfa      	ldrh	r2, [r7, #30]
 80073b4:	60da      	str	r2, [r3, #12]
 80073b6:	e062      	b.n	800747e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073be:	e05e      	b.n	800747e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d828      	bhi.n	800741a <UART_SetConfig+0x56a>
 80073c8:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <UART_SetConfig+0x520>)
 80073ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ce:	bf00      	nop
 80073d0:	080073f5 	.word	0x080073f5
 80073d4:	080073fd 	.word	0x080073fd
 80073d8:	08007405 	.word	0x08007405
 80073dc:	0800741b 	.word	0x0800741b
 80073e0:	0800740b 	.word	0x0800740b
 80073e4:	0800741b 	.word	0x0800741b
 80073e8:	0800741b 	.word	0x0800741b
 80073ec:	0800741b 	.word	0x0800741b
 80073f0:	08007413 	.word	0x08007413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f4:	f7fd faf0 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80073f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073fa:	e014      	b.n	8007426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073fc:	f7fd fb02 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8007400:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007402:	e010      	b.n	8007426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007404:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <UART_SetConfig+0x5c0>)
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007408:	e00d      	b.n	8007426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800740a:	f7fd fa77 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 800740e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007410:	e009      	b.n	8007426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007418:	e005      	b.n	8007426 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007424:	bf00      	nop
    }

    if (pclk != 0U)
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	d028      	beq.n	800747e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	4a10      	ldr	r2, [pc, #64]	; (8007474 <UART_SetConfig+0x5c4>)
 8007432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007436:	461a      	mov	r2, r3
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	fbb3 f2f2 	udiv	r2, r3, r2
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	085b      	lsrs	r3, r3, #1
 8007444:	441a      	add	r2, r3
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	fbb2 f3f3 	udiv	r3, r2, r3
 800744e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	2b0f      	cmp	r3, #15
 8007454:	d910      	bls.n	8007478 <UART_SetConfig+0x5c8>
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745c:	d20c      	bcs.n	8007478 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	b29a      	uxth	r2, r3
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60da      	str	r2, [r3, #12]
 8007468:	e009      	b.n	800747e <UART_SetConfig+0x5ce>
 800746a:	bf00      	nop
 800746c:	40008000 	.word	0x40008000
 8007470:	00f42400 	.word	0x00f42400
 8007474:	08007b74 	.word	0x08007b74
      }
      else
      {
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2201      	movs	r2, #1
 8007482:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2201      	movs	r2, #1
 800748a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2200      	movs	r2, #0
 8007492:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2200      	movs	r2, #0
 8007498:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800749a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3730      	adds	r7, #48	; 0x30
 80074a2:	46bd      	mov	sp, r7
 80074a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	f003 0304 	and.w	r3, r3, #4
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00a      	beq.n	800755a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01a      	beq.n	80075be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a6:	d10a      	bne.n	80075be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	605a      	str	r2, [r3, #4]
  }
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b098      	sub	sp, #96	; 0x60
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075fc:	f7fa fd94 	bl	8002128 <HAL_GetTick>
 8007600:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b08      	cmp	r3, #8
 800760e:	d12f      	bne.n	8007670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007618:	2200      	movs	r2, #0
 800761a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f88e 	bl	8007740 <UART_WaitOnFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d022      	beq.n	8007670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800763e:	653b      	str	r3, [r7, #80]	; 0x50
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007648:	647b      	str	r3, [r7, #68]	; 0x44
 800764a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800764e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e6      	bne.n	800762a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e063      	b.n	8007738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b04      	cmp	r3, #4
 800767c:	d149      	bne.n	8007712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007686:	2200      	movs	r2, #0
 8007688:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f857 	bl	8007740 <UART_WaitOnFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d03c      	beq.n	8007712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	623b      	str	r3, [r7, #32]
   return(result);
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b6:	633b      	str	r3, [r7, #48]	; 0x30
 80076b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e6      	bne.n	8007698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ea:	61fa      	str	r2, [r7, #28]
 80076ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	69b9      	ldr	r1, [r7, #24]
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	617b      	str	r3, [r7, #20]
   return(result);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e5      	bne.n	80076ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e012      	b.n	8007738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3758      	adds	r7, #88	; 0x58
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	4613      	mov	r3, r2
 800774e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007750:	e04f      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d04b      	beq.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775a:	f7fa fce5 	bl	8002128 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	429a      	cmp	r2, r3
 8007768:	d302      	bcc.n	8007770 <UART_WaitOnFlagUntilTimeout+0x30>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e04e      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0304 	and.w	r3, r3, #4
 800777e:	2b00      	cmp	r3, #0
 8007780:	d037      	beq.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b80      	cmp	r3, #128	; 0x80
 8007786:	d034      	beq.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d031      	beq.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b08      	cmp	r3, #8
 800779a:	d110      	bne.n	80077be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2208      	movs	r2, #8
 80077a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f838 	bl	800781a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2208      	movs	r2, #8
 80077ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e029      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077cc:	d111      	bne.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f81e 	bl	800781a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e00f      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69da      	ldr	r2, [r3, #28]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4013      	ands	r3, r2
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	bf0c      	ite	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	2300      	movne	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	429a      	cmp	r2, r3
 800780e:	d0a0      	beq.n	8007752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800781a:	b480      	push	{r7}
 800781c:	b095      	sub	sp, #84	; 0x54
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007840:	643b      	str	r3, [r7, #64]	; 0x40
 8007842:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e6      	bne.n	8007822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	61fb      	str	r3, [r7, #28]
   return(result);
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3308      	adds	r3, #8
 8007876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800787e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e3      	bne.n	8007854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d118      	bne.n	80078c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f023 0310 	bic.w	r3, r3, #16
 80078a8:	647b      	str	r3, [r7, #68]	; 0x44
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b2:	61bb      	str	r3, [r7, #24]
 80078b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	6979      	ldr	r1, [r7, #20]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	613b      	str	r3, [r7, #16]
   return(result);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e6      	bne.n	8007894 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078da:	bf00      	nop
 80078dc:	3754      	adds	r7, #84	; 0x54
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b085      	sub	sp, #20
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_UARTEx_DisableFifoMode+0x16>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e027      	b.n	800794c <HAL_UARTEx_DisableFifoMode+0x66>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2224      	movs	r2, #36	; 0x24
 8007908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0201 	bic.w	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800792a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2220      	movs	r2, #32
 800793e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800796c:	2302      	movs	r3, #2
 800796e:	e02d      	b.n	80079cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2224      	movs	r2, #36	; 0x24
 800797c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0201 	bic.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f84f 	bl	8007a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e02d      	b.n	8007a48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2224      	movs	r2, #36	; 0x24
 80079f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f811 	bl	8007a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d108      	bne.n	8007a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a70:	e031      	b.n	8007ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a72:	2308      	movs	r3, #8
 8007a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a76:	2308      	movs	r3, #8
 8007a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	0e5b      	lsrs	r3, r3, #25
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	0f5b      	lsrs	r3, r3, #29
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	7b3a      	ldrb	r2, [r7, #12]
 8007a9e:	4911      	ldr	r1, [pc, #68]	; (8007ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8007aa0:	5c8a      	ldrb	r2, [r1, r2]
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007aa6:	7b3a      	ldrb	r2, [r7, #12]
 8007aa8:	490f      	ldr	r1, [pc, #60]	; (8007ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8007aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	7b7a      	ldrb	r2, [r7, #13]
 8007abc:	4909      	ldr	r1, [pc, #36]	; (8007ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8007abe:	5c8a      	ldrb	r2, [r1, r2]
 8007ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ac4:	7b7a      	ldrb	r2, [r7, #13]
 8007ac6:	4908      	ldr	r1, [pc, #32]	; (8007ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	08007b8c 	.word	0x08007b8c
 8007ae8:	08007b94 	.word	0x08007b94

08007aec <memset>:
 8007aec:	4402      	add	r2, r0
 8007aee:	4603      	mov	r3, r0
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d100      	bne.n	8007af6 <memset+0xa>
 8007af4:	4770      	bx	lr
 8007af6:	f803 1b01 	strb.w	r1, [r3], #1
 8007afa:	e7f9      	b.n	8007af0 <memset+0x4>

08007afc <__libc_init_array>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4d0d      	ldr	r5, [pc, #52]	; (8007b34 <__libc_init_array+0x38>)
 8007b00:	4c0d      	ldr	r4, [pc, #52]	; (8007b38 <__libc_init_array+0x3c>)
 8007b02:	1b64      	subs	r4, r4, r5
 8007b04:	10a4      	asrs	r4, r4, #2
 8007b06:	2600      	movs	r6, #0
 8007b08:	42a6      	cmp	r6, r4
 8007b0a:	d109      	bne.n	8007b20 <__libc_init_array+0x24>
 8007b0c:	4d0b      	ldr	r5, [pc, #44]	; (8007b3c <__libc_init_array+0x40>)
 8007b0e:	4c0c      	ldr	r4, [pc, #48]	; (8007b40 <__libc_init_array+0x44>)
 8007b10:	f000 f818 	bl	8007b44 <_init>
 8007b14:	1b64      	subs	r4, r4, r5
 8007b16:	10a4      	asrs	r4, r4, #2
 8007b18:	2600      	movs	r6, #0
 8007b1a:	42a6      	cmp	r6, r4
 8007b1c:	d105      	bne.n	8007b2a <__libc_init_array+0x2e>
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b24:	4798      	blx	r3
 8007b26:	3601      	adds	r6, #1
 8007b28:	e7ee      	b.n	8007b08 <__libc_init_array+0xc>
 8007b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2e:	4798      	blx	r3
 8007b30:	3601      	adds	r6, #1
 8007b32:	e7f2      	b.n	8007b1a <__libc_init_array+0x1e>
 8007b34:	08007ba4 	.word	0x08007ba4
 8007b38:	08007ba4 	.word	0x08007ba4
 8007b3c:	08007ba4 	.word	0x08007ba4
 8007b40:	08007ba8 	.word	0x08007ba8

08007b44 <_init>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	bf00      	nop
 8007b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4a:	bc08      	pop	{r3}
 8007b4c:	469e      	mov	lr, r3
 8007b4e:	4770      	bx	lr

08007b50 <_fini>:
 8007b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b52:	bf00      	nop
 8007b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b56:	bc08      	pop	{r3}
 8007b58:	469e      	mov	lr, r3
 8007b5a:	4770      	bx	lr
