
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c68  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e80  08008e80  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008e80  08008e80  00009e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e88  08008e88  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e88  08008e88  00009e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e8c  08008e8c  00009e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008e90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000010  08008ea0  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  08008ea0  0000a790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eca3  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec9  00000000  00000000  00028ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  0002cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001384  00000000  00000000  0002e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c9b  00000000  00000000  0002f84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002161c  00000000  00000000  000594e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011578a  00000000  00000000  0007ab03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019028d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b78  00000000  00000000  001902d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00196e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008e28 	.word	0x08008e28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008e28 	.word	0x08008e28

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <vBatterySystemInit>:
uint32_t *pAdcValue = &fAdcValue;
float fTempValue;
unsigned int adcValues[2];
extern uint32_t pLineSensorsReadings[5];

void vBatterySystemInit(float *pBatteryCharge){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(&BATTERY_AD, ADC_SINGLE_ENDED);
 8000d8c:	217f      	movs	r1, #127	@ 0x7f
 8000d8e:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <vBatterySystemInit+0x18>)
 8000d90:	f003 f9da 	bl	8004148 <HAL_ADCEx_Calibration_Start>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000a0 	.word	0x200000a0

08000da0 <vBatterySystemComputeMeasurement>:

void vBatterySystemComputeMeasurement(){
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
	//fAdcValue = HAL_ADC_GetValue(&BATTERY_AD);

	// Aguardar a conversão do primeiro canal (IN3)
		adcValues[1] = pLineSensorsReadings[1] >> 16;
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <vBatterySystemComputeMeasurement+0x24>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	0c1b      	lsrs	r3, r3, #16
 8000daa:	4a07      	ldr	r2, [pc, #28]	@ (8000dc8 <vBatterySystemComputeMeasurement+0x28>)
 8000dac:	6053      	str	r3, [r2, #4]
		adcValues[0] = pLineSensorsReadings[1] & 0x0000FFFF;
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <vBatterySystemComputeMeasurement+0x24>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <vBatterySystemComputeMeasurement+0x28>)
 8000db6:	6013      	str	r3, [r2, #0]

}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	2000049c 	.word	0x2000049c
 8000dc8:	2000002c 	.word	0x2000002c

08000dcc <vLineSensorSystemInit>:
#define IR5_AD hadc5

extern uint32_t uiAdcValue;
// adcValues[0] = pLineSensorsReadings[1] & 0x0000FFFF;

void vLineSensorSystemInit(uint32_t *pLineSensorsReadings){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(&IR1_AD, ADC_SINGLE_ENDED);
 8000dd4:	217f      	movs	r1, #127	@ 0x7f
 8000dd6:	481c      	ldr	r0, [pc, #112]	@ (8000e48 <vLineSensorSystemInit+0x7c>)
 8000dd8:	f003 f9b6 	bl	8004148 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR1_AD, &pLineSensorsReadings[0] , 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4819      	ldr	r0, [pc, #100]	@ (8000e48 <vLineSensorSystemInit+0x7c>)
 8000de2:	f002 faa3 	bl	800332c <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR2_AD, ADC_SINGLE_ENDED);
 8000de6:	217f      	movs	r1, #127	@ 0x7f
 8000de8:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <vLineSensorSystemInit+0x80>)
 8000dea:	f003 f9ad 	bl	8004148 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR2_AD, &pLineSensorsReadings[1] , 2);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2202      	movs	r2, #2
 8000df4:	4619      	mov	r1, r3
 8000df6:	4815      	ldr	r0, [pc, #84]	@ (8000e4c <vLineSensorSystemInit+0x80>)
 8000df8:	f002 fa98 	bl	800332c <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR3_AD, ADC_SINGLE_ENDED);
 8000dfc:	217f      	movs	r1, #127	@ 0x7f
 8000dfe:	4814      	ldr	r0, [pc, #80]	@ (8000e50 <vLineSensorSystemInit+0x84>)
 8000e00:	f003 f9a2 	bl	8004148 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR3_AD, &pLineSensorsReadings[2] , 1);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3308      	adds	r3, #8
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4810      	ldr	r0, [pc, #64]	@ (8000e50 <vLineSensorSystemInit+0x84>)
 8000e0e:	f002 fa8d 	bl	800332c <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR4_AD, ADC_SINGLE_ENDED);
 8000e12:	217f      	movs	r1, #127	@ 0x7f
 8000e14:	480f      	ldr	r0, [pc, #60]	@ (8000e54 <vLineSensorSystemInit+0x88>)
 8000e16:	f003 f997 	bl	8004148 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR4_AD, &pLineSensorsReadings[3] , 1);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	330c      	adds	r3, #12
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4619      	mov	r1, r3
 8000e22:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <vLineSensorSystemInit+0x88>)
 8000e24:	f002 fa82 	bl	800332c <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR5_AD, ADC_SINGLE_ENDED);
 8000e28:	217f      	movs	r1, #127	@ 0x7f
 8000e2a:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <vLineSensorSystemInit+0x8c>)
 8000e2c:	f003 f98c 	bl	8004148 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR5_AD, &pLineSensorsReadings[4] , 1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3310      	adds	r3, #16
 8000e34:	2201      	movs	r2, #1
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <vLineSensorSystemInit+0x8c>)
 8000e3a:	f002 fa77 	bl	800332c <HAL_ADC_Start_DMA>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000034 	.word	0x20000034
 8000e4c:	200000a0 	.word	0x200000a0
 8000e50:	2000010c 	.word	0x2000010c
 8000e54:	20000178 	.word	0x20000178
 8000e58:	200001e4 	.word	0x200001e4

08000e5c <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8000e60:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <vPowerTrainSystemInit+0x20>)
 8000e62:	f005 f9d5 	bl	8006210 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 8000e66:	2100      	movs	r1, #0
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <vPowerTrainSystemInit+0x20>)
 8000e6a:	f005 fb11 	bl	8006490 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <vPowerTrainSystemInit+0x20>)
 8000e72:	f005 fb0d 	bl	8006490 <HAL_TIM_PWM_Start>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200004bc 	.word	0x200004bc

08000e80 <vPowerTrainSystemSetMotorDirection>:
void vPowerTrainSystemSetMotorDirection(Motor xMotor, MotorSpin xDirection){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
	switch (xMotor){
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <vPowerTrainSystemSetMotorDirection+0x1c>
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d01f      	beq.n	8000eda <vPowerTrainSystemSetMotorDirection+0x5a>
			} if(xDirection == COUNTER_CLOCKWISE){
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
			} break;
	}
}
 8000e9a:	e040      	b.n	8000f1e <vPowerTrainSystemSetMotorDirection+0x9e>
			if(xDirection == CLOCKWISE){
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10b      	bne.n	8000eba <vPowerTrainSystemSetMotorDirection+0x3a>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea8:	481f      	ldr	r0, [pc, #124]	@ (8000f28 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000eaa:	f003 ffbb 	bl	8004e24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb4:	481c      	ldr	r0, [pc, #112]	@ (8000f28 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000eb6:	f003 ffb5 	bl	8004e24 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d12b      	bne.n	8000f18 <vPowerTrainSystemSetMotorDirection+0x98>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN1_GPIO_Port,LEFT_MOTOR_DIR_IN1_Pin,GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ec6:	4818      	ldr	r0, [pc, #96]	@ (8000f28 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000ec8:	f003 ffac 	bl	8004e24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEFT_MOTOR_DIR_IN2_GPIO_Port,LEFT_MOTOR_DIR_IN2_Pin,GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed2:	4815      	ldr	r0, [pc, #84]	@ (8000f28 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000ed4:	f003 ffa6 	bl	8004e24 <HAL_GPIO_WritePin>
			} break;
 8000ed8:	e01e      	b.n	8000f18 <vPowerTrainSystemSetMotorDirection+0x98>
			if(xDirection == CLOCKWISE){
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10b      	bne.n	8000ef8 <vPowerTrainSystemSetMotorDirection+0x78>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	4810      	ldr	r0, [pc, #64]	@ (8000f28 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000ee6:	f003 ff9d 	bl	8004e24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f003 ff96 	bl	8004e24 <HAL_GPIO_WritePin>
			} if(xDirection == COUNTER_CLOCKWISE){
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10e      	bne.n	8000f1c <vPowerTrainSystemSetMotorDirection+0x9c>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN3_GPIO_Port,RIGHT_MOTOR_DIR_IN3_Pin,GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <vPowerTrainSystemSetMotorDirection+0xa8>)
 8000f04:	f003 ff8e 	bl	8004e24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_IN4_GPIO_Port,RIGHT_MOTOR_DIR_IN4_Pin,GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f12:	f003 ff87 	bl	8004e24 <HAL_GPIO_WritePin>
			} break;
 8000f16:	e001      	b.n	8000f1c <vPowerTrainSystemSetMotorDirection+0x9c>
			} break;
 8000f18:	bf00      	nop
 8000f1a:	e000      	b.n	8000f1e <vPowerTrainSystemSetMotorDirection+0x9e>
			} break;
 8000f1c:	bf00      	nop
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	48000400 	.word	0x48000400

08000f2c <vPowerTrainSystemSetMotorSpeed>:

void vPowerTrainSystemSetMotorSpeed(Motor xMotor,double fSpeed){
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	ed87 0b00 	vstr	d0, [r7]
 8000f38:	73fb      	strb	r3, [r7, #15]
	switch (xMotor){
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <vPowerTrainSystemSetMotorSpeed+0x1a>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d009      	beq.n	8000f58 <vPowerTrainSystemSetMotorSpeed+0x2c>

		case RIGHT_MOTOR:
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
			break;
	}
}
 8000f44:	e011      	b.n	8000f6a <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_LEFT_CHANNEL,fSpeed);
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000f48:	681c      	ldr	r4, [r3, #0]
 8000f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f4e:	f7ff fd31 	bl	80009b4 <__aeabi_d2uiz>
 8000f52:	4603      	mov	r3, r0
 8000f54:	6363      	str	r3, [r4, #52]	@ 0x34
			break;
 8000f56:	e008      	b.n	8000f6a <vPowerTrainSystemSetMotorSpeed+0x3e>
			__HAL_TIM_SET_COMPARE(&MOTOR_TIM,MOTOR_RIGHT_CHANNEL,fSpeed);
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <vPowerTrainSystemSetMotorSpeed+0x48>)
 8000f5a:	681c      	ldr	r4, [r3, #0]
 8000f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f60:	f7ff fd28 	bl	80009b4 <__aeabi_d2uiz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	63a3      	str	r3, [r4, #56]	@ 0x38
			break;
 8000f68:	bf00      	nop
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200004bc 	.word	0x200004bc

08000f78 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	@ 0x30
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 ff1d 	bl	8008dd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f96:	4b32      	ldr	r3, [pc, #200]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000f98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000f9e:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fa0:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000fa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	4b2c      	ldr	r3, [pc, #176]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fb8:	4b29      	ldr	r3, [pc, #164]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fbe:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fde:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001000:	4817      	ldr	r0, [pc, #92]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8001002:	f001 ffd7 	bl	8002fb4 <HAL_ADC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800100c:	f000 ffb0 	bl	8001f70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4811      	ldr	r0, [pc, #68]	@ (8001060 <MX_ADC1_Init+0xe8>)
 800101c:	f003 f8f6 	bl	800420c <HAL_ADCEx_MultiModeConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001026:	f000 ffa3 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_ADC1_Init+0xec>)
 800102c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800102e:	2306      	movs	r3, #6
 8001030:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001032:	2305      	movs	r3, #5
 8001034:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001036:	237f      	movs	r3, #127	@ 0x7f
 8001038:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800103a:	2304      	movs	r3, #4
 800103c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	@ (8001060 <MX_ADC1_Init+0xe8>)
 8001048:	f002 fa62 	bl	8003510 <HAL_ADC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001052:	f000 ff8d 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	@ 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000034 	.word	0x20000034
 8001064:	04300002 	.word	0x04300002

08001068 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2220      	movs	r2, #32
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f007 feab 	bl	8008dd0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800107a:	4b32      	ldr	r3, [pc, #200]	@ (8001144 <MX_ADC2_Init+0xdc>)
 800107c:	4a32      	ldr	r2, [pc, #200]	@ (8001148 <MX_ADC2_Init+0xe0>)
 800107e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001080:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <MX_ADC2_Init+0xdc>)
 8001082:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001086:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <MX_ADC2_Init+0xdc>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108e:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <MX_ADC2_Init+0xdc>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001094:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <MX_ADC2_Init+0xdc>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800109a:	4b2a      	ldr	r3, [pc, #168]	@ (8001144 <MX_ADC2_Init+0xdc>)
 800109c:	2201      	movs	r2, #1
 800109e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010a6:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80010ac:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80010b2:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010e2:	4818      	ldr	r0, [pc, #96]	@ (8001144 <MX_ADC2_Init+0xdc>)
 80010e4:	f001 ff66 	bl	8002fb4 <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80010ee:	f000 ff3f 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <MX_ADC2_Init+0xe4>)
 80010f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2306      	movs	r3, #6
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010fa:	2305      	movs	r3, #5
 80010fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fe:	237f      	movs	r3, #127	@ 0x7f
 8001100:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001102:	2304      	movs	r3, #4
 8001104:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_ADC2_Init+0xdc>)
 8001110:	f002 f9fe 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800111a:	f000 ff29 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <MX_ADC2_Init+0xe8>)
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001122:	230c      	movs	r3, #12
 8001124:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_ADC2_Init+0xdc>)
 800112c:	f002 f9f0 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8001136:	f000 ff1b 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000a0 	.word	0x200000a0
 8001148:	50000100 	.word	0x50000100
 800114c:	0c900008 	.word	0x0c900008
 8001150:	10c00010 	.word	0x10c00010

08001154 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	@ 0x30
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800115a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2220      	movs	r2, #32
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f007 fe2f 	bl	8008dd0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001172:	4b31      	ldr	r3, [pc, #196]	@ (8001238 <MX_ADC3_Init+0xe4>)
 8001174:	4a31      	ldr	r2, [pc, #196]	@ (800123c <MX_ADC3_Init+0xe8>)
 8001176:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001178:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <MX_ADC3_Init+0xe4>)
 800117a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800117e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001180:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <MX_ADC3_Init+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001186:	4b2c      	ldr	r3, [pc, #176]	@ (8001238 <MX_ADC3_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800118c:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <MX_ADC3_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001192:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <MX_ADC3_Init+0xe4>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001198:	4b27      	ldr	r3, [pc, #156]	@ (8001238 <MX_ADC3_Init+0xe4>)
 800119a:	2204      	movs	r2, #4
 800119c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800119e:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011aa:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011b0:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011da:	4817      	ldr	r0, [pc, #92]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011dc:	f001 feea 	bl	8002fb4 <HAL_ADC_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011e6:	f000 fec3 	bl	8001f70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4810      	ldr	r0, [pc, #64]	@ (8001238 <MX_ADC3_Init+0xe4>)
 80011f6:	f003 f809 	bl	800420c <HAL_ADCEx_MultiModeConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001200:	f000 feb6 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001204:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_ADC3_Init+0xec>)
 8001206:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001208:	2306      	movs	r3, #6
 800120a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800120c:	2305      	movs	r3, #5
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001210:	237f      	movs	r3, #127	@ 0x7f
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001214:	2304      	movs	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_ADC3_Init+0xe4>)
 8001222:	f002 f975 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800122c:	f000 fea0 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3730      	adds	r7, #48	@ 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000010c 	.word	0x2000010c
 800123c:	50000400 	.word	0x50000400
 8001240:	14f00020 	.word	0x14f00020

08001244 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2220      	movs	r2, #32
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fdbd 	bl	8008dd0 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001256:	4b2b      	ldr	r3, [pc, #172]	@ (8001304 <MX_ADC4_Init+0xc0>)
 8001258:	4a2b      	ldr	r2, [pc, #172]	@ (8001308 <MX_ADC4_Init+0xc4>)
 800125a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800125c:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <MX_ADC4_Init+0xc0>)
 800125e:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001262:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001264:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <MX_ADC4_Init+0xc0>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126a:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <MX_ADC4_Init+0xc0>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <MX_ADC4_Init+0xc0>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001276:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <MX_ADC4_Init+0xc0>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127c:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <MX_ADC4_Init+0xc0>)
 800127e:	2204      	movs	r2, #4
 8001280:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <MX_ADC4_Init+0xc0>)
 8001284:	2200      	movs	r2, #0
 8001286:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001288:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <MX_ADC4_Init+0xc0>)
 800128a:	2201      	movs	r2, #1
 800128c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <MX_ADC4_Init+0xc0>)
 8001290:	2201      	movs	r2, #1
 8001292:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <MX_ADC4_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <MX_ADC4_Init+0xc0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_ADC4_Init+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_ADC4_Init+0xc0>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_ADC4_Init+0xc0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <MX_ADC4_Init+0xc0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80012be:	4811      	ldr	r0, [pc, #68]	@ (8001304 <MX_ADC4_Init+0xc0>)
 80012c0:	f001 fe78 	bl	8002fb4 <HAL_ADC_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80012ca:	f000 fe51 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_ADC4_Init+0xc8>)
 80012d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d2:	2306      	movs	r3, #6
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80012d6:	2305      	movs	r3, #5
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012da:	237f      	movs	r3, #127	@ 0x7f
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012de:	2304      	movs	r3, #4
 80012e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <MX_ADC4_Init+0xc0>)
 80012ec:	f002 f910 	bl	8003510 <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80012f6:	f000 fe3b 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000178 	.word	0x20000178
 8001308:	50000500 	.word	0x50000500
 800130c:	14f00020 	.word	0x14f00020

08001310 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	463b      	mov	r3, r7
 8001318:	2220      	movs	r2, #32
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f007 fd57 	bl	8008dd0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001322:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001324:	4a2b      	ldr	r2, [pc, #172]	@ (80013d4 <MX_ADC5_Init+0xc4>)
 8001326:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001328:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 800132a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800132e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001330:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001336:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800133c:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 800134a:	2204      	movs	r2, #4
 800134c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001350:	2200      	movs	r2, #0
 8001352:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001354:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001356:	2201      	movs	r2, #1
 8001358:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 800135c:	2201      	movs	r2, #1
 800135e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001374:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 800137e:	2200      	movs	r2, #0
 8001380:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800138a:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 800138c:	f001 fe12 	bl	8002fb4 <HAL_ADC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001396:	f000 fdeb 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_ADC5_Init+0xc8>)
 800139c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139e:	2306      	movs	r3, #6
 80013a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80013a2:	2305      	movs	r3, #5
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a6:	237f      	movs	r3, #127	@ 0x7f
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013aa:	2304      	movs	r3, #4
 80013ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <MX_ADC5_Init+0xc0>)
 80013b8:	f002 f8aa 	bl	8003510 <HAL_ADC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80013c2:	f000 fdd5 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001e4 	.word	0x200001e4
 80013d4:	50000600 	.word	0x50000600
 80013d8:	08600004 	.word	0x08600004

080013dc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0a6      	sub	sp, #152	@ 0x98
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f8:	2254      	movs	r2, #84	@ 0x54
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f007 fce7 	bl	8008dd0 <memset>
  if(adcHandle->Instance==ADC1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800140a:	d16c      	bne.n	80014e6 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800140c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001412:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001416:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001418:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fc51 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001428:	f000 fda2 	bl	8001f70 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800142c:	4ba0      	ldr	r3, [pc, #640]	@ (80016b0 <HAL_ADC_MspInit+0x2d4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a9f      	ldr	r2, [pc, #636]	@ (80016b0 <HAL_ADC_MspInit+0x2d4>)
 8001434:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001436:	4b9e      	ldr	r3, [pc, #632]	@ (80016b0 <HAL_ADC_MspInit+0x2d4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10b      	bne.n	8001456 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800143e:	4b9d      	ldr	r3, [pc, #628]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	4a9c      	ldr	r2, [pc, #624]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001444:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144a:	4b9a      	ldr	r3, [pc, #616]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b97      	ldr	r3, [pc, #604]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a96      	ldr	r2, [pc, #600]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b94      	ldr	r3, [pc, #592]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800146c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148a:	f003 fb49 	bl	8004b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800148e:	4b8a      	ldr	r3, [pc, #552]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 8001490:	4a8a      	ldr	r2, [pc, #552]	@ (80016bc <HAL_ADC_MspInit+0x2e0>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001494:	4b88      	ldr	r3, [pc, #544]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 8001496:	2205      	movs	r2, #5
 8001498:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149a:	4b87      	ldr	r3, [pc, #540]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a0:	4b85      	ldr	r3, [pc, #532]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a6:	4b84      	ldr	r3, [pc, #528]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014a8:	2280      	movs	r2, #128	@ 0x80
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ac:	4b82      	ldr	r3, [pc, #520]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b4:	4b80      	ldr	r3, [pc, #512]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014bc:	4b7e      	ldr	r3, [pc, #504]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014be:	2220      	movs	r2, #32
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	4b7d      	ldr	r3, [pc, #500]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c8:	487b      	ldr	r0, [pc, #492]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014ca:	f003 f8b7 	bl	800463c <HAL_DMA_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80014d4:	f000 fd4c 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a77      	ldr	r2, [pc, #476]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80014de:	4a76      	ldr	r2, [pc, #472]	@ (80016b8 <HAL_ADC_MspInit+0x2dc>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80014e4:	e1e0      	b.n	80018a8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a75      	ldr	r2, [pc, #468]	@ (80016c0 <HAL_ADC_MspInit+0x2e4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d16c      	bne.n	80015ca <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014f4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014f6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014fa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001500:	4618      	mov	r0, r3
 8001502:	f004 fbdf 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 800150c:	f000 fd30 	bl	8001f70 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001510:	4b67      	ldr	r3, [pc, #412]	@ (80016b0 <HAL_ADC_MspInit+0x2d4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a66      	ldr	r2, [pc, #408]	@ (80016b0 <HAL_ADC_MspInit+0x2d4>)
 8001518:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800151a:	4b65      	ldr	r3, [pc, #404]	@ (80016b0 <HAL_ADC_MspInit+0x2d4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10b      	bne.n	800153a <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001522:	4b64      	ldr	r3, [pc, #400]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a63      	ldr	r2, [pc, #396]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001528:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b61      	ldr	r3, [pc, #388]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b5e      	ldr	r3, [pc, #376]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a5d      	ldr	r2, [pc, #372]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b5b      	ldr	r3, [pc, #364]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	623b      	str	r3, [r7, #32]
 8001550:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8001552:	23c0      	movs	r3, #192	@ 0xc0
 8001554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156e:	f003 fad7 	bl	8004b20 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001572:	4b54      	ldr	r3, [pc, #336]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 8001574:	4a54      	ldr	r2, [pc, #336]	@ (80016c8 <HAL_ADC_MspInit+0x2ec>)
 8001576:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001578:	4b52      	ldr	r3, [pc, #328]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 800157a:	2224      	movs	r2, #36	@ 0x24
 800157c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157e:	4b51      	ldr	r3, [pc, #324]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001584:	4b4f      	ldr	r3, [pc, #316]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800158a:	4b4e      	ldr	r3, [pc, #312]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001590:	4b4c      	ldr	r3, [pc, #304]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 8001592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001596:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001598:	4b4a      	ldr	r3, [pc, #296]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 800159a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800159e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80015a0:	4b48      	ldr	r3, [pc, #288]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 80015a2:	2220      	movs	r2, #32
 80015a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80015a6:	4b47      	ldr	r3, [pc, #284]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80015ac:	4845      	ldr	r0, [pc, #276]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 80015ae:	f003 f845 	bl	800463c <HAL_DMA_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 80015b8:	f000 fcda 	bl	8001f70 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a41      	ldr	r2, [pc, #260]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 80015c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80015c2:	4a40      	ldr	r2, [pc, #256]	@ (80016c4 <HAL_ADC_MspInit+0x2e8>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80015c8:	e16e      	b.n	80018a8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a3f      	ldr	r2, [pc, #252]	@ (80016cc <HAL_ADC_MspInit+0x2f0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	f040 8085 	bne.w	80016e0 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fb6c 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 80015f2:	f000 fcbd 	bl	8001f70 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015f6:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <HAL_ADC_MspInit+0x2f4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a34      	ldr	r2, [pc, #208]	@ (80016d0 <HAL_ADC_MspInit+0x2f4>)
 80015fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001600:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <HAL_ADC_MspInit+0x2f4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d10b      	bne.n	8001620 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	4a29      	ldr	r2, [pc, #164]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 800160e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162c:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <HAL_ADC_MspInit+0x2d8>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8001638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800163c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001640:	2303      	movs	r3, #3
 8001642:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001650:	4619      	mov	r1, r3
 8001652:	4820      	ldr	r0, [pc, #128]	@ (80016d4 <HAL_ADC_MspInit+0x2f8>)
 8001654:	f003 fa64 	bl	8004b20 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 800165a:	4a20      	ldr	r2, [pc, #128]	@ (80016dc <HAL_ADC_MspInit+0x300>)
 800165c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 8001660:	2225      	movs	r2, #37	@ 0x25
 8001662:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 8001672:	2280      	movs	r2, #128	@ 0x80
 8001674:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 8001678:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800167c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 8001680:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001684:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001692:	4811      	ldr	r0, [pc, #68]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 8001694:	f002 ffd2 	bl	800463c <HAL_DMA_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 800169e:	f000 fc67 	bl	8001f70 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a0c      	ldr	r2, [pc, #48]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 80016a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80016a8:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_ADC_MspInit+0x2fc>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80016ae:	e0fb      	b.n	80018a8 <HAL_ADC_MspInit+0x4cc>
 80016b0:	20000430 	.word	0x20000430
 80016b4:	40021000 	.word	0x40021000
 80016b8:	20000250 	.word	0x20000250
 80016bc:	40020008 	.word	0x40020008
 80016c0:	50000100 	.word	0x50000100
 80016c4:	200002b0 	.word	0x200002b0
 80016c8:	4002001c 	.word	0x4002001c
 80016cc:	50000400 	.word	0x50000400
 80016d0:	20000434 	.word	0x20000434
 80016d4:	48000400 	.word	0x48000400
 80016d8:	20000310 	.word	0x20000310
 80016dc:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a72      	ldr	r2, [pc, #456]	@ (80018b0 <HAL_ADC_MspInit+0x4d4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d16c      	bne.n	80017c4 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80016ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80016f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80016f4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 fae2 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8001706:	f000 fc33 	bl	8001f70 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800170a:	4b6a      	ldr	r3, [pc, #424]	@ (80018b4 <HAL_ADC_MspInit+0x4d8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a68      	ldr	r2, [pc, #416]	@ (80018b4 <HAL_ADC_MspInit+0x4d8>)
 8001712:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001714:	4b67      	ldr	r3, [pc, #412]	@ (80018b4 <HAL_ADC_MspInit+0x4d8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d10b      	bne.n	8001734 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800171c:	4b66      	ldr	r3, [pc, #408]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001720:	4a65      	ldr	r2, [pc, #404]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001728:	4b63      	ldr	r3, [pc, #396]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	4b60      	ldr	r3, [pc, #384]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001738:	4a5f      	ldr	r2, [pc, #380]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001740:	4b5d      	ldr	r3, [pc, #372]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 800174c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001754:	2303      	movs	r3, #3
 8001756:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001764:	4619      	mov	r1, r3
 8001766:	4855      	ldr	r0, [pc, #340]	@ (80018bc <HAL_ADC_MspInit+0x4e0>)
 8001768:	f003 f9da 	bl	8004b20 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 800176c:	4b54      	ldr	r3, [pc, #336]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 800176e:	4a55      	ldr	r2, [pc, #340]	@ (80018c4 <HAL_ADC_MspInit+0x4e8>)
 8001770:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 8001774:	2226      	movs	r2, #38	@ 0x26
 8001776:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001778:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800177e:	4b50      	ldr	r3, [pc, #320]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001784:	4b4e      	ldr	r3, [pc, #312]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800178a:	4b4d      	ldr	r3, [pc, #308]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 800178c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001790:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001792:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 8001794:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001798:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800179a:	4b49      	ldr	r3, [pc, #292]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 800179c:	2220      	movs	r2, #32
 800179e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80017a0:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80017a6:	4846      	ldr	r0, [pc, #280]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 80017a8:	f002 ff48 	bl	800463c <HAL_DMA_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 80017b2:	f000 fbdd 	bl	8001f70 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a41      	ldr	r2, [pc, #260]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 80017ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80017bc:	4a40      	ldr	r2, [pc, #256]	@ (80018c0 <HAL_ADC_MspInit+0x4e4>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80017c2:	e071      	b.n	80018a8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a3f      	ldr	r2, [pc, #252]	@ (80018c8 <HAL_ADC_MspInit+0x4ec>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d16c      	bne.n	80018a8 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80017ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80017d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80017d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 fa70 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_ADC_MspInit+0x412>
      Error_Handler();
 80017ea:	f000 fbc1 	bl	8001f70 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80017ee:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <HAL_ADC_MspInit+0x4d8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a2f      	ldr	r2, [pc, #188]	@ (80018b4 <HAL_ADC_MspInit+0x4d8>)
 80017f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80017f8:	4b2e      	ldr	r3, [pc, #184]	@ (80018b4 <HAL_ADC_MspInit+0x4d8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10b      	bne.n	8001818 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001804:	4a2c      	ldr	r2, [pc, #176]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 8001806:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181c:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001824:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_ADC_MspInit+0x4dc>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8001830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001838:	2303      	movs	r3, #3
 800183a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001848:	4619      	mov	r1, r3
 800184a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184e:	f003 f967 	bl	8004b20 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 8001854:	4a1e      	ldr	r2, [pc, #120]	@ (80018d0 <HAL_ADC_MspInit+0x4f4>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 800185a:	2227      	movs	r2, #39	@ 0x27
 800185c:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 800186c:	2280      	movs	r2, #128	@ 0x80
 800186e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 8001872:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001876:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 800187a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187e:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 8001882:	2220      	movs	r2, #32
 8001884:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800188c:	480f      	ldr	r0, [pc, #60]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 800188e:	f002 fed5 	bl	800463c <HAL_DMA_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8001898:	f000 fb6a 	bl	8001f70 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0b      	ldr	r2, [pc, #44]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 80018a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_ADC_MspInit+0x4f0>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80018a8:	bf00      	nop
 80018aa:	3798      	adds	r7, #152	@ 0x98
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	50000500 	.word	0x50000500
 80018b4:	20000434 	.word	0x20000434
 80018b8:	40021000 	.word	0x40021000
 80018bc:	48000400 	.word	0x48000400
 80018c0:	20000370 	.word	0x20000370
 80018c4:	40020044 	.word	0x40020044
 80018c8:	50000600 	.word	0x50000600
 80018cc:	200003d0 	.word	0x200003d0
 80018d0:	40020058 	.word	0x40020058

080018d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <MX_DMA_Init+0x60>)
 80018dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018de:	4a15      	ldr	r2, [pc, #84]	@ (8001934 <MX_DMA_Init+0x60>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80018e6:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <MX_DMA_Init+0x60>)
 80018e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <MX_DMA_Init+0x60>)
 80018f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <MX_DMA_Init+0x60>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80018fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <MX_DMA_Init+0x60>)
 8001900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2010      	movs	r0, #16
 8001910:	f002 fe5f 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001914:	2010      	movs	r0, #16
 8001916:	f002 fe76 	bl	8004606 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2011      	movs	r0, #17
 8001920:	f002 fe57 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001924:	2011      	movs	r0, #17
 8001926:	f002 fe6e 	bl	8004606 <HAL_NVIC_EnableIRQ>

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <vEncoderSystemInit>:
static float* pRightMotorRPM;

static unsigned long int uiRightMotorPulseCounter, uiLeftMotorPulseCounter;


void vEncoderSystemInit(float *leftMotorCount, float *rightMotorCount) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]

	pLeftMotorRPM = leftMotorCount;
 8001942:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <vEncoderSystemInit+0x30>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6013      	str	r3, [r2, #0]
	pRightMotorRPM = rightMotorCount;
 8001948:	4a08      	ldr	r2, [pc, #32]	@ (800196c <vEncoderSystemInit+0x34>)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6013      	str	r3, [r2, #0]

	HAL_TIM_IC_Start_IT(&LEFT_ENCODER_TIM, ENCODER_CHANNEL);
 800194e:	2100      	movs	r1, #0
 8001950:	4807      	ldr	r0, [pc, #28]	@ (8001970 <vEncoderSystemInit+0x38>)
 8001952:	f004 ff11 	bl	8006778 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&RIGHT_ENCODER_TIM, ENCODER_CHANNEL);
 8001956:	2100      	movs	r1, #0
 8001958:	4806      	ldr	r0, [pc, #24]	@ (8001974 <vEncoderSystemInit+0x3c>)
 800195a:	f004 ff0d 	bl	8006778 <HAL_TIM_IC_Start_IT>


}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000438 	.word	0x20000438
 800196c:	2000043c 	.word	0x2000043c
 8001970:	200005a0 	.word	0x200005a0
 8001974:	200005ec 	.word	0x200005ec

08001978 <vEncoderSystemCounterUpdate>:
void vEncoderSystemCounterUpdate(TIM_HandleTypeDef *htim){
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM17) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0c      	ldr	r2, [pc, #48]	@ (80019b8 <vEncoderSystemCounterUpdate+0x40>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d105      	bne.n	8001996 <vEncoderSystemCounterUpdate+0x1e>

    	uiRightMotorPulseCounter++;
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <vEncoderSystemCounterUpdate+0x44>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <vEncoderSystemCounterUpdate+0x44>)
 8001992:	6013      	str	r3, [r2, #0]

    }else if (htim->Instance == TIM16) {

    	uiLeftMotorPulseCounter++;
    }
}
 8001994:	e009      	b.n	80019aa <vEncoderSystemCounterUpdate+0x32>
    }else if (htim->Instance == TIM16) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a09      	ldr	r2, [pc, #36]	@ (80019c0 <vEncoderSystemCounterUpdate+0x48>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d104      	bne.n	80019aa <vEncoderSystemCounterUpdate+0x32>
    	uiLeftMotorPulseCounter++;
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <vEncoderSystemCounterUpdate+0x4c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <vEncoderSystemCounterUpdate+0x4c>)
 80019a8:	6013      	str	r3, [r2, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40014800 	.word	0x40014800
 80019bc:	20000440 	.word	0x20000440
 80019c0:	40014400 	.word	0x40014400
 80019c4:	20000444 	.word	0x20000444

080019c8 <vEncoderSystemExecuteMeasurement>:

void vEncoderSystemExecuteMeasurement(){
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	    // Calcula o RPM
		*pRightMotorRPM = (uiRightMotorPulseCounter * 60.0) / (160.0 * uiTimeSample);
 80019cc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <vEncoderSystemExecuteMeasurement+0xb4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fd63 	bl	800049c <__aeabi_ui2d>
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <vEncoderSystemExecuteMeasurement+0xb8>)
 80019dc:	f7fe fdd8 	bl	8000590 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
 80019e8:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <vEncoderSystemExecuteMeasurement+0xbc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fd55 	bl	800049c <__aeabi_ui2d>
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <vEncoderSystemExecuteMeasurement+0xc0>)
 80019f8:	f7fe fdca 	bl	8000590 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7fe feee 	bl	80007e4 <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	491f      	ldr	r1, [pc, #124]	@ (8001a8c <vEncoderSystemExecuteMeasurement+0xc4>)
 8001a0e:	680c      	ldr	r4, [r1, #0]
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7fe ffee 	bl	80009f4 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	6023      	str	r3, [r4, #0]
	    *pLeftMotorRPM = (uiLeftMotorPulseCounter * 60.0) / (160.0 * uiTimeSample);
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <vEncoderSystemExecuteMeasurement+0xc8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd3b 	bl	800049c <__aeabi_ui2d>
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <vEncoderSystemExecuteMeasurement+0xb8>)
 8001a2c:	f7fe fdb0 	bl	8000590 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <vEncoderSystemExecuteMeasurement+0xbc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd2d 	bl	800049c <__aeabi_ui2d>
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <vEncoderSystemExecuteMeasurement+0xc0>)
 8001a48:	f7fe fda2 	bl	8000590 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe fec6 	bl	80007e4 <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	490d      	ldr	r1, [pc, #52]	@ (8001a94 <vEncoderSystemExecuteMeasurement+0xcc>)
 8001a5e:	680c      	ldr	r4, [r1, #0]
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7fe ffc6 	bl	80009f4 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	6023      	str	r3, [r4, #0]
	    // Resetar o contador para a próxima amostragem
	    uiRightMotorPulseCounter = 0;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <vEncoderSystemExecuteMeasurement+0xb4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
	    uiLeftMotorPulseCounter = 0;
 8001a72:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <vEncoderSystemExecuteMeasurement+0xc8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7c:	20000440 	.word	0x20000440
 8001a80:	404e0000 	.word	0x404e0000
 8001a84:	20000000 	.word	0x20000000
 8001a88:	40640000 	.word	0x40640000
 8001a8c:	2000043c 	.word	0x2000043c
 8001a90:	20000444 	.word	0x20000444
 8001a94:	20000438 	.word	0x20000438

08001a98 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	4b66      	ldr	r3, [pc, #408]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	4a65      	ldr	r2, [pc, #404]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aba:	4b63      	ldr	r3, [pc, #396]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac6:	4b60      	ldr	r3, [pc, #384]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	4a5f      	ldr	r2, [pc, #380]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001acc:	f043 0320 	orr.w	r3, r3, #32
 8001ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b5a      	ldr	r3, [pc, #360]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	4a59      	ldr	r2, [pc, #356]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aea:	4b57      	ldr	r3, [pc, #348]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b54      	ldr	r3, [pc, #336]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	4a53      	ldr	r2, [pc, #332]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b02:	4b51      	ldr	r3, [pc, #324]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a4d      	ldr	r2, [pc, #308]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c48 <MX_GPIO_Init+0x1b0>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b30:	f003 f978 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001b3a:	4844      	ldr	r0, [pc, #272]	@ (8001c4c <MX_GPIO_Init+0x1b4>)
 8001b3c:	f003 f972 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 8001b40:	f242 33a0 	movw	r3, #9120	@ 0x23a0
 8001b44:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	483e      	ldr	r0, [pc, #248]	@ (8001c50 <MX_GPIO_Init+0x1b8>)
 8001b58:	f002 ffe2 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 8001b5c:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b78:	f002 ffd2 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	482d      	ldr	r0, [pc, #180]	@ (8001c4c <MX_GPIO_Init+0x1b4>)
 8001b98:	f002 ffc2 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 8001b9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4824      	ldr	r0, [pc, #144]	@ (8001c4c <MX_GPIO_Init+0x1b4>)
 8001bba:	f002 ffb1 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 8001bbe:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481d      	ldr	r0, [pc, #116]	@ (8001c4c <MX_GPIO_Init+0x1b4>)
 8001bd8:	f002 ffa2 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 8001bdc:	2340      	movs	r3, #64	@ 0x40
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bec:	2302      	movs	r3, #2
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4816      	ldr	r0, [pc, #88]	@ (8001c50 <MX_GPIO_Init+0x1b8>)
 8001bf8:	f002 ff92 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4810      	ldr	r0, [pc, #64]	@ (8001c54 <MX_GPIO_Init+0x1bc>)
 8001c12:	f002 ff85 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8001c16:	2340      	movs	r3, #64	@ 0x40
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4808      	ldr	r0, [pc, #32]	@ (8001c4c <MX_GPIO_Init+0x1b4>)
 8001c2c:	f002 ff78 	bl	8004b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2028      	movs	r0, #40	@ 0x28
 8001c36:	f002 fccc 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c3a:	2028      	movs	r0, #40	@ 0x28
 8001c3c:	f002 fce3 	bl	8004606 <HAL_NVIC_EnableIRQ>

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	@ 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000800 	.word	0x48000800
 8001c54:	48000c00 	.word	0x48000c00

08001c58 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <MX_I2C2_Init+0x78>)
 8001c60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c64:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <MX_I2C2_Init+0x7c>)
 8001c66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c92:	480e      	ldr	r0, [pc, #56]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001c94:	f003 f901 	bl	8004e9a <HAL_I2C_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c9e:	f000 f967 	bl	8001f70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4809      	ldr	r0, [pc, #36]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001ca6:	f003 f993 	bl	8004fd0 <HAL_I2CEx_ConfigAnalogFilter>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cb0:	f000 f95e 	bl	8001f70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_I2C2_Init+0x74>)
 8001cb8:	f003 f9d5 	bl	8005066 <HAL_I2CEx_ConfigDigitalFilter>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cc2:	f000 f955 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000448 	.word	0x20000448
 8001cd0:	40005800 	.word	0x40005800
 8001cd4:	30a0a7fb 	.word	0x30a0a7fb

08001cd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0a0      	sub	sp, #128	@ 0x80
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf0:	f107 0318 	add.w	r3, r7, #24
 8001cf4:	2254      	movs	r2, #84	@ 0x54
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f007 f869 	bl	8008dd0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2d      	ldr	r2, [pc, #180]	@ (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d153      	bne.n	8001db0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d10:	f107 0318 	add.w	r3, r7, #24
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 ffd5 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d20:	f000 f926 	bl	8001f70 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d24:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d28:	4a24      	ldr	r2, [pc, #144]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d30:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d40:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 8001d54:	2310      	movs	r3, #16
 8001d56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d58:	2312      	movs	r3, #18
 8001d5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d64:	2304      	movs	r3, #4
 8001d66:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4814      	ldr	r0, [pc, #80]	@ (8001dc0 <HAL_I2C_MspInit+0xe8>)
 8001d70:	f002 fed6 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8001d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7a:	2312      	movs	r3, #18
 8001d7c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d86:	2304      	movs	r3, #4
 8001d88:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d94:	f002 fec4 	bl	8004b20 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001db0:	bf00      	nop
 8001db2:	3780      	adds	r7, #128	@ 0x80
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40005800 	.word	0x40005800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000800 	.word	0x48000800
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dcc:	f000 fe1b 	bl	8002a06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd0:	f000 f864 	bl	8001e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd4:	f7ff fe60 	bl	8001a98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd8:	f7ff fd7c 	bl	80018d4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001ddc:	f000 fcec 	bl	80027b8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001de0:	f7ff f8ca 	bl	8000f78 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001de4:	f7ff f940 	bl	8001068 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001de8:	f7ff f9b4 	bl	8001154 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001dec:	f000 f96e 	bl	80020cc <MX_TIM1_Init>
  MX_TIM16_Init();
 8001df0:	f000 fb0c 	bl	800240c <MX_TIM16_Init>
  MX_TIM4_Init();
 8001df4:	f000 fa26 	bl	8002244 <MX_TIM4_Init>
  MX_ADC4_Init();
 8001df8:	f7ff fa24 	bl	8001244 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001dfc:	f7ff fa88 	bl	8001310 <MX_ADC5_Init>
  MX_I2C2_Init();
 8001e00:	f7ff ff2a 	bl	8001c58 <MX_I2C2_Init>
  MX_TIM8_Init();
 8001e04:	f000 fa6e 	bl	80022e4 <MX_TIM8_Init>
  MX_TIM17_Init();
 8001e08:	f000 fb4a 	bl	80024a0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&INTERNAL_CLOCK);
 8001e0c:	481e      	ldr	r0, [pc, #120]	@ (8001e88 <main+0xc0>)
 8001e0e:	f004 fa6f 	bl	80062f0 <HAL_TIM_Base_Start_IT>
  vPowerTrainSystemInit();
 8001e12:	f7ff f823 	bl	8000e5c <vPowerTrainSystemInit>
  vLineSensorSystemInit(pLineSensorsReadings);
 8001e16:	481d      	ldr	r0, [pc, #116]	@ (8001e8c <main+0xc4>)
 8001e18:	f7fe ffd8 	bl	8000dcc <vLineSensorSystemInit>
  vBatterySystemInit(&BatteryCharge);
 8001e1c:	481c      	ldr	r0, [pc, #112]	@ (8001e90 <main+0xc8>)
 8001e1e:	f7fe ffb1 	bl	8000d84 <vBatterySystemInit>
  vEncoderSystemInit(&leftMotorCount, &rightMotorCount);
 8001e22:	491c      	ldr	r1, [pc, #112]	@ (8001e94 <main+0xcc>)
 8001e24:	481c      	ldr	r0, [pc, #112]	@ (8001e98 <main+0xd0>)
 8001e26:	f7ff fd87 	bl	8001938 <vEncoderSystemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff f827 	bl	8000e80 <vPowerTrainSystemSetMotorDirection>
	  vPowerTrainSystemSetMotorDirection(RIGHT_MOTOR,CLOCKWISE);
 8001e32:	2100      	movs	r1, #0
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff f823 	bl	8000e80 <vPowerTrainSystemSetMotorDirection>

	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 1000);
 8001e3a:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 8001e78 <main+0xb0>
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff f874 	bl	8000f2c <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR, 1000);
 8001e44:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 8001e78 <main+0xb0>
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff f86f 	bl	8000f2c <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(60000);
 8001e4e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001e52:	f000 fe49 	bl	8002ae8 <HAL_Delay>
	  vPowerTrainSystemSetMotorSpeed(LEFT_MOTOR, 0);
 8001e56:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001e80 <main+0xb8>
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff f866 	bl	8000f2c <vPowerTrainSystemSetMotorSpeed>
	  vPowerTrainSystemSetMotorSpeed(RIGHT_MOTOR , 0);
 8001e60:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8001e80 <main+0xb8>
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7ff f861 	bl	8000f2c <vPowerTrainSystemSetMotorSpeed>
	  HAL_Delay(10000);
 8001e6a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001e6e:	f000 fe3b 	bl	8002ae8 <HAL_Delay>
	  vPowerTrainSystemSetMotorDirection(LEFT_MOTOR, CLOCKWISE);
 8001e72:	bf00      	nop
 8001e74:	e7d9      	b.n	8001e2a <main+0x62>
 8001e76:	bf00      	nop
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	408f4000 	.word	0x408f4000
	...
 8001e88:	20000508 	.word	0x20000508
 8001e8c:	2000049c 	.word	0x2000049c
 8001e90:	200004b8 	.word	0x200004b8
 8001e94:	200004b4 	.word	0x200004b4
 8001e98:	200004b0 	.word	0x200004b0

08001e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b094      	sub	sp, #80	@ 0x50
 8001ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea2:	f107 0318 	add.w	r3, r7, #24
 8001ea6:	2238      	movs	r2, #56	@ 0x38
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f006 ff90 	bl	8008dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f003 f91e 	bl	8005100 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ece:	2340      	movs	r3, #64	@ 0x40
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001eda:	2304      	movs	r3, #4
 8001edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ede:	2355      	movs	r3, #85	@ 0x55
 8001ee0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eee:	f107 0318 	add.w	r3, r7, #24
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 f9b8 	bl	8005268 <HAL_RCC_OscConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001efe:	f000 f837 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f02:	230f      	movs	r3, #15
 8001f04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f06:	2303      	movs	r3, #3
 8001f08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fcb6 	bl	800588c <HAL_RCC_ClockConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f26:	f000 f823 	bl	8001f70 <Error_Handler>
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3750      	adds	r7, #80	@ 0x50
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	vEncoderSystemCounterUpdate(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fd1c 	bl	8001978 <vEncoderSystemCounterUpdate>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_TIM_PeriodElapsedCallback>:
// chama a funcao de calcular o rpm a cada 1 min
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d103      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x1a>
    	vEncoderSystemExecuteMeasurement();
 8001f5a:	f7ff fd35 	bl	80019c8 <vEncoderSystemExecuteMeasurement>
    	vBatterySystemComputeMeasurement();
 8001f5e:	f7fe ff1f 	bl	8000da0 <vBatterySystemComputeMeasurement>
    }
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40000800 	.word	0x40000800

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <Error_Handler+0x8>

08001f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f86:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fb2:	f003 f949 	bl	8005248 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <NMI_Handler+0x4>

08001fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <HardFault_Handler+0x4>

08001fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <MemManage_Handler+0x4>

08001fdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <BusFault_Handler+0x4>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <UsageFault_Handler+0x4>

08001fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201a:	f000 fd47 	bl	8002aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <DMA1_Channel6_IRQHandler+0x10>)
 800202a:	f002 fc2a 	bl	8004882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200006cc 	.word	0x200006cc

08002038 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <DMA1_Channel7_IRQHandler+0x10>)
 800203e:	f002 fc20 	bl	8004882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000072c 	.word	0x2000072c

0800204c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002050:	4803      	ldr	r0, [pc, #12]	@ (8002060 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002052:	f004 fce1 	bl	8006a18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002056:	4803      	ldr	r0, [pc, #12]	@ (8002064 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002058:	f004 fcde 	bl	8006a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200004bc 	.word	0x200004bc
 8002064:	200005a0 	.word	0x200005a0

08002068 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800206c:	4803      	ldr	r0, [pc, #12]	@ (800207c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800206e:	f004 fcd3 	bl	8006a18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002072:	4803      	ldr	r0, [pc, #12]	@ (8002080 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002074:	f004 fcd0 	bl	8006a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200004bc 	.word	0x200004bc
 8002080:	200005ec 	.word	0x200005ec

08002084 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <TIM4_IRQHandler+0x10>)
 800208a:	f004 fcc5 	bl	8006a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000508 	.word	0x20000508

08002098 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800209c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020a0:	f002 fed8 	bl	8004e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b09c      	sub	sp, #112	@ 0x70
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2234      	movs	r2, #52	@ 0x34
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f006 fe62 	bl	8008dd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800210c:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <MX_TIM1_Init+0x170>)
 800210e:	4a4c      	ldr	r2, [pc, #304]	@ (8002240 <MX_TIM1_Init+0x174>)
 8002110:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8002112:	4b4a      	ldr	r3, [pc, #296]	@ (800223c <MX_TIM1_Init+0x170>)
 8002114:	2210      	movs	r2, #16
 8002116:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b48      	ldr	r3, [pc, #288]	@ (800223c <MX_TIM1_Init+0x170>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <MX_TIM1_Init+0x170>)
 8002120:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002124:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b45      	ldr	r3, [pc, #276]	@ (800223c <MX_TIM1_Init+0x170>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800212c:	4b43      	ldr	r3, [pc, #268]	@ (800223c <MX_TIM1_Init+0x170>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b42      	ldr	r3, [pc, #264]	@ (800223c <MX_TIM1_Init+0x170>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002138:	4840      	ldr	r0, [pc, #256]	@ (800223c <MX_TIM1_Init+0x170>)
 800213a:	f004 f811 	bl	8006160 <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002144:	f7ff ff14 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800214c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002152:	4619      	mov	r1, r3
 8002154:	4839      	ldr	r0, [pc, #228]	@ (800223c <MX_TIM1_Init+0x170>)
 8002156:	f004 ff5f 	bl	8007018 <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002160:	f7ff ff06 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002164:	4835      	ldr	r0, [pc, #212]	@ (800223c <MX_TIM1_Init+0x170>)
 8002166:	f004 f93b 	bl	80063e0 <HAL_TIM_PWM_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002170:	f7ff fefe 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002180:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002184:	4619      	mov	r1, r3
 8002186:	482d      	ldr	r0, [pc, #180]	@ (800223c <MX_TIM1_Init+0x170>)
 8002188:	f005 fe44 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002192:	f7ff feed 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002196:	2360      	movs	r3, #96	@ 0x60
 8002198:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219e:	2300      	movs	r3, #0
 80021a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021a2:	2300      	movs	r3, #0
 80021a4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021b6:	2200      	movs	r2, #0
 80021b8:	4619      	mov	r1, r3
 80021ba:	4820      	ldr	r0, [pc, #128]	@ (800223c <MX_TIM1_Init+0x170>)
 80021bc:	f004 fe18 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80021c6:	f7ff fed3 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021ce:	2204      	movs	r2, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	481a      	ldr	r0, [pc, #104]	@ (800223c <MX_TIM1_Init+0x170>)
 80021d4:	f004 fe0c 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80021de:	f7ff fec7 	bl	8001f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800220c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002212:	2300      	movs	r3, #0
 8002214:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4807      	ldr	r0, [pc, #28]	@ (800223c <MX_TIM1_Init+0x170>)
 8002220:	f005 fe8e 	bl	8007f40 <HAL_TIMEx_ConfigBreakDeadTime>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800222a:	f7ff fea1 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800222e:	4803      	ldr	r0, [pc, #12]	@ (800223c <MX_TIM1_Init+0x170>)
 8002230:	f000 fa64 	bl	80026fc <HAL_TIM_MspPostInit>

}
 8002234:	bf00      	nop
 8002236:	3770      	adds	r7, #112	@ 0x70
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200004bc 	.word	0x200004bc
 8002240:	40012c00 	.word	0x40012c00

08002244 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224a:	f107 0310 	add.w	r3, r7, #16
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <MX_TIM4_Init+0x98>)
 8002264:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <MX_TIM4_Init+0x9c>)
 8002266:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2599;
 8002268:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <MX_TIM4_Init+0x98>)
 800226a:	f640 2227 	movw	r2, #2599	@ 0xa27
 800226e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_TIM4_Init+0x98>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65383;
 8002276:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <MX_TIM4_Init+0x98>)
 8002278:	f64f 7267 	movw	r2, #65383	@ 0xff67
 800227c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <MX_TIM4_Init+0x98>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002284:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <MX_TIM4_Init+0x98>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800228a:	4814      	ldr	r0, [pc, #80]	@ (80022dc <MX_TIM4_Init+0x98>)
 800228c:	f003 ff68 	bl	8006160 <HAL_TIM_Base_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002296:	f7ff fe6b 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800229e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	480d      	ldr	r0, [pc, #52]	@ (80022dc <MX_TIM4_Init+0x98>)
 80022a8:	f004 feb6 	bl	8007018 <HAL_TIM_ConfigClockSource>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80022b2:	f7ff fe5d 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	@ (80022dc <MX_TIM4_Init+0x98>)
 80022c4:	f005 fda6 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80022ce:	f7ff fe4f 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000508 	.word	0x20000508
 80022e0:	40000800 	.word	0x40000800

080022e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b098      	sub	sp, #96	@ 0x60
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2234      	movs	r2, #52	@ 0x34
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f006 fd5d 	bl	8008dd0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002316:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <MX_TIM8_Init+0x120>)
 8002318:	4a3b      	ldr	r2, [pc, #236]	@ (8002408 <MX_TIM8_Init+0x124>)
 800231a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800231c:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <MX_TIM8_Init+0x120>)
 800231e:	2200      	movs	r2, #0
 8002320:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <MX_TIM8_Init+0x120>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002328:	4b36      	ldr	r3, [pc, #216]	@ (8002404 <MX_TIM8_Init+0x120>)
 800232a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800232e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002330:	4b34      	ldr	r3, [pc, #208]	@ (8002404 <MX_TIM8_Init+0x120>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002336:	4b33      	ldr	r3, [pc, #204]	@ (8002404 <MX_TIM8_Init+0x120>)
 8002338:	2200      	movs	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233c:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <MX_TIM8_Init+0x120>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002342:	4830      	ldr	r0, [pc, #192]	@ (8002404 <MX_TIM8_Init+0x120>)
 8002344:	f004 f84c 	bl	80063e0 <HAL_TIM_PWM_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800234e:	f7ff fe0f 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800235e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002362:	4619      	mov	r1, r3
 8002364:	4827      	ldr	r0, [pc, #156]	@ (8002404 <MX_TIM8_Init+0x120>)
 8002366:	f005 fd55 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002370:	f7ff fdfe 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002374:	2360      	movs	r3, #96	@ 0x60
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237c:	2300      	movs	r3, #0
 800237e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002380:	2300      	movs	r3, #0
 8002382:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002390:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002394:	2200      	movs	r2, #0
 8002396:	4619      	mov	r1, r3
 8002398:	481a      	ldr	r0, [pc, #104]	@ (8002404 <MX_TIM8_Init+0x120>)
 800239a:	f004 fd29 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80023a4:	f7ff fde4 	bl	8001f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4807      	ldr	r0, [pc, #28]	@ (8002404 <MX_TIM8_Init+0x120>)
 80023e6:	f005 fdab 	bl	8007f40 <HAL_TIMEx_ConfigBreakDeadTime>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80023f0:	f7ff fdbe 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80023f4:	4803      	ldr	r0, [pc, #12]	@ (8002404 <MX_TIM8_Init+0x120>)
 80023f6:	f000 f981 	bl	80026fc <HAL_TIM_MspPostInit>

}
 80023fa:	bf00      	nop
 80023fc:	3760      	adds	r7, #96	@ 0x60
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000554 	.word	0x20000554
 8002408:	40013400 	.word	0x40013400

0800240c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002412:	463b      	mov	r3, r7
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <MX_TIM16_Init+0x8c>)
 8002420:	4a1e      	ldr	r2, [pc, #120]	@ (800249c <MX_TIM16_Init+0x90>)
 8002422:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <MX_TIM16_Init+0x8c>)
 8002426:	22a9      	movs	r2, #169	@ 0xa9
 8002428:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <MX_TIM16_Init+0x8c>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <MX_TIM16_Init+0x8c>)
 8002432:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002436:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <MX_TIM16_Init+0x8c>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800243e:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <MX_TIM16_Init+0x8c>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <MX_TIM16_Init+0x8c>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800244a:	4813      	ldr	r0, [pc, #76]	@ (8002498 <MX_TIM16_Init+0x8c>)
 800244c:	f003 fe88 	bl	8006160 <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8002456:	f7ff fd8b 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800245a:	480f      	ldr	r0, [pc, #60]	@ (8002498 <MX_TIM16_Init+0x8c>)
 800245c:	f004 f92a 	bl	80066b4 <HAL_TIM_IC_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002466:	f7ff fd83 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800246a:	2300      	movs	r3, #0
 800246c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800246e:	2301      	movs	r3, #1
 8002470:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800247a:	463b      	mov	r3, r7
 800247c:	2200      	movs	r2, #0
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	@ (8002498 <MX_TIM16_Init+0x8c>)
 8002482:	f004 fc18 	bl	8006cb6 <HAL_TIM_IC_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 800248c:	f7ff fd70 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	200005a0 	.word	0x200005a0
 800249c:	40014400 	.word	0x40014400

080024a0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80024a6:	463b      	mov	r3, r7
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002530 <MX_TIM17_Init+0x90>)
 80024b6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80024b8:	4b1c      	ldr	r3, [pc, #112]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024ba:	22a9      	movs	r2, #169	@ 0xa9
 80024bc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024be:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80024ca:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024cc:	4b17      	ldr	r3, [pc, #92]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80024de:	4813      	ldr	r0, [pc, #76]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024e0:	f003 fe3e 	bl	8006160 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 80024ea:	f7ff fd41 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80024ee:	480f      	ldr	r0, [pc, #60]	@ (800252c <MX_TIM17_Init+0x8c>)
 80024f0:	f004 f8e0 	bl	80066b4 <HAL_TIM_IC_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80024fa:	f7ff fd39 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002502:	2301      	movs	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800250e:	463b      	mov	r3, r7
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	@ (800252c <MX_TIM17_Init+0x8c>)
 8002516:	f004 fbce 	bl	8006cb6 <HAL_TIM_IC_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8002520:	f7ff fd26 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200005ec 	.word	0x200005ec
 8002530:	40014800 	.word	0x40014800

08002534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	@ 0x38
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a54      	ldr	r2, [pc, #336]	@ (80026a4 <HAL_TIM_Base_MspInit+0x170>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d11c      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002556:	4b54      	ldr	r3, [pc, #336]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 8002558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255a:	4a53      	ldr	r2, [pc, #332]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 800255c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002560:	6613      	str	r3, [r2, #96]	@ 0x60
 8002562:	4b51      	ldr	r3, [pc, #324]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 8002564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	2019      	movs	r0, #25
 8002574:	f002 f82d 	bl	80045d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002578:	2019      	movs	r0, #25
 800257a:	f002 f844 	bl	8004606 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	201a      	movs	r0, #26
 8002584:	f002 f825 	bl	80045d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002588:	201a      	movs	r0, #26
 800258a:	f002 f83c 	bl	8004606 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800258e:	e084      	b.n	800269a <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a45      	ldr	r2, [pc, #276]	@ (80026ac <HAL_TIM_Base_MspInit+0x178>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d114      	bne.n	80025c4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800259a:	4b43      	ldr	r3, [pc, #268]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	4a42      	ldr	r2, [pc, #264]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a6:	4b40      	ldr	r3, [pc, #256]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	201e      	movs	r0, #30
 80025b8:	f002 f80b 	bl	80045d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025bc:	201e      	movs	r0, #30
 80025be:	f002 f822 	bl	8004606 <HAL_NVIC_EnableIRQ>
}
 80025c2:	e06a      	b.n	800269a <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM16)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a39      	ldr	r2, [pc, #228]	@ (80026b0 <HAL_TIM_Base_MspInit+0x17c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d130      	bne.n	8002630 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025ce:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	4a35      	ldr	r2, [pc, #212]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025da:	4b33      	ldr	r3, [pc, #204]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	4b30      	ldr	r3, [pc, #192]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	4a2f      	ldr	r2, [pc, #188]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f2:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 80025fe:	2310      	movs	r3, #16
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800260e:	2301      	movs	r3, #1
 8002610:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8002612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002616:	4619      	mov	r1, r3
 8002618:	4826      	ldr	r0, [pc, #152]	@ (80026b4 <HAL_TIM_Base_MspInit+0x180>)
 800261a:	f002 fa81 	bl	8004b20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	2019      	movs	r0, #25
 8002624:	f001 ffd5 	bl	80045d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002628:	2019      	movs	r0, #25
 800262a:	f001 ffec 	bl	8004606 <HAL_NVIC_EnableIRQ>
}
 800262e:	e034      	b.n	800269a <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM17)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a20      	ldr	r2, [pc, #128]	@ (80026b8 <HAL_TIM_Base_MspInit+0x184>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12f      	bne.n	800269a <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800263a:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 800263c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263e:	4a1a      	ldr	r2, [pc, #104]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002644:	6613      	str	r3, [r2, #96]	@ 0x60
 8002646:	4b18      	ldr	r3, [pc, #96]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 8002648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	4a14      	ldr	r2, [pc, #80]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800265e:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_TIM_Base_MspInit+0x174>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 800266a:	2320      	movs	r3, #32
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800267a:	230a      	movs	r3, #10
 800267c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002682:	4619      	mov	r1, r3
 8002684:	480b      	ldr	r0, [pc, #44]	@ (80026b4 <HAL_TIM_Base_MspInit+0x180>)
 8002686:	f002 fa4b 	bl	8004b20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	201a      	movs	r0, #26
 8002690:	f001 ff9f 	bl	80045d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002694:	201a      	movs	r0, #26
 8002696:	f001 ffb6 	bl	8004606 <HAL_NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3738      	adds	r7, #56	@ 0x38
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40000800 	.word	0x40000800
 80026b0:	40014400 	.word	0x40014400
 80026b4:	48000400 	.word	0x48000400
 80026b8:	40014800 	.word	0x40014800

080026bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <HAL_TIM_PWM_MspInit+0x38>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10b      	bne.n	80026e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026ce:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80026d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40013400 	.word	0x40013400
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a23      	ldr	r2, [pc, #140]	@ (80027a8 <HAL_TIM_MspPostInit+0xac>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11c      	bne.n	8002758 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	4b23      	ldr	r3, [pc, #140]	@ (80027ac <HAL_TIM_MspPostInit+0xb0>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	4a22      	ldr	r2, [pc, #136]	@ (80027ac <HAL_TIM_MspPostInit+0xb0>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272a:	4b20      	ldr	r3, [pc, #128]	@ (80027ac <HAL_TIM_MspPostInit+0xb0>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8002736:	2303      	movs	r3, #3
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002746:	2302      	movs	r3, #2
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4817      	ldr	r0, [pc, #92]	@ (80027b0 <HAL_TIM_MspPostInit+0xb4>)
 8002752:	f002 f9e5 	bl	8004b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002756:	e022      	b.n	800279e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a15      	ldr	r2, [pc, #84]	@ (80027b4 <HAL_TIM_MspPostInit+0xb8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d11d      	bne.n	800279e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_TIM_MspPostInit+0xb0>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <HAL_TIM_MspPostInit+0xb0>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800276e:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <HAL_TIM_MspPostInit+0xb0>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 800277a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800278c:	2302      	movs	r3, #2
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800279a:	f002 f9c1 	bl	8004b20 <HAL_GPIO_Init>
}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	@ 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40012c00 	.word	0x40012c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	48000800 	.word	0x48000800
 80027b4:	40013400 	.word	0x40013400

080027b8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80027bc:	4b21      	ldr	r3, [pc, #132]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027be:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <MX_LPUART1_UART_Init+0x90>)
 80027c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80027d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80027d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027de:	220c      	movs	r2, #12
 80027e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e2:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80027fa:	4812      	ldr	r0, [pc, #72]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 80027fc:	f005 fc7a 	bl	80080f4 <HAL_UART_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002806:	f7ff fbb3 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800280a:	2100      	movs	r1, #0
 800280c:	480d      	ldr	r0, [pc, #52]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 800280e:	f006 fa15 	bl	8008c3c <HAL_UARTEx_SetTxFifoThreshold>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002818:	f7ff fbaa 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800281c:	2100      	movs	r1, #0
 800281e:	4809      	ldr	r0, [pc, #36]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 8002820:	f006 fa4a 	bl	8008cb8 <HAL_UARTEx_SetRxFifoThreshold>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800282a:	f7ff fba1 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	@ (8002844 <MX_LPUART1_UART_Init+0x8c>)
 8002830:	f006 f9cb 	bl	8008bca <HAL_UARTEx_DisableFifoMode>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800283a:	f7ff fb99 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000638 	.word	0x20000638
 8002848:	40008000 	.word	0x40008000

0800284c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b09e      	sub	sp, #120	@ 0x78
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	2254      	movs	r2, #84	@ 0x54
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f006 faaf 	bl	8008dd0 <memset>
  if(uartHandle->Instance==LPUART1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a49      	ldr	r2, [pc, #292]	@ (800299c <HAL_UART_MspInit+0x150>)
 8002878:	4293      	cmp	r3, r2
 800287a:	f040 808a 	bne.w	8002992 <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800287e:	2320      	movs	r3, #32
 8002880:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002882:	2300      	movs	r3, #0
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fa1a 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002896:	f7ff fb6b 	bl	8001f70 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800289a:	4b41      	ldr	r3, [pc, #260]	@ (80029a0 <HAL_UART_MspInit+0x154>)
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	4a40      	ldr	r2, [pc, #256]	@ (80029a0 <HAL_UART_MspInit+0x154>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80028a6:	4b3e      	ldr	r3, [pc, #248]	@ (80029a0 <HAL_UART_MspInit+0x154>)
 80028a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_UART_MspInit+0x154>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	4a3a      	ldr	r2, [pc, #232]	@ (80029a0 <HAL_UART_MspInit+0x154>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028be:	4b38      	ldr	r3, [pc, #224]	@ (80029a0 <HAL_UART_MspInit+0x154>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80028ca:	230c      	movs	r3, #12
 80028cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80028da:	230c      	movs	r3, #12
 80028dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e8:	f002 f91a 	bl	8004b20 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 80028ec:	4b2d      	ldr	r3, [pc, #180]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 80028ee:	4a2e      	ldr	r2, [pc, #184]	@ (80029a8 <HAL_UART_MspInit+0x15c>)
 80028f0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80028f2:	4b2c      	ldr	r3, [pc, #176]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 80028f4:	2222      	movs	r2, #34	@ 0x22
 80028f6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f8:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fe:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 8002906:	2280      	movs	r2, #128	@ 0x80
 8002908:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800290a:	4b26      	ldr	r3, [pc, #152]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 800290c:	2200      	movs	r2, #0
 800290e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002910:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002916:	4b23      	ldr	r3, [pc, #140]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 8002918:	2200      	movs	r2, #0
 800291a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800291c:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 800291e:	2200      	movs	r2, #0
 8002920:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002922:	4820      	ldr	r0, [pc, #128]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 8002924:	f001 fe8a 	bl	800463c <HAL_DMA_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800292e:	f7ff fb1f 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1b      	ldr	r2, [pc, #108]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 8002936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800293a:	4a1a      	ldr	r2, [pc, #104]	@ (80029a4 <HAL_UART_MspInit+0x158>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8002940:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HAL_UART_MspInit+0x160>)
 8002942:	4a1b      	ldr	r2, [pc, #108]	@ (80029b0 <HAL_UART_MspInit+0x164>)
 8002944:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002946:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <HAL_UART_MspInit+0x160>)
 8002948:	2223      	movs	r2, #35	@ 0x23
 800294a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800294c:	4b17      	ldr	r3, [pc, #92]	@ (80029ac <HAL_UART_MspInit+0x160>)
 800294e:	2210      	movs	r2, #16
 8002950:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002952:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <HAL_UART_MspInit+0x160>)
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002958:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <HAL_UART_MspInit+0x160>)
 800295a:	2280      	movs	r2, #128	@ 0x80
 800295c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800295e:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <HAL_UART_MspInit+0x160>)
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_UART_MspInit+0x160>)
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_UART_MspInit+0x160>)
 800296c:	2200      	movs	r2, #0
 800296e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_UART_MspInit+0x160>)
 8002972:	2200      	movs	r2, #0
 8002974:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002976:	480d      	ldr	r0, [pc, #52]	@ (80029ac <HAL_UART_MspInit+0x160>)
 8002978:	f001 fe60 	bl	800463c <HAL_DMA_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002982:	f7ff faf5 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a08      	ldr	r2, [pc, #32]	@ (80029ac <HAL_UART_MspInit+0x160>)
 800298a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800298c:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_UART_MspInit+0x160>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002992:	bf00      	nop
 8002994:	3778      	adds	r7, #120	@ 0x78
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40008000 	.word	0x40008000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	200006cc 	.word	0x200006cc
 80029a8:	4002006c 	.word	0x4002006c
 80029ac:	2000072c 	.word	0x2000072c
 80029b0:	40020080 	.word	0x40020080

080029b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029b4:	480d      	ldr	r0, [pc, #52]	@ (80029ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029b8:	f7ff fb76 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029bc:	480c      	ldr	r0, [pc, #48]	@ (80029f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80029be:	490d      	ldr	r1, [pc, #52]	@ (80029f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c0:	4a0d      	ldr	r2, [pc, #52]	@ (80029f8 <LoopForever+0xe>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029c4:	e002      	b.n	80029cc <LoopCopyDataInit>

080029c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ca:	3304      	adds	r3, #4

080029cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d0:	d3f9      	bcc.n	80029c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d2:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a00 <LoopForever+0x16>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d8:	e001      	b.n	80029de <LoopFillZerobss>

080029da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029dc:	3204      	adds	r2, #4

080029de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e0:	d3fb      	bcc.n	80029da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029e2:	f006 f9fd 	bl	8008de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029e6:	f7ff f9ef 	bl	8001dc8 <main>

080029ea <LoopForever>:

LoopForever:
    b LoopForever
 80029ea:	e7fe      	b.n	80029ea <LoopForever>
  ldr   r0, =_estack
 80029ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80029f8:	08008e90 	.word	0x08008e90
  ldr r2, =_sbss
 80029fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a00:	20000790 	.word	0x20000790

08002a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC1_2_IRQHandler>

08002a06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a10:	2003      	movs	r0, #3
 8002a12:	f001 fdd3 	bl	80045bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a16:	2000      	movs	r0, #0
 8002a18:	f000 f80e 	bl	8002a38 <HAL_InitTick>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	71fb      	strb	r3, [r7, #7]
 8002a26:	e001      	b.n	8002a2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a28:	f7ff faa8 	bl	8001f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a2c:	79fb      	ldrb	r3, [r7, #7]

}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a44:	4b16      	ldr	r3, [pc, #88]	@ (8002aa0 <HAL_InitTick+0x68>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d022      	beq.n	8002a92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a4c:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <HAL_InitTick+0x6c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <HAL_InitTick+0x68>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fdde 	bl	8004622 <HAL_SYSTICK_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	d809      	bhi.n	8002a86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a72:	2200      	movs	r2, #0
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7a:	f001 fdaa 	bl	80045d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <HAL_InitTick+0x70>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e007      	b.n	8002a96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e004      	b.n	8002a96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e001      	b.n	8002a96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000000c 	.word	0x2000000c
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	20000008 	.word	0x20000008

08002aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_IncTick+0x1c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_IncTick+0x20>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a03      	ldr	r2, [pc, #12]	@ (8002ac8 <HAL_IncTick+0x1c>)
 8002abc:	6013      	str	r3, [r2, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	2000078c 	.word	0x2000078c
 8002acc:	2000000c 	.word	0x2000000c

08002ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	@ (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000078c 	.word	0x2000078c

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d004      	beq.n	8002b0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <HAL_Delay+0x40>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b0c:	bf00      	nop
 8002b0e:	f7ff ffdf 	bl	8002ad0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d8f7      	bhi.n	8002b0e <HAL_Delay+0x26>
  {
  }
}
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2000000c 	.word	0x2000000c

08002b2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3360      	adds	r3, #96	@ 0x60
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <LL_ADC_SetOffset+0x44>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	03fff000 	.word	0x03fff000

08002bdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3360      	adds	r3, #96	@ 0x60
 8002bea:	461a      	mov	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3360      	adds	r3, #96	@ 0x60
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b087      	sub	sp, #28
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3360      	adds	r3, #96	@ 0x60
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3360      	adds	r3, #96	@ 0x60
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	615a      	str	r2, [r3, #20]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b087      	sub	sp, #28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3330      	adds	r3, #48	@ 0x30
 8002d06:	461a      	mov	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	211f      	movs	r1, #31
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	f003 011f 	and.w	r1, r3, #31
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b087      	sub	sp, #28
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	0e5b      	lsrs	r3, r3, #25
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	4413      	add	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	0d1b      	lsrs	r3, r3, #20
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2107      	movs	r1, #7
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	401a      	ands	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	0d1b      	lsrs	r3, r3, #20
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	431a      	orrs	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d98:	bf00      	nop
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0318 	and.w	r3, r3, #24
 8002dc6:	4908      	ldr	r1, [pc, #32]	@ (8002de8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002dc8:	40d9      	lsrs	r1, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	400b      	ands	r3, r1
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	0007ffff 	.word	0x0007ffff

08002dec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 031f 	and.w	r3, r3, #31
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002e18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6093      	str	r3, [r2, #8]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e40:	d101      	bne.n	8002e46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002e64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002edc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee0:	f043 0202 	orr.w	r2, r3, #2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_IsEnabled+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_IsEnabled+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d101      	bne.n	8002f32 <LL_ADC_IsDisableOngoing+0x18>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_ADC_IsDisableOngoing+0x1a>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d101      	bne.n	8002f80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d101      	bne.n	8002fa6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1a9      	b.n	8003322 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7fe f9fd 	bl	80013dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff19 	bl	8002e2c <LL_ADC_IsDeepPowerDownEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff feff 	bl	8002e08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ff34 	bl	8002e7c <LL_ADC_IsInternalRegulatorEnabled>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d115      	bne.n	8003046 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff18 	bl	8002e54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003024:	4b9c      	ldr	r3, [pc, #624]	@ (8003298 <HAL_ADC_Init+0x2e4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	4a9c      	ldr	r2, [pc, #624]	@ (800329c <HAL_ADC_Init+0x2e8>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	3301      	adds	r3, #1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003038:	e002      	b.n	8003040 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3b01      	subs	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f9      	bne.n	800303a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff16 	bl	8002e7c <LL_ADC_IsInternalRegulatorEnabled>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305a:	f043 0210 	orr.w	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff76 	bl	8002f68 <LL_ADC_REG_IsConversionOngoing>
 800307c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 8142 	bne.w	8003310 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 813e 	bne.w	8003310 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800309c:	f043 0202 	orr.w	r2, r3, #2
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff23 	bl	8002ef4 <LL_ADC_IsEnabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d141      	bne.n	8003138 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030bc:	d004      	beq.n	80030c8 <HAL_ADC_Init+0x114>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a77      	ldr	r2, [pc, #476]	@ (80032a0 <HAL_ADC_Init+0x2ec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10f      	bne.n	80030e8 <HAL_ADC_Init+0x134>
 80030c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030cc:	f7ff ff12 	bl	8002ef4 <LL_ADC_IsEnabled>
 80030d0:	4604      	mov	r4, r0
 80030d2:	4873      	ldr	r0, [pc, #460]	@ (80032a0 <HAL_ADC_Init+0x2ec>)
 80030d4:	f7ff ff0e 	bl	8002ef4 <LL_ADC_IsEnabled>
 80030d8:	4603      	mov	r3, r0
 80030da:	4323      	orrs	r3, r4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e012      	b.n	800310e <HAL_ADC_Init+0x15a>
 80030e8:	486e      	ldr	r0, [pc, #440]	@ (80032a4 <HAL_ADC_Init+0x2f0>)
 80030ea:	f7ff ff03 	bl	8002ef4 <LL_ADC_IsEnabled>
 80030ee:	4604      	mov	r4, r0
 80030f0:	486d      	ldr	r0, [pc, #436]	@ (80032a8 <HAL_ADC_Init+0x2f4>)
 80030f2:	f7ff feff 	bl	8002ef4 <LL_ADC_IsEnabled>
 80030f6:	4603      	mov	r3, r0
 80030f8:	431c      	orrs	r4, r3
 80030fa:	486c      	ldr	r0, [pc, #432]	@ (80032ac <HAL_ADC_Init+0x2f8>)
 80030fc:	f7ff fefa 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003100:	4603      	mov	r3, r0
 8003102:	4323      	orrs	r3, r4
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800311a:	d004      	beq.n	8003126 <HAL_ADC_Init+0x172>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5f      	ldr	r2, [pc, #380]	@ (80032a0 <HAL_ADC_Init+0x2ec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_ADC_Init+0x176>
 8003126:	4a62      	ldr	r2, [pc, #392]	@ (80032b0 <HAL_ADC_Init+0x2fc>)
 8003128:	e000      	b.n	800312c <HAL_ADC_Init+0x178>
 800312a:	4a62      	ldr	r2, [pc, #392]	@ (80032b4 <HAL_ADC_Init+0x300>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f7ff fcfa 	bl	8002b2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7f5b      	ldrb	r3, [r3, #29]
 800313c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003142:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003148:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800314e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003156:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003162:	2b01      	cmp	r3, #1
 8003164:	d106      	bne.n	8003174 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	045b      	lsls	r3, r3, #17
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	4b48      	ldr	r3, [pc, #288]	@ (80032b8 <HAL_ADC_Init+0x304>)
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	69b9      	ldr	r1, [r7, #24]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fee5 	bl	8002f8e <LL_ADC_INJ_IsConversionOngoing>
 80031c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d17f      	bne.n	80032cc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d17c      	bne.n	80032cc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031ee:	f023 0302 	bic.w	r3, r3, #2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003212:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800321c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003220:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6911      	ldr	r1, [r2, #16]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	430b      	orrs	r3, r1
 800322e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003232:	e013      	b.n	800325c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003242:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003258:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003262:	2b01      	cmp	r3, #1
 8003264:	d12a      	bne.n	80032bc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003288:	430a      	orrs	r2, r1
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	611a      	str	r2, [r3, #16]
 8003296:	e019      	b.n	80032cc <HAL_ADC_Init+0x318>
 8003298:	20000004 	.word	0x20000004
 800329c:	053e2d63 	.word	0x053e2d63
 80032a0:	50000100 	.word	0x50000100
 80032a4:	50000400 	.word	0x50000400
 80032a8:	50000500 	.word	0x50000500
 80032ac:	50000600 	.word	0x50000600
 80032b0:	50000300 	.word	0x50000300
 80032b4:	50000700 	.word	0x50000700
 80032b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d10c      	bne.n	80032ee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f023 010f 	bic.w	r1, r3, #15
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80032ec:	e007      	b.n	80032fe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 020f 	bic.w	r2, r2, #15
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800330e:	e007      	b.n	8003320 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	f043 0210 	orr.w	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003320:	7ffb      	ldrb	r3, [r7, #31]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3724      	adds	r7, #36	@ 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd90      	pop	{r4, r7, pc}
 800332a:	bf00      	nop

0800332c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003340:	d004      	beq.n	800334c <HAL_ADC_Start_DMA+0x20>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5a      	ldr	r2, [pc, #360]	@ (80034b0 <HAL_ADC_Start_DMA+0x184>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_ADC_Start_DMA+0x24>
 800334c:	4b59      	ldr	r3, [pc, #356]	@ (80034b4 <HAL_ADC_Start_DMA+0x188>)
 800334e:	e000      	b.n	8003352 <HAL_ADC_Start_DMA+0x26>
 8003350:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_ADC_Start_DMA+0x18c>)
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fd4a 	bl	8002dec <LL_ADC_GetMultimode>
 8003358:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fe02 	bl	8002f68 <LL_ADC_REG_IsConversionOngoing>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 809b 	bne.w	80034a2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_ADC_Start_DMA+0x4e>
 8003376:	2302      	movs	r3, #2
 8003378:	e096      	b.n	80034a8 <HAL_ADC_Start_DMA+0x17c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a4d      	ldr	r2, [pc, #308]	@ (80034bc <HAL_ADC_Start_DMA+0x190>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d008      	beq.n	800339e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d002      	beq.n	800339e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b09      	cmp	r3, #9
 800339c:	d17a      	bne.n	8003494 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fcf6 	bl	8003d90 <ADC_Enable>
 80033a4:	4603      	mov	r3, r0
 80033a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d16d      	bne.n	800348a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3a      	ldr	r2, [pc, #232]	@ (80034b0 <HAL_ADC_Start_DMA+0x184>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_ADC_Start_DMA+0xb4>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3b      	ldr	r2, [pc, #236]	@ (80034c0 <HAL_ADC_Start_DMA+0x194>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d002      	beq.n	80033dc <HAL_ADC_Start_DMA+0xb0>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e003      	b.n	80033e4 <HAL_ADC_Start_DMA+0xb8>
 80033dc:	4b39      	ldr	r3, [pc, #228]	@ (80034c4 <HAL_ADC_Start_DMA+0x198>)
 80033de:	e001      	b.n	80033e4 <HAL_ADC_Start_DMA+0xb8>
 80033e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d002      	beq.n	80033f2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d006      	beq.n	8003418 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340e:	f023 0206 	bic.w	r2, r3, #6
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	661a      	str	r2, [r3, #96]	@ 0x60
 8003416:	e002      	b.n	800341e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	4a29      	ldr	r2, [pc, #164]	@ (80034c8 <HAL_ADC_Start_DMA+0x19c>)
 8003424:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342a:	4a28      	ldr	r2, [pc, #160]	@ (80034cc <HAL_ADC_Start_DMA+0x1a0>)
 800342c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003432:	4a27      	ldr	r2, [pc, #156]	@ (80034d0 <HAL_ADC_Start_DMA+0x1a4>)
 8003434:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	221c      	movs	r2, #28
 800343c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0210 	orr.w	r2, r2, #16
 8003454:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3340      	adds	r3, #64	@ 0x40
 8003470:	4619      	mov	r1, r3
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f001 f989 	bl	800478c <HAL_DMA_Start_IT>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fd5c 	bl	8002f40 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003488:	e00d      	b.n	80034a6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003492:	e008      	b.n	80034a6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80034a0:	e001      	b.n	80034a6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
 80034a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	50000100 	.word	0x50000100
 80034b4:	50000300 	.word	0x50000300
 80034b8:	50000700 	.word	0x50000700
 80034bc:	50000600 	.word	0x50000600
 80034c0:	50000500 	.word	0x50000500
 80034c4:	50000400 	.word	0x50000400
 80034c8:	08003f7b 	.word	0x08003f7b
 80034cc:	08004053 	.word	0x08004053
 80034d0:	0800406f 	.word	0x0800406f

080034d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b0b6      	sub	sp, #216	@ 0xd8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x24>
 800352e:	2302      	movs	r3, #2
 8003530:	f000 bc13 	b.w	8003d5a <HAL_ADC_ConfigChannel+0x84a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fd11 	bl	8002f68 <LL_ADC_REG_IsConversionOngoing>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	f040 83f3 	bne.w	8003d34 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	f7ff fbcb 	bl	8002cf6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fcff 	bl	8002f68 <LL_ADC_REG_IsConversionOngoing>
 800356a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fd0b 	bl	8002f8e <LL_ADC_INJ_IsConversionOngoing>
 8003578:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800357c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 81d9 	bne.w	8003938 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003586:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 81d4 	bne.w	8003938 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003598:	d10f      	bne.n	80035ba <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	4619      	mov	r1, r3
 80035a6:	f7ff fbd2 	bl	8002d4e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fb79 	bl	8002caa <LL_ADC_SetSamplingTimeCommonConfig>
 80035b8:	e00e      	b.n	80035d8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f7ff fbc1 	bl	8002d4e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fb69 	bl	8002caa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d022      	beq.n	8003640 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6919      	ldr	r1, [r3, #16]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800360a:	f7ff fac3 	bl	8002b94 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6919      	ldr	r1, [r3, #16]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	461a      	mov	r2, r3
 800361c:	f7ff fb0f 	bl	8002c3e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800362c:	2b01      	cmp	r3, #1
 800362e:	d102      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x126>
 8003630:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003634:	e000      	b.n	8003638 <HAL_ADC_ConfigChannel+0x128>
 8003636:	2300      	movs	r3, #0
 8003638:	461a      	mov	r2, r3
 800363a:	f7ff fb1b 	bl	8002c74 <LL_ADC_SetOffsetSaturation>
 800363e:	e17b      	b.n	8003938 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fac8 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_ADC_ConfigChannel+0x15c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fabd 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 8003662:	4603      	mov	r3, r0
 8003664:	0e9b      	lsrs	r3, r3, #26
 8003666:	f003 021f 	and.w	r2, r3, #31
 800366a:	e01e      	b.n	80036aa <HAL_ADC_ConfigChannel+0x19a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fab2 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 8003678:	4603      	mov	r3, r0
 800367a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800368a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800368e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e004      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800369e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x1b2>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	e018      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x1e4>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80036d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80036de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80036e6:	2320      	movs	r3, #32
 80036e8:	e004      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80036ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d106      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2200      	movs	r2, #0
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fa81 	bl	8002c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2101      	movs	r1, #1
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fa65 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 8003712:	4603      	mov	r3, r0
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x222>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fa5a 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 8003728:	4603      	mov	r3, r0
 800372a:	0e9b      	lsrs	r3, r3, #26
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	e01e      	b.n	8003770 <HAL_ADC_ConfigChannel+0x260>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fa4f 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 800373e:	4603      	mov	r3, r0
 8003740:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003754:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e004      	b.n	800376e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x278>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	e018      	b.n	80037ba <HAL_ADC_ConfigChannel+0x2aa>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800379c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80037a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e004      	b.n	80037ba <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80037b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d106      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fa1e 	bl	8002c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2102      	movs	r1, #2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fa02 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 80037d8:	4603      	mov	r3, r0
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x2e8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2102      	movs	r1, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff f9f7 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	f003 021f 	and.w	r2, r3, #31
 80037f6:	e01e      	b.n	8003836 <HAL_ADC_ConfigChannel+0x326>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff f9ec 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 8003804:	4603      	mov	r3, r0
 8003806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003816:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800381a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800381e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003826:	2320      	movs	r3, #32
 8003828:	e004      	b.n	8003834 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800382a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <HAL_ADC_ConfigChannel+0x33e>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	0e9b      	lsrs	r3, r3, #26
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	e016      	b.n	800387c <HAL_ADC_ConfigChannel+0x36c>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003860:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003862:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003866:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e004      	b.n	800387c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800387c:	429a      	cmp	r2, r3
 800387e:	d106      	bne.n	800388e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2200      	movs	r2, #0
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f9bd 	bl	8002c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2103      	movs	r1, #3
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f9a1 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x3aa>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2103      	movs	r1, #3
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f996 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	0e9b      	lsrs	r3, r3, #26
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	e017      	b.n	80038ea <HAL_ADC_ConfigChannel+0x3da>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2103      	movs	r1, #3
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f98b 	bl	8002bdc <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80038d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038d4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80038d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e003      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80038e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x3f2>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	0e9b      	lsrs	r3, r3, #26
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	e011      	b.n	8003926 <HAL_ADC_ConfigChannel+0x416>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003912:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800391a:	2320      	movs	r3, #32
 800391c:	e003      	b.n	8003926 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800391e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003926:	429a      	cmp	r2, r3
 8003928:	d106      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	2103      	movs	r1, #3
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f968 	bl	8002c08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fad9 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 813d 	bne.w	8003bc4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	461a      	mov	r2, r3
 8003958:	f7ff fa24 	bl	8002da4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4aa2      	ldr	r2, [pc, #648]	@ (8003bec <HAL_ADC_ConfigChannel+0x6dc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	f040 812e 	bne.w	8003bc4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x480>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0e9b      	lsrs	r3, r3, #26
 800397e:	3301      	adds	r3, #1
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2b09      	cmp	r3, #9
 8003986:	bf94      	ite	ls
 8003988:	2301      	movls	r3, #1
 800398a:	2300      	movhi	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e019      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x4b4>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800399e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80039a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	e003      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80039ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	bf94      	ite	ls
 80039be:	2301      	movls	r3, #1
 80039c0:	2300      	movhi	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d079      	beq.n	8003abc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x4d4>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0e9b      	lsrs	r3, r3, #26
 80039da:	3301      	adds	r3, #1
 80039dc:	069b      	lsls	r3, r3, #26
 80039de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039e2:	e015      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x500>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80039f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80039f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e003      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	069b      	lsls	r3, r3, #26
 8003a0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x520>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	0e9b      	lsrs	r3, r3, #26
 8003a22:	3301      	adds	r3, #1
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2101      	movs	r1, #1
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	e017      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x550>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	e003      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	ea42 0103 	orr.w	r1, r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x576>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	0e9b      	lsrs	r3, r3, #26
 8003a76:	3301      	adds	r3, #1
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	051b      	lsls	r3, r3, #20
 8003a84:	e018      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x5a8>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	e003      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	e07e      	b.n	8003bba <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x5c8>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0e9b      	lsrs	r3, r3, #26
 8003ace:	3301      	adds	r3, #1
 8003ad0:	069b      	lsls	r3, r3, #26
 8003ad2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ad6:	e015      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x5f4>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003af0:	2320      	movs	r3, #32
 8003af2:	e003      	b.n	8003afc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	069b      	lsls	r3, r3, #26
 8003b00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x614>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	3301      	adds	r3, #1
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	e017      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x644>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	61fb      	str	r3, [r7, #28]
  return result;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	e003      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	ea42 0103 	orr.w	r1, r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10d      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x670>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0e9b      	lsrs	r3, r3, #26
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 021f 	and.w	r2, r3, #31
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	3b1e      	subs	r3, #30
 8003b78:	051b      	lsls	r3, r3, #20
 8003b7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b7e:	e01b      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x6a8>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	613b      	str	r3, [r7, #16]
  return result;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003b98:	2320      	movs	r3, #32
 8003b9a:	e003      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f003 021f 	and.w	r2, r3, #31
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	3b1e      	subs	r3, #30
 8003bb2:	051b      	lsls	r3, r3, #20
 8003bb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f7ff f8c5 	bl	8002d4e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x6e0>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80be 	beq.w	8003d4e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bda:	d004      	beq.n	8003be6 <HAL_ADC_ConfigChannel+0x6d6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a04      	ldr	r2, [pc, #16]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x6e4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d10a      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x6ec>
 8003be6:	4b04      	ldr	r3, [pc, #16]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x6e8>)
 8003be8:	e009      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x6ee>
 8003bea:	bf00      	nop
 8003bec:	407f0000 	.word	0x407f0000
 8003bf0:	80080000 	.word	0x80080000
 8003bf4:	50000100 	.word	0x50000100
 8003bf8:	50000300 	.word	0x50000300
 8003bfc:	4b59      	ldr	r3, [pc, #356]	@ (8003d64 <HAL_ADC_ConfigChannel+0x854>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe ffba 	bl	8002b78 <LL_ADC_GetCommonPathInternalCh>
 8003c04:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a56      	ldr	r2, [pc, #344]	@ (8003d68 <HAL_ADC_ConfigChannel+0x858>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_ADC_ConfigChannel+0x70c>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a55      	ldr	r2, [pc, #340]	@ (8003d6c <HAL_ADC_ConfigChannel+0x85c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d13a      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d134      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c30:	d005      	beq.n	8003c3e <HAL_ADC_ConfigChannel+0x72e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4e      	ldr	r2, [pc, #312]	@ (8003d70 <HAL_ADC_ConfigChannel+0x860>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	f040 8085 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c46:	d004      	beq.n	8003c52 <HAL_ADC_ConfigChannel+0x742>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a49      	ldr	r2, [pc, #292]	@ (8003d74 <HAL_ADC_ConfigChannel+0x864>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x746>
 8003c52:	4a49      	ldr	r2, [pc, #292]	@ (8003d78 <HAL_ADC_ConfigChannel+0x868>)
 8003c54:	e000      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x748>
 8003c56:	4a43      	ldr	r2, [pc, #268]	@ (8003d64 <HAL_ADC_ConfigChannel+0x854>)
 8003c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7fe ff75 	bl	8002b52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c68:	4b44      	ldr	r3, [pc, #272]	@ (8003d7c <HAL_ADC_ConfigChannel+0x86c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	4a44      	ldr	r2, [pc, #272]	@ (8003d80 <HAL_ADC_ConfigChannel+0x870>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c82:	e002      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f9      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c90:	e05a      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a3b      	ldr	r2, [pc, #236]	@ (8003d84 <HAL_ADC_ConfigChannel+0x874>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d125      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11f      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a31      	ldr	r2, [pc, #196]	@ (8003d74 <HAL_ADC_ConfigChannel+0x864>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d104      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x7ac>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a34      	ldr	r2, [pc, #208]	@ (8003d88 <HAL_ADC_ConfigChannel+0x878>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d047      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cc4:	d004      	beq.n	8003cd0 <HAL_ADC_ConfigChannel+0x7c0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2a      	ldr	r2, [pc, #168]	@ (8003d74 <HAL_ADC_ConfigChannel+0x864>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d101      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x7c4>
 8003cd0:	4a29      	ldr	r2, [pc, #164]	@ (8003d78 <HAL_ADC_ConfigChannel+0x868>)
 8003cd2:	e000      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x7c6>
 8003cd4:	4a23      	ldr	r2, [pc, #140]	@ (8003d64 <HAL_ADC_ConfigChannel+0x854>)
 8003cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7fe ff36 	bl	8002b52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ce6:	e031      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a27      	ldr	r2, [pc, #156]	@ (8003d8c <HAL_ADC_ConfigChannel+0x87c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d12d      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d127      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	@ (8003d74 <HAL_ADC_ConfigChannel+0x864>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d10:	d004      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x80c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <HAL_ADC_ConfigChannel+0x864>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x810>
 8003d1c:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <HAL_ADC_ConfigChannel+0x868>)
 8003d1e:	e000      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x812>
 8003d20:	4a10      	ldr	r2, [pc, #64]	@ (8003d64 <HAL_ADC_ConfigChannel+0x854>)
 8003d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe ff10 	bl	8002b52 <LL_ADC_SetCommonPathInternalCh>
 8003d32:	e00c      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003d46:	e002      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d56:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	37d8      	adds	r7, #216	@ 0xd8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	50000700 	.word	0x50000700
 8003d68:	c3210000 	.word	0xc3210000
 8003d6c:	90c00010 	.word	0x90c00010
 8003d70:	50000600 	.word	0x50000600
 8003d74:	50000100 	.word	0x50000100
 8003d78:	50000300 	.word	0x50000300
 8003d7c:	20000004 	.word	0x20000004
 8003d80:	053e2d63 	.word	0x053e2d63
 8003d84:	c7520000 	.word	0xc7520000
 8003d88:	50000500 	.word	0x50000500
 8003d8c:	cb840000 	.word	0xcb840000

08003d90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f8a7 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d176      	bne.n	8003e9a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea4 <ADC_Enable+0x114>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e062      	b.n	8003e9c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f862 	bl	8002ea4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de8:	d004      	beq.n	8003df4 <ADC_Enable+0x64>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea8 <ADC_Enable+0x118>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d101      	bne.n	8003df8 <ADC_Enable+0x68>
 8003df4:	4b2d      	ldr	r3, [pc, #180]	@ (8003eac <ADC_Enable+0x11c>)
 8003df6:	e000      	b.n	8003dfa <ADC_Enable+0x6a>
 8003df8:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb0 <ADC_Enable+0x120>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe febc 	bl	8002b78 <LL_ADC_GetCommonPathInternalCh>
 8003e00:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d013      	beq.n	8003e32 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <ADC_Enable+0x124>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	4a29      	ldr	r2, [pc, #164]	@ (8003eb8 <ADC_Enable+0x128>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e24:	e002      	b.n	8003e2c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f9      	bne.n	8003e26 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e32:	f7fe fe4d 	bl	8002ad0 <HAL_GetTick>
 8003e36:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e38:	e028      	b.n	8003e8c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff f858 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f828 	bl	8002ea4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e54:	f7fe fe3c 	bl	8002ad0 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d914      	bls.n	8003e8c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d00d      	beq.n	8003e8c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	f043 0210 	orr.w	r2, r3, #16
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e007      	b.n	8003e9c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d1cf      	bne.n	8003e3a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	8000003f 	.word	0x8000003f
 8003ea8:	50000100 	.word	0x50000100
 8003eac:	50000300 	.word	0x50000300
 8003eb0:	50000700 	.word	0x50000700
 8003eb4:	20000004 	.word	0x20000004
 8003eb8:	053e2d63 	.word	0x053e2d63

08003ebc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff f826 	bl	8002f1a <LL_ADC_IsDisableOngoing>
 8003ece:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff f80d 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d047      	beq.n	8003f70 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d144      	bne.n	8003f70 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 030d 	and.w	r3, r3, #13
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d10c      	bne.n	8003f0e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe ffe7 	bl	8002ecc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2203      	movs	r2, #3
 8003f04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f06:	f7fe fde3 	bl	8002ad0 <HAL_GetTick>
 8003f0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f0c:	e029      	b.n	8003f62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f12:	f043 0210 	orr.w	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1e:	f043 0201 	orr.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e023      	b.n	8003f72 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f2a:	f7fe fdd1 	bl	8002ad0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d914      	bls.n	8003f62 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4a:	f043 0210 	orr.w	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f56:	f043 0201 	orr.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e007      	b.n	8003f72 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1dc      	bne.n	8003f2a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d14b      	bne.n	800402c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d021      	beq.n	8003ff2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fe8c 	bl	8002cd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d032      	beq.n	8004024 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d12b      	bne.n	8004024 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11f      	bne.n	8004024 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe8:	f043 0201 	orr.w	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ff0:	e018      	b.n	8004024 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d111      	bne.n	8004024 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fa55 	bl	80034d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800402a:	e00e      	b.n	800404a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff fa5f 	bl	80034fc <HAL_ADC_ErrorCallback>
}
 800403e:	e004      	b.n	800404a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fa41 	bl	80034e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004080:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fa31 	bl	80034fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <LL_ADC_IsEnabled>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <LL_ADC_IsEnabled+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_ADC_IsEnabled+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_StartCalibration>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80040da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	609a      	str	r2, [r3, #8]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_ADC_IsCalibrationOnGoing>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800410a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800410e:	d101      	bne.n	8004114 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_ADC_REG_IsConversionOngoing>:
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d101      	bne.n	800413a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_ADCEx_Calibration_Start+0x1c>
 8004160:	2302      	movs	r3, #2
 8004162:	e04d      	b.n	8004200 <HAL_ADCEx_Calibration_Start+0xb8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fea5 	bl	8003ebc <ADC_Disable>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d136      	bne.n	80041ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004180:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004184:	f023 0302 	bic.w	r3, r3, #2
 8004188:	f043 0202 	orr.w	r2, r3, #2
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ff96 	bl	80040c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800419c:	e014      	b.n	80041c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a18      	ldr	r2, [pc, #96]	@ (8004208 <HAL_ADCEx_Calibration_Start+0xc0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d90d      	bls.n	80041c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b0:	f023 0312 	bic.w	r3, r3, #18
 80041b4:	f043 0210 	orr.w	r2, r3, #16
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e01b      	b.n	8004200 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ff94 	bl	80040fa <LL_ADC_IsCalibrationOnGoing>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e2      	bne.n	800419e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	f023 0303 	bic.w	r3, r3, #3
 80041e0:	f043 0201 	orr.w	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041e8:	e005      	b.n	80041f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ee:	f043 0210 	orr.w	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	0004de01 	.word	0x0004de01

0800420c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b0a1      	sub	sp, #132	@ 0x84
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004226:	2302      	movs	r3, #2
 8004228:	e0e7      	b.n	80043fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004232:	2300      	movs	r3, #0
 8004234:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004236:	2300      	movs	r3, #0
 8004238:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004242:	d102      	bne.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004244:	4b6f      	ldr	r3, [pc, #444]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	e009      	b.n	800425e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6e      	ldr	r2, [pc, #440]	@ (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d102      	bne.n	800425a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004254:	4b6d      	ldr	r3, [pc, #436]	@ (800440c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	e001      	b.n	800425e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0be      	b.n	80043fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff4f 	bl	8004122 <LL_ADC_REG_IsConversionOngoing>
 8004284:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff ff49 	bl	8004122 <LL_ADC_REG_IsConversionOngoing>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 80a0 	bne.w	80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 809c 	bne.w	80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042a8:	d004      	beq.n	80042b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a55      	ldr	r2, [pc, #340]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80042b4:	4b56      	ldr	r3, [pc, #344]	@ (8004410 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80042b6:	e000      	b.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80042b8:	4b56      	ldr	r3, [pc, #344]	@ (8004414 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80042ba:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d04b      	beq.n	800435c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042d6:	035b      	lsls	r3, r3, #13
 80042d8:	430b      	orrs	r3, r1
 80042da:	431a      	orrs	r2, r3
 80042dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042e8:	d004      	beq.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a45      	ldr	r2, [pc, #276]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10f      	bne.n	8004314 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80042f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042f8:	f7ff fed3 	bl	80040a2 <LL_ADC_IsEnabled>
 80042fc:	4604      	mov	r4, r0
 80042fe:	4841      	ldr	r0, [pc, #260]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004300:	f7ff fecf 	bl	80040a2 <LL_ADC_IsEnabled>
 8004304:	4603      	mov	r3, r0
 8004306:	4323      	orrs	r3, r4
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	e012      	b.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004314:	483c      	ldr	r0, [pc, #240]	@ (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004316:	f7ff fec4 	bl	80040a2 <LL_ADC_IsEnabled>
 800431a:	4604      	mov	r4, r0
 800431c:	483b      	ldr	r0, [pc, #236]	@ (800440c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800431e:	f7ff fec0 	bl	80040a2 <LL_ADC_IsEnabled>
 8004322:	4603      	mov	r3, r0
 8004324:	431c      	orrs	r4, r3
 8004326:	483c      	ldr	r0, [pc, #240]	@ (8004418 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004328:	f7ff febb 	bl	80040a2 <LL_ADC_IsEnabled>
 800432c:	4603      	mov	r3, r0
 800432e:	4323      	orrs	r3, r4
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d056      	beq.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800433e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004346:	f023 030f 	bic.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	6811      	ldr	r1, [r2, #0]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	6892      	ldr	r2, [r2, #8]
 8004352:	430a      	orrs	r2, r1
 8004354:	431a      	orrs	r2, r3
 8004356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004358:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800435a:	e047      	b.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800435c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004364:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004366:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004370:	d004      	beq.n	800437c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a23      	ldr	r2, [pc, #140]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d10f      	bne.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800437c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004380:	f7ff fe8f 	bl	80040a2 <LL_ADC_IsEnabled>
 8004384:	4604      	mov	r4, r0
 8004386:	481f      	ldr	r0, [pc, #124]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004388:	f7ff fe8b 	bl	80040a2 <LL_ADC_IsEnabled>
 800438c:	4603      	mov	r3, r0
 800438e:	4323      	orrs	r3, r4
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e012      	b.n	80043c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800439c:	481a      	ldr	r0, [pc, #104]	@ (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800439e:	f7ff fe80 	bl	80040a2 <LL_ADC_IsEnabled>
 80043a2:	4604      	mov	r4, r0
 80043a4:	4819      	ldr	r0, [pc, #100]	@ (800440c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043a6:	f7ff fe7c 	bl	80040a2 <LL_ADC_IsEnabled>
 80043aa:	4603      	mov	r3, r0
 80043ac:	431c      	orrs	r4, r3
 80043ae:	481a      	ldr	r0, [pc, #104]	@ (8004418 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043b0:	f7ff fe77 	bl	80040a2 <LL_ADC_IsEnabled>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4323      	orrs	r3, r4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d012      	beq.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80043ce:	f023 030f 	bic.w	r3, r3, #15
 80043d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043d4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043d6:	e009      	b.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80043ea:	e000      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3784      	adds	r7, #132	@ 0x84
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd90      	pop	{r4, r7, pc}
 8004402:	bf00      	nop
 8004404:	50000100 	.word	0x50000100
 8004408:	50000400 	.word	0x50000400
 800440c:	50000500 	.word	0x50000500
 8004410:	50000300 	.word	0x50000300
 8004414:	50000700 	.word	0x50000700
 8004418:	50000600 	.word	0x50000600

0800441c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800442c:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <__NVIC_SetPriorityGrouping+0x44>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004438:	4013      	ands	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800444c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800444e:	4a04      	ldr	r2, [pc, #16]	@ (8004460 <__NVIC_SetPriorityGrouping+0x44>)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	60d3      	str	r3, [r2, #12]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004468:	4b04      	ldr	r3, [pc, #16]	@ (800447c <__NVIC_GetPriorityGrouping+0x18>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	f003 0307 	and.w	r3, r3, #7
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	2b00      	cmp	r3, #0
 8004490:	db0b      	blt.n	80044aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	f003 021f 	and.w	r2, r3, #31
 8004498:	4907      	ldr	r1, [pc, #28]	@ (80044b8 <__NVIC_EnableIRQ+0x38>)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2001      	movs	r0, #1
 80044a2:	fa00 f202 	lsl.w	r2, r0, r2
 80044a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000e100 	.word	0xe000e100

080044bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	6039      	str	r1, [r7, #0]
 80044c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	db0a      	blt.n	80044e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	490c      	ldr	r1, [pc, #48]	@ (8004508 <__NVIC_SetPriority+0x4c>)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	0112      	lsls	r2, r2, #4
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	440b      	add	r3, r1
 80044e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044e4:	e00a      	b.n	80044fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4908      	ldr	r1, [pc, #32]	@ (800450c <__NVIC_SetPriority+0x50>)
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	3b04      	subs	r3, #4
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	440b      	add	r3, r1
 80044fa:	761a      	strb	r2, [r3, #24]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000e100 	.word	0xe000e100
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	@ 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f1c3 0307 	rsb	r3, r3, #7
 800452a:	2b04      	cmp	r3, #4
 800452c:	bf28      	it	cs
 800452e:	2304      	movcs	r3, #4
 8004530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3304      	adds	r3, #4
 8004536:	2b06      	cmp	r3, #6
 8004538:	d902      	bls.n	8004540 <NVIC_EncodePriority+0x30>
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3b03      	subs	r3, #3
 800453e:	e000      	b.n	8004542 <NVIC_EncodePriority+0x32>
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	401a      	ands	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004558:	f04f 31ff 	mov.w	r1, #4294967295
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	43d9      	mvns	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004568:	4313      	orrs	r3, r2
         );
}
 800456a:	4618      	mov	r0, r3
 800456c:	3724      	adds	r7, #36	@ 0x24
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3b01      	subs	r3, #1
 8004584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004588:	d301      	bcc.n	800458e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800458a:	2301      	movs	r3, #1
 800458c:	e00f      	b.n	80045ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800458e:	4a0a      	ldr	r2, [pc, #40]	@ (80045b8 <SysTick_Config+0x40>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3b01      	subs	r3, #1
 8004594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004596:	210f      	movs	r1, #15
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	f7ff ff8e 	bl	80044bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045a0:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <SysTick_Config+0x40>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045a6:	4b04      	ldr	r3, [pc, #16]	@ (80045b8 <SysTick_Config+0x40>)
 80045a8:	2207      	movs	r2, #7
 80045aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	e000e010 	.word	0xe000e010

080045bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff29 	bl	800441c <__NVIC_SetPriorityGrouping>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b086      	sub	sp, #24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	4603      	mov	r3, r0
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045e0:	f7ff ff40 	bl	8004464 <__NVIC_GetPriorityGrouping>
 80045e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	6978      	ldr	r0, [r7, #20]
 80045ec:	f7ff ff90 	bl	8004510 <NVIC_EncodePriority>
 80045f0:	4602      	mov	r2, r0
 80045f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff5f 	bl	80044bc <__NVIC_SetPriority>
}
 80045fe:	bf00      	nop
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	4603      	mov	r3, r0
 800460e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff ff33 	bl	8004480 <__NVIC_EnableIRQ>
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff ffa4 	bl	8004578 <SysTick_Config>
 8004630:	4603      	mov	r3, r0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e08d      	b.n	800476a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	4b47      	ldr	r3, [pc, #284]	@ (8004774 <HAL_DMA_Init+0x138>)
 8004656:	429a      	cmp	r2, r3
 8004658:	d80f      	bhi.n	800467a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	4b45      	ldr	r3, [pc, #276]	@ (8004778 <HAL_DMA_Init+0x13c>)
 8004662:	4413      	add	r3, r2
 8004664:	4a45      	ldr	r2, [pc, #276]	@ (800477c <HAL_DMA_Init+0x140>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	009a      	lsls	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a42      	ldr	r2, [pc, #264]	@ (8004780 <HAL_DMA_Init+0x144>)
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40
 8004678:	e00e      	b.n	8004698 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	4b40      	ldr	r3, [pc, #256]	@ (8004784 <HAL_DMA_Init+0x148>)
 8004682:	4413      	add	r3, r2
 8004684:	4a3d      	ldr	r2, [pc, #244]	@ (800477c <HAL_DMA_Init+0x140>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	009a      	lsls	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a3c      	ldr	r2, [pc, #240]	@ (8004788 <HAL_DMA_Init+0x14c>)
 8004696:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80046ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f9b6 	bl	8004a5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046f8:	d102      	bne.n	8004700 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004714:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <HAL_DMA_Init+0x104>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b04      	cmp	r3, #4
 8004724:	d80c      	bhi.n	8004740 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f9d6 	bl	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	e008      	b.n	8004752 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40020407 	.word	0x40020407
 8004778:	bffdfff8 	.word	0xbffdfff8
 800477c:	cccccccd 	.word	0xcccccccd
 8004780:	40020000 	.word	0x40020000
 8004784:	bffdfbf8 	.word	0xbffdfbf8
 8004788:	40020400 	.word	0x40020400

0800478c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_DMA_Start_IT+0x20>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e066      	b.n	800487a <HAL_DMA_Start_IT+0xee>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d155      	bne.n	800486c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f8fb 	bl	80049e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 020e 	orr.w	r2, r2, #14
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e00f      	b.n	8004824 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0204 	bic.w	r2, r2, #4
 8004812:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 020a 	orr.w	r2, r2, #10
 8004822:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004840:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004858:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e005      	b.n	8004878 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004874:	2302      	movs	r3, #2
 8004876:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2204      	movs	r2, #4
 80048a4:	409a      	lsls	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d026      	beq.n	80048fc <HAL_DMA_IRQHandler+0x7a>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d021      	beq.n	80048fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d107      	bne.n	80048d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0204 	bic.w	r2, r2, #4
 80048d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	f003 021f 	and.w	r2, r3, #31
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	2104      	movs	r1, #4
 80048e4:	fa01 f202 	lsl.w	r2, r1, r2
 80048e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d071      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048fa:	e06c      	b.n	80049d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2202      	movs	r2, #2
 8004906:	409a      	lsls	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d02e      	beq.n	800496e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d029      	beq.n	800496e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 020a 	bic.w	r2, r2, #10
 8004936:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	f003 021f 	and.w	r2, r3, #31
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	2102      	movs	r1, #2
 800494e:	fa01 f202 	lsl.w	r2, r1, r2
 8004952:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d038      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800496c:	e033      	b.n	80049d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	2208      	movs	r2, #8
 8004978:	409a      	lsls	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d02a      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d025      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 020e 	bic.w	r2, r2, #14
 800499a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a0:	f003 021f 	and.w	r2, r3, #31
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	2101      	movs	r1, #1
 80049aa:	fa01 f202 	lsl.w	r2, r1, r2
 80049ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
}
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0e:	f003 021f 	and.w	r2, r3, #31
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	2101      	movs	r1, #1
 8004a18:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d108      	bne.n	8004a40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a3e:	e007      	b.n	8004a50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4b16      	ldr	r3, [pc, #88]	@ (8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d802      	bhi.n	8004a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a70:	4b15      	ldr	r3, [pc, #84]	@ (8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e001      	b.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a76:	4b15      	ldr	r3, [pc, #84]	@ (8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a78:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	3b08      	subs	r3, #8
 8004a86:	4a12      	ldr	r2, [pc, #72]	@ (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	009a      	lsls	r2, r3, #2
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	2201      	movs	r2, #1
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40020407 	.word	0x40020407
 8004ac8:	40020800 	.word	0x40020800
 8004acc:	40020820 	.word	0x40020820
 8004ad0:	cccccccd 	.word	0xcccccccd
 8004ad4:	40020880 	.word	0x40020880

08004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4b0b      	ldr	r3, [pc, #44]	@ (8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	461a      	mov	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a08      	ldr	r2, [pc, #32]	@ (8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004afa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	2201      	movs	r2, #1
 8004b06:	409a      	lsls	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	1000823f 	.word	0x1000823f
 8004b1c:	40020940 	.word	0x40020940

08004b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b2e:	e15a      	b.n	8004de6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	2101      	movs	r1, #1
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 814c 	beq.w	8004de0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d005      	beq.n	8004b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d130      	bne.n	8004bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b96:	2201      	movs	r2, #1
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	f003 0201 	and.w	r2, r3, #1
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d017      	beq.n	8004bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	2203      	movs	r2, #3
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d123      	bne.n	8004c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	08da      	lsrs	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3208      	adds	r2, #8
 8004c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	220f      	movs	r2, #15
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	08da      	lsrs	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3208      	adds	r2, #8
 8004c4c:	6939      	ldr	r1, [r7, #16]
 8004c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f003 0203 	and.w	r2, r3, #3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80a6 	beq.w	8004de0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c94:	4b5b      	ldr	r3, [pc, #364]	@ (8004e04 <HAL_GPIO_Init+0x2e4>)
 8004c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c98:	4a5a      	ldr	r2, [pc, #360]	@ (8004e04 <HAL_GPIO_Init+0x2e4>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ca0:	4b58      	ldr	r3, [pc, #352]	@ (8004e04 <HAL_GPIO_Init+0x2e4>)
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cac:	4a56      	ldr	r2, [pc, #344]	@ (8004e08 <HAL_GPIO_Init+0x2e8>)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	220f      	movs	r2, #15
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004cd6:	d01f      	beq.n	8004d18 <HAL_GPIO_Init+0x1f8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a4c      	ldr	r2, [pc, #304]	@ (8004e0c <HAL_GPIO_Init+0x2ec>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d019      	beq.n	8004d14 <HAL_GPIO_Init+0x1f4>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a4b      	ldr	r2, [pc, #300]	@ (8004e10 <HAL_GPIO_Init+0x2f0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_GPIO_Init+0x1f0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a4a      	ldr	r2, [pc, #296]	@ (8004e14 <HAL_GPIO_Init+0x2f4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00d      	beq.n	8004d0c <HAL_GPIO_Init+0x1ec>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a49      	ldr	r2, [pc, #292]	@ (8004e18 <HAL_GPIO_Init+0x2f8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <HAL_GPIO_Init+0x1e8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a48      	ldr	r2, [pc, #288]	@ (8004e1c <HAL_GPIO_Init+0x2fc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d101      	bne.n	8004d04 <HAL_GPIO_Init+0x1e4>
 8004d00:	2305      	movs	r3, #5
 8004d02:	e00a      	b.n	8004d1a <HAL_GPIO_Init+0x1fa>
 8004d04:	2306      	movs	r3, #6
 8004d06:	e008      	b.n	8004d1a <HAL_GPIO_Init+0x1fa>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	e006      	b.n	8004d1a <HAL_GPIO_Init+0x1fa>
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e004      	b.n	8004d1a <HAL_GPIO_Init+0x1fa>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e002      	b.n	8004d1a <HAL_GPIO_Init+0x1fa>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <HAL_GPIO_Init+0x1fa>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	f002 0203 	and.w	r2, r2, #3
 8004d20:	0092      	lsls	r2, r2, #2
 8004d22:	4093      	lsls	r3, r2
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d2a:	4937      	ldr	r1, [pc, #220]	@ (8004e08 <HAL_GPIO_Init+0x2e8>)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	3302      	adds	r3, #2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d38:	4b39      	ldr	r3, [pc, #228]	@ (8004e20 <HAL_GPIO_Init+0x300>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d5c:	4a30      	ldr	r2, [pc, #192]	@ (8004e20 <HAL_GPIO_Init+0x300>)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d62:	4b2f      	ldr	r3, [pc, #188]	@ (8004e20 <HAL_GPIO_Init+0x300>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d86:	4a26      	ldr	r2, [pc, #152]	@ (8004e20 <HAL_GPIO_Init+0x300>)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d8c:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <HAL_GPIO_Init+0x300>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004db0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e20 <HAL_GPIO_Init+0x300>)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004db6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <HAL_GPIO_Init+0x300>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dda:	4a11      	ldr	r2, [pc, #68]	@ (8004e20 <HAL_GPIO_Init+0x300>)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3301      	adds	r3, #1
 8004de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f ae9d 	bne.w	8004b30 <HAL_GPIO_Init+0x10>
  }
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	48000400 	.word	0x48000400
 8004e10:	48000800 	.word	0x48000800
 8004e14:	48000c00 	.word	0x48000c00
 8004e18:	48001000 	.word	0x48001000
 8004e1c:	48001400 	.word	0x48001400
 8004e20:	40010400 	.word	0x40010400

08004e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
 8004e30:	4613      	mov	r3, r2
 8004e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e34:	787b      	ldrb	r3, [r7, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e40:	e002      	b.n	8004e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e42:	887a      	ldrh	r2, [r7, #2]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e5e:	4b08      	ldr	r3, [pc, #32]	@ (8004e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e6a:	4a05      	ldr	r2, [pc, #20]	@ (8004e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f806 	bl	8004e84 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40010400 	.word	0x40010400

08004e84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e08d      	b.n	8004fc8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fc ff09 	bl	8001cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2224      	movs	r2, #36	@ 0x24
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004eea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004efa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f10:	609a      	str	r2, [r3, #8]
 8004f12:	e006      	b.n	8004f22 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d108      	bne.n	8004f3c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	e007      	b.n	8004f4c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f5e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69d9      	ldr	r1, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d138      	bne.n	8005058 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e032      	b.n	800505a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	@ 0x24
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005022:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	d139      	bne.n	80050f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005086:	2302      	movs	r3, #2
 8005088:	e033      	b.n	80050f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2224      	movs	r2, #36	@ 0x24
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d141      	bne.n	8005192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800510e:	4b4b      	ldr	r3, [pc, #300]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800511a:	d131      	bne.n	8005180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800511c:	4b47      	ldr	r3, [pc, #284]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005122:	4a46      	ldr	r2, [pc, #280]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800512c:	4b43      	ldr	r3, [pc, #268]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005134:	4a41      	ldr	r2, [pc, #260]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800513a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800513c:	4b40      	ldr	r3, [pc, #256]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2232      	movs	r2, #50	@ 0x32
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	4a3f      	ldr	r2, [pc, #252]	@ (8005244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	0c9b      	lsrs	r3, r3, #18
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005152:	e002      	b.n	800515a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3b01      	subs	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800515a:	4b38      	ldr	r3, [pc, #224]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005166:	d102      	bne.n	800516e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f2      	bne.n	8005154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800516e:	4b33      	ldr	r3, [pc, #204]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517a:	d158      	bne.n	800522e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e057      	b.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005180:	4b2e      	ldr	r3, [pc, #184]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005186:	4a2d      	ldr	r2, [pc, #180]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800518c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005190:	e04d      	b.n	800522e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005198:	d141      	bne.n	800521e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800519a:	4b28      	ldr	r3, [pc, #160]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a6:	d131      	bne.n	800520c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051a8:	4b24      	ldr	r3, [pc, #144]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ae:	4a23      	ldr	r2, [pc, #140]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051c0:	4a1e      	ldr	r2, [pc, #120]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2232      	movs	r2, #50	@ 0x32
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	0c9b      	lsrs	r3, r3, #18
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051de:	e002      	b.n	80051e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051e6:	4b15      	ldr	r3, [pc, #84]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f2:	d102      	bne.n	80051fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f2      	bne.n	80051e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051fa:	4b10      	ldr	r3, [pc, #64]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005206:	d112      	bne.n	800522e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e011      	b.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800520c:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005212:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800521c:	e007      	b.n	800522e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800521e:	4b07      	ldr	r3, [pc, #28]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005226:	4a05      	ldr	r2, [pc, #20]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800522c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40007000 	.word	0x40007000
 8005240:	20000004 	.word	0x20000004
 8005244:	431bde83 	.word	0x431bde83

08005248 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800524c:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005256:	6093      	str	r3, [r2, #8]
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40007000 	.word	0x40007000

08005268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e2fe      	b.n	8005878 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d075      	beq.n	8005372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005286:	4b97      	ldr	r3, [pc, #604]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005290:	4b94      	ldr	r3, [pc, #592]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d102      	bne.n	80052a6 <HAL_RCC_OscConfig+0x3e>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_OscConfig+0x44>
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d10b      	bne.n	80052c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ac:	4b8d      	ldr	r3, [pc, #564]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d05b      	beq.n	8005370 <HAL_RCC_OscConfig+0x108>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d157      	bne.n	8005370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e2d9      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052cc:	d106      	bne.n	80052dc <HAL_RCC_OscConfig+0x74>
 80052ce:	4b85      	ldr	r3, [pc, #532]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a84      	ldr	r2, [pc, #528]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e01d      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x98>
 80052e6:	4b7f      	ldr	r3, [pc, #508]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a7e      	ldr	r2, [pc, #504]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4b7c      	ldr	r3, [pc, #496]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a7b      	ldr	r2, [pc, #492]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e00b      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 8005300:	4b78      	ldr	r3, [pc, #480]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a77      	ldr	r2, [pc, #476]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b75      	ldr	r3, [pc, #468]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a74      	ldr	r2, [pc, #464]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d013      	beq.n	8005348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fd fbd6 	bl	8002ad0 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005328:	f7fd fbd2 	bl	8002ad0 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	@ 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e29e      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533a:	4b6a      	ldr	r3, [pc, #424]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0xc0>
 8005346:	e014      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fd fbc2 	bl	8002ad0 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005350:	f7fd fbbe 	bl	8002ad0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	@ 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e28a      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005362:	4b60      	ldr	r3, [pc, #384]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0xe8>
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d075      	beq.n	800546a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537e:	4b59      	ldr	r3, [pc, #356]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005388:	4b56      	ldr	r3, [pc, #344]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d102      	bne.n	800539e <HAL_RCC_OscConfig+0x136>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d002      	beq.n	80053a4 <HAL_RCC_OscConfig+0x13c>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11f      	bne.n	80053e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053a4:	4b4f      	ldr	r3, [pc, #316]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_OscConfig+0x154>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e25d      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053bc:	4b49      	ldr	r3, [pc, #292]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	4946      	ldr	r1, [pc, #280]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053d0:	4b45      	ldr	r3, [pc, #276]	@ (80054e8 <HAL_RCC_OscConfig+0x280>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fd fb2f 	bl	8002a38 <HAL_InitTick>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d043      	beq.n	8005468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e249      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d023      	beq.n	8005434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ec:	4b3d      	ldr	r3, [pc, #244]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3c      	ldr	r2, [pc, #240]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fd fb6a 	bl	8002ad0 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005400:	f7fd fb66 	bl	8002ad0 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e232      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005412:	4b34      	ldr	r3, [pc, #208]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541e:	4b31      	ldr	r3, [pc, #196]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	061b      	lsls	r3, r3, #24
 800542c:	492d      	ldr	r1, [pc, #180]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]
 8005432:	e01a      	b.n	800546a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005434:	4b2b      	ldr	r3, [pc, #172]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2a      	ldr	r2, [pc, #168]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800543a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fd fb46 	bl	8002ad0 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005448:	f7fd fb42 	bl	8002ad0 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e20e      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800545a:	4b22      	ldr	r3, [pc, #136]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x1e0>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d041      	beq.n	80054fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547e:	4b19      	ldr	r3, [pc, #100]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005484:	4a17      	ldr	r2, [pc, #92]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548e:	f7fd fb1f 	bl	8002ad0 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005496:	f7fd fb1b 	bl	8002ad0 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e1e7      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054a8:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80054aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0ef      	beq.n	8005496 <HAL_RCC_OscConfig+0x22e>
 80054b6:	e020      	b.n	80054fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b8:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054be:	4a09      	ldr	r2, [pc, #36]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fd fb02 	bl	8002ad0 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054ce:	e00d      	b.n	80054ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d0:	f7fd fafe 	bl	8002ad0 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d906      	bls.n	80054ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e1ca      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000
 80054e8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ea      	bne.n	80054d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80a6 	beq.w	8005654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005508:	2300      	movs	r3, #0
 800550a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800550c:	4b84      	ldr	r3, [pc, #528]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x2b4>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x2b6>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	4b7f      	ldr	r3, [pc, #508]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005526:	4a7e      	ldr	r2, [pc, #504]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552c:	6593      	str	r3, [r2, #88]	@ 0x58
 800552e:	4b7c      	ldr	r3, [pc, #496]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800553a:	2301      	movs	r3, #1
 800553c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800553e:	4b79      	ldr	r3, [pc, #484]	@ (8005724 <HAL_RCC_OscConfig+0x4bc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d118      	bne.n	800557c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800554a:	4b76      	ldr	r3, [pc, #472]	@ (8005724 <HAL_RCC_OscConfig+0x4bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a75      	ldr	r2, [pc, #468]	@ (8005724 <HAL_RCC_OscConfig+0x4bc>)
 8005550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005556:	f7fd fabb 	bl	8002ad0 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555e:	f7fd fab7 	bl	8002ad0 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e183      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005570:	4b6c      	ldr	r3, [pc, #432]	@ (8005724 <HAL_RCC_OscConfig+0x4bc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d108      	bne.n	8005596 <HAL_RCC_OscConfig+0x32e>
 8005584:	4b66      	ldr	r3, [pc, #408]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	4a65      	ldr	r2, [pc, #404]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005594:	e024      	b.n	80055e0 <HAL_RCC_OscConfig+0x378>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b05      	cmp	r3, #5
 800559c:	d110      	bne.n	80055c0 <HAL_RCC_OscConfig+0x358>
 800559e:	4b60      	ldr	r3, [pc, #384]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a4:	4a5e      	ldr	r2, [pc, #376]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055a6:	f043 0304 	orr.w	r3, r3, #4
 80055aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055be:	e00f      	b.n	80055e0 <HAL_RCC_OscConfig+0x378>
 80055c0:	4b57      	ldr	r3, [pc, #348]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	4a56      	ldr	r2, [pc, #344]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055d0:	4b53      	ldr	r3, [pc, #332]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	4a52      	ldr	r2, [pc, #328]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055d8:	f023 0304 	bic.w	r3, r3, #4
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d016      	beq.n	8005616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fd fa72 	bl	8002ad0 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fd fa6e 	bl	8002ad0 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e138      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005606:	4b46      	ldr	r3, [pc, #280]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ed      	beq.n	80055f0 <HAL_RCC_OscConfig+0x388>
 8005614:	e015      	b.n	8005642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fd fa5b 	bl	8002ad0 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800561c:	e00a      	b.n	8005634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fd fa57 	bl	8002ad0 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e121      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005634:	4b3a      	ldr	r3, [pc, #232]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ed      	bne.n	800561e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005642:	7ffb      	ldrb	r3, [r7, #31]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d105      	bne.n	8005654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005648:	4b35      	ldr	r3, [pc, #212]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	4a34      	ldr	r2, [pc, #208]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800564e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005652:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d03c      	beq.n	80056da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005668:	4b2d      	ldr	r3, [pc, #180]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800566a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800566e:	4a2c      	ldr	r2, [pc, #176]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fd fa2a 	bl	8002ad0 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005680:	f7fd fa26 	bl	8002ad0 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e0f2      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005692:	4b23      	ldr	r3, [pc, #140]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ef      	beq.n	8005680 <HAL_RCC_OscConfig+0x418>
 80056a0:	e01b      	b.n	80056da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b2:	f7fd fa0d 	bl	8002ad0 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056ba:	f7fd fa09 	bl	8002ad0 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e0d5      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056cc:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ef      	bne.n	80056ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80c9 	beq.w	8005876 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b0c      	cmp	r3, #12
 80056ee:	f000 8083 	beq.w	80057f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d15e      	bne.n	80057b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fa:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a08      	ldr	r2, [pc, #32]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fd f9e3 	bl	8002ad0 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570c:	e00c      	b.n	8005728 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570e:	f7fd f9df 	bl	8002ad0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d905      	bls.n	8005728 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e0ab      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
 8005720:	40021000 	.word	0x40021000
 8005724:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005728:	4b55      	ldr	r3, [pc, #340]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1ec      	bne.n	800570e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005734:	4b52      	ldr	r3, [pc, #328]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	4b52      	ldr	r3, [pc, #328]	@ (8005884 <HAL_RCC_OscConfig+0x61c>)
 800573a:	4013      	ands	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6a11      	ldr	r1, [r2, #32]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005744:	3a01      	subs	r2, #1
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	4311      	orrs	r1, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800574e:	0212      	lsls	r2, r2, #8
 8005750:	4311      	orrs	r1, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005756:	0852      	lsrs	r2, r2, #1
 8005758:	3a01      	subs	r2, #1
 800575a:	0552      	lsls	r2, r2, #21
 800575c:	4311      	orrs	r1, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005762:	0852      	lsrs	r2, r2, #1
 8005764:	3a01      	subs	r2, #1
 8005766:	0652      	lsls	r2, r2, #25
 8005768:	4311      	orrs	r1, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800576e:	06d2      	lsls	r2, r2, #27
 8005770:	430a      	orrs	r2, r1
 8005772:	4943      	ldr	r1, [pc, #268]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 8005774:	4313      	orrs	r3, r2
 8005776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005778:	4b41      	ldr	r3, [pc, #260]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a40      	ldr	r2, [pc, #256]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 800577e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005784:	4b3e      	ldr	r3, [pc, #248]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a3d      	ldr	r2, [pc, #244]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 800578a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800578e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fd f99e 	bl	8002ad0 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005798:	f7fd f99a 	bl	8002ad0 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e066      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057aa:	4b35      	ldr	r3, [pc, #212]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x530>
 80057b6:	e05e      	b.n	8005876 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b8:	4b31      	ldr	r3, [pc, #196]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a30      	ldr	r2, [pc, #192]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fd f984 	bl	8002ad0 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fd f980 	bl	8002ad0 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e04c      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057de:	4b28      	ldr	r3, [pc, #160]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80057ea:	4b25      	ldr	r3, [pc, #148]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	4924      	ldr	r1, [pc, #144]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057f0:	4b25      	ldr	r3, [pc, #148]	@ (8005888 <HAL_RCC_OscConfig+0x620>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	60cb      	str	r3, [r1, #12]
 80057f6:	e03e      	b.n	8005876 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e039      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005804:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f003 0203 	and.w	r2, r3, #3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	429a      	cmp	r2, r3
 8005816:	d12c      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	3b01      	subs	r3, #1
 8005824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005826:	429a      	cmp	r2, r3
 8005828:	d123      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d11b      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d113      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	3b01      	subs	r3, #1
 8005858:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d109      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	3b01      	subs	r3, #1
 800586c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d001      	beq.n	8005876 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	019f800c 	.word	0x019f800c
 8005888:	feeefffc 	.word	0xfeeefffc

0800588c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e11e      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a4:	4b91      	ldr	r3, [pc, #580]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d910      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b8e      	ldr	r3, [pc, #568]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 020f 	bic.w	r2, r3, #15
 80058ba:	498c      	ldr	r1, [pc, #560]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b8a      	ldr	r3, [pc, #552]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e106      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d073      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d129      	bne.n	800593c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e8:	4b81      	ldr	r3, [pc, #516]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0f4      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80058f8:	f000 f99e 	bl	8005c38 <RCC_GetSysClockFreqFromPLLSource>
 80058fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4a7c      	ldr	r2, [pc, #496]	@ (8005af4 <HAL_RCC_ClockConfig+0x268>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d93f      	bls.n	8005986 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005906:	4b7a      	ldr	r3, [pc, #488]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800591a:	2b00      	cmp	r3, #0
 800591c:	d033      	beq.n	8005986 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12f      	bne.n	8005986 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005926:	4b72      	ldr	r3, [pc, #456]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800592e:	4a70      	ldr	r2, [pc, #448]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005936:	2380      	movs	r3, #128	@ 0x80
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e024      	b.n	8005986 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d107      	bne.n	8005954 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005944:	4b6a      	ldr	r3, [pc, #424]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0c6      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005954:	4b66      	ldr	r3, [pc, #408]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0be      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005964:	f000 f8ce 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005968:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4a61      	ldr	r2, [pc, #388]	@ (8005af4 <HAL_RCC_ClockConfig+0x268>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d909      	bls.n	8005986 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005972:	4b5f      	ldr	r3, [pc, #380]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800597a:	4a5d      	ldr	r2, [pc, #372]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 800597c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005980:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005986:	4b5a      	ldr	r3, [pc, #360]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4957      	ldr	r1, [pc, #348]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005998:	f7fd f89a 	bl	8002ad0 <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a0:	f7fd f896 	bl	8002ad0 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e095      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	4b4e      	ldr	r3, [pc, #312]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 020c 	and.w	r2, r3, #12
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1eb      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d023      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059e0:	4b43      	ldr	r3, [pc, #268]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a42      	ldr	r2, [pc, #264]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80059e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80059f8:	4b3d      	ldr	r3, [pc, #244]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a00:	4a3b      	ldr	r2, [pc, #236]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a08:	4b39      	ldr	r3, [pc, #228]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4936      	ldr	r1, [pc, #216]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b80      	cmp	r3, #128	@ 0x80
 8005a20:	d105      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a22:	4b33      	ldr	r3, [pc, #204]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	4a32      	ldr	r2, [pc, #200]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d21d      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f023 020f 	bic.w	r2, r3, #15
 8005a44:	4929      	ldr	r1, [pc, #164]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a4c:	f7fd f840 	bl	8002ad0 <HAL_GetTick>
 8005a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fd f83c 	bl	8002ad0 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e03b      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b20      	ldr	r3, [pc, #128]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d1ed      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a84:	4b1a      	ldr	r3, [pc, #104]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4917      	ldr	r1, [pc, #92]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aa2:	4b13      	ldr	r3, [pc, #76]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	490f      	ldr	r1, [pc, #60]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ab6:	f000 f825 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005aba:	4602      	mov	r2, r0
 8005abc:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	490c      	ldr	r1, [pc, #48]	@ (8005af8 <HAL_RCC_ClockConfig+0x26c>)
 8005ac8:	5ccb      	ldrb	r3, [r1, r3]
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <HAL_RCC_ClockConfig+0x270>)
 8005ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <HAL_RCC_ClockConfig+0x274>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fc ffac 	bl	8002a38 <HAL_InitTick>
 8005ae0:	4603      	mov	r3, r0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40022000 	.word	0x40022000
 8005af0:	40021000 	.word	0x40021000
 8005af4:	04c4b400 	.word	0x04c4b400
 8005af8:	08008e40 	.word	0x08008e40
 8005afc:	20000004 	.word	0x20000004
 8005b00:	20000008 	.word	0x20000008

08005b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d102      	bne.n	8005b1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b16:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	e047      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b1c:	4b27      	ldr	r3, [pc, #156]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 030c 	and.w	r3, r3, #12
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d102      	bne.n	8005b2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b28:	4b26      	ldr	r3, [pc, #152]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	e03e      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b2e:	4b23      	ldr	r3, [pc, #140]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d136      	bne.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b3a:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b44:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d10c      	bne.n	8005b72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b58:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	4a16      	ldr	r2, [pc, #88]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b62:	68d2      	ldr	r2, [r2, #12]
 8005b64:	0a12      	lsrs	r2, r2, #8
 8005b66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	617b      	str	r3, [r7, #20]
      break;
 8005b70:	e00c      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b72:	4a13      	ldr	r2, [pc, #76]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	4a10      	ldr	r2, [pc, #64]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b7c:	68d2      	ldr	r2, [r2, #12]
 8005b7e:	0a12      	lsrs	r2, r2, #8
 8005b80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b84:	fb02 f303 	mul.w	r3, r2, r3
 8005b88:	617b      	str	r3, [r7, #20]
      break;
 8005b8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	0e5b      	lsrs	r3, r3, #25
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	3301      	adds	r3, #1
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e001      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bac:	693b      	ldr	r3, [r7, #16]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	00f42400 	.word	0x00f42400
 8005bc4:	016e3600 	.word	0x016e3600

08005bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bcc:	4b03      	ldr	r3, [pc, #12]	@ (8005bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000004 	.word	0x20000004

08005be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005be4:	f7ff fff0 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	4904      	ldr	r1, [pc, #16]	@ (8005c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	08008e50 	.word	0x08008e50

08005c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c10:	f7ff ffda 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	0adb      	lsrs	r3, r3, #11
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4904      	ldr	r1, [pc, #16]	@ (8005c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40021000 	.word	0x40021000
 8005c34:	08008e50 	.word	0x08008e50

08005c38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d10c      	bne.n	8005c76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c5c:	4a17      	ldr	r2, [pc, #92]	@ (8005cbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	4a14      	ldr	r2, [pc, #80]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c66:	68d2      	ldr	r2, [r2, #12]
 8005c68:	0a12      	lsrs	r2, r2, #8
 8005c6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	617b      	str	r3, [r7, #20]
    break;
 8005c74:	e00c      	b.n	8005c90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c76:	4a12      	ldr	r2, [pc, #72]	@ (8005cc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c80:	68d2      	ldr	r2, [r2, #12]
 8005c82:	0a12      	lsrs	r2, r2, #8
 8005c84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]
    break;
 8005c8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c90:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	0e5b      	lsrs	r3, r3, #25
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005caa:	687b      	ldr	r3, [r7, #4]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	016e3600 	.word	0x016e3600
 8005cc0:	00f42400 	.word	0x00f42400

08005cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ccc:	2300      	movs	r3, #0
 8005cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8098 	beq.w	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce6:	4b43      	ldr	r3, [pc, #268]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10d      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	4b40      	ldr	r3, [pc, #256]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a39      	ldr	r2, [pc, #228]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d1a:	f7fc fed9 	bl	8002ad0 <HAL_GetTick>
 8005d1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d20:	e009      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d22:	f7fc fed5 	bl	8002ad0 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d902      	bls.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	74fb      	strb	r3, [r7, #19]
        break;
 8005d34:	e005      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d36:	4b30      	ldr	r3, [pc, #192]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0ef      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d42:	7cfb      	ldrb	r3, [r7, #19]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d159      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d48:	4b2a      	ldr	r3, [pc, #168]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01e      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d019      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d64:	4b23      	ldr	r3, [pc, #140]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d70:	4b20      	ldr	r3, [pc, #128]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d76:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d80:	4b1c      	ldr	r3, [pc, #112]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d86:	4a1b      	ldr	r2, [pc, #108]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d90:	4a18      	ldr	r2, [pc, #96]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d016      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da2:	f7fc fe95 	bl	8002ad0 <HAL_GetTick>
 8005da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005da8:	e00b      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f7fc fe91 	bl	8002ad0 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d902      	bls.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8005dc0:	e006      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0ec      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dd6:	4b07      	ldr	r3, [pc, #28]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de4:	4903      	ldr	r1, [pc, #12]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005dec:	e008      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	74bb      	strb	r3, [r7, #18]
 8005df2:	e005      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005df4:	40021000 	.word	0x40021000
 8005df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e00:	7c7b      	ldrb	r3, [r7, #17]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d105      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e06:	4ba7      	ldr	r3, [pc, #668]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0a:	4aa6      	ldr	r2, [pc, #664]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e1e:	4ba1      	ldr	r3, [pc, #644]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e24:	f023 0203 	bic.w	r2, r3, #3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	499d      	ldr	r1, [pc, #628]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e40:	4b98      	ldr	r3, [pc, #608]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e46:	f023 020c 	bic.w	r2, r3, #12
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	4995      	ldr	r1, [pc, #596]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e62:	4b90      	ldr	r3, [pc, #576]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	498c      	ldr	r1, [pc, #560]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e84:	4b87      	ldr	r3, [pc, #540]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	4984      	ldr	r1, [pc, #528]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	497b      	ldr	r1, [pc, #492]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ec8:	4b76      	ldr	r3, [pc, #472]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ece:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	4973      	ldr	r1, [pc, #460]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eea:	4b6e      	ldr	r3, [pc, #440]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	496a      	ldr	r1, [pc, #424]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f0c:	4b65      	ldr	r3, [pc, #404]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	4962      	ldr	r1, [pc, #392]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	4959      	ldr	r1, [pc, #356]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f50:	4b54      	ldr	r3, [pc, #336]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f56:	f023 0203 	bic.w	r2, r3, #3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	4951      	ldr	r1, [pc, #324]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f72:	4b4c      	ldr	r3, [pc, #304]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	4948      	ldr	r1, [pc, #288]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f94:	4b43      	ldr	r3, [pc, #268]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa2:	4940      	ldr	r1, [pc, #256]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fb2:	d105      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d015      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fcc:	4b35      	ldr	r3, [pc, #212]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fda:	4932      	ldr	r1, [pc, #200]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fea:	d105      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fec:	4b2d      	ldr	r3, [pc, #180]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ff6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d015      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006004:	4b27      	ldr	r3, [pc, #156]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	4924      	ldr	r1, [pc, #144]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006022:	d105      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006024:	4b1f      	ldr	r3, [pc, #124]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4a1e      	ldr	r2, [pc, #120]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800602e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d015      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800603c:	4b19      	ldr	r3, [pc, #100]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006042:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604a:	4916      	ldr	r1, [pc, #88]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800605a:	d105      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800605c:	4b11      	ldr	r3, [pc, #68]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	4a10      	ldr	r2, [pc, #64]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006066:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d019      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006074:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	4908      	ldr	r1, [pc, #32]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006092:	d109      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006094:	4b03      	ldr	r3, [pc, #12]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4a02      	ldr	r2, [pc, #8]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800609e:	60d3      	str	r3, [r2, #12]
 80060a0:	e002      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80060a2:	bf00      	nop
 80060a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d015      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060b4:	4b29      	ldr	r3, [pc, #164]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c2:	4926      	ldr	r1, [pc, #152]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d2:	d105      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060d4:	4b21      	ldr	r3, [pc, #132]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a20      	ldr	r2, [pc, #128]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d015      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060ec:	4b1b      	ldr	r3, [pc, #108]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fa:	4918      	ldr	r1, [pc, #96]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610a:	d105      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800610c:	4b13      	ldr	r3, [pc, #76]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a12      	ldr	r2, [pc, #72]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006116:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d015      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006124:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800612a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006132:	490a      	ldr	r1, [pc, #40]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800613e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006142:	d105      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006144:	4b05      	ldr	r3, [pc, #20]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a04      	ldr	r2, [pc, #16]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800614a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800614e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006150:	7cbb      	ldrb	r3, [r7, #18]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000

08006160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e049      	b.n	8006206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fc f9d4 	bl	8002534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f001 f86e 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	d001      	beq.n	8006228 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e04c      	b.n	80062c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a26      	ldr	r2, [pc, #152]	@ (80062d0 <HAL_TIM_Base_Start+0xc0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d022      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006242:	d01d      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a22      	ldr	r2, [pc, #136]	@ (80062d4 <HAL_TIM_Base_Start+0xc4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d018      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a21      	ldr	r2, [pc, #132]	@ (80062d8 <HAL_TIM_Base_Start+0xc8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1f      	ldr	r2, [pc, #124]	@ (80062dc <HAL_TIM_Base_Start+0xcc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00e      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1e      	ldr	r2, [pc, #120]	@ (80062e0 <HAL_TIM_Base_Start+0xd0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <HAL_TIM_Base_Start+0xd4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <HAL_TIM_Base_Start+0xd8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d115      	bne.n	80062ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	4b19      	ldr	r3, [pc, #100]	@ (80062ec <HAL_TIM_Base_Start+0xdc>)
 8006288:	4013      	ands	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b06      	cmp	r3, #6
 8006290:	d015      	beq.n	80062be <HAL_TIM_Base_Start+0xae>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006298:	d011      	beq.n	80062be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	e008      	b.n	80062be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e000      	b.n	80062c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40013400 	.word	0x40013400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40015000 	.word	0x40015000
 80062ec:	00010007 	.word	0x00010007

080062f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d001      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e054      	b.n	80063b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a26      	ldr	r2, [pc, #152]	@ (80063c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006332:	d01d      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a22      	ldr	r2, [pc, #136]	@ (80063c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a21      	ldr	r2, [pc, #132]	@ (80063c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1f      	ldr	r2, [pc, #124]	@ (80063cc <HAL_TIM_Base_Start_IT+0xdc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1e      	ldr	r2, [pc, #120]	@ (80063d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1c      	ldr	r2, [pc, #112]	@ (80063d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d115      	bne.n	800639c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	4b19      	ldr	r3, [pc, #100]	@ (80063dc <HAL_TIM_Base_Start_IT+0xec>)
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b06      	cmp	r3, #6
 8006380:	d015      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0xbe>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d011      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639a:	e008      	b.n	80063ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e000      	b.n	80063b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40012c00 	.word	0x40012c00
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40013400 	.word	0x40013400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40015000 	.word	0x40015000
 80063dc:	00010007 	.word	0x00010007

080063e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e049      	b.n	8006486 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fc f958 	bl	80026bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f000 ff2e 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <HAL_TIM_PWM_Start+0x24>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	bf14      	ite	ne
 80064ac:	2301      	movne	r3, #1
 80064ae:	2300      	moveq	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	e03c      	b.n	800652e <HAL_TIM_PWM_Start+0x9e>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d109      	bne.n	80064ce <HAL_TIM_PWM_Start+0x3e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	bf14      	ite	ne
 80064c6:	2301      	movne	r3, #1
 80064c8:	2300      	moveq	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	e02f      	b.n	800652e <HAL_TIM_PWM_Start+0x9e>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d109      	bne.n	80064e8 <HAL_TIM_PWM_Start+0x58>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	bf14      	ite	ne
 80064e0:	2301      	movne	r3, #1
 80064e2:	2300      	moveq	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	e022      	b.n	800652e <HAL_TIM_PWM_Start+0x9e>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	d109      	bne.n	8006502 <HAL_TIM_PWM_Start+0x72>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	bf14      	ite	ne
 80064fa:	2301      	movne	r3, #1
 80064fc:	2300      	moveq	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	e015      	b.n	800652e <HAL_TIM_PWM_Start+0x9e>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b10      	cmp	r3, #16
 8006506:	d109      	bne.n	800651c <HAL_TIM_PWM_Start+0x8c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e008      	b.n	800652e <HAL_TIM_PWM_Start+0x9e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b01      	cmp	r3, #1
 8006526:	bf14      	ite	ne
 8006528:	2301      	movne	r3, #1
 800652a:	2300      	moveq	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e0a6      	b.n	8006684 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <HAL_TIM_PWM_Start+0xb6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006544:	e023      	b.n	800658e <HAL_TIM_PWM_Start+0xfe>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b04      	cmp	r3, #4
 800654a:	d104      	bne.n	8006556 <HAL_TIM_PWM_Start+0xc6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006554:	e01b      	b.n	800658e <HAL_TIM_PWM_Start+0xfe>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d104      	bne.n	8006566 <HAL_TIM_PWM_Start+0xd6>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006564:	e013      	b.n	800658e <HAL_TIM_PWM_Start+0xfe>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b0c      	cmp	r3, #12
 800656a:	d104      	bne.n	8006576 <HAL_TIM_PWM_Start+0xe6>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006574:	e00b      	b.n	800658e <HAL_TIM_PWM_Start+0xfe>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b10      	cmp	r3, #16
 800657a:	d104      	bne.n	8006586 <HAL_TIM_PWM_Start+0xf6>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006584:	e003      	b.n	800658e <HAL_TIM_PWM_Start+0xfe>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2201      	movs	r2, #1
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f001 fc16 	bl	8007dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a3a      	ldr	r2, [pc, #232]	@ (800668c <HAL_TIM_PWM_Start+0x1fc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <HAL_TIM_PWM_Start+0x148>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a39      	ldr	r2, [pc, #228]	@ (8006690 <HAL_TIM_PWM_Start+0x200>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <HAL_TIM_PWM_Start+0x148>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a37      	ldr	r2, [pc, #220]	@ (8006694 <HAL_TIM_PWM_Start+0x204>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <HAL_TIM_PWM_Start+0x148>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a36      	ldr	r2, [pc, #216]	@ (8006698 <HAL_TIM_PWM_Start+0x208>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <HAL_TIM_PWM_Start+0x148>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a34      	ldr	r2, [pc, #208]	@ (800669c <HAL_TIM_PWM_Start+0x20c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <HAL_TIM_PWM_Start+0x148>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a33      	ldr	r2, [pc, #204]	@ (80066a0 <HAL_TIM_PWM_Start+0x210>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <HAL_TIM_PWM_Start+0x14c>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <HAL_TIM_PWM_Start+0x14e>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a25      	ldr	r2, [pc, #148]	@ (800668c <HAL_TIM_PWM_Start+0x1fc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1b2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006604:	d01d      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1b2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a26      	ldr	r2, [pc, #152]	@ (80066a4 <HAL_TIM_PWM_Start+0x214>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d018      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1b2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a24      	ldr	r2, [pc, #144]	@ (80066a8 <HAL_TIM_PWM_Start+0x218>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1b2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a23      	ldr	r2, [pc, #140]	@ (80066ac <HAL_TIM_PWM_Start+0x21c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00e      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1b2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a19      	ldr	r2, [pc, #100]	@ (8006690 <HAL_TIM_PWM_Start+0x200>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1b2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a18      	ldr	r2, [pc, #96]	@ (8006694 <HAL_TIM_PWM_Start+0x204>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d004      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1b2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a18      	ldr	r2, [pc, #96]	@ (80066a0 <HAL_TIM_PWM_Start+0x210>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d115      	bne.n	800666e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	4b19      	ldr	r3, [pc, #100]	@ (80066b0 <HAL_TIM_PWM_Start+0x220>)
 800664a:	4013      	ands	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b06      	cmp	r3, #6
 8006652:	d015      	beq.n	8006680 <HAL_TIM_PWM_Start+0x1f0>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800665a:	d011      	beq.n	8006680 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666c:	e008      	b.n	8006680 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	e000      	b.n	8006682 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006680:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40013400 	.word	0x40013400
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400
 800669c:	40014800 	.word	0x40014800
 80066a0:	40015000 	.word	0x40015000
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00
 80066b0:	00010007 	.word	0x00010007

080066b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e049      	b.n	800675a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f841 	bl	8006762 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f000 fdc4 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <HAL_TIM_IC_Start_IT+0x1e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006792:	b2db      	uxtb	r3, r3
 8006794:	e023      	b.n	80067de <HAL_TIM_IC_Start_IT+0x66>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b04      	cmp	r3, #4
 800679a:	d104      	bne.n	80067a6 <HAL_TIM_IC_Start_IT+0x2e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	e01b      	b.n	80067de <HAL_TIM_IC_Start_IT+0x66>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d104      	bne.n	80067b6 <HAL_TIM_IC_Start_IT+0x3e>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	e013      	b.n	80067de <HAL_TIM_IC_Start_IT+0x66>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b0c      	cmp	r3, #12
 80067ba:	d104      	bne.n	80067c6 <HAL_TIM_IC_Start_IT+0x4e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	e00b      	b.n	80067de <HAL_TIM_IC_Start_IT+0x66>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d104      	bne.n	80067d6 <HAL_TIM_IC_Start_IT+0x5e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	e003      	b.n	80067de <HAL_TIM_IC_Start_IT+0x66>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <HAL_TIM_IC_Start_IT+0x78>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	e013      	b.n	8006818 <HAL_TIM_IC_Start_IT+0xa0>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d104      	bne.n	8006800 <HAL_TIM_IC_Start_IT+0x88>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	e00b      	b.n	8006818 <HAL_TIM_IC_Start_IT+0xa0>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b08      	cmp	r3, #8
 8006804:	d104      	bne.n	8006810 <HAL_TIM_IC_Start_IT+0x98>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e003      	b.n	8006818 <HAL_TIM_IC_Start_IT+0xa0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006816:	b2db      	uxtb	r3, r3
 8006818:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d102      	bne.n	8006826 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006820:	7b7b      	ldrb	r3, [r7, #13]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d001      	beq.n	800682a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e0e2      	b.n	80069f0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_TIM_IC_Start_IT+0xc2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006838:	e023      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x10a>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d104      	bne.n	800684a <HAL_TIM_IC_Start_IT+0xd2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006848:	e01b      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x10a>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d104      	bne.n	800685a <HAL_TIM_IC_Start_IT+0xe2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006858:	e013      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x10a>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b0c      	cmp	r3, #12
 800685e:	d104      	bne.n	800686a <HAL_TIM_IC_Start_IT+0xf2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006868:	e00b      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x10a>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b10      	cmp	r3, #16
 800686e:	d104      	bne.n	800687a <HAL_TIM_IC_Start_IT+0x102>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006878:	e003      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x10a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2202      	movs	r2, #2
 800687e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <HAL_TIM_IC_Start_IT+0x11a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006890:	e013      	b.n	80068ba <HAL_TIM_IC_Start_IT+0x142>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_IC_Start_IT+0x12a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068a0:	e00b      	b.n	80068ba <HAL_TIM_IC_Start_IT+0x142>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_IC_Start_IT+0x13a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068b0:	e003      	b.n	80068ba <HAL_TIM_IC_Start_IT+0x142>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b0c      	cmp	r3, #12
 80068be:	d841      	bhi.n	8006944 <HAL_TIM_IC_Start_IT+0x1cc>
 80068c0:	a201      	add	r2, pc, #4	@ (adr r2, 80068c8 <HAL_TIM_IC_Start_IT+0x150>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068fd 	.word	0x080068fd
 80068cc:	08006945 	.word	0x08006945
 80068d0:	08006945 	.word	0x08006945
 80068d4:	08006945 	.word	0x08006945
 80068d8:	0800690f 	.word	0x0800690f
 80068dc:	08006945 	.word	0x08006945
 80068e0:	08006945 	.word	0x08006945
 80068e4:	08006945 	.word	0x08006945
 80068e8:	08006921 	.word	0x08006921
 80068ec:	08006945 	.word	0x08006945
 80068f0:	08006945 	.word	0x08006945
 80068f4:	08006945 	.word	0x08006945
 80068f8:	08006933 	.word	0x08006933
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0202 	orr.w	r2, r2, #2
 800690a:	60da      	str	r2, [r3, #12]
      break;
 800690c:	e01d      	b.n	800694a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0204 	orr.w	r2, r2, #4
 800691c:	60da      	str	r2, [r3, #12]
      break;
 800691e:	e014      	b.n	800694a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0208 	orr.w	r2, r2, #8
 800692e:	60da      	str	r2, [r3, #12]
      break;
 8006930:	e00b      	b.n	800694a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0210 	orr.w	r2, r2, #16
 8006940:	60da      	str	r2, [r3, #12]
      break;
 8006942:	e002      	b.n	800694a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	bf00      	nop
  }

  if (status == HAL_OK)
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d14e      	bne.n	80069ee <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2201      	movs	r2, #1
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	4618      	mov	r0, r3
 800695a:	f001 fa35 	bl	8007dc8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a25      	ldr	r2, [pc, #148]	@ (80069f8 <HAL_TIM_IC_Start_IT+0x280>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d022      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x236>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006970:	d01d      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x236>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a21      	ldr	r2, [pc, #132]	@ (80069fc <HAL_TIM_IC_Start_IT+0x284>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d018      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x236>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1f      	ldr	r2, [pc, #124]	@ (8006a00 <HAL_TIM_IC_Start_IT+0x288>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x236>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1e      	ldr	r2, [pc, #120]	@ (8006a04 <HAL_TIM_IC_Start_IT+0x28c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00e      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x236>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1c      	ldr	r2, [pc, #112]	@ (8006a08 <HAL_TIM_IC_Start_IT+0x290>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d009      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x236>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1b      	ldr	r2, [pc, #108]	@ (8006a0c <HAL_TIM_IC_Start_IT+0x294>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d004      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x236>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a19      	ldr	r2, [pc, #100]	@ (8006a10 <HAL_TIM_IC_Start_IT+0x298>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d115      	bne.n	80069da <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	4b17      	ldr	r3, [pc, #92]	@ (8006a14 <HAL_TIM_IC_Start_IT+0x29c>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b06      	cmp	r3, #6
 80069be:	d015      	beq.n	80069ec <HAL_TIM_IC_Start_IT+0x274>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c6:	d011      	beq.n	80069ec <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d8:	e008      	b.n	80069ec <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 0201 	orr.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	e000      	b.n	80069ee <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40000400 	.word	0x40000400
 8006a00:	40000800 	.word	0x40000800
 8006a04:	40000c00 	.word	0x40000c00
 8006a08:	40013400 	.word	0x40013400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40015000 	.word	0x40015000
 8006a14:	00010007 	.word	0x00010007

08006a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d020      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01b      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0202 	mvn.w	r2, #2
 8006a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fb fa65 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fbea 	bl	8007244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fbf1 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d020      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0204 	mvn.w	r2, #4
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fb fa3f 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fbc4 	bl	8007244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fbcb 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d020      	beq.n	8006b14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01b      	beq.n	8006b14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0208 	mvn.w	r2, #8
 8006ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fb fa19 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fb9e 	bl	8007244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fba5 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d020      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01b      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0210 	mvn.w	r2, #16
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2208      	movs	r2, #8
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fb f9f3 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fb78 	bl	8007244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fb7f 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0201 	mvn.w	r2, #1
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fb f9e2 	bl	8001f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d104      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 fa65 	bl	800807c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00c      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 fa5d 	bl	8008090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00c      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fb39 	bl	800726c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00c      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f06f 0220 	mvn.w	r2, #32
 8006c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 fa25 	bl	8008068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00c      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 fa31 	bl	80080a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00c      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 fa29 	bl	80080b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00c      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fa21 	bl	80080cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00c      	beq.n	8006cae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 fa19 	bl	80080e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e088      	b.n	8006de6 <HAL_TIM_IC_ConfigChannel+0x130>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d11b      	bne.n	8006d1a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006cf2:	f000 fea3 	bl	8007a3c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 020c 	bic.w	r2, r2, #12
 8006d04:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6999      	ldr	r1, [r3, #24]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	619a      	str	r2, [r3, #24]
 8006d18:	e060      	b.n	8006ddc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d11c      	bne.n	8006d5a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006d30:	f000 ff27 	bl	8007b82 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006d42:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6999      	ldr	r1, [r3, #24]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	619a      	str	r2, [r3, #24]
 8006d58:	e040      	b.n	8006ddc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d11b      	bne.n	8006d98 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006d70:	f000 ff74 	bl	8007c5c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 020c 	bic.w	r2, r2, #12
 8006d82:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69d9      	ldr	r1, [r3, #28]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	61da      	str	r2, [r3, #28]
 8006d96:	e021      	b.n	8006ddc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b0c      	cmp	r3, #12
 8006d9c:	d11c      	bne.n	8006dd8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006dae:	f000 ff91 	bl	8007cd4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006dc0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69d9      	ldr	r1, [r3, #28]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	021a      	lsls	r2, r3, #8
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	61da      	str	r2, [r3, #28]
 8006dd6:	e001      	b.n	8006ddc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e0ff      	b.n	800700e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b14      	cmp	r3, #20
 8006e1a:	f200 80f0 	bhi.w	8006ffe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e79 	.word	0x08006e79
 8006e28:	08006fff 	.word	0x08006fff
 8006e2c:	08006fff 	.word	0x08006fff
 8006e30:	08006fff 	.word	0x08006fff
 8006e34:	08006eb9 	.word	0x08006eb9
 8006e38:	08006fff 	.word	0x08006fff
 8006e3c:	08006fff 	.word	0x08006fff
 8006e40:	08006fff 	.word	0x08006fff
 8006e44:	08006efb 	.word	0x08006efb
 8006e48:	08006fff 	.word	0x08006fff
 8006e4c:	08006fff 	.word	0x08006fff
 8006e50:	08006fff 	.word	0x08006fff
 8006e54:	08006f3b 	.word	0x08006f3b
 8006e58:	08006fff 	.word	0x08006fff
 8006e5c:	08006fff 	.word	0x08006fff
 8006e60:	08006fff 	.word	0x08006fff
 8006e64:	08006f7d 	.word	0x08006f7d
 8006e68:	08006fff 	.word	0x08006fff
 8006e6c:	08006fff 	.word	0x08006fff
 8006e70:	08006fff 	.word	0x08006fff
 8006e74:	08006fbd 	.word	0x08006fbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fab2 	bl	80073e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699a      	ldr	r2, [r3, #24]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0208 	orr.w	r2, r2, #8
 8006e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0204 	bic.w	r2, r2, #4
 8006ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6999      	ldr	r1, [r3, #24]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	619a      	str	r2, [r3, #24]
      break;
 8006eb6:	e0a5      	b.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fb2c 	bl	800751c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6999      	ldr	r1, [r3, #24]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	021a      	lsls	r2, r3, #8
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	619a      	str	r2, [r3, #24]
      break;
 8006ef8:	e084      	b.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fb9f 	bl	8007644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0208 	orr.w	r2, r2, #8
 8006f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69da      	ldr	r2, [r3, #28]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0204 	bic.w	r2, r2, #4
 8006f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69d9      	ldr	r1, [r3, #28]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	61da      	str	r2, [r3, #28]
      break;
 8006f38:	e064      	b.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fc11 	bl	8007768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69d9      	ldr	r1, [r3, #28]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	021a      	lsls	r2, r3, #8
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	61da      	str	r2, [r3, #28]
      break;
 8006f7a:	e043      	b.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fc84 	bl	8007890 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0208 	orr.w	r2, r2, #8
 8006f96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0204 	bic.w	r2, r2, #4
 8006fa6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	691a      	ldr	r2, [r3, #16]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006fba:	e023      	b.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fcce 	bl	8007964 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fe6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	021a      	lsls	r2, r3, #8
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006ffc:	e002      	b.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	75fb      	strb	r3, [r7, #23]
      break;
 8007002:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800700c:	7dfb      	ldrb	r3, [r7, #23]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop

08007018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_TIM_ConfigClockSource+0x1c>
 8007030:	2302      	movs	r3, #2
 8007032:	e0f6      	b.n	8007222 <HAL_TIM_ConfigClockSource+0x20a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007052:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800705e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a6f      	ldr	r2, [pc, #444]	@ (800722c <HAL_TIM_ConfigClockSource+0x214>)
 800706e:	4293      	cmp	r3, r2
 8007070:	f000 80c1 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007074:	4a6d      	ldr	r2, [pc, #436]	@ (800722c <HAL_TIM_ConfigClockSource+0x214>)
 8007076:	4293      	cmp	r3, r2
 8007078:	f200 80c6 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 800707c:	4a6c      	ldr	r2, [pc, #432]	@ (8007230 <HAL_TIM_ConfigClockSource+0x218>)
 800707e:	4293      	cmp	r3, r2
 8007080:	f000 80b9 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007084:	4a6a      	ldr	r2, [pc, #424]	@ (8007230 <HAL_TIM_ConfigClockSource+0x218>)
 8007086:	4293      	cmp	r3, r2
 8007088:	f200 80be 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 800708c:	4a69      	ldr	r2, [pc, #420]	@ (8007234 <HAL_TIM_ConfigClockSource+0x21c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	f000 80b1 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007094:	4a67      	ldr	r2, [pc, #412]	@ (8007234 <HAL_TIM_ConfigClockSource+0x21c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	f200 80b6 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 800709c:	4a66      	ldr	r2, [pc, #408]	@ (8007238 <HAL_TIM_ConfigClockSource+0x220>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	f000 80a9 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 80070a4:	4a64      	ldr	r2, [pc, #400]	@ (8007238 <HAL_TIM_ConfigClockSource+0x220>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	f200 80ae 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 80070ac:	4a63      	ldr	r2, [pc, #396]	@ (800723c <HAL_TIM_ConfigClockSource+0x224>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f000 80a1 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 80070b4:	4a61      	ldr	r2, [pc, #388]	@ (800723c <HAL_TIM_ConfigClockSource+0x224>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	f200 80a6 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 80070bc:	4a60      	ldr	r2, [pc, #384]	@ (8007240 <HAL_TIM_ConfigClockSource+0x228>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	f000 8099 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 80070c4:	4a5e      	ldr	r2, [pc, #376]	@ (8007240 <HAL_TIM_ConfigClockSource+0x228>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	f200 809e 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 80070cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80070d0:	f000 8091 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 80070d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80070d8:	f200 8096 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 80070dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070e0:	f000 8089 	beq.w	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 80070e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070e8:	f200 808e 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 80070ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070f0:	d03e      	beq.n	8007170 <HAL_TIM_ConfigClockSource+0x158>
 80070f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070f6:	f200 8087 	bhi.w	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070fe:	f000 8086 	beq.w	800720e <HAL_TIM_ConfigClockSource+0x1f6>
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007106:	d87f      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 8007108:	2b70      	cmp	r3, #112	@ 0x70
 800710a:	d01a      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0x12a>
 800710c:	2b70      	cmp	r3, #112	@ 0x70
 800710e:	d87b      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 8007110:	2b60      	cmp	r3, #96	@ 0x60
 8007112:	d050      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x19e>
 8007114:	2b60      	cmp	r3, #96	@ 0x60
 8007116:	d877      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 8007118:	2b50      	cmp	r3, #80	@ 0x50
 800711a:	d03c      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x17e>
 800711c:	2b50      	cmp	r3, #80	@ 0x50
 800711e:	d873      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 8007120:	2b40      	cmp	r3, #64	@ 0x40
 8007122:	d058      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x1be>
 8007124:	2b40      	cmp	r3, #64	@ 0x40
 8007126:	d86f      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 8007128:	2b30      	cmp	r3, #48	@ 0x30
 800712a:	d064      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 800712c:	2b30      	cmp	r3, #48	@ 0x30
 800712e:	d86b      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 8007130:	2b20      	cmp	r3, #32
 8007132:	d060      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007134:	2b20      	cmp	r3, #32
 8007136:	d867      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d05c      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 800713c:	2b10      	cmp	r3, #16
 800713e:	d05a      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007140:	e062      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007152:	f000 fe19 	bl	8007d88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	609a      	str	r2, [r3, #8]
      break;
 800716e:	e04f      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007180:	f000 fe02 	bl	8007d88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007192:	609a      	str	r2, [r3, #8]
      break;
 8007194:	e03c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a2:	461a      	mov	r2, r3
 80071a4:	f000 fcbe 	bl	8007b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2150      	movs	r1, #80	@ 0x50
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fdcd 	bl	8007d4e <TIM_ITRx_SetConfig>
      break;
 80071b4:	e02c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c2:	461a      	mov	r2, r3
 80071c4:	f000 fd1a 	bl	8007bfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2160      	movs	r1, #96	@ 0x60
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fdbd 	bl	8007d4e <TIM_ITRx_SetConfig>
      break;
 80071d4:	e01c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 fc9e 	bl	8007b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2140      	movs	r1, #64	@ 0x40
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fdad 	bl	8007d4e <TIM_ITRx_SetConfig>
      break;
 80071f4:	e00c      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f000 fda4 	bl	8007d4e <TIM_ITRx_SetConfig>
      break;
 8007206:	e003      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
      break;
 800720c:	e000      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800720e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	00100070 	.word	0x00100070
 8007230:	00100060 	.word	0x00100060
 8007234:	00100050 	.word	0x00100050
 8007238:	00100040 	.word	0x00100040
 800723c:	00100030 	.word	0x00100030
 8007240:	00100020 	.word	0x00100020

08007244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a4c      	ldr	r2, [pc, #304]	@ (80073c4 <TIM_Base_SetConfig+0x144>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d017      	beq.n	80072c8 <TIM_Base_SetConfig+0x48>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800729e:	d013      	beq.n	80072c8 <TIM_Base_SetConfig+0x48>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a49      	ldr	r2, [pc, #292]	@ (80073c8 <TIM_Base_SetConfig+0x148>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00f      	beq.n	80072c8 <TIM_Base_SetConfig+0x48>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a48      	ldr	r2, [pc, #288]	@ (80073cc <TIM_Base_SetConfig+0x14c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00b      	beq.n	80072c8 <TIM_Base_SetConfig+0x48>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a47      	ldr	r2, [pc, #284]	@ (80073d0 <TIM_Base_SetConfig+0x150>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d007      	beq.n	80072c8 <TIM_Base_SetConfig+0x48>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a46      	ldr	r2, [pc, #280]	@ (80073d4 <TIM_Base_SetConfig+0x154>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d003      	beq.n	80072c8 <TIM_Base_SetConfig+0x48>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a45      	ldr	r2, [pc, #276]	@ (80073d8 <TIM_Base_SetConfig+0x158>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d108      	bne.n	80072da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a39      	ldr	r2, [pc, #228]	@ (80073c4 <TIM_Base_SetConfig+0x144>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d023      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e8:	d01f      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a36      	ldr	r2, [pc, #216]	@ (80073c8 <TIM_Base_SetConfig+0x148>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01b      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a35      	ldr	r2, [pc, #212]	@ (80073cc <TIM_Base_SetConfig+0x14c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d017      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a34      	ldr	r2, [pc, #208]	@ (80073d0 <TIM_Base_SetConfig+0x150>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a33      	ldr	r2, [pc, #204]	@ (80073d4 <TIM_Base_SetConfig+0x154>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00f      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a33      	ldr	r2, [pc, #204]	@ (80073dc <TIM_Base_SetConfig+0x15c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00b      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a32      	ldr	r2, [pc, #200]	@ (80073e0 <TIM_Base_SetConfig+0x160>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d007      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a31      	ldr	r2, [pc, #196]	@ (80073e4 <TIM_Base_SetConfig+0x164>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d003      	beq.n	800732a <TIM_Base_SetConfig+0xaa>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a2c      	ldr	r2, [pc, #176]	@ (80073d8 <TIM_Base_SetConfig+0x158>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d108      	bne.n	800733c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a18      	ldr	r2, [pc, #96]	@ (80073c4 <TIM_Base_SetConfig+0x144>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d013      	beq.n	8007390 <TIM_Base_SetConfig+0x110>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a1a      	ldr	r2, [pc, #104]	@ (80073d4 <TIM_Base_SetConfig+0x154>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00f      	beq.n	8007390 <TIM_Base_SetConfig+0x110>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a1a      	ldr	r2, [pc, #104]	@ (80073dc <TIM_Base_SetConfig+0x15c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00b      	beq.n	8007390 <TIM_Base_SetConfig+0x110>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a19      	ldr	r2, [pc, #100]	@ (80073e0 <TIM_Base_SetConfig+0x160>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d007      	beq.n	8007390 <TIM_Base_SetConfig+0x110>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a18      	ldr	r2, [pc, #96]	@ (80073e4 <TIM_Base_SetConfig+0x164>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_Base_SetConfig+0x110>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a13      	ldr	r2, [pc, #76]	@ (80073d8 <TIM_Base_SetConfig+0x158>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d103      	bne.n	8007398 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d105      	bne.n	80073b6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	f023 0201 	bic.w	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	611a      	str	r2, [r3, #16]
  }
}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40000800 	.word	0x40000800
 80073d0:	40000c00 	.word	0x40000c00
 80073d4:	40013400 	.word	0x40013400
 80073d8:	40015000 	.word	0x40015000
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40014400 	.word	0x40014400
 80073e4:	40014800 	.word	0x40014800

080073e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	f023 0201 	bic.w	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f023 0302 	bic.w	r3, r3, #2
 8007434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a30      	ldr	r2, [pc, #192]	@ (8007504 <TIM_OC1_SetConfig+0x11c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <TIM_OC1_SetConfig+0x88>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a2f      	ldr	r2, [pc, #188]	@ (8007508 <TIM_OC1_SetConfig+0x120>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00f      	beq.n	8007470 <TIM_OC1_SetConfig+0x88>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a2e      	ldr	r2, [pc, #184]	@ (800750c <TIM_OC1_SetConfig+0x124>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00b      	beq.n	8007470 <TIM_OC1_SetConfig+0x88>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a2d      	ldr	r2, [pc, #180]	@ (8007510 <TIM_OC1_SetConfig+0x128>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d007      	beq.n	8007470 <TIM_OC1_SetConfig+0x88>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a2c      	ldr	r2, [pc, #176]	@ (8007514 <TIM_OC1_SetConfig+0x12c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <TIM_OC1_SetConfig+0x88>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a2b      	ldr	r2, [pc, #172]	@ (8007518 <TIM_OC1_SetConfig+0x130>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d10c      	bne.n	800748a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f023 0308 	bic.w	r3, r3, #8
 8007476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f023 0304 	bic.w	r3, r3, #4
 8007488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a1d      	ldr	r2, [pc, #116]	@ (8007504 <TIM_OC1_SetConfig+0x11c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d013      	beq.n	80074ba <TIM_OC1_SetConfig+0xd2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a1c      	ldr	r2, [pc, #112]	@ (8007508 <TIM_OC1_SetConfig+0x120>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00f      	beq.n	80074ba <TIM_OC1_SetConfig+0xd2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a1b      	ldr	r2, [pc, #108]	@ (800750c <TIM_OC1_SetConfig+0x124>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00b      	beq.n	80074ba <TIM_OC1_SetConfig+0xd2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007510 <TIM_OC1_SetConfig+0x128>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d007      	beq.n	80074ba <TIM_OC1_SetConfig+0xd2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a19      	ldr	r2, [pc, #100]	@ (8007514 <TIM_OC1_SetConfig+0x12c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d003      	beq.n	80074ba <TIM_OC1_SetConfig+0xd2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a18      	ldr	r2, [pc, #96]	@ (8007518 <TIM_OC1_SetConfig+0x130>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d111      	bne.n	80074de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	621a      	str	r2, [r3, #32]
}
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40013400 	.word	0x40013400
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400
 8007514:	40014800 	.word	0x40014800
 8007518:	40015000 	.word	0x40015000

0800751c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f023 0210 	bic.w	r2, r3, #16
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800754a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f023 0320 	bic.w	r3, r3, #32
 800756a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2c      	ldr	r2, [pc, #176]	@ (800762c <TIM_OC2_SetConfig+0x110>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <TIM_OC2_SetConfig+0x74>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a2b      	ldr	r2, [pc, #172]	@ (8007630 <TIM_OC2_SetConfig+0x114>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_OC2_SetConfig+0x74>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a2a      	ldr	r2, [pc, #168]	@ (8007634 <TIM_OC2_SetConfig+0x118>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10d      	bne.n	80075ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a1f      	ldr	r2, [pc, #124]	@ (800762c <TIM_OC2_SetConfig+0x110>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d013      	beq.n	80075dc <TIM_OC2_SetConfig+0xc0>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007630 <TIM_OC2_SetConfig+0x114>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00f      	beq.n	80075dc <TIM_OC2_SetConfig+0xc0>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a1e      	ldr	r2, [pc, #120]	@ (8007638 <TIM_OC2_SetConfig+0x11c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00b      	beq.n	80075dc <TIM_OC2_SetConfig+0xc0>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1d      	ldr	r2, [pc, #116]	@ (800763c <TIM_OC2_SetConfig+0x120>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d007      	beq.n	80075dc <TIM_OC2_SetConfig+0xc0>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007640 <TIM_OC2_SetConfig+0x124>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <TIM_OC2_SetConfig+0xc0>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a17      	ldr	r2, [pc, #92]	@ (8007634 <TIM_OC2_SetConfig+0x118>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d113      	bne.n	8007604 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40013400 	.word	0x40013400
 8007634:	40015000 	.word	0x40015000
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800

08007644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007750 <TIM_OC3_SetConfig+0x10c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d007      	beq.n	80076b6 <TIM_OC3_SetConfig+0x72>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007754 <TIM_OC3_SetConfig+0x110>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d003      	beq.n	80076b6 <TIM_OC3_SetConfig+0x72>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a29      	ldr	r2, [pc, #164]	@ (8007758 <TIM_OC3_SetConfig+0x114>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d10d      	bne.n	80076d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007750 <TIM_OC3_SetConfig+0x10c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <TIM_OC3_SetConfig+0xbe>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007754 <TIM_OC3_SetConfig+0x110>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00f      	beq.n	8007702 <TIM_OC3_SetConfig+0xbe>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a1d      	ldr	r2, [pc, #116]	@ (800775c <TIM_OC3_SetConfig+0x118>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00b      	beq.n	8007702 <TIM_OC3_SetConfig+0xbe>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007760 <TIM_OC3_SetConfig+0x11c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <TIM_OC3_SetConfig+0xbe>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007764 <TIM_OC3_SetConfig+0x120>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <TIM_OC3_SetConfig+0xbe>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a16      	ldr	r2, [pc, #88]	@ (8007758 <TIM_OC3_SetConfig+0x114>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d113      	bne.n	800772a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	621a      	str	r2, [r3, #32]
}
 8007744:	bf00      	nop
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	40012c00 	.word	0x40012c00
 8007754:	40013400 	.word	0x40013400
 8007758:	40015000 	.word	0x40015000
 800775c:	40014000 	.word	0x40014000
 8007760:	40014400 	.word	0x40014400
 8007764:	40014800 	.word	0x40014800

08007768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800779a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	031b      	lsls	r3, r3, #12
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007878 <TIM_OC4_SetConfig+0x110>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <TIM_OC4_SetConfig+0x74>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a2b      	ldr	r2, [pc, #172]	@ (800787c <TIM_OC4_SetConfig+0x114>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC4_SetConfig+0x74>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007880 <TIM_OC4_SetConfig+0x118>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10d      	bne.n	80077f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	031b      	lsls	r3, r3, #12
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007878 <TIM_OC4_SetConfig+0x110>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d013      	beq.n	8007828 <TIM_OC4_SetConfig+0xc0>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a1e      	ldr	r2, [pc, #120]	@ (800787c <TIM_OC4_SetConfig+0x114>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00f      	beq.n	8007828 <TIM_OC4_SetConfig+0xc0>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a1e      	ldr	r2, [pc, #120]	@ (8007884 <TIM_OC4_SetConfig+0x11c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d00b      	beq.n	8007828 <TIM_OC4_SetConfig+0xc0>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a1d      	ldr	r2, [pc, #116]	@ (8007888 <TIM_OC4_SetConfig+0x120>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d007      	beq.n	8007828 <TIM_OC4_SetConfig+0xc0>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1c      	ldr	r2, [pc, #112]	@ (800788c <TIM_OC4_SetConfig+0x124>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d003      	beq.n	8007828 <TIM_OC4_SetConfig+0xc0>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a17      	ldr	r2, [pc, #92]	@ (8007880 <TIM_OC4_SetConfig+0x118>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d113      	bne.n	8007850 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800782e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007836:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	019b      	lsls	r3, r3, #6
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	019b      	lsls	r3, r3, #6
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40013400 	.word	0x40013400
 8007880:	40015000 	.word	0x40015000
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800

08007890 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80078d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a19      	ldr	r2, [pc, #100]	@ (800794c <TIM_OC5_SetConfig+0xbc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d013      	beq.n	8007912 <TIM_OC5_SetConfig+0x82>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a18      	ldr	r2, [pc, #96]	@ (8007950 <TIM_OC5_SetConfig+0xc0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00f      	beq.n	8007912 <TIM_OC5_SetConfig+0x82>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a17      	ldr	r2, [pc, #92]	@ (8007954 <TIM_OC5_SetConfig+0xc4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00b      	beq.n	8007912 <TIM_OC5_SetConfig+0x82>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a16      	ldr	r2, [pc, #88]	@ (8007958 <TIM_OC5_SetConfig+0xc8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d007      	beq.n	8007912 <TIM_OC5_SetConfig+0x82>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a15      	ldr	r2, [pc, #84]	@ (800795c <TIM_OC5_SetConfig+0xcc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d003      	beq.n	8007912 <TIM_OC5_SetConfig+0x82>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a14      	ldr	r2, [pc, #80]	@ (8007960 <TIM_OC5_SetConfig+0xd0>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d109      	bne.n	8007926 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007918:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	621a      	str	r2, [r3, #32]
}
 8007940:	bf00      	nop
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	40012c00 	.word	0x40012c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40014000 	.word	0x40014000
 8007958:	40014400 	.word	0x40014400
 800795c:	40014800 	.word	0x40014800
 8007960:	40015000 	.word	0x40015000

08007964 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	051b      	lsls	r3, r3, #20
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007a24 <TIM_OC6_SetConfig+0xc0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d013      	beq.n	80079e8 <TIM_OC6_SetConfig+0x84>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a19      	ldr	r2, [pc, #100]	@ (8007a28 <TIM_OC6_SetConfig+0xc4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00f      	beq.n	80079e8 <TIM_OC6_SetConfig+0x84>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a18      	ldr	r2, [pc, #96]	@ (8007a2c <TIM_OC6_SetConfig+0xc8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00b      	beq.n	80079e8 <TIM_OC6_SetConfig+0x84>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a17      	ldr	r2, [pc, #92]	@ (8007a30 <TIM_OC6_SetConfig+0xcc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d007      	beq.n	80079e8 <TIM_OC6_SetConfig+0x84>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a16      	ldr	r2, [pc, #88]	@ (8007a34 <TIM_OC6_SetConfig+0xd0>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_OC6_SetConfig+0x84>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a15      	ldr	r2, [pc, #84]	@ (8007a38 <TIM_OC6_SetConfig+0xd4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d109      	bne.n	80079fc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40013400 	.word	0x40013400
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	40014400 	.word	0x40014400
 8007a34:	40014800 	.word	0x40014800
 8007a38:	40015000 	.word	0x40015000

08007a3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	f023 0201 	bic.w	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4a28      	ldr	r2, [pc, #160]	@ (8007b08 <TIM_TI1_SetConfig+0xcc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01b      	beq.n	8007aa2 <TIM_TI1_SetConfig+0x66>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a70:	d017      	beq.n	8007aa2 <TIM_TI1_SetConfig+0x66>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4a25      	ldr	r2, [pc, #148]	@ (8007b0c <TIM_TI1_SetConfig+0xd0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d013      	beq.n	8007aa2 <TIM_TI1_SetConfig+0x66>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4a24      	ldr	r2, [pc, #144]	@ (8007b10 <TIM_TI1_SetConfig+0xd4>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00f      	beq.n	8007aa2 <TIM_TI1_SetConfig+0x66>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a23      	ldr	r2, [pc, #140]	@ (8007b14 <TIM_TI1_SetConfig+0xd8>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00b      	beq.n	8007aa2 <TIM_TI1_SetConfig+0x66>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4a22      	ldr	r2, [pc, #136]	@ (8007b18 <TIM_TI1_SetConfig+0xdc>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d007      	beq.n	8007aa2 <TIM_TI1_SetConfig+0x66>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a21      	ldr	r2, [pc, #132]	@ (8007b1c <TIM_TI1_SetConfig+0xe0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d003      	beq.n	8007aa2 <TIM_TI1_SetConfig+0x66>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4a20      	ldr	r2, [pc, #128]	@ (8007b20 <TIM_TI1_SetConfig+0xe4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d101      	bne.n	8007aa6 <TIM_TI1_SetConfig+0x6a>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <TIM_TI1_SetConfig+0x6c>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e003      	b.n	8007ac6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f043 0301 	orr.w	r3, r3, #1
 8007ac4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f023 030a 	bic.w	r3, r3, #10
 8007ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f003 030a 	and.w	r3, r3, #10
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	621a      	str	r2, [r3, #32]
}
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40013400 	.word	0x40013400
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40015000 	.word	0x40015000

08007b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f023 0201 	bic.w	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f023 030a 	bic.w	r3, r3, #10
 8007b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	621a      	str	r2, [r3, #32]
}
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b087      	sub	sp, #28
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f023 0210 	bic.w	r2, r3, #16
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	031b      	lsls	r3, r3, #12
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	011b      	lsls	r3, r3, #4
 8007bda:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	621a      	str	r2, [r3, #32]
}
 8007bf0:	bf00      	nop
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f023 0210 	bic.w	r2, r3, #16
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	031b      	lsls	r3, r3, #12
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007c38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	621a      	str	r2, [r3, #32]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f023 0303 	bic.w	r3, r3, #3
 8007c88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007cac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	621a      	str	r2, [r3, #32]
}
 8007cc8:	bf00      	nop
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	031b      	lsls	r3, r3, #12
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007d26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	031b      	lsls	r3, r3, #12
 8007d2c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f043 0307 	orr.w	r3, r3, #7
 8007d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	609a      	str	r2, [r3, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	021a      	lsls	r2, r3, #8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	609a      	str	r2, [r3, #8]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f003 031f 	and.w	r3, r3, #31
 8007dda:	2201      	movs	r2, #1
 8007ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8007de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a1a      	ldr	r2, [r3, #32]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	43db      	mvns	r3, r3
 8007dea:	401a      	ands	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1a      	ldr	r2, [r3, #32]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f003 031f 	and.w	r3, r3, #31
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007e00:	431a      	orrs	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
	...

08007e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e074      	b.n	8007f16 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a34      	ldr	r2, [pc, #208]	@ (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a33      	ldr	r2, [pc, #204]	@ (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a31      	ldr	r2, [pc, #196]	@ (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d108      	bne.n	8007e7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a21      	ldr	r2, [pc, #132]	@ (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d022      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eac:	d01d      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d018      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00e      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a15      	ldr	r2, [pc, #84]	@ (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d009      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a18      	ldr	r2, [pc, #96]	@ (8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d004      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a11      	ldr	r2, [pc, #68]	@ (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d10c      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40015000 	.word	0x40015000
 8007f30:	40000400 	.word	0x40000400
 8007f34:	40000800 	.word	0x40000800
 8007f38:	40000c00 	.word	0x40000c00
 8007f3c:	40014000 	.word	0x40014000

08007f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e078      	b.n	800804e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	041b      	lsls	r3, r3, #16
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800805c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d009      	beq.n	8008002 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8008060 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d004      	beq.n	8008002 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a19      	ldr	r2, [pc, #100]	@ (8008064 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d11c      	bne.n	800803c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800c:	051b      	lsls	r3, r3, #20
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	40012c00 	.word	0x40012c00
 8008060:	40013400 	.word	0x40013400
 8008064:	40015000 	.word	0x40015000

08008068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e042      	b.n	800818c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7fa fb97 	bl	800284c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2224      	movs	r2, #36	@ 0x24
 8008122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0201 	bic.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fb24 	bl	800878c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f825 	bl	8008194 <UART_SetConfig>
 800814a:	4603      	mov	r3, r0
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e01b      	b.n	800818c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0201 	orr.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fba3 	bl	80088d0 <UART_CheckIdleState>
 800818a:	4603      	mov	r3, r0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008198:	b08c      	sub	sp, #48	@ 0x30
 800819a:	af00      	add	r7, sp, #0
 800819c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	431a      	orrs	r2, r3
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	431a      	orrs	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	4baa      	ldr	r3, [pc, #680]	@ (800846c <UART_SetConfig+0x2d8>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	6812      	ldr	r2, [r2, #0]
 80081ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081cc:	430b      	orrs	r3, r1
 80081ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a9f      	ldr	r2, [pc, #636]	@ (8008470 <UART_SetConfig+0x2dc>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d004      	beq.n	8008200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081fc:	4313      	orrs	r3, r2
 80081fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800820a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	6812      	ldr	r2, [r2, #0]
 8008212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008214:	430b      	orrs	r3, r1
 8008216:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821e:	f023 010f 	bic.w	r1, r3, #15
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a90      	ldr	r2, [pc, #576]	@ (8008474 <UART_SetConfig+0x2e0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d125      	bne.n	8008284 <UART_SetConfig+0xf0>
 8008238:	4b8f      	ldr	r3, [pc, #572]	@ (8008478 <UART_SetConfig+0x2e4>)
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	2b03      	cmp	r3, #3
 8008244:	d81a      	bhi.n	800827c <UART_SetConfig+0xe8>
 8008246:	a201      	add	r2, pc, #4	@ (adr r2, 800824c <UART_SetConfig+0xb8>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	0800825d 	.word	0x0800825d
 8008250:	0800826d 	.word	0x0800826d
 8008254:	08008265 	.word	0x08008265
 8008258:	08008275 	.word	0x08008275
 800825c:	2301      	movs	r3, #1
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008262:	e116      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008264:	2302      	movs	r3, #2
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800826a:	e112      	b.n	8008492 <UART_SetConfig+0x2fe>
 800826c:	2304      	movs	r3, #4
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008272:	e10e      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008274:	2308      	movs	r3, #8
 8008276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800827a:	e10a      	b.n	8008492 <UART_SetConfig+0x2fe>
 800827c:	2310      	movs	r3, #16
 800827e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008282:	e106      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a7c      	ldr	r2, [pc, #496]	@ (800847c <UART_SetConfig+0x2e8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d138      	bne.n	8008300 <UART_SetConfig+0x16c>
 800828e:	4b7a      	ldr	r3, [pc, #488]	@ (8008478 <UART_SetConfig+0x2e4>)
 8008290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008294:	f003 030c 	and.w	r3, r3, #12
 8008298:	2b0c      	cmp	r3, #12
 800829a:	d82d      	bhi.n	80082f8 <UART_SetConfig+0x164>
 800829c:	a201      	add	r2, pc, #4	@ (adr r2, 80082a4 <UART_SetConfig+0x110>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080082d9 	.word	0x080082d9
 80082a8:	080082f9 	.word	0x080082f9
 80082ac:	080082f9 	.word	0x080082f9
 80082b0:	080082f9 	.word	0x080082f9
 80082b4:	080082e9 	.word	0x080082e9
 80082b8:	080082f9 	.word	0x080082f9
 80082bc:	080082f9 	.word	0x080082f9
 80082c0:	080082f9 	.word	0x080082f9
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	080082f9 	.word	0x080082f9
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	080082f9 	.word	0x080082f9
 80082d4:	080082f1 	.word	0x080082f1
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082de:	e0d8      	b.n	8008492 <UART_SetConfig+0x2fe>
 80082e0:	2302      	movs	r3, #2
 80082e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082e6:	e0d4      	b.n	8008492 <UART_SetConfig+0x2fe>
 80082e8:	2304      	movs	r3, #4
 80082ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ee:	e0d0      	b.n	8008492 <UART_SetConfig+0x2fe>
 80082f0:	2308      	movs	r3, #8
 80082f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082f6:	e0cc      	b.n	8008492 <UART_SetConfig+0x2fe>
 80082f8:	2310      	movs	r3, #16
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fe:	e0c8      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a5e      	ldr	r2, [pc, #376]	@ (8008480 <UART_SetConfig+0x2ec>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d125      	bne.n	8008356 <UART_SetConfig+0x1c2>
 800830a:	4b5b      	ldr	r3, [pc, #364]	@ (8008478 <UART_SetConfig+0x2e4>)
 800830c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008310:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008314:	2b30      	cmp	r3, #48	@ 0x30
 8008316:	d016      	beq.n	8008346 <UART_SetConfig+0x1b2>
 8008318:	2b30      	cmp	r3, #48	@ 0x30
 800831a:	d818      	bhi.n	800834e <UART_SetConfig+0x1ba>
 800831c:	2b20      	cmp	r3, #32
 800831e:	d00a      	beq.n	8008336 <UART_SetConfig+0x1a2>
 8008320:	2b20      	cmp	r3, #32
 8008322:	d814      	bhi.n	800834e <UART_SetConfig+0x1ba>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <UART_SetConfig+0x19a>
 8008328:	2b10      	cmp	r3, #16
 800832a:	d008      	beq.n	800833e <UART_SetConfig+0x1aa>
 800832c:	e00f      	b.n	800834e <UART_SetConfig+0x1ba>
 800832e:	2300      	movs	r3, #0
 8008330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008334:	e0ad      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008336:	2302      	movs	r3, #2
 8008338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833c:	e0a9      	b.n	8008492 <UART_SetConfig+0x2fe>
 800833e:	2304      	movs	r3, #4
 8008340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008344:	e0a5      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008346:	2308      	movs	r3, #8
 8008348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834c:	e0a1      	b.n	8008492 <UART_SetConfig+0x2fe>
 800834e:	2310      	movs	r3, #16
 8008350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008354:	e09d      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a4a      	ldr	r2, [pc, #296]	@ (8008484 <UART_SetConfig+0x2f0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d125      	bne.n	80083ac <UART_SetConfig+0x218>
 8008360:	4b45      	ldr	r3, [pc, #276]	@ (8008478 <UART_SetConfig+0x2e4>)
 8008362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008366:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800836a:	2bc0      	cmp	r3, #192	@ 0xc0
 800836c:	d016      	beq.n	800839c <UART_SetConfig+0x208>
 800836e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008370:	d818      	bhi.n	80083a4 <UART_SetConfig+0x210>
 8008372:	2b80      	cmp	r3, #128	@ 0x80
 8008374:	d00a      	beq.n	800838c <UART_SetConfig+0x1f8>
 8008376:	2b80      	cmp	r3, #128	@ 0x80
 8008378:	d814      	bhi.n	80083a4 <UART_SetConfig+0x210>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <UART_SetConfig+0x1f0>
 800837e:	2b40      	cmp	r3, #64	@ 0x40
 8008380:	d008      	beq.n	8008394 <UART_SetConfig+0x200>
 8008382:	e00f      	b.n	80083a4 <UART_SetConfig+0x210>
 8008384:	2300      	movs	r3, #0
 8008386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800838a:	e082      	b.n	8008492 <UART_SetConfig+0x2fe>
 800838c:	2302      	movs	r3, #2
 800838e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008392:	e07e      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008394:	2304      	movs	r3, #4
 8008396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800839a:	e07a      	b.n	8008492 <UART_SetConfig+0x2fe>
 800839c:	2308      	movs	r3, #8
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083a2:	e076      	b.n	8008492 <UART_SetConfig+0x2fe>
 80083a4:	2310      	movs	r3, #16
 80083a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083aa:	e072      	b.n	8008492 <UART_SetConfig+0x2fe>
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a35      	ldr	r2, [pc, #212]	@ (8008488 <UART_SetConfig+0x2f4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d12a      	bne.n	800840c <UART_SetConfig+0x278>
 80083b6:	4b30      	ldr	r3, [pc, #192]	@ (8008478 <UART_SetConfig+0x2e4>)
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083c4:	d01a      	beq.n	80083fc <UART_SetConfig+0x268>
 80083c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ca:	d81b      	bhi.n	8008404 <UART_SetConfig+0x270>
 80083cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d0:	d00c      	beq.n	80083ec <UART_SetConfig+0x258>
 80083d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d6:	d815      	bhi.n	8008404 <UART_SetConfig+0x270>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <UART_SetConfig+0x250>
 80083dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083e0:	d008      	beq.n	80083f4 <UART_SetConfig+0x260>
 80083e2:	e00f      	b.n	8008404 <UART_SetConfig+0x270>
 80083e4:	2300      	movs	r3, #0
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ea:	e052      	b.n	8008492 <UART_SetConfig+0x2fe>
 80083ec:	2302      	movs	r3, #2
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f2:	e04e      	b.n	8008492 <UART_SetConfig+0x2fe>
 80083f4:	2304      	movs	r3, #4
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083fa:	e04a      	b.n	8008492 <UART_SetConfig+0x2fe>
 80083fc:	2308      	movs	r3, #8
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008402:	e046      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008404:	2310      	movs	r3, #16
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800840a:	e042      	b.n	8008492 <UART_SetConfig+0x2fe>
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <UART_SetConfig+0x2dc>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d13a      	bne.n	800848c <UART_SetConfig+0x2f8>
 8008416:	4b18      	ldr	r3, [pc, #96]	@ (8008478 <UART_SetConfig+0x2e4>)
 8008418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800841c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008424:	d01a      	beq.n	800845c <UART_SetConfig+0x2c8>
 8008426:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800842a:	d81b      	bhi.n	8008464 <UART_SetConfig+0x2d0>
 800842c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008430:	d00c      	beq.n	800844c <UART_SetConfig+0x2b8>
 8008432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008436:	d815      	bhi.n	8008464 <UART_SetConfig+0x2d0>
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <UART_SetConfig+0x2b0>
 800843c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008440:	d008      	beq.n	8008454 <UART_SetConfig+0x2c0>
 8008442:	e00f      	b.n	8008464 <UART_SetConfig+0x2d0>
 8008444:	2300      	movs	r3, #0
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844a:	e022      	b.n	8008492 <UART_SetConfig+0x2fe>
 800844c:	2302      	movs	r3, #2
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008452:	e01e      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008454:	2304      	movs	r3, #4
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800845a:	e01a      	b.n	8008492 <UART_SetConfig+0x2fe>
 800845c:	2308      	movs	r3, #8
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008462:	e016      	b.n	8008492 <UART_SetConfig+0x2fe>
 8008464:	2310      	movs	r3, #16
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800846a:	e012      	b.n	8008492 <UART_SetConfig+0x2fe>
 800846c:	cfff69f3 	.word	0xcfff69f3
 8008470:	40008000 	.word	0x40008000
 8008474:	40013800 	.word	0x40013800
 8008478:	40021000 	.word	0x40021000
 800847c:	40004400 	.word	0x40004400
 8008480:	40004800 	.word	0x40004800
 8008484:	40004c00 	.word	0x40004c00
 8008488:	40005000 	.word	0x40005000
 800848c:	2310      	movs	r3, #16
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4aae      	ldr	r2, [pc, #696]	@ (8008750 <UART_SetConfig+0x5bc>)
 8008498:	4293      	cmp	r3, r2
 800849a:	f040 8097 	bne.w	80085cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800849e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084a2:	2b08      	cmp	r3, #8
 80084a4:	d823      	bhi.n	80084ee <UART_SetConfig+0x35a>
 80084a6:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <UART_SetConfig+0x318>)
 80084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ac:	080084d1 	.word	0x080084d1
 80084b0:	080084ef 	.word	0x080084ef
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	080084ef 	.word	0x080084ef
 80084bc:	080084df 	.word	0x080084df
 80084c0:	080084ef 	.word	0x080084ef
 80084c4:	080084ef 	.word	0x080084ef
 80084c8:	080084ef 	.word	0x080084ef
 80084cc:	080084e7 	.word	0x080084e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084d0:	f7fd fb86 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 80084d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084d6:	e010      	b.n	80084fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084d8:	4b9e      	ldr	r3, [pc, #632]	@ (8008754 <UART_SetConfig+0x5c0>)
 80084da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084dc:	e00d      	b.n	80084fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084de:	f7fd fb11 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 80084e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084e4:	e009      	b.n	80084fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084ec:	e005      	b.n	80084fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 8130 	beq.w	8008762 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008506:	4a94      	ldr	r2, [pc, #592]	@ (8008758 <UART_SetConfig+0x5c4>)
 8008508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800850c:	461a      	mov	r2, r3
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	fbb3 f3f2 	udiv	r3, r3, r2
 8008514:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	4613      	mov	r3, r2
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	4413      	add	r3, r2
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	429a      	cmp	r2, r3
 8008524:	d305      	bcc.n	8008532 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	429a      	cmp	r2, r3
 8008530:	d903      	bls.n	800853a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008538:	e113      	b.n	8008762 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	2200      	movs	r2, #0
 800853e:	60bb      	str	r3, [r7, #8]
 8008540:	60fa      	str	r2, [r7, #12]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008546:	4a84      	ldr	r2, [pc, #528]	@ (8008758 <UART_SetConfig+0x5c4>)
 8008548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800854c:	b29b      	uxth	r3, r3
 800854e:	2200      	movs	r2, #0
 8008550:	603b      	str	r3, [r7, #0]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008558:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800855c:	f7f8 fa9a 	bl	8000a94 <__aeabi_uldivmod>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	f04f 0300 	mov.w	r3, #0
 8008570:	020b      	lsls	r3, r1, #8
 8008572:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008576:	0202      	lsls	r2, r0, #8
 8008578:	6979      	ldr	r1, [r7, #20]
 800857a:	6849      	ldr	r1, [r1, #4]
 800857c:	0849      	lsrs	r1, r1, #1
 800857e:	2000      	movs	r0, #0
 8008580:	460c      	mov	r4, r1
 8008582:	4605      	mov	r5, r0
 8008584:	eb12 0804 	adds.w	r8, r2, r4
 8008588:	eb43 0905 	adc.w	r9, r3, r5
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	469a      	mov	sl, r3
 8008594:	4693      	mov	fp, r2
 8008596:	4652      	mov	r2, sl
 8008598:	465b      	mov	r3, fp
 800859a:	4640      	mov	r0, r8
 800859c:	4649      	mov	r1, r9
 800859e:	f7f8 fa79 	bl	8000a94 <__aeabi_uldivmod>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4613      	mov	r3, r2
 80085a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085b0:	d308      	bcc.n	80085c4 <UART_SetConfig+0x430>
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085b8:	d204      	bcs.n	80085c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6a3a      	ldr	r2, [r7, #32]
 80085c0:	60da      	str	r2, [r3, #12]
 80085c2:	e0ce      	b.n	8008762 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085ca:	e0ca      	b.n	8008762 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d4:	d166      	bne.n	80086a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80085d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085da:	2b08      	cmp	r3, #8
 80085dc:	d827      	bhi.n	800862e <UART_SetConfig+0x49a>
 80085de:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <UART_SetConfig+0x450>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008609 	.word	0x08008609
 80085e8:	08008611 	.word	0x08008611
 80085ec:	08008619 	.word	0x08008619
 80085f0:	0800862f 	.word	0x0800862f
 80085f4:	0800861f 	.word	0x0800861f
 80085f8:	0800862f 	.word	0x0800862f
 80085fc:	0800862f 	.word	0x0800862f
 8008600:	0800862f 	.word	0x0800862f
 8008604:	08008627 	.word	0x08008627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008608:	f7fd faea 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 800860c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800860e:	e014      	b.n	800863a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008610:	f7fd fafc 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8008614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008616:	e010      	b.n	800863a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008618:	4b4e      	ldr	r3, [pc, #312]	@ (8008754 <UART_SetConfig+0x5c0>)
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800861c:	e00d      	b.n	800863a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800861e:	f7fd fa71 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8008622:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008624:	e009      	b.n	800863a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800862a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800862c:	e005      	b.n	800863a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008638:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 8090 	beq.w	8008762 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008646:	4a44      	ldr	r2, [pc, #272]	@ (8008758 <UART_SetConfig+0x5c4>)
 8008648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800864c:	461a      	mov	r2, r3
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	fbb3 f3f2 	udiv	r3, r3, r2
 8008654:	005a      	lsls	r2, r3, #1
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	441a      	add	r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	fbb2 f3f3 	udiv	r3, r2, r3
 8008666:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	2b0f      	cmp	r3, #15
 800866c:	d916      	bls.n	800869c <UART_SetConfig+0x508>
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008674:	d212      	bcs.n	800869c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	b29b      	uxth	r3, r3
 800867a:	f023 030f 	bic.w	r3, r3, #15
 800867e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	b29b      	uxth	r3, r3
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	b29a      	uxth	r2, r3
 800868c:	8bfb      	ldrh	r3, [r7, #30]
 800868e:	4313      	orrs	r3, r2
 8008690:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	8bfa      	ldrh	r2, [r7, #30]
 8008698:	60da      	str	r2, [r3, #12]
 800869a:	e062      	b.n	8008762 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086a2:	e05e      	b.n	8008762 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d828      	bhi.n	80086fe <UART_SetConfig+0x56a>
 80086ac:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <UART_SetConfig+0x520>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086e1 	.word	0x080086e1
 80086bc:	080086e9 	.word	0x080086e9
 80086c0:	080086ff 	.word	0x080086ff
 80086c4:	080086ef 	.word	0x080086ef
 80086c8:	080086ff 	.word	0x080086ff
 80086cc:	080086ff 	.word	0x080086ff
 80086d0:	080086ff 	.word	0x080086ff
 80086d4:	080086f7 	.word	0x080086f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d8:	f7fd fa82 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 80086dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086de:	e014      	b.n	800870a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086e0:	f7fd fa94 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 80086e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086e6:	e010      	b.n	800870a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008754 <UART_SetConfig+0x5c0>)
 80086ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086ec:	e00d      	b.n	800870a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ee:	f7fd fa09 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 80086f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086f4:	e009      	b.n	800870a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086fc:	e005      	b.n	800870a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008708:	bf00      	nop
    }

    if (pclk != 0U)
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	d028      	beq.n	8008762 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008714:	4a10      	ldr	r2, [pc, #64]	@ (8008758 <UART_SetConfig+0x5c4>)
 8008716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800871a:	461a      	mov	r2, r3
 800871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	085b      	lsrs	r3, r3, #1
 8008728:	441a      	add	r2, r3
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008732:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	2b0f      	cmp	r3, #15
 8008738:	d910      	bls.n	800875c <UART_SetConfig+0x5c8>
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008740:	d20c      	bcs.n	800875c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	b29a      	uxth	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	e009      	b.n	8008762 <UART_SetConfig+0x5ce>
 800874e:	bf00      	nop
 8008750:	40008000 	.word	0x40008000
 8008754:	00f42400 	.word	0x00f42400
 8008758:	08008e58 	.word	0x08008e58
      }
      else
      {
        ret = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2201      	movs	r2, #1
 8008766:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2201      	movs	r2, #1
 800876e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2200      	movs	r2, #0
 8008776:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2200      	movs	r2, #0
 800877c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800877e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008782:	4618      	mov	r0, r3
 8008784:	3730      	adds	r7, #48	@ 0x30
 8008786:	46bd      	mov	sp, r7
 8008788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800878c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00a      	beq.n	80087b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01a      	beq.n	80088a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800888a:	d10a      	bne.n	80088a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	605a      	str	r2, [r3, #4]
  }
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b098      	sub	sp, #96	@ 0x60
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088e0:	f7fa f8f6 	bl	8002ad0 <HAL_GetTick>
 80088e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d12f      	bne.n	8008954 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088fc:	2200      	movs	r2, #0
 80088fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f88e 	bl	8008a24 <UART_WaitOnFlagUntilTimeout>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d022      	beq.n	8008954 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800891c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008922:	653b      	str	r3, [r7, #80]	@ 0x50
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800892c:	647b      	str	r3, [r7, #68]	@ 0x44
 800892e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800893a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e6      	bne.n	800890e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2220      	movs	r2, #32
 8008944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e063      	b.n	8008a1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0304 	and.w	r3, r3, #4
 800895e:	2b04      	cmp	r3, #4
 8008960:	d149      	bne.n	80089f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008962:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800896a:	2200      	movs	r2, #0
 800896c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f857 	bl	8008a24 <UART_WaitOnFlagUntilTimeout>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d03c      	beq.n	80089f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	623b      	str	r3, [r7, #32]
   return(result);
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800899a:	633b      	str	r3, [r7, #48]	@ 0x30
 800899c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e6      	bne.n	800897c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f023 0301 	bic.w	r3, r3, #1
 80089c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3308      	adds	r3, #8
 80089cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089ce:	61fa      	str	r2, [r7, #28]
 80089d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	69b9      	ldr	r1, [r7, #24]
 80089d4:	69fa      	ldr	r2, [r7, #28]
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	617b      	str	r3, [r7, #20]
   return(result);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e5      	bne.n	80089ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e012      	b.n	8008a1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3758      	adds	r7, #88	@ 0x58
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	603b      	str	r3, [r7, #0]
 8008a30:	4613      	mov	r3, r2
 8008a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a34:	e04f      	b.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d04b      	beq.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a3e:	f7fa f847 	bl	8002ad0 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d302      	bcc.n	8008a54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e04e      	b.n	8008af6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d037      	beq.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b80      	cmp	r3, #128	@ 0x80
 8008a6a:	d034      	beq.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b40      	cmp	r3, #64	@ 0x40
 8008a70:	d031      	beq.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d110      	bne.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2208      	movs	r2, #8
 8008a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 f838 	bl	8008afe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2208      	movs	r2, #8
 8008a92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e029      	b.n	8008af6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ab0:	d111      	bne.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 f81e 	bl	8008afe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e00f      	b.n	8008af6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69da      	ldr	r2, [r3, #28]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	bf0c      	ite	eq
 8008ae6:	2301      	moveq	r3, #1
 8008ae8:	2300      	movne	r3, #0
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d0a0      	beq.n	8008a36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b095      	sub	sp, #84	@ 0x54
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e6      	bne.n	8008b06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b4e:	f023 0301 	bic.w	r3, r3, #1
 8008b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e3      	bne.n	8008b38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d118      	bne.n	8008baa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f023 0310 	bic.w	r3, r3, #16
 8008b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b96:	61bb      	str	r3, [r7, #24]
 8008b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	6979      	ldr	r1, [r7, #20]
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e6      	bne.n	8008b78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008bbe:	bf00      	nop
 8008bc0:	3754      	adds	r7, #84	@ 0x54
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b085      	sub	sp, #20
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e027      	b.n	8008c30 <HAL_UARTEx_DisableFifoMode+0x66>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2224      	movs	r2, #36	@ 0x24
 8008bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 0201 	bic.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008c0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e02d      	b.n	8008cb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2224      	movs	r2, #36	@ 0x24
 8008c60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0201 	bic.w	r2, r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f84f 	bl	8008d34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e02d      	b.n	8008d2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2224      	movs	r2, #36	@ 0x24
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0201 	bic.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f811 	bl	8008d34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d108      	bne.n	8008d56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d54:	e031      	b.n	8008dba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d56:	2308      	movs	r3, #8
 8008d58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d5a:	2308      	movs	r3, #8
 8008d5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	0e5b      	lsrs	r3, r3, #25
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	0f5b      	lsrs	r3, r3, #29
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	7b3a      	ldrb	r2, [r7, #12]
 8008d82:	4911      	ldr	r1, [pc, #68]	@ (8008dc8 <UARTEx_SetNbDataToProcess+0x94>)
 8008d84:	5c8a      	ldrb	r2, [r1, r2]
 8008d86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d8a:	7b3a      	ldrb	r2, [r7, #12]
 8008d8c:	490f      	ldr	r1, [pc, #60]	@ (8008dcc <UARTEx_SetNbDataToProcess+0x98>)
 8008d8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	7b7a      	ldrb	r2, [r7, #13]
 8008da0:	4909      	ldr	r1, [pc, #36]	@ (8008dc8 <UARTEx_SetNbDataToProcess+0x94>)
 8008da2:	5c8a      	ldrb	r2, [r1, r2]
 8008da4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008da8:	7b7a      	ldrb	r2, [r7, #13]
 8008daa:	4908      	ldr	r1, [pc, #32]	@ (8008dcc <UARTEx_SetNbDataToProcess+0x98>)
 8008dac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dae:	fb93 f3f2 	sdiv	r3, r3, r2
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	08008e70 	.word	0x08008e70
 8008dcc:	08008e78 	.word	0x08008e78

08008dd0 <memset>:
 8008dd0:	4402      	add	r2, r0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d100      	bne.n	8008dda <memset+0xa>
 8008dd8:	4770      	bx	lr
 8008dda:	f803 1b01 	strb.w	r1, [r3], #1
 8008dde:	e7f9      	b.n	8008dd4 <memset+0x4>

08008de0 <__libc_init_array>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	4d0d      	ldr	r5, [pc, #52]	@ (8008e18 <__libc_init_array+0x38>)
 8008de4:	4c0d      	ldr	r4, [pc, #52]	@ (8008e1c <__libc_init_array+0x3c>)
 8008de6:	1b64      	subs	r4, r4, r5
 8008de8:	10a4      	asrs	r4, r4, #2
 8008dea:	2600      	movs	r6, #0
 8008dec:	42a6      	cmp	r6, r4
 8008dee:	d109      	bne.n	8008e04 <__libc_init_array+0x24>
 8008df0:	4d0b      	ldr	r5, [pc, #44]	@ (8008e20 <__libc_init_array+0x40>)
 8008df2:	4c0c      	ldr	r4, [pc, #48]	@ (8008e24 <__libc_init_array+0x44>)
 8008df4:	f000 f818 	bl	8008e28 <_init>
 8008df8:	1b64      	subs	r4, r4, r5
 8008dfa:	10a4      	asrs	r4, r4, #2
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	42a6      	cmp	r6, r4
 8008e00:	d105      	bne.n	8008e0e <__libc_init_array+0x2e>
 8008e02:	bd70      	pop	{r4, r5, r6, pc}
 8008e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e08:	4798      	blx	r3
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	e7ee      	b.n	8008dec <__libc_init_array+0xc>
 8008e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e12:	4798      	blx	r3
 8008e14:	3601      	adds	r6, #1
 8008e16:	e7f2      	b.n	8008dfe <__libc_init_array+0x1e>
 8008e18:	08008e88 	.word	0x08008e88
 8008e1c:	08008e88 	.word	0x08008e88
 8008e20:	08008e88 	.word	0x08008e88
 8008e24:	08008e8c 	.word	0x08008e8c

08008e28 <_init>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr

08008e34 <_fini>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	bf00      	nop
 8008e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3a:	bc08      	pop	{r3}
 8008e3c:	469e      	mov	lr, r3
 8008e3e:	4770      	bx	lr
