
Autonomous_Cart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007604  08007604  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800760c  0800760c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007610  08007610  00017610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  2000000c  08007620  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08007620  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c524  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003976  00000000  00000000  0003c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  0003ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131e  00000000  00000000  000417a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c8d  00000000  00000000  00042ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201ab  00000000  00000000  00046753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001122dd  00000000  00000000  000668fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006888  00000000  00000000  00178bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0017f464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080075ac 	.word	0x080075ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080075ac 	.word	0x080075ac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vLineSensorSystemInit>:
#define IR4_AD hadc4
#define IR5_AD hadc5

extern uint32_t uiAdcValue;

void vLineSensorSystemInit(uint32_t *pLineSensorsReadings){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(&IR1_AD, ADC_SINGLE_ENDED);
 800051c:	217f      	movs	r1, #127	; 0x7f
 800051e:	481c      	ldr	r0, [pc, #112]	; (8000590 <vLineSensorSystemInit+0x7c>)
 8000520:	f002 ff78 	bl	8003414 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR1_AD, &pLineSensorsReadings[0] , 1);
 8000524:	2201      	movs	r2, #1
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	4819      	ldr	r0, [pc, #100]	; (8000590 <vLineSensorSystemInit+0x7c>)
 800052a:	f002 f865 	bl	80025f8 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR2_AD, ADC_SINGLE_ENDED);
 800052e:	217f      	movs	r1, #127	; 0x7f
 8000530:	4818      	ldr	r0, [pc, #96]	; (8000594 <vLineSensorSystemInit+0x80>)
 8000532:	f002 ff6f 	bl	8003414 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR2_AD, &pLineSensorsReadings[1] , 2);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3304      	adds	r3, #4
 800053a:	2202      	movs	r2, #2
 800053c:	4619      	mov	r1, r3
 800053e:	4815      	ldr	r0, [pc, #84]	; (8000594 <vLineSensorSystemInit+0x80>)
 8000540:	f002 f85a 	bl	80025f8 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR3_AD, ADC_SINGLE_ENDED);
 8000544:	217f      	movs	r1, #127	; 0x7f
 8000546:	4814      	ldr	r0, [pc, #80]	; (8000598 <vLineSensorSystemInit+0x84>)
 8000548:	f002 ff64 	bl	8003414 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR3_AD, &pLineSensorsReadings[2] , 1);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3308      	adds	r3, #8
 8000550:	2201      	movs	r2, #1
 8000552:	4619      	mov	r1, r3
 8000554:	4810      	ldr	r0, [pc, #64]	; (8000598 <vLineSensorSystemInit+0x84>)
 8000556:	f002 f84f 	bl	80025f8 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR4_AD, ADC_SINGLE_ENDED);
 800055a:	217f      	movs	r1, #127	; 0x7f
 800055c:	480f      	ldr	r0, [pc, #60]	; (800059c <vLineSensorSystemInit+0x88>)
 800055e:	f002 ff59 	bl	8003414 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR4_AD, &pLineSensorsReadings[3] , 1);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	330c      	adds	r3, #12
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	480c      	ldr	r0, [pc, #48]	; (800059c <vLineSensorSystemInit+0x88>)
 800056c:	f002 f844 	bl	80025f8 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&IR5_AD, ADC_SINGLE_ENDED);
 8000570:	217f      	movs	r1, #127	; 0x7f
 8000572:	480b      	ldr	r0, [pc, #44]	; (80005a0 <vLineSensorSystemInit+0x8c>)
 8000574:	f002 ff4e 	bl	8003414 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&IR5_AD, &pLineSensorsReadings[4] , 1);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3310      	adds	r3, #16
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <vLineSensorSystemInit+0x8c>)
 8000582:	f002 f839 	bl	80025f8 <HAL_ADC_Start_DMA>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028
 8000594:	20000094 	.word	0x20000094
 8000598:	20000100 	.word	0x20000100
 800059c:	2000016c 	.word	0x2000016c
 80005a0:	200001d8 	.word	0x200001d8

080005a4 <vPowerTrainSystemInit>:

#define MOTOR_TIM htim1
#define MOTOR_RIGHT_CHANNEL TIM_CHANNEL_2
#define MOTOR_LEFT_CHANNEL TIM_CHANNEL_1

void vPowerTrainSystemInit(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&MOTOR_TIM);
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <vPowerTrainSystemInit+0x20>)
 80005aa:	f004 ff97 	bl	80054dc <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_LEFT_CHANNEL);
 80005ae:	2100      	movs	r1, #0
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <vPowerTrainSystemInit+0x20>)
 80005b2:	f005 f85b 	bl	800566c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, MOTOR_RIGHT_CHANNEL);
 80005b6:	2104      	movs	r1, #4
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <vPowerTrainSystemInit+0x20>)
 80005ba:	f005 f857 	bl	800566c <HAL_TIM_PWM_Start>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000494 	.word	0x20000494

080005c8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	; 0x30
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2220      	movs	r2, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f006 ffb7 	bl	8007554 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e6:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <MX_ADC1_Init+0xe8>)
 80005e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80005ee:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <MX_ADC1_Init+0xe8>)
 80005f0:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80005f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_ADC1_Init+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000610:	2204      	movs	r2, #4
 8000612:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <MX_ADC1_Init+0xe8>)
 800061c:	2201      	movs	r2, #1
 800061e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000622:	2201      	movs	r2, #1
 8000624:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_ADC1_Init+0xe8>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	4817      	ldr	r0, [pc, #92]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000652:	f001 fe15 	bl	8002280 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800065c:	f000 fead 	bl	80013ba <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	4619      	mov	r1, r3
 800066a:	4811      	ldr	r0, [pc, #68]	; (80006b0 <MX_ADC1_Init+0xe8>)
 800066c:	f002 ff34 	bl	80034d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000676:	f000 fea0 	bl	80013ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_ADC1_Init+0xec>)
 800067c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2306      	movs	r3, #6
 8000680:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000682:	2305      	movs	r3, #5
 8000684:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	237f      	movs	r3, #127	; 0x7f
 8000688:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068a:	2304      	movs	r3, #4
 800068c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000698:	f002 f8a0 	bl	80027dc <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006a2:	f000 fe8a 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3730      	adds	r7, #48	; 0x30
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028
 80006b4:	04300002 	.word	0x04300002

080006b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2220      	movs	r2, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 ff45 	bl	8007554 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <MX_ADC2_Init+0xe0>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006d2:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80006d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_ADC2_Init+0xdc>)
 80006fe:	2201      	movs	r2, #1
 8000700:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_ADC2_Init+0xdc>)
 8000704:	2202      	movs	r2, #2
 8000706:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_ADC2_Init+0xdc>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_ADC2_Init+0xdc>)
 8000712:	2200      	movs	r2, #0
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC2_Init+0xdc>)
 8000718:	2200      	movs	r2, #0
 800071a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC2_Init+0xdc>)
 800071e:	2201      	movs	r2, #1
 8000720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC2_Init+0xdc>)
 8000726:	2200      	movs	r2, #0
 8000728:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC2_Init+0xdc>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <MX_ADC2_Init+0xdc>)
 8000734:	f001 fda4 	bl	8002280 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800073e:	f000 fe3c 	bl	80013ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xe4>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2306      	movs	r3, #6
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800074a:	2305      	movs	r3, #5
 800074c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074e:	237f      	movs	r3, #127	; 0x7f
 8000750:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_ADC2_Init+0xdc>)
 8000760:	f002 f83c 	bl	80027dc <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800076a:	f000 fe26 	bl	80013ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_ADC2_Init+0xe8>)
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000772:	230c      	movs	r3, #12
 8000774:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_ADC2_Init+0xdc>)
 800077c:	f002 f82e 	bl	80027dc <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000786:	f000 fe18 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000094 	.word	0x20000094
 8000798:	50000100 	.word	0x50000100
 800079c:	0c900008 	.word	0x0c900008
 80007a0:	10c00010 	.word	0x10c00010

080007a4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2220      	movs	r2, #32
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 fec9 	bl	8007554 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007c4:	4a31      	ldr	r2, [pc, #196]	; (800088c <MX_ADC3_Init+0xe8>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007ca:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_ADC3_Init+0xe4>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_ADC3_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_ADC3_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_ADC3_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_ADC3_Init+0xe4>)
 8000816:	2201      	movs	r2, #1
 8000818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_ADC3_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_ADC3_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800082a:	4817      	ldr	r0, [pc, #92]	; (8000888 <MX_ADC3_Init+0xe4>)
 800082c:	f001 fd28 	bl	8002280 <HAL_ADC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000836:	f000 fdc0 	bl	80013ba <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	4619      	mov	r1, r3
 8000844:	4810      	ldr	r0, [pc, #64]	; (8000888 <MX_ADC3_Init+0xe4>)
 8000846:	f002 fe47 	bl	80034d8 <HAL_ADCEx_MultiModeConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000850:	f000 fdb3 	bl	80013ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_ADC3_Init+0xec>)
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000858:	2306      	movs	r3, #6
 800085a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800085c:	2305      	movs	r3, #5
 800085e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000860:	237f      	movs	r3, #127	; 0x7f
 8000862:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000864:	2304      	movs	r3, #4
 8000866:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_ADC3_Init+0xe4>)
 8000872:	f001 ffb3 	bl	80027dc <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800087c:	f000 fd9d 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3730      	adds	r7, #48	; 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000100 	.word	0x20000100
 800088c:	50000400 	.word	0x50000400
 8000890:	14f00020 	.word	0x14f00020

08000894 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2220      	movs	r2, #32
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f006 fe57 	bl	8007554 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008a8:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <MX_ADC4_Init+0xc4>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008ae:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008da:	2201      	movs	r2, #1
 80008dc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_ADC4_Init+0xc0>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ADC4_Init+0xc0>)
 8000902:	2200      	movs	r2, #0
 8000904:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_ADC4_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_ADC4_Init+0xc0>)
 8000910:	f001 fcb6 	bl	8002280 <HAL_ADC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800091a:	f000 fd4e 	bl	80013ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_ADC4_Init+0xc8>)
 8000920:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000922:	2306      	movs	r3, #6
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000926:	2305      	movs	r3, #5
 8000928:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092a:	237f      	movs	r3, #127	; 0x7f
 800092c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092e:	2304      	movs	r3, #4
 8000930:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_ADC4_Init+0xc0>)
 800093c:	f001 ff4e 	bl	80027dc <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000946:	f000 fd38 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000016c 	.word	0x2000016c
 8000958:	50000500 	.word	0x50000500
 800095c:	14f00020 	.word	0x14f00020

08000960 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2220      	movs	r2, #32
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f006 fdf1 	bl	8007554 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_ADC5_Init+0xc0>)
 8000974:	4a2b      	ldr	r2, [pc, #172]	; (8000a24 <MX_ADC5_Init+0xc4>)
 8000976:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_ADC5_Init+0xc0>)
 800097a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800097e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_ADC5_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_ADC5_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_ADC5_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_ADC5_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_ADC5_Init+0xc0>)
 800099a:	2204      	movs	r2, #4
 800099c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_ADC5_Init+0xc0>)
 80009dc:	f001 fc50 	bl	8002280 <HAL_ADC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80009e6:	f000 fce8 	bl	80013ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_ADC5_Init+0xc8>)
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ee:	2306      	movs	r3, #6
 80009f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80009f2:	2305      	movs	r3, #5
 80009f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f6:	237f      	movs	r3, #127	; 0x7f
 80009f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fa:	2304      	movs	r3, #4
 80009fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_ADC5_Init+0xc0>)
 8000a08:	f001 fee8 	bl	80027dc <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000a12:	f000 fcd2 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001d8 	.word	0x200001d8
 8000a24:	50000600 	.word	0x50000600
 8000a28:	08600004 	.word	0x08600004

08000a2c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0a6      	sub	sp, #152	; 0x98
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a48:	2254      	movs	r2, #84	; 0x54
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 fd81 	bl	8007554 <memset>
  if(adcHandle->Instance==ADC1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a5a:	d16c      	bne.n	8000b36 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a66:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 fa8f 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a78:	f000 fc9f 	bl	80013ba <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a7c:	4ba0      	ldr	r3, [pc, #640]	; (8000d00 <HAL_ADC_MspInit+0x2d4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a9f      	ldr	r2, [pc, #636]	; (8000d00 <HAL_ADC_MspInit+0x2d4>)
 8000a84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a86:	4b9e      	ldr	r3, [pc, #632]	; (8000d00 <HAL_ADC_MspInit+0x2d4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d10b      	bne.n	8000aa6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a8e:	4b9d      	ldr	r3, [pc, #628]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a9c      	ldr	r2, [pc, #624]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000a94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b9a      	ldr	r3, [pc, #616]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b97      	ldr	r3, [pc, #604]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a96      	ldr	r2, [pc, #600]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b94      	ldr	r3, [pc, #592]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f003 f987 	bl	8003dec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ade:	4b8a      	ldr	r3, [pc, #552]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000ae0:	4a8a      	ldr	r2, [pc, #552]	; (8000d0c <HAL_ADC_MspInit+0x2e0>)
 8000ae2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ae4:	4b88      	ldr	r3, [pc, #544]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000ae6:	2205      	movs	r2, #5
 8000ae8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aea:	4b87      	ldr	r3, [pc, #540]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af0:	4b85      	ldr	r3, [pc, #532]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000af6:	4b84      	ldr	r3, [pc, #528]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afc:	4b82      	ldr	r3, [pc, #520]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b04:	4b80      	ldr	r3, [pc, #512]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b0c:	4b7e      	ldr	r3, [pc, #504]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000b0e:	2220      	movs	r2, #32
 8000b10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b12:	4b7d      	ldr	r3, [pc, #500]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b18:	487b      	ldr	r0, [pc, #492]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000b1a:	f002 fef5 	bl	8003908 <HAL_DMA_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000b24:	f000 fc49 	bl	80013ba <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a77      	ldr	r2, [pc, #476]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000b2c:	655a      	str	r2, [r3, #84]	; 0x54
 8000b2e:	4a76      	ldr	r2, [pc, #472]	; (8000d08 <HAL_ADC_MspInit+0x2dc>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000b34:	e1e0      	b.n	8000ef8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a75      	ldr	r2, [pc, #468]	; (8000d10 <HAL_ADC_MspInit+0x2e4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d16c      	bne.n	8000c1a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b4a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 fa1d 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000b5c:	f000 fc2d 	bl	80013ba <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b60:	4b67      	ldr	r3, [pc, #412]	; (8000d00 <HAL_ADC_MspInit+0x2d4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a66      	ldr	r2, [pc, #408]	; (8000d00 <HAL_ADC_MspInit+0x2d4>)
 8000b68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b6a:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <HAL_ADC_MspInit+0x2d4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10b      	bne.n	8000b8a <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b72:	4b64      	ldr	r3, [pc, #400]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a63      	ldr	r2, [pc, #396]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000b78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b61      	ldr	r3, [pc, #388]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b5e      	ldr	r3, [pc, #376]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a5d      	ldr	r2, [pc, #372]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin|BATTERY_AD_Pin;
 8000ba2:	23c0      	movs	r3, #192	; 0xc0
 8000ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f003 f915 	bl	8003dec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bc4:	4a54      	ldr	r2, [pc, #336]	; (8000d18 <HAL_ADC_MspInit+0x2ec>)
 8000bc6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000bc8:	4b52      	ldr	r3, [pc, #328]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bca:	2224      	movs	r2, #36	; 0x24
 8000bcc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bce:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd4:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000bda:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000be8:	4b4a      	ldr	r3, [pc, #296]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bee:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000bf0:	4b48      	ldr	r3, [pc, #288]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000bf6:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000bfc:	4845      	ldr	r0, [pc, #276]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000bfe:	f002 fe83 	bl	8003908 <HAL_DMA_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000c08:	f000 fbd7 	bl	80013ba <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a41      	ldr	r2, [pc, #260]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000c10:	655a      	str	r2, [r3, #84]	; 0x54
 8000c12:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <HAL_ADC_MspInit+0x2e8>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000c18:	e16e      	b.n	8000ef8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a3f      	ldr	r2, [pc, #252]	; (8000d1c <HAL_ADC_MspInit+0x2f0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	f040 8085 	bne.w	8000d30 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c30:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 f9aa 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000c42:	f000 fbba 	bl	80013ba <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <HAL_ADC_MspInit+0x2f4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a34      	ldr	r2, [pc, #208]	; (8000d20 <HAL_ADC_MspInit+0x2f4>)
 8000c4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000c50:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <HAL_ADC_MspInit+0x2f4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d10b      	bne.n	8000c70 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	4a29      	ldr	r2, [pc, #164]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_ADC_MspInit+0x2d8>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4820      	ldr	r0, [pc, #128]	; (8000d24 <HAL_ADC_MspInit+0x2f8>)
 8000ca4:	f003 f8a2 	bl	8003dec <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000caa:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <HAL_ADC_MspInit+0x300>)
 8000cac:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cb0:	2225      	movs	r2, #37	; 0x25
 8000cb2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ccc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cd8:	2220      	movs	r2, #32
 8000cda:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000ce4:	f002 fe10 	bl	8003908 <HAL_DMA_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000cee:	f000 fb64 	bl	80013ba <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cf6:	655a      	str	r2, [r3, #84]	; 0x54
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <HAL_ADC_MspInit+0x2fc>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000cfe:	e0fb      	b.n	8000ef8 <HAL_ADC_MspInit+0x4cc>
 8000d00:	20000424 	.word	0x20000424
 8000d04:	40021000 	.word	0x40021000
 8000d08:	20000244 	.word	0x20000244
 8000d0c:	40020008 	.word	0x40020008
 8000d10:	50000100 	.word	0x50000100
 8000d14:	200002a4 	.word	0x200002a4
 8000d18:	4002001c 	.word	0x4002001c
 8000d1c:	50000400 	.word	0x50000400
 8000d20:	20000428 	.word	0x20000428
 8000d24:	48000400 	.word	0x48000400
 8000d28:	20000304 	.word	0x20000304
 8000d2c:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a72      	ldr	r2, [pc, #456]	; (8000f00 <HAL_ADC_MspInit+0x4d4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d16c      	bne.n	8000e14 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000d44:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 f920 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000d56:	f000 fb30 	bl	80013ba <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000d5a:	4b6a      	ldr	r3, [pc, #424]	; (8000f04 <HAL_ADC_MspInit+0x4d8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a68      	ldr	r2, [pc, #416]	; (8000f04 <HAL_ADC_MspInit+0x4d8>)
 8000d62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000d64:	4b67      	ldr	r3, [pc, #412]	; (8000f04 <HAL_ADC_MspInit+0x4d8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10b      	bne.n	8000d84 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d6c:	4b66      	ldr	r3, [pc, #408]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	4a65      	ldr	r2, [pc, #404]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d78:	4b63      	ldr	r3, [pc, #396]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d88:	4a5f      	ldr	r2, [pc, #380]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d90:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000db4:	4619      	mov	r1, r3
 8000db6:	4855      	ldr	r0, [pc, #340]	; (8000f0c <HAL_ADC_MspInit+0x4e0>)
 8000db8:	f003 f818 	bl	8003dec <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000dbc:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000dbe:	4a55      	ldr	r2, [pc, #340]	; (8000f14 <HAL_ADC_MspInit+0x4e8>)
 8000dc0:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000dc2:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000dc4:	2226      	movs	r2, #38	; 0x26
 8000dc6:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc8:	4b51      	ldr	r3, [pc, #324]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dce:	4b50      	ldr	r3, [pc, #320]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000dd4:	4b4e      	ldr	r3, [pc, #312]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dda:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de0:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de2:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de8:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000dec:	2220      	movs	r2, #32
 8000dee:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000df0:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000df6:	4846      	ldr	r0, [pc, #280]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000df8:	f002 fd86 	bl	8003908 <HAL_DMA_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000e02:	f000 fada 	bl	80013ba <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a41      	ldr	r2, [pc, #260]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000e0a:	655a      	str	r2, [r3, #84]	; 0x54
 8000e0c:	4a40      	ldr	r2, [pc, #256]	; (8000f10 <HAL_ADC_MspInit+0x4e4>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e12:	e071      	b.n	8000ef8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a3f      	ldr	r2, [pc, #252]	; (8000f18 <HAL_ADC_MspInit+0x4ec>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d16c      	bne.n	8000ef8 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e28:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 f8ae 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000e3a:	f000 fabe 	bl	80013ba <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <HAL_ADC_MspInit+0x4d8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <HAL_ADC_MspInit+0x4d8>)
 8000e46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <HAL_ADC_MspInit+0x4d8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10b      	bne.n	8000e68 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000e50:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6c:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_ADC_MspInit+0x4dc>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f002 ffa5 	bl	8003dec <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_ADC_MspInit+0x4f4>)
 8000ea6:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000eaa:	2227      	movs	r2, #39	; 0x27
 8000eac:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec6:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ece:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000edc:	480f      	ldr	r0, [pc, #60]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000ede:	f002 fd13 	bl	8003908 <HAL_DMA_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000ee8:	f000 fa67 	bl	80013ba <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_ADC_MspInit+0x4f0>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000ef8:	bf00      	nop
 8000efa:	3798      	adds	r7, #152	; 0x98
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	50000500 	.word	0x50000500
 8000f04:	20000428 	.word	0x20000428
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	20000364 	.word	0x20000364
 8000f14:	40020044 	.word	0x40020044
 8000f18:	50000600 	.word	0x50000600
 8000f1c:	200003c4 	.word	0x200003c4
 8000f20:	40020058 	.word	0x40020058

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_DMA_Init+0x60>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <MX_DMA_Init+0x60>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6493      	str	r3, [r2, #72]	; 0x48
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_DMA_Init+0x60>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_DMA_Init+0x60>)
 8000f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <MX_DMA_Init+0x60>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_DMA_Init+0x60>)
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2010      	movs	r0, #16
 8000f60:	f002 fc9d 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f64:	2010      	movs	r0, #16
 8000f66:	f002 fcb4 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f002 fc95 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f74:	2011      	movs	r0, #17
 8000f76:	f002 fcac 	bl	80038d2 <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <MX_GPIO_Init>:
     PB11   ------> USART3_RX
     PC6   ------> S_TIM3_CH1
     PB5   ------> S_TIM17_CH1
*/
void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b6e      	ldr	r3, [pc, #440]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a6d      	ldr	r2, [pc, #436]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb6:	4b68      	ldr	r3, [pc, #416]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a67      	ldr	r2, [pc, #412]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fbc:	f043 0320 	orr.w	r3, r3, #32
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b65      	ldr	r3, [pc, #404]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0320 	and.w	r3, r3, #32
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b62      	ldr	r3, [pc, #392]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a61      	ldr	r2, [pc, #388]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a5b      	ldr	r2, [pc, #364]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b59      	ldr	r3, [pc, #356]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	4b56      	ldr	r3, [pc, #344]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a55      	ldr	r2, [pc, #340]	; (8001158 <MX_GPIO_Init+0x1d0>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b53      	ldr	r3, [pc, #332]	; (8001158 <MX_GPIO_Init+0x1d0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f003 f866 	bl	80040f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 800102a:	484c      	ldr	r0, [pc, #304]	; (800115c <MX_GPIO_Init+0x1d4>)
 800102c:	f003 f860 	bl	80040f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_ENTER_Pin|BT_DOWN_Pin|BT_LEFT_Pin
 8001030:	f242 33a0 	movw	r3, #9120	; 0x23a0
 8001034:	617b      	str	r3, [r7, #20]
                          |BT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4846      	ldr	r0, [pc, #280]	; (8001160 <MX_GPIO_Init+0x1d8>)
 8001048:	f002 fed0 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_MOTOR_DIR_IN4_Pin|RED_LED_Pin|GREEN_LED_Pin;
 800104c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f002 fec0 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_TRIGGER_Pin;
 800106c:	2304      	movs	r3, #4
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800107c:	2303      	movs	r3, #3
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4835      	ldr	r0, [pc, #212]	; (800115c <MX_GPIO_Init+0x1d4>)
 8001088:	f002 feb0 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin|BLUETOOTH_TX_Pin;
 800108c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800109e:	2307      	movs	r3, #7
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	482c      	ldr	r0, [pc, #176]	; (800115c <MX_GPIO_Init+0x1d4>)
 80010aa:	f002 fe9f 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_DIR_IN1_Pin|RIGHT_MOTOR_DIR_IN3_Pin|BLUE_LED_Pin|LEFT_MOTOR_DIR_IN2_Pin;
 80010ae:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4825      	ldr	r0, [pc, #148]	; (800115c <MX_GPIO_Init+0x1d4>)
 80010c8:	f002 fe90 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTRASSONIC_ECO_Pin;
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ULTRASSONIC_ECO_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	481e      	ldr	r0, [pc, #120]	; (8001160 <MX_GPIO_Init+0x1d8>)
 80010e8:	f002 fe80 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_FRONTAL_Pin;
 80010ec:	2304      	movs	r3, #4
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_FRONTAL_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4818      	ldr	r0, [pc, #96]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8001102:	f002 fe73 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_Pin;
 8001106:	2320      	movs	r3, #32
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001116:	230a      	movs	r3, #10
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RIGHT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <MX_GPIO_Init+0x1d4>)
 8001122:	f002 fe63 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_UP_Pin;
 8001126:	2340      	movs	r3, #64	; 0x40
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_UP_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4808      	ldr	r0, [pc, #32]	; (800115c <MX_GPIO_Init+0x1d4>)
 800113c:	f002 fe56 	bl	8003dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2028      	movs	r0, #40	; 0x28
 8001146:	f002 fbaa 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800114a:	2028      	movs	r0, #40	; 0x28
 800114c:	f002 fbc1 	bl	80038d2 <HAL_NVIC_EnableIRQ>

}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400
 8001160:	48000800 	.word	0x48000800
 8001164:	48000c00 	.word	0x48000c00

08001168 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_I2C2_Init+0x74>)
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <MX_I2C2_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_I2C2_Init+0x74>)
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <MX_I2C2_Init+0x7c>)
 8001176:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_I2C2_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_I2C2_Init+0x74>)
 8001180:	2201      	movs	r2, #1
 8001182:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_I2C2_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_I2C2_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C2_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_I2C2_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C2_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <MX_I2C2_Init+0x74>)
 80011a4:	f002 ffdf 	bl	8004166 <HAL_I2C_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ae:	f000 f904 	bl	80013ba <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <MX_I2C2_Init+0x74>)
 80011b6:	f003 f871 	bl	800429c <HAL_I2CEx_ConfigAnalogFilter>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011c0:	f000 f8fb 	bl	80013ba <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011c4:	2100      	movs	r1, #0
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_I2C2_Init+0x74>)
 80011c8:	f003 f8b3 	bl	8004332 <HAL_I2CEx_ConfigDigitalFilter>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f000 f8f2 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000042c 	.word	0x2000042c
 80011e0:	40005800 	.word	0x40005800
 80011e4:	30a0a7fb 	.word	0x30a0a7fb

080011e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0a0      	sub	sp, #128	; 0x80
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2254      	movs	r2, #84	; 0x54
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f006 f9a3 	bl	8007554 <memset>
  if(i2cHandle->Instance==I2C2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <HAL_I2C_MspInit+0xe0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d153      	bne.n	80012c0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4618      	mov	r0, r3
 8001226:	f003 feb3 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001230:	f000 f8c3 	bl	80013ba <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a24      	ldr	r2, [pc, #144]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 8001264:	2310      	movs	r3, #16
 8001266:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001268:	2312      	movs	r3, #18
 800126a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001274:	2304      	movs	r3, #4
 8001276:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800127c:	4619      	mov	r1, r3
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <HAL_I2C_MspInit+0xe8>)
 8001280:	f002 fdb4 	bl	8003dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001296:	2304      	movs	r3, #4
 8001298:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f002 fda2 	bl	8003dec <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 80012ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b2:	6593      	str	r3, [r2, #88]	; 0x58
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_I2C_MspInit+0xe4>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012c0:	bf00      	nop
 80012c2:	3780      	adds	r7, #128	; 0x80
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40005800 	.word	0x40005800
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000800 	.word	0x48000800

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f000 fd1d 	bl	8001d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f822 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f7ff fe52 	bl	8000f88 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e4:	f7ff fe1e 	bl	8000f24 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80012e8:	f000 fbee 	bl	8001ac8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80012ec:	f7ff f96c 	bl	80005c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80012f0:	f7ff f9e2 	bl	80006b8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80012f4:	f7ff fa56 	bl	80007a4 <MX_ADC3_Init>
  MX_TIM1_Init();
 80012f8:	f000 f8e0 	bl	80014bc <MX_TIM1_Init>
  MX_TIM16_Init();
 80012fc:	f000 fa7e 	bl	80017fc <MX_TIM16_Init>
  MX_TIM4_Init();
 8001300:	f000 f998 	bl	8001634 <MX_TIM4_Init>
  MX_ADC4_Init();
 8001304:	f7ff fac6 	bl	8000894 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001308:	f7ff fb2a 	bl	8000960 <MX_ADC5_Init>
  MX_I2C2_Init();
 800130c:	f7ff ff2c 	bl	8001168 <MX_I2C2_Init>
  MX_TIM8_Init();
 8001310:	f000 f9e0 	bl	80016d4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  vPowerTrainSystemInit();
 8001314:	f7ff f946 	bl	80005a4 <vPowerTrainSystemInit>
  vLineSensorSystemInit(pLineSensorsReadings);
 8001318:	4801      	ldr	r0, [pc, #4]	; (8001320 <main+0x4c>)
 800131a:	f7ff f8fb 	bl	8000514 <vLineSensorSystemInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800131e:	e7fe      	b.n	800131e <main+0x4a>
 8001320:	20000480 	.word	0x20000480

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b094      	sub	sp, #80	; 0x50
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	2238      	movs	r2, #56	; 0x38
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f006 f90e 	bl	8007554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001346:	2000      	movs	r0, #0
 8001348:	f003 f840 	bl	80043cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001356:	2340      	movs	r3, #64	; 0x40
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	2302      	movs	r3, #2
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800135e:	2302      	movs	r3, #2
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001362:	2304      	movs	r3, #4
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001366:	2355      	movs	r3, #85	; 0x55
 8001368:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136a:	2302      	movs	r3, #2
 800136c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800136e:	2302      	movs	r3, #2
 8001370:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	4618      	mov	r0, r3
 800137c:	f003 f8da 	bl	8004534 <HAL_RCC_OscConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001386:	f000 f818 	bl	80013ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	230f      	movs	r3, #15
 800138c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2303      	movs	r3, #3
 8001390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2104      	movs	r1, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fbd8 	bl	8004b58 <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013ae:	f000 f804 	bl	80013ba <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3750      	adds	r7, #80	; 0x50
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013be:	b672      	cpsid	i
}
 80013c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <Error_Handler+0x8>

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_MspInit+0x44>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6613      	str	r3, [r2, #96]	; 0x60
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_MspInit+0x44>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x44>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x44>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x44>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013fa:	f003 f88b 	bl	8004514 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 fcb0 	bl	8001dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Channel6_IRQHandler+0x10>)
 8001466:	f002 fb72 	bl	8003b4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000658 	.word	0x20000658

08001474 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <DMA1_Channel7_IRQHandler+0x10>)
 800147a:	f002 fb68 	bl	8003b4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200006b8 	.word	0x200006b8

08001488 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800148c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001490:	f002 fe46 	bl	8004120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09c      	sub	sp, #112	; 0x70
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	615a      	str	r2, [r3, #20]
 80014ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2234      	movs	r2, #52	; 0x34
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f006 f82c 	bl	8007554 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <MX_TIM1_Init+0x170>)
 80014fe:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <MX_TIM1_Init+0x174>)
 8001500:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <MX_TIM1_Init+0x170>)
 8001504:	2210      	movs	r2, #16
 8001506:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b48      	ldr	r3, [pc, #288]	; (800162c <MX_TIM1_Init+0x170>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <MX_TIM1_Init+0x170>)
 8001510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001514:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b45      	ldr	r3, [pc, #276]	; (800162c <MX_TIM1_Init+0x170>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <MX_TIM1_Init+0x170>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001522:	4b42      	ldr	r3, [pc, #264]	; (800162c <MX_TIM1_Init+0x170>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001528:	4840      	ldr	r0, [pc, #256]	; (800162c <MX_TIM1_Init+0x170>)
 800152a:	f003 ff7f 	bl	800542c <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001534:	f7ff ff41 	bl	80013ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800153e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001542:	4619      	mov	r1, r3
 8001544:	4839      	ldr	r0, [pc, #228]	; (800162c <MX_TIM1_Init+0x170>)
 8001546:	f004 fab7 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001550:	f7ff ff33 	bl	80013ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001554:	4835      	ldr	r0, [pc, #212]	; (800162c <MX_TIM1_Init+0x170>)
 8001556:	f004 f831 	bl	80055bc <HAL_TIM_PWM_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001560:	f7ff ff2b 	bl	80013ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001570:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001574:	4619      	mov	r1, r3
 8001576:	482d      	ldr	r0, [pc, #180]	; (800162c <MX_TIM1_Init+0x170>)
 8001578:	f005 f854 	bl	8006624 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001582:	f7ff ff1a 	bl	80013ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4820      	ldr	r0, [pc, #128]	; (800162c <MX_TIM1_Init+0x170>)
 80015ac:	f004 f970 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015b6:	f7ff ff00 	bl	80013ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015be:	2204      	movs	r2, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	481a      	ldr	r0, [pc, #104]	; (800162c <MX_TIM1_Init+0x170>)
 80015c4:	f004 f964 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80015ce:	f7ff fef4 	bl	80013ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM1_Init+0x170>)
 8001610:	f005 f89e 	bl	8006750 <HAL_TIMEx_ConfigBreakDeadTime>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800161a:	f7ff fece 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM1_Init+0x170>)
 8001620:	f000 f9ce 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3770      	adds	r7, #112	; 0x70
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000494 	.word	0x20000494
 8001630:	40012c00 	.word	0x40012c00

08001634 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MX_TIM4_Init+0x98>)
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <MX_TIM4_Init+0x9c>)
 8001656:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_TIM4_Init+0x98>)
 800165a:	f244 2267 	movw	r2, #16999	; 0x4267
 800165e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_TIM4_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <MX_TIM4_Init+0x98>)
 8001668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_TIM4_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_TIM4_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800167a:	4814      	ldr	r0, [pc, #80]	; (80016cc <MX_TIM4_Init+0x98>)
 800167c:	f003 fed6 	bl	800542c <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001686:	f7ff fe98 	bl	80013ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_TIM4_Init+0x98>)
 8001698:	f004 fa0e 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80016a2:	f7ff fe8a 	bl	80013ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <MX_TIM4_Init+0x98>)
 80016b4:	f004 ffb6 	bl	8006624 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80016be:	f7ff fe7c 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200004e0 	.word	0x200004e0
 80016d0:	40000800 	.word	0x40000800

080016d4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b098      	sub	sp, #96	; 0x60
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2234      	movs	r2, #52	; 0x34
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f005 ff27 	bl	8007554 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <MX_TIM8_Init+0x120>)
 8001708:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <MX_TIM8_Init+0x124>)
 800170a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <MX_TIM8_Init+0x120>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <MX_TIM8_Init+0x120>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <MX_TIM8_Init+0x120>)
 800171a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <MX_TIM8_Init+0x120>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <MX_TIM8_Init+0x120>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <MX_TIM8_Init+0x120>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001732:	4830      	ldr	r0, [pc, #192]	; (80017f4 <MX_TIM8_Init+0x120>)
 8001734:	f003 ff42 	bl	80055bc <HAL_TIM_PWM_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800173e:	f7ff fe3c 	bl	80013ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800174e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001752:	4619      	mov	r1, r3
 8001754:	4827      	ldr	r0, [pc, #156]	; (80017f4 <MX_TIM8_Init+0x120>)
 8001756:	f004 ff65 	bl	8006624 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001760:	f7ff fe2b 	bl	80013ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001770:	2300      	movs	r3, #0
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001780:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001784:	2200      	movs	r2, #0
 8001786:	4619      	mov	r1, r3
 8001788:	481a      	ldr	r0, [pc, #104]	; (80017f4 <MX_TIM8_Init+0x120>)
 800178a:	f004 f881 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001794:	f7ff fe11 	bl	80013ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM8_Init+0x120>)
 80017d6:	f004 ffbb 	bl	8006750 <HAL_TIMEx_ConfigBreakDeadTime>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80017e0:	f7ff fdeb 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM8_Init+0x120>)
 80017e6:	f000 f8eb 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 80017ea:	bf00      	nop
 80017ec:	3760      	adds	r7, #96	; 0x60
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000052c 	.word	0x2000052c
 80017f8:	40013400 	.word	0x40013400

080017fc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b094      	sub	sp, #80	; 0x50
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001802:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2234      	movs	r2, #52	; 0x34
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f005 fe99 	bl	8007554 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <MX_TIM16_Init+0xec>)
 8001824:	4a31      	ldr	r2, [pc, #196]	; (80018ec <MX_TIM16_Init+0xf0>)
 8001826:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <MX_TIM16_Init+0xec>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <MX_TIM16_Init+0xec>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <MX_TIM16_Init+0xec>)
 8001836:	f242 720f 	movw	r2, #9999	; 0x270f
 800183a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <MX_TIM16_Init+0xec>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <MX_TIM16_Init+0xec>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <MX_TIM16_Init+0xec>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800184e:	4826      	ldr	r0, [pc, #152]	; (80018e8 <MX_TIM16_Init+0xec>)
 8001850:	f003 fdec 	bl	800542c <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800185a:	f7ff fdae 	bl	80013ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800185e:	4822      	ldr	r0, [pc, #136]	; (80018e8 <MX_TIM16_Init+0xec>)
 8001860:	f003 feac 	bl	80055bc <HAL_TIM_PWM_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800186a:	f7ff fda6 	bl	80013ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186e:	2360      	movs	r3, #96	; 0x60
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001876:	2300      	movs	r3, #0
 8001878:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800188e:	2200      	movs	r2, #0
 8001890:	4619      	mov	r1, r3
 8001892:	4815      	ldr	r0, [pc, #84]	; (80018e8 <MX_TIM16_Init+0xec>)
 8001894:	f003 fffc 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800189e:	f7ff fd8c 	bl	80013ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	4619      	mov	r1, r3
 80018c8:	4807      	ldr	r0, [pc, #28]	; (80018e8 <MX_TIM16_Init+0xec>)
 80018ca:	f004 ff41 	bl	8006750 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80018d4:	f7ff fd71 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <MX_TIM16_Init+0xec>)
 80018da:	f000 f871 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 80018de:	bf00      	nop
 80018e0:	3750      	adds	r7, #80	; 0x50
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000578 	.word	0x20000578
 80018ec:	40014400 	.word	0x40014400

080018f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <HAL_TIM_Base_MspInit+0x80>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10c      	bne.n	800191c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 8001908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800190c:	6613      	str	r3, [r2, #96]	; 0x60
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800191a:	e022      	b.n	8001962 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_TIM_Base_MspInit+0x88>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10c      	bne.n	8001940 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
}
 800193e:	e010      	b.n	8001962 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_TIM_Base_MspInit+0x8c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10b      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6613      	str	r3, [r2, #96]	; 0x60
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_TIM_Base_MspInit+0x84>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40012c00 	.word	0x40012c00
 8001974:	40021000 	.word	0x40021000
 8001978:	40000800 	.word	0x40000800
 800197c:	40014400 	.word	0x40014400

08001980 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_TIM_PWM_MspInit+0x38>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10b      	bne.n	80019aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_TIM_PWM_MspInit+0x3c>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_TIM_PWM_MspInit+0x3c>)
 8001998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_TIM_PWM_MspInit+0x3c>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40013400 	.word	0x40013400
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a34      	ldr	r2, [pc, #208]	; (8001ab0 <HAL_TIM_MspPostInit+0xf0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d11c      	bne.n	8001a1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 80019fa:	2303      	movs	r3, #3
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4828      	ldr	r0, [pc, #160]	; (8001ab8 <HAL_TIM_MspPostInit+0xf8>)
 8001a16:	f002 f9e9 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001a1a:	e044      	b.n	8001aa6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_TIM_MspPostInit+0xfc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d11e      	bne.n	8001a64 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001a50:	2302      	movs	r3, #2
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f002 f9c5 	bl	8003dec <HAL_GPIO_Init>
}
 8001a62:	e020      	b.n	8001aa6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM16)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <HAL_TIM_MspPostInit+0x100>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_TIM_MspPostInit+0xf4>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_ENCODER_Pin;
 8001a86:	2310      	movs	r3, #16
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001a96:	2301      	movs	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEFT_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <HAL_TIM_MspPostInit+0x104>)
 8001aa2:	f002 f9a3 	bl	8003dec <HAL_GPIO_Init>
}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	48000800 	.word	0x48000800
 8001abc:	40013400 	.word	0x40013400
 8001ac0:	40014400 	.word	0x40014400
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b0a:	4812      	ldr	r0, [pc, #72]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b0c:	f004 feb4 	bl	8006878 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b16:	f7ff fc50 	bl	80013ba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b1e:	f005 fc4f 	bl	80073c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b28:	f7ff fc47 	bl	80013ba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b30:	f005 fc84 	bl	800743c <HAL_UARTEx_SetRxFifoThreshold>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b3a:	f7ff fc3e 	bl	80013ba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b40:	f005 fc05 	bl	800734e <HAL_UARTEx_DisableFifoMode>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b4a:	f7ff fc36 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200005c4 	.word	0x200005c4
 8001b58:	40008000 	.word	0x40008000

08001b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b09e      	sub	sp, #120	; 0x78
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2254      	movs	r2, #84	; 0x54
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 fce9 	bl	8007554 <memset>
  if(uartHandle->Instance==LPUART1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a49      	ldr	r2, [pc, #292]	; (8001cac <HAL_UART_MspInit+0x150>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	f040 808a 	bne.w	8001ca2 <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f9f8 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ba6:	f7ff fc08 	bl	80013ba <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_UART_MspInit+0x154>)
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	4a40      	ldr	r2, [pc, #256]	; (8001cb0 <HAL_UART_MspInit+0x154>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <HAL_UART_MspInit+0x154>)
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_UART_MspInit+0x154>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <HAL_UART_MspInit+0x154>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bce:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_UART_MspInit+0x154>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001bda:	230c      	movs	r3, #12
 8001bdc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001bea:	230c      	movs	r3, #12
 8001bec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf8:	f002 f8f8 	bl	8003dec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <HAL_UART_MspInit+0x15c>)
 8001c00:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c04:	2222      	movs	r2, #34	; 0x22
 8001c06:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001c32:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c34:	f001 fe68 	bl	8003908 <HAL_DMA_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001c3e:	f7ff fbbc 	bl	80013ba <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <HAL_UART_MspInit+0x158>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_UART_MspInit+0x164>)
 8001c54:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c58:	2223      	movs	r2, #35	; 0x23
 8001c5a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c5e:	2210      	movs	r2, #16
 8001c60:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c88:	f001 fe3e 	bl	8003908 <HAL_DMA_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001c92:	f7ff fb92 	bl	80013ba <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c9a:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_UART_MspInit+0x160>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3778      	adds	r7, #120	; 0x78
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40008000 	.word	0x40008000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	20000658 	.word	0x20000658
 8001cb8:	4002006c 	.word	0x4002006c
 8001cbc:	200006b8 	.word	0x200006b8
 8001cc0:	40020080 	.word	0x40020080

08001cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc8:	f7ff fbe6 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <LoopForever+0xe>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	; (8001d10 <LoopForever+0x16>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f005 fc37 	bl	8007564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cf6:	f7ff faed 	bl	80012d4 <main>

08001cfa <LoopForever>:

LoopForever:
    b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
  ldr   r0, =_estack
 8001cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d08:	08007614 	.word	0x08007614
  ldr r2, =_sbss
 8001d0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d10:	2000071c 	.word	0x2000071c

08001d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC1_2_IRQHandler>

08001d16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f001 fdb1 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f80e 	bl	8001d48 <HAL_InitTick>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	e001      	b.n	8001d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d38:	f7ff fb44 	bl	80013c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_InitTick+0x68>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d022      	beq.n	8001da2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_InitTick+0x6c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_InitTick+0x68>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fdbc 	bl	80038ee <HAL_SYSTICK_Config>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10f      	bne.n	8001d9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	d809      	bhi.n	8001d96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d82:	2200      	movs	r2, #0
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8a:	f001 fd88 	bl	800389e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_InitTick+0x70>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e007      	b.n	8001da6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	e004      	b.n	8001da6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e001      	b.n	8001da6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_IncTick+0x1c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <HAL_IncTick+0x1c>)
 8001dcc:	6013      	str	r3, [r2, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	20000718 	.word	0x20000718
 8001ddc:	20000008 	.word	0x20000008

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000718 	.word	0x20000718

08001df8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	609a      	str	r2, [r3, #8]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3360      	adds	r3, #96	; 0x60
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <LL_ADC_SetOffset+0x44>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e98:	bf00      	nop
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	03fff000 	.word	0x03fff000

08001ea8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3360      	adds	r3, #96	; 0x60
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3360      	adds	r3, #96	; 0x60
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b087      	sub	sp, #28
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3360      	adds	r3, #96	; 0x60
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3360      	adds	r3, #96	; 0x60
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	615a      	str	r2, [r3, #20]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3330      	adds	r3, #48	; 0x30
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	4413      	add	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	211f      	movs	r1, #31
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0e9b      	lsrs	r3, r3, #26
 8001ffa:	f003 011f 	and.w	r1, r3, #31
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800201a:	b480      	push	{r7}
 800201c:	b087      	sub	sp, #28
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3314      	adds	r3, #20
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	0e5b      	lsrs	r3, r3, #25
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	4413      	add	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0d1b      	lsrs	r3, r3, #20
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2107      	movs	r1, #7
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	401a      	ands	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	0d1b      	lsrs	r3, r3, #20
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	431a      	orrs	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0318 	and.w	r3, r3, #24
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002094:	40d9      	lsrs	r1, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	400b      	ands	r3, r1
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	0007ffff 	.word	0x0007ffff

080020b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 031f 	and.w	r3, r3, #31
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6093      	str	r3, [r2, #8]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800210c:	d101      	bne.n	8002112 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800215c:	d101      	bne.n	8002162 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ac:	f043 0202 	orr.w	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <LL_ADC_IsEnabled+0x18>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <LL_ADC_IsEnabled+0x1a>
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d101      	bne.n	80021fe <LL_ADC_IsDisableOngoing+0x18>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_IsDisableOngoing+0x1a>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002220:	f043 0204 	orr.w	r2, r3, #4
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d101      	bne.n	800224c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b08      	cmp	r3, #8
 800226c:	d101      	bne.n	8002272 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e1a9      	b.n	80025ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe fbbf 	bl	8000a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff19 	bl	80020f8 <LL_ADC_IsDeepPowerDownEnabled>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff feff 	bl	80020d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff34 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d115      	bne.n	8002312 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff18 	bl	8002120 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f0:	4b9c      	ldr	r3, [pc, #624]	; (8002564 <HAL_ADC_Init+0x2e4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	4a9c      	ldr	r2, [pc, #624]	; (8002568 <HAL_ADC_Init+0x2e8>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	3301      	adds	r3, #1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002304:	e002      	b.n	800230c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3b01      	subs	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff16 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	f043 0210 	orr.w	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff76 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002348:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 8142 	bne.w	80025dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 813e 	bne.w	80025dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002368:	f043 0202 	orr.w	r2, r3, #2
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff23 	bl	80021c0 <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d141      	bne.n	8002404 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002388:	d004      	beq.n	8002394 <HAL_ADC_Init+0x114>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_ADC_Init+0x2ec>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d10f      	bne.n	80023b4 <HAL_ADC_Init+0x134>
 8002394:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002398:	f7ff ff12 	bl	80021c0 <LL_ADC_IsEnabled>
 800239c:	4604      	mov	r4, r0
 800239e:	4873      	ldr	r0, [pc, #460]	; (800256c <HAL_ADC_Init+0x2ec>)
 80023a0:	f7ff ff0e 	bl	80021c0 <LL_ADC_IsEnabled>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4323      	orrs	r3, r4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e012      	b.n	80023da <HAL_ADC_Init+0x15a>
 80023b4:	486e      	ldr	r0, [pc, #440]	; (8002570 <HAL_ADC_Init+0x2f0>)
 80023b6:	f7ff ff03 	bl	80021c0 <LL_ADC_IsEnabled>
 80023ba:	4604      	mov	r4, r0
 80023bc:	486d      	ldr	r0, [pc, #436]	; (8002574 <HAL_ADC_Init+0x2f4>)
 80023be:	f7ff feff 	bl	80021c0 <LL_ADC_IsEnabled>
 80023c2:	4603      	mov	r3, r0
 80023c4:	431c      	orrs	r4, r3
 80023c6:	486c      	ldr	r0, [pc, #432]	; (8002578 <HAL_ADC_Init+0x2f8>)
 80023c8:	f7ff fefa 	bl	80021c0 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4323      	orrs	r3, r4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e6:	d004      	beq.n	80023f2 <HAL_ADC_Init+0x172>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5f      	ldr	r2, [pc, #380]	; (800256c <HAL_ADC_Init+0x2ec>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x176>
 80023f2:	4a62      	ldr	r2, [pc, #392]	; (800257c <HAL_ADC_Init+0x2fc>)
 80023f4:	e000      	b.n	80023f8 <HAL_ADC_Init+0x178>
 80023f6:	4a62      	ldr	r2, [pc, #392]	; (8002580 <HAL_ADC_Init+0x300>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f7ff fcfa 	bl	8001df8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7f5b      	ldrb	r3, [r3, #29]
 8002408:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800240e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002414:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800241a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002422:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800242e:	2b01      	cmp	r3, #1
 8002430:	d106      	bne.n	8002440 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	045b      	lsls	r3, r3, #17
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <HAL_ADC_Init+0x304>)
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	430b      	orrs	r3, r1
 800246e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fee5 	bl	800225a <LL_ADC_INJ_IsConversionOngoing>
 8002490:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d17f      	bne.n	8002598 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d17c      	bne.n	8002598 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ba:	f023 0302 	bic.w	r3, r3, #2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d017      	beq.n	8002500 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6911      	ldr	r1, [r2, #16]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024fe:	e013      	b.n	8002528 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800250e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002524:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252e:	2b01      	cmp	r3, #1
 8002530:	d12a      	bne.n	8002588 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002554:	430a      	orrs	r2, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	e019      	b.n	8002598 <HAL_ADC_Init+0x318>
 8002564:	20000000 	.word	0x20000000
 8002568:	053e2d63 	.word	0x053e2d63
 800256c:	50000100 	.word	0x50000100
 8002570:	50000400 	.word	0x50000400
 8002574:	50000500 	.word	0x50000500
 8002578:	50000600 	.word	0x50000600
 800257c:	50000300 	.word	0x50000300
 8002580:	50000700 	.word	0x50000700
 8002584:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10c      	bne.n	80025ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f023 010f 	bic.w	r1, r3, #15
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
 80025b8:	e007      	b.n	80025ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 020f 	bic.w	r2, r2, #15
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80025da:	e007      	b.n	80025ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	f043 0210 	orr.w	r2, r3, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop

080025f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260c:	d004      	beq.n	8002618 <HAL_ADC_Start_DMA+0x20>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5a      	ldr	r2, [pc, #360]	; (800277c <HAL_ADC_Start_DMA+0x184>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_ADC_Start_DMA+0x24>
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_ADC_Start_DMA+0x188>)
 800261a:	e000      	b.n	800261e <HAL_ADC_Start_DMA+0x26>
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_ADC_Start_DMA+0x18c>)
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fd4a 	bl	80020b8 <LL_ADC_GetMultimode>
 8002624:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fe02 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 809b 	bne.w	800276e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Start_DMA+0x4e>
 8002642:	2302      	movs	r3, #2
 8002644:	e096      	b.n	8002774 <HAL_ADC_Start_DMA+0x17c>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <HAL_ADC_Start_DMA+0x190>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d008      	beq.n	800266a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d002      	beq.n	800266a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b09      	cmp	r3, #9
 8002668:	d17a      	bne.n	8002760 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fcf6 	bl	800305c <ADC_Enable>
 8002670:	4603      	mov	r3, r0
 8002672:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d16d      	bne.n	8002756 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a3a      	ldr	r2, [pc, #232]	; (800277c <HAL_ADC_Start_DMA+0x184>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_ADC_Start_DMA+0xb4>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3b      	ldr	r2, [pc, #236]	; (800278c <HAL_ADC_Start_DMA+0x194>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d002      	beq.n	80026a8 <HAL_ADC_Start_DMA+0xb0>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e003      	b.n	80026b0 <HAL_ADC_Start_DMA+0xb8>
 80026a8:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_ADC_Start_DMA+0x198>)
 80026aa:	e001      	b.n	80026b0 <HAL_ADC_Start_DMA+0xb8>
 80026ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d002      	beq.n	80026be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f023 0206 	bic.w	r2, r3, #6
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	661a      	str	r2, [r3, #96]	; 0x60
 80026e2:	e002      	b.n	80026ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	4a29      	ldr	r2, [pc, #164]	; (8002794 <HAL_ADC_Start_DMA+0x19c>)
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	4a28      	ldr	r2, [pc, #160]	; (8002798 <HAL_ADC_Start_DMA+0x1a0>)
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_ADC_Start_DMA+0x1a4>)
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	221c      	movs	r2, #28
 8002708:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0210 	orr.w	r2, r2, #16
 8002720:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3340      	adds	r3, #64	; 0x40
 800273c:	4619      	mov	r1, r3
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f001 f989 	bl	8003a58 <HAL_DMA_Start_IT>
 8002746:	4603      	mov	r3, r0
 8002748:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fd5c 	bl	800220c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002754:	e00d      	b.n	8002772 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800275e:	e008      	b.n	8002772 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800276c:	e001      	b.n	8002772 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	50000100 	.word	0x50000100
 8002780:	50000300 	.word	0x50000300
 8002784:	50000700 	.word	0x50000700
 8002788:	50000600 	.word	0x50000600
 800278c:	50000500 	.word	0x50000500
 8002790:	50000400 	.word	0x50000400
 8002794:	08003247 	.word	0x08003247
 8002798:	0800331f 	.word	0x0800331f
 800279c:	0800333b 	.word	0x0800333b

080027a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0b6      	sub	sp, #216	; 0xd8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d102      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x24>
 80027fa:	2302      	movs	r3, #2
 80027fc:	f000 bc13 	b.w	8003026 <HAL_ADC_ConfigChannel+0x84a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fd11 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	f040 83f3 	bne.w	8003000 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	f7ff fbcb 	bl	8001fc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fcff 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002836:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fd0b 	bl	800225a <LL_ADC_INJ_IsConversionOngoing>
 8002844:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 81d9 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 81d4 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002864:	d10f      	bne.n	8002886 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	4619      	mov	r1, r3
 8002872:	f7ff fbd2 	bl	800201a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fb79 	bl	8001f76 <LL_ADC_SetSamplingTimeCommonConfig>
 8002884:	e00e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	461a      	mov	r2, r3
 8002894:	f7ff fbc1 	bl	800201a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb69 	bl	8001f76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	08db      	lsrs	r3, r3, #3
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d022      	beq.n	800290c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6919      	ldr	r1, [r3, #16]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028d6:	f7ff fac3 	bl	8001e60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6919      	ldr	r1, [r3, #16]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f7ff fb0f 	bl	8001f0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d102      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x126>
 80028fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002900:	e000      	b.n	8002904 <HAL_ADC_ConfigChannel+0x128>
 8002902:	2300      	movs	r3, #0
 8002904:	461a      	mov	r2, r3
 8002906:	f7ff fb1b 	bl	8001f40 <LL_ADC_SetOffsetSaturation>
 800290a:	e17b      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fac8 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x15c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fabd 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	e01e      	b.n	8002976 <HAL_ADC_ConfigChannel+0x19a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fab2 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800295a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800295e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e004      	b.n	8002974 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800296a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_ConfigChannel+0x1b2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	e018      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x1e4>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80029b2:	2320      	movs	r3, #32
 80029b4:	e004      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fa81 	bl	8001ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2101      	movs	r1, #1
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fa65 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x222>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fa5a 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	e01e      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x260>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fa4f 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e004      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x278>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	e018      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x2aa>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e004      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d106      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2101      	movs	r1, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fa1e 	bl	8001ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fa02 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x2e8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f9f7 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	f003 021f 	and.w	r2, r3, #31
 8002ac2:	e01e      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x326>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f9ec 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002af2:	2320      	movs	r3, #32
 8002af4:	e004      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x33e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	e016      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x36c>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e004      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d106      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2102      	movs	r1, #2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff f9bd 	bl	8001ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2103      	movs	r1, #3
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f9a1 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x3aa>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2103      	movs	r1, #3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f996 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	e017      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x3da>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2103      	movs	r1, #3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f98b 	bl	8001ea8 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	e003      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x3f2>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	e011      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x416>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e003      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d106      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2103      	movs	r1, #3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f968 	bl	8001ed4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fad9 	bl	80021c0 <LL_ADC_IsEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 813d 	bne.w	8002e90 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f7ff fa24 	bl	8002070 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4aa2      	ldr	r2, [pc, #648]	; (8002eb8 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	f040 812e 	bne.w	8002e90 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10b      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x480>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2b09      	cmp	r3, #9
 8002c52:	bf94      	ite	ls
 8002c54:	2301      	movls	r3, #1
 8002c56:	2300      	movhi	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e019      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x4b4>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	bf94      	ite	ls
 8002c8a:	2301      	movls	r3, #1
 8002c8c:	2300      	movhi	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d079      	beq.n	8002d88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x4d4>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	069b      	lsls	r3, r3, #26
 8002caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cae:	e015      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x500>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e003      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x520>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	e017      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x550>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x576>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	051b      	lsls	r3, r3, #20
 8002d50:	e018      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x5a8>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	430b      	orrs	r3, r1
 8002d86:	e07e      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x5c8>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	069b      	lsls	r3, r3, #26
 8002d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da2:	e015      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x5f4>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x614>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	e017      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x644>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e003      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x670>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	e01b      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x6a8>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	613b      	str	r3, [r7, #16]
  return result;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e003      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b1e      	subs	r3, #30
 8002e7e:	051b      	lsls	r3, r3, #20
 8002e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f7ff f8c5 	bl	800201a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_ADC_ConfigChannel+0x6e0>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80be 	beq.w	800301a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea6:	d004      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x6d6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x6ec>
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002eb4:	e009      	b.n	8002eca <HAL_ADC_ConfigChannel+0x6ee>
 8002eb6:	bf00      	nop
 8002eb8:	407f0000 	.word	0x407f0000
 8002ebc:	80080000 	.word	0x80080000
 8002ec0:	50000100 	.word	0x50000100
 8002ec4:	50000300 	.word	0x50000300
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_ADC_ConfigChannel+0x854>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe ffba 	bl	8001e44 <LL_ADC_GetCommonPathInternalCh>
 8002ed0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a56      	ldr	r2, [pc, #344]	; (8003034 <HAL_ADC_ConfigChannel+0x858>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x70c>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a55      	ldr	r2, [pc, #340]	; (8003038 <HAL_ADC_ConfigChannel+0x85c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d13a      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d134      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efc:	d005      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x72e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a4e      	ldr	r2, [pc, #312]	; (800303c <HAL_ADC_ConfigChannel+0x860>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	f040 8085 	bne.w	8003014 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f12:	d004      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0x742>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a49      	ldr	r2, [pc, #292]	; (8003040 <HAL_ADC_ConfigChannel+0x864>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x746>
 8002f1e:	4a49      	ldr	r2, [pc, #292]	; (8003044 <HAL_ADC_ConfigChannel+0x868>)
 8002f20:	e000      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x748>
 8002f22:	4a43      	ldr	r2, [pc, #268]	; (8003030 <HAL_ADC_ConfigChannel+0x854>)
 8002f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f7fe ff75 	bl	8001e1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f34:	4b44      	ldr	r3, [pc, #272]	; (8003048 <HAL_ADC_ConfigChannel+0x86c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	4a44      	ldr	r2, [pc, #272]	; (800304c <HAL_ADC_ConfigChannel+0x870>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f4e:	e002      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f9      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f5c:	e05a      	b.n	8003014 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a3b      	ldr	r2, [pc, #236]	; (8003050 <HAL_ADC_ConfigChannel+0x874>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d125      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11f      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a31      	ldr	r2, [pc, #196]	; (8003040 <HAL_ADC_ConfigChannel+0x864>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d104      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x7ac>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a34      	ldr	r2, [pc, #208]	; (8003054 <HAL_ADC_ConfigChannel+0x878>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d047      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f90:	d004      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x7c0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <HAL_ADC_ConfigChannel+0x864>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x7c4>
 8002f9c:	4a29      	ldr	r2, [pc, #164]	; (8003044 <HAL_ADC_ConfigChannel+0x868>)
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x7c6>
 8002fa0:	4a23      	ldr	r2, [pc, #140]	; (8003030 <HAL_ADC_ConfigChannel+0x854>)
 8002fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f7fe ff36 	bl	8001e1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb2:	e031      	b.n	8003018 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_ADC_ConfigChannel+0x87c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d12d      	bne.n	800301a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d127      	bne.n	800301a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_ADC_ConfigChannel+0x864>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fdc:	d004      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0x80c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a17      	ldr	r2, [pc, #92]	; (8003040 <HAL_ADC_ConfigChannel+0x864>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x810>
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HAL_ADC_ConfigChannel+0x868>)
 8002fea:	e000      	b.n	8002fee <HAL_ADC_ConfigChannel+0x812>
 8002fec:	4a10      	ldr	r2, [pc, #64]	; (8003030 <HAL_ADC_ConfigChannel+0x854>)
 8002fee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7fe ff10 	bl	8001e1e <LL_ADC_SetCommonPathInternalCh>
 8002ffe:	e00c      	b.n	800301a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003012:	e002      	b.n	800301a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003018:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003022:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003026:	4618      	mov	r0, r3
 8003028:	37d8      	adds	r7, #216	; 0xd8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	50000700 	.word	0x50000700
 8003034:	c3210000 	.word	0xc3210000
 8003038:	90c00010 	.word	0x90c00010
 800303c:	50000600 	.word	0x50000600
 8003040:	50000100 	.word	0x50000100
 8003044:	50000300 	.word	0x50000300
 8003048:	20000000 	.word	0x20000000
 800304c:	053e2d63 	.word	0x053e2d63
 8003050:	c7520000 	.word	0xc7520000
 8003054:	50000500 	.word	0x50000500
 8003058:	cb840000 	.word	0xcb840000

0800305c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f8a7 	bl	80021c0 <LL_ADC_IsEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d176      	bne.n	8003166 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <ADC_Enable+0x114>)
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e062      	b.n	8003168 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f862 	bl	8002170 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b4:	d004      	beq.n	80030c0 <ADC_Enable+0x64>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <ADC_Enable+0x118>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <ADC_Enable+0x68>
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <ADC_Enable+0x11c>)
 80030c2:	e000      	b.n	80030c6 <ADC_Enable+0x6a>
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <ADC_Enable+0x120>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe febc 	bl	8001e44 <LL_ADC_GetCommonPathInternalCh>
 80030cc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d013      	beq.n	80030fe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030d6:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <ADC_Enable+0x124>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	099b      	lsrs	r3, r3, #6
 80030dc:	4a29      	ldr	r2, [pc, #164]	; (8003184 <ADC_Enable+0x128>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030f0:	e002      	b.n	80030f8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f9      	bne.n	80030f2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030fe:	f7fe fe6f 	bl	8001de0 <HAL_GetTick>
 8003102:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003104:	e028      	b.n	8003158 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f858 	bl	80021c0 <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f828 	bl	8002170 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003120:	f7fe fe5e 	bl	8001de0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d914      	bls.n	8003158 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d00d      	beq.n	8003158 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e007      	b.n	8003168 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d1cf      	bne.n	8003106 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	8000003f 	.word	0x8000003f
 8003174:	50000100 	.word	0x50000100
 8003178:	50000300 	.word	0x50000300
 800317c:	50000700 	.word	0x50000700
 8003180:	20000000 	.word	0x20000000
 8003184:	053e2d63 	.word	0x053e2d63

08003188 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f826 	bl	80021e6 <LL_ADC_IsDisableOngoing>
 800319a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff f80d 	bl	80021c0 <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d047      	beq.n	800323c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d144      	bne.n	800323c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030d 	and.w	r3, r3, #13
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10c      	bne.n	80031da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe ffe7 	bl	8002198 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2203      	movs	r2, #3
 80031d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031d2:	f7fe fe05 	bl	8001de0 <HAL_GetTick>
 80031d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031d8:	e029      	b.n	800322e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	f043 0210 	orr.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e023      	b.n	800323e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031f6:	f7fe fdf3 	bl	8001de0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d914      	bls.n	800322e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f043 0210 	orr.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e007      	b.n	800323e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1dc      	bne.n	80031f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800325c:	2b00      	cmp	r3, #0
 800325e:	d14b      	bne.n	80032f8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d021      	beq.n	80032be <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fe8c 	bl	8001f9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d032      	beq.n	80032f0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d12b      	bne.n	80032f0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d11f      	bne.n	80032f0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80032bc:	e018      	b.n	80032f0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d111      	bne.n	80032f0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f043 0201 	orr.w	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fa55 	bl	80027a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032f6:	e00e      	b.n	8003316 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff fa5f 	bl	80027c8 <HAL_ADC_ErrorCallback>
}
 800330a:	e004      	b.n	8003316 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
}
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fa41 	bl	80027b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f7ff fa31 	bl	80027c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <LL_ADC_IsEnabled>:
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <LL_ADC_IsEnabled+0x18>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <LL_ADC_IsEnabled+0x1a>
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_ADC_StartCalibration>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	609a      	str	r2, [r3, #8]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_ADC_IsCalibrationOnGoing>:
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033da:	d101      	bne.n	80033e0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <LL_ADC_REG_IsConversionOngoing>:
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d101      	bne.n	8003406 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_ADCEx_Calibration_Start+0x1c>
 800342c:	2302      	movs	r3, #2
 800342e:	e04d      	b.n	80034cc <HAL_ADCEx_Calibration_Start+0xb8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fea5 	bl	8003188 <ADC_Disable>
 800343e:	4603      	mov	r3, r0
 8003440:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d136      	bne.n	80034b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003450:	f023 0302 	bic.w	r3, r3, #2
 8003454:	f043 0202 	orr.w	r2, r3, #2
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff96 	bl	8003394 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003468:	e014      	b.n	8003494 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3301      	adds	r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d90d      	bls.n	8003494 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	f023 0312 	bic.w	r3, r3, #18
 8003480:	f043 0210 	orr.w	r2, r3, #16
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01b      	b.n	80034cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff94 	bl	80033c6 <LL_ADC_IsCalibrationOnGoing>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e2      	bne.n	800346a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80034b4:	e005      	b.n	80034c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	0004de01 	.word	0x0004de01

080034d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b0a1      	sub	sp, #132	; 0x84
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e0e7      	b.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034fe:	2300      	movs	r3, #0
 8003500:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003502:	2300      	movs	r3, #0
 8003504:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350e:	d102      	bne.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003510:	4b6f      	ldr	r3, [pc, #444]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	e009      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d102      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003520:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	e001      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0be      	b.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff4f 	bl	80033ee <LL_ADC_REG_IsConversionOngoing>
 8003550:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff49 	bl	80033ee <LL_ADC_REG_IsConversionOngoing>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80a0 	bne.w	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 809c 	bne.w	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003574:	d004      	beq.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a55      	ldr	r2, [pc, #340]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003580:	4b56      	ldr	r3, [pc, #344]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003582:	e000      	b.n	8003586 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003584:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003586:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d04b      	beq.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035a2:	035b      	lsls	r3, r3, #13
 80035a4:	430b      	orrs	r3, r1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b4:	d004      	beq.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a45      	ldr	r2, [pc, #276]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10f      	bne.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80035c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80035c4:	f7ff fed3 	bl	800336e <LL_ADC_IsEnabled>
 80035c8:	4604      	mov	r4, r0
 80035ca:	4841      	ldr	r0, [pc, #260]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035cc:	f7ff fecf 	bl	800336e <LL_ADC_IsEnabled>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4323      	orrs	r3, r4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e012      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80035e0:	483c      	ldr	r0, [pc, #240]	; (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035e2:	f7ff fec4 	bl	800336e <LL_ADC_IsEnabled>
 80035e6:	4604      	mov	r4, r0
 80035e8:	483b      	ldr	r0, [pc, #236]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035ea:	f7ff fec0 	bl	800336e <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	431c      	orrs	r4, r3
 80035f2:	483c      	ldr	r0, [pc, #240]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80035f4:	f7ff febb 	bl	800336e <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4323      	orrs	r3, r4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d056      	beq.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800360a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003612:	f023 030f 	bic.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	6811      	ldr	r1, [r2, #0]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	6892      	ldr	r2, [r2, #8]
 800361e:	430a      	orrs	r2, r1
 8003620:	431a      	orrs	r2, r3
 8003622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003624:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003626:	e047      	b.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003632:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800363c:	d004      	beq.n	8003648 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a23      	ldr	r2, [pc, #140]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10f      	bne.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003648:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800364c:	f7ff fe8f 	bl	800336e <LL_ADC_IsEnabled>
 8003650:	4604      	mov	r4, r0
 8003652:	481f      	ldr	r0, [pc, #124]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003654:	f7ff fe8b 	bl	800336e <LL_ADC_IsEnabled>
 8003658:	4603      	mov	r3, r0
 800365a:	4323      	orrs	r3, r4
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e012      	b.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003668:	481a      	ldr	r0, [pc, #104]	; (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800366a:	f7ff fe80 	bl	800336e <LL_ADC_IsEnabled>
 800366e:	4604      	mov	r4, r0
 8003670:	4819      	ldr	r0, [pc, #100]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003672:	f7ff fe7c 	bl	800336e <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	431c      	orrs	r4, r3
 800367a:	481a      	ldr	r0, [pc, #104]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800367c:	f7ff fe77 	bl	800336e <LL_ADC_IsEnabled>
 8003680:	4603      	mov	r3, r0
 8003682:	4323      	orrs	r3, r4
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800369a:	f023 030f 	bic.w	r3, r3, #15
 800369e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036a0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036a2:	e009      	b.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036b6:	e000      	b.n	80036ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3784      	adds	r7, #132	; 0x84
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}
 80036ce:	bf00      	nop
 80036d0:	50000100 	.word	0x50000100
 80036d4:	50000400 	.word	0x50000400
 80036d8:	50000500 	.word	0x50000500
 80036dc:	50000300 	.word	0x50000300
 80036e0:	50000700 	.word	0x50000700
 80036e4:	50000600 	.word	0x50000600

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	; (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff29 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038ac:	f7ff ff40 	bl	8003730 <__NVIC_GetPriorityGrouping>
 80038b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	f7ff ff90 	bl	80037dc <NVIC_EncodePriority>
 80038bc:	4602      	mov	r2, r0
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff5f 	bl	8003788 <__NVIC_SetPriority>
}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff33 	bl	800374c <__NVIC_EnableIRQ>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ffa4 	bl	8003844 <SysTick_Config>
 80038fc:	4603      	mov	r3, r0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e08d      	b.n	8003a36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_DMA_Init+0x138>)
 8003922:	429a      	cmp	r2, r3
 8003924:	d80f      	bhi.n	8003946 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	4b45      	ldr	r3, [pc, #276]	; (8003a44 <HAL_DMA_Init+0x13c>)
 800392e:	4413      	add	r3, r2
 8003930:	4a45      	ldr	r2, [pc, #276]	; (8003a48 <HAL_DMA_Init+0x140>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a42      	ldr	r2, [pc, #264]	; (8003a4c <HAL_DMA_Init+0x144>)
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
 8003944:	e00e      	b.n	8003964 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <HAL_DMA_Init+0x148>)
 800394e:	4413      	add	r3, r2
 8003950:	4a3d      	ldr	r2, [pc, #244]	; (8003a48 <HAL_DMA_Init+0x140>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	009a      	lsls	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <HAL_DMA_Init+0x14c>)
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f9b6 	bl	8003d28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c4:	d102      	bne.n	80039cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d010      	beq.n	8003a0c <HAL_DMA_Init+0x104>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d80c      	bhi.n	8003a0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f9d6 	bl	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	e008      	b.n	8003a1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40020407 	.word	0x40020407
 8003a44:	bffdfff8 	.word	0xbffdfff8
 8003a48:	cccccccd 	.word	0xcccccccd
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	bffdfbf8 	.word	0xbffdfbf8
 8003a54:	40020400 	.word	0x40020400

08003a58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_DMA_Start_IT+0x20>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e066      	b.n	8003b46 <HAL_DMA_Start_IT+0xee>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d155      	bne.n	8003b38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f8fb 	bl	8003cac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 020e 	orr.w	r2, r2, #14
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e00f      	b.n	8003af0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 020a 	orr.w	r2, r2, #10
 8003aee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e005      	b.n	8003b44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
 8003b42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2204      	movs	r2, #4
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d026      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x7a>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d021      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d107      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0204 	bic.w	r2, r2, #4
 8003ba0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f003 021f 	and.w	r2, r3, #31
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2104      	movs	r1, #4
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d071      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003bc6:	e06c      	b.n	8003ca2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02e      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d029      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 020a 	bic.w	r2, r2, #10
 8003c02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	2102      	movs	r1, #2
 8003c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d038      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c38:	e033      	b.n	8003ca2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2208      	movs	r2, #8
 8003c44:	409a      	lsls	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02a      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d025      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 020e 	bic.w	r2, r2, #14
 8003c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	f003 021f 	and.w	r2, r3, #31
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	2101      	movs	r1, #1
 8003c76:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
}
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cc2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cd4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f003 021f 	and.w	r2, r3, #31
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d108      	bne.n	8003d0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d0a:	e007      	b.n	8003d1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	60da      	str	r2, [r3, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d802      	bhi.n	8003d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e001      	b.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d44:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3b08      	subs	r3, #8
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d72:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40020407 	.word	0x40020407
 8003d94:	40020800 	.word	0x40020800
 8003d98:	40020820 	.word	0x40020820
 8003d9c:	cccccccd 	.word	0xcccccccd
 8003da0:	40020880 	.word	0x40020880

08003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	1000823f 	.word	0x1000823f
 8003de8:	40020940 	.word	0x40020940

08003dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dfa:	e15a      	b.n	80040b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 814c 	beq.w	80040ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d005      	beq.n	8003e2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d130      	bne.n	8003e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e62:	2201      	movs	r2, #1
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0201 	and.w	r2, r3, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d017      	beq.n	8003eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d123      	bne.n	8003f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	08da      	lsrs	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3208      	adds	r2, #8
 8003ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	220f      	movs	r2, #15
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0203 	and.w	r2, r3, #3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80a6 	beq.w	80040ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f60:	4b5b      	ldr	r3, [pc, #364]	; (80040d0 <HAL_GPIO_Init+0x2e4>)
 8003f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f64:	4a5a      	ldr	r2, [pc, #360]	; (80040d0 <HAL_GPIO_Init+0x2e4>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6613      	str	r3, [r2, #96]	; 0x60
 8003f6c:	4b58      	ldr	r3, [pc, #352]	; (80040d0 <HAL_GPIO_Init+0x2e4>)
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f78:	4a56      	ldr	r2, [pc, #344]	; (80040d4 <HAL_GPIO_Init+0x2e8>)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	3302      	adds	r3, #2
 8003f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	220f      	movs	r2, #15
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fa2:	d01f      	beq.n	8003fe4 <HAL_GPIO_Init+0x1f8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a4c      	ldr	r2, [pc, #304]	; (80040d8 <HAL_GPIO_Init+0x2ec>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d019      	beq.n	8003fe0 <HAL_GPIO_Init+0x1f4>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a4b      	ldr	r2, [pc, #300]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <HAL_GPIO_Init+0x1f0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a4a      	ldr	r2, [pc, #296]	; (80040e0 <HAL_GPIO_Init+0x2f4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00d      	beq.n	8003fd8 <HAL_GPIO_Init+0x1ec>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a49      	ldr	r2, [pc, #292]	; (80040e4 <HAL_GPIO_Init+0x2f8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <HAL_GPIO_Init+0x1e8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a48      	ldr	r2, [pc, #288]	; (80040e8 <HAL_GPIO_Init+0x2fc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d101      	bne.n	8003fd0 <HAL_GPIO_Init+0x1e4>
 8003fcc:	2305      	movs	r3, #5
 8003fce:	e00a      	b.n	8003fe6 <HAL_GPIO_Init+0x1fa>
 8003fd0:	2306      	movs	r3, #6
 8003fd2:	e008      	b.n	8003fe6 <HAL_GPIO_Init+0x1fa>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	e006      	b.n	8003fe6 <HAL_GPIO_Init+0x1fa>
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e004      	b.n	8003fe6 <HAL_GPIO_Init+0x1fa>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e002      	b.n	8003fe6 <HAL_GPIO_Init+0x1fa>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_GPIO_Init+0x1fa>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	f002 0203 	and.w	r2, r2, #3
 8003fec:	0092      	lsls	r2, r2, #2
 8003fee:	4093      	lsls	r3, r2
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ff6:	4937      	ldr	r1, [pc, #220]	; (80040d4 <HAL_GPIO_Init+0x2e8>)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004004:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_GPIO_Init+0x300>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	43db      	mvns	r3, r3
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4013      	ands	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004028:	4a30      	ldr	r2, [pc, #192]	; (80040ec <HAL_GPIO_Init+0x300>)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <HAL_GPIO_Init+0x300>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	43db      	mvns	r3, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004052:	4a26      	ldr	r2, [pc, #152]	; (80040ec <HAL_GPIO_Init+0x300>)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004058:	4b24      	ldr	r3, [pc, #144]	; (80040ec <HAL_GPIO_Init+0x300>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	43db      	mvns	r3, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800407c:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <HAL_GPIO_Init+0x300>)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004082:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <HAL_GPIO_Init+0x300>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	43db      	mvns	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040a6:	4a11      	ldr	r2, [pc, #68]	; (80040ec <HAL_GPIO_Init+0x300>)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f ae9d 	bne.w	8003dfc <HAL_GPIO_Init+0x10>
  }
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40010000 	.word	0x40010000
 80040d8:	48000400 	.word	0x48000400
 80040dc:	48000800 	.word	0x48000800
 80040e0:	48000c00 	.word	0x48000c00
 80040e4:	48001000 	.word	0x48001000
 80040e8:	48001400 	.word	0x48001400
 80040ec:	40010400 	.word	0x40010400

080040f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
 80040fc:	4613      	mov	r3, r2
 80040fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004100:	787b      	ldrb	r3, [r7, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800410c:	e002      	b.n	8004114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d006      	beq.n	8004144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f806 	bl	8004150 <HAL_GPIO_EXTI_Callback>
  }
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40010400 	.word	0x40010400

08004150 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e08d      	b.n	8004294 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fd f82b 	bl	80011e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2224      	movs	r2, #36	; 0x24
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d107      	bne.n	80041e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	e006      	b.n	80041ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d108      	bne.n	8004208 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	e007      	b.n	8004218 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004216:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800423a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69d9      	ldr	r1, [r3, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1a      	ldr	r2, [r3, #32]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d138      	bne.n	8004324 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042bc:	2302      	movs	r3, #2
 80042be:	e032      	b.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b20      	cmp	r3, #32
 8004346:	d139      	bne.n	80043bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004352:	2302      	movs	r3, #2
 8004354:	e033      	b.n	80043be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2224      	movs	r2, #36	; 0x24
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004384:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d141      	bne.n	800445e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043da:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e6:	d131      	bne.n	800444c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043e8:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ee:	4a46      	ldr	r2, [pc, #280]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043f8:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004400:	4a41      	ldr	r2, [pc, #260]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004406:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004408:	4b40      	ldr	r3, [pc, #256]	; (800450c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2232      	movs	r2, #50	; 0x32
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	4a3f      	ldr	r2, [pc, #252]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	0c9b      	lsrs	r3, r3, #18
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441e:	e002      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004426:	4b38      	ldr	r3, [pc, #224]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d102      	bne.n	800443a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f2      	bne.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800443a:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d158      	bne.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e057      	b.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004452:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004458:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800445c:	e04d      	b.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004464:	d141      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004466:	4b28      	ldr	r3, [pc, #160]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004472:	d131      	bne.n	80044d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800448c:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004494:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2232      	movs	r2, #50	; 0x32
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	0c9b      	lsrs	r3, r3, #18
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044aa:	e002      	b.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044be:	d102      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f2      	bne.n	80044ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	d112      	bne.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e011      	b.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044e8:	e007      	b.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044f2:	4a05      	ldr	r2, [pc, #20]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40007000 	.word	0x40007000
 800450c:	20000000 	.word	0x20000000
 8004510:	431bde83 	.word	0x431bde83

08004514 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a04      	ldr	r2, [pc, #16]	; (8004530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800451e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004522:	6093      	str	r3, [r2, #8]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40007000 	.word	0x40007000

08004534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e2fe      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d075      	beq.n	800463e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004552:	4b97      	ldr	r3, [pc, #604]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800455c:	4b94      	ldr	r3, [pc, #592]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b0c      	cmp	r3, #12
 800456a:	d102      	bne.n	8004572 <HAL_RCC_OscConfig+0x3e>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d002      	beq.n	8004578 <HAL_RCC_OscConfig+0x44>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d10b      	bne.n	8004590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	4b8d      	ldr	r3, [pc, #564]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d05b      	beq.n	800463c <HAL_RCC_OscConfig+0x108>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d157      	bne.n	800463c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e2d9      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d106      	bne.n	80045a8 <HAL_RCC_OscConfig+0x74>
 800459a:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a84      	ldr	r2, [pc, #528]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e01d      	b.n	80045e4 <HAL_RCC_OscConfig+0xb0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x98>
 80045b2:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7e      	ldr	r2, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4b7c      	ldr	r3, [pc, #496]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7b      	ldr	r2, [pc, #492]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0xb0>
 80045cc:	4b78      	ldr	r3, [pc, #480]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a77      	ldr	r2, [pc, #476]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b75      	ldr	r3, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a74      	ldr	r2, [pc, #464]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd fbf8 	bl	8001de0 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd fbf4 	bl	8001de0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e29e      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004606:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0xc0>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd fbe4 	bl	8001de0 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fd fbe0 	bl	8001de0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e28a      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462e:	4b60      	ldr	r3, [pc, #384]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0xe8>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d075      	beq.n	8004736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464a:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004654:	4b56      	ldr	r3, [pc, #344]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d102      	bne.n	800466a <HAL_RCC_OscConfig+0x136>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d002      	beq.n	8004670 <HAL_RCC_OscConfig+0x13c>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d11f      	bne.n	80046b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004670:	4b4f      	ldr	r3, [pc, #316]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_OscConfig+0x154>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e25d      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b49      	ldr	r3, [pc, #292]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	4946      	ldr	r1, [pc, #280]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800469c:	4b45      	ldr	r3, [pc, #276]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fd fb51 	bl	8001d48 <HAL_InitTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d043      	beq.n	8004734 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e249      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d023      	beq.n	8004700 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b8:	4b3d      	ldr	r3, [pc, #244]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a3c      	ldr	r2, [pc, #240]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd fb8c 	bl	8001de0 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fd fb88 	bl	8001de0 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e232      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046de:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	061b      	lsls	r3, r3, #24
 80046f8:	492d      	ldr	r1, [pc, #180]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
 80046fe:	e01a      	b.n	8004736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2a      	ldr	r2, [pc, #168]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd fb68 	bl	8001de0 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004714:	f7fd fb64 	bl	8001de0 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e20e      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x1e0>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d041      	beq.n	80047c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01c      	beq.n	8004784 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474a:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475a:	f7fd fb41 	bl	8001de0 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004762:	f7fd fb3d 	bl	8001de0 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e1e7      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ef      	beq.n	8004762 <HAL_RCC_OscConfig+0x22e>
 8004782:	e020      	b.n	80047c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd fb24 	bl	8001de0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800479a:	e00d      	b.n	80047b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479c:	f7fd fb20 	bl	8001de0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d906      	bls.n	80047b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1ca      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b8:	4b8c      	ldr	r3, [pc, #560]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ea      	bne.n	800479c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80a6 	beq.w	8004920 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d4:	2300      	movs	r3, #0
 80047d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047d8:	4b84      	ldr	r3, [pc, #528]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2b4>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x2b6>
 80047e8:	2300      	movs	r3, #0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00d      	beq.n	800480a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ee:	4b7f      	ldr	r3, [pc, #508]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	4a7e      	ldr	r2, [pc, #504]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6593      	str	r3, [r2, #88]	; 0x58
 80047fa:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004806:	2301      	movs	r3, #1
 8004808:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480a:	4b79      	ldr	r3, [pc, #484]	; (80049f0 <HAL_RCC_OscConfig+0x4bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d118      	bne.n	8004848 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004816:	4b76      	ldr	r3, [pc, #472]	; (80049f0 <HAL_RCC_OscConfig+0x4bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <HAL_RCC_OscConfig+0x4bc>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004822:	f7fd fadd 	bl	8001de0 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482a:	f7fd fad9 	bl	8001de0 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e183      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483c:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <HAL_RCC_OscConfig+0x4bc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d108      	bne.n	8004862 <HAL_RCC_OscConfig+0x32e>
 8004850:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	4a65      	ldr	r2, [pc, #404]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004860:	e024      	b.n	80048ac <HAL_RCC_OscConfig+0x378>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b05      	cmp	r3, #5
 8004868:	d110      	bne.n	800488c <HAL_RCC_OscConfig+0x358>
 800486a:	4b60      	ldr	r3, [pc, #384]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	4a5e      	ldr	r2, [pc, #376]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004872:	f043 0304 	orr.w	r3, r3, #4
 8004876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487a:	4b5c      	ldr	r3, [pc, #368]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	4a5a      	ldr	r2, [pc, #360]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800488a:	e00f      	b.n	80048ac <HAL_RCC_OscConfig+0x378>
 800488c:	4b57      	ldr	r3, [pc, #348]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	4a56      	ldr	r2, [pc, #344]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800489c:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	4a52      	ldr	r2, [pc, #328]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d016      	beq.n	80048e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fd fa94 	bl	8001de0 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fd fa90 	bl	8001de0 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e138      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d2:	4b46      	ldr	r3, [pc, #280]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ed      	beq.n	80048bc <HAL_RCC_OscConfig+0x388>
 80048e0:	e015      	b.n	800490e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fd fa7d 	bl	8001de0 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fd fa79 	bl	8001de0 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e121      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004900:	4b3a      	ldr	r3, [pc, #232]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ed      	bne.n	80048ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800490e:	7ffb      	ldrb	r3, [r7, #31]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d105      	bne.n	8004920 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004914:	4b35      	ldr	r3, [pc, #212]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	4a34      	ldr	r2, [pc, #208]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800491a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800491e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d03c      	beq.n	80049a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01c      	beq.n	800496e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004934:	4b2d      	ldr	r3, [pc, #180]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800493a:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fd fa4c 	bl	8001de0 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800494c:	f7fd fa48 	bl	8001de0 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0f2      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0ef      	beq.n	800494c <HAL_RCC_OscConfig+0x418>
 800496c:	e01b      	b.n	80049a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800496e:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd fa2f 	bl	8001de0 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004986:	f7fd fa2b 	bl	8001de0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0d5      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800499a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ef      	bne.n	8004986 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80c9 	beq.w	8004b42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	f000 8083 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d15e      	bne.n	8004a84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80049cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fd fa05 	bl	8001de0 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d8:	e00c      	b.n	80049f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049da:	f7fd fa01 	bl	8001de0 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d905      	bls.n	80049f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0ab      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f4:	4b55      	ldr	r3, [pc, #340]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ec      	bne.n	80049da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a00:	4b52      	ldr	r3, [pc, #328]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	4b52      	ldr	r3, [pc, #328]	; (8004b50 <HAL_RCC_OscConfig+0x61c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6a11      	ldr	r1, [r2, #32]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0112      	lsls	r2, r2, #4
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a1a:	0212      	lsls	r2, r2, #8
 8004a1c:	4311      	orrs	r1, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a22:	0852      	lsrs	r2, r2, #1
 8004a24:	3a01      	subs	r2, #1
 8004a26:	0552      	lsls	r2, r2, #21
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a2e:	0852      	lsrs	r2, r2, #1
 8004a30:	3a01      	subs	r2, #1
 8004a32:	0652      	lsls	r2, r2, #25
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a3a:	06d2      	lsls	r2, r2, #27
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	4943      	ldr	r1, [pc, #268]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a44:	4b41      	ldr	r3, [pc, #260]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a40      	ldr	r2, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a50:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a3d      	ldr	r2, [pc, #244]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fd f9c0 	bl	8001de0 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fd f9bc 	bl	8001de0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e066      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a76:	4b35      	ldr	r3, [pc, #212]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x530>
 8004a82:	e05e      	b.n	8004b42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fd f9a6 	bl	8001de0 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fd f9a2 	bl	8001de0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e04c      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ab6:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	4924      	ldr	r1, [pc, #144]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_RCC_OscConfig+0x620>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60cb      	str	r3, [r1, #12]
 8004ac2:	e03e      	b.n	8004b42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e039      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d12c      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	3b01      	subs	r3, #1
 8004af0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d123      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d11b      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d113      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	3b01      	subs	r3, #1
 8004b38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	019f800c 	.word	0x019f800c
 8004b54:	feeefffc 	.word	0xfeeefffc

08004b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e11e      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d910      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b8e      	ldr	r3, [pc, #568]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 020f 	bic.w	r2, r3, #15
 8004b86:	498c      	ldr	r1, [pc, #560]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b8a      	ldr	r3, [pc, #552]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e106      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d073      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d129      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb4:	4b81      	ldr	r3, [pc, #516]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0f4      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bc4:	f000 f99e 	bl	8004f04 <RCC_GetSysClockFreqFromPLLSource>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4a7c      	ldr	r2, [pc, #496]	; (8004dc0 <HAL_RCC_ClockConfig+0x268>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d93f      	bls.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bd2:	4b7a      	ldr	r3, [pc, #488]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d033      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d12f      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bf2:	4b72      	ldr	r3, [pc, #456]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfa:	4a70      	ldr	r2, [pc, #448]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e024      	b.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c10:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0c6      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c20:	4b66      	ldr	r3, [pc, #408]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0be      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c30:	f000 f8ce 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4a61      	ldr	r2, [pc, #388]	; (8004dc0 <HAL_RCC_ClockConfig+0x268>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d909      	bls.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c46:	4a5d      	ldr	r2, [pc, #372]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c52:	4b5a      	ldr	r3, [pc, #360]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 0203 	bic.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4957      	ldr	r1, [pc, #348]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fd f8bc 	bl	8001de0 <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6c:	f7fd f8b8 	bl	8001de0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e095      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	4b4e      	ldr	r3, [pc, #312]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 020c 	and.w	r2, r3, #12
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d1eb      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d023      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cac:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a42      	ldr	r2, [pc, #264]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ccc:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4936      	ldr	r1, [pc, #216]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d105      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	4a32      	ldr	r2, [pc, #200]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d21d      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d08:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 020f 	bic.w	r2, r3, #15
 8004d10:	4929      	ldr	r1, [pc, #164]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d18:	f7fd f862 	bl	8001de0 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d20:	f7fd f85e 	bl	8001de0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e03b      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1ed      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4917      	ldr	r1, [pc, #92]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	490f      	ldr	r1, [pc, #60]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d82:	f000 f825 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	490c      	ldr	r1, [pc, #48]	; (8004dc4 <HAL_RCC_ClockConfig+0x26c>)
 8004d94:	5ccb      	ldrb	r3, [r1, r3]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x270>)
 8004da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fc ffce 	bl	8001d48 <HAL_InitTick>
 8004dac:	4603      	mov	r3, r0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40022000 	.word	0x40022000
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	04c4b400 	.word	0x04c4b400
 8004dc4:	080075c4 	.word	0x080075c4
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	20000004 	.word	0x20000004

08004dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d102      	bne.n	8004de8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004de2:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e047      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004de8:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d102      	bne.n	8004dfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df4:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e03e      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dfa:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d136      	bne.n	8004e74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e06:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d10c      	bne.n	8004e3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e24:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2e:	68d2      	ldr	r2, [r2, #12]
 8004e30:	0a12      	lsrs	r2, r2, #8
 8004e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	617b      	str	r3, [r7, #20]
      break;
 8004e3c:	e00c      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e48:	68d2      	ldr	r2, [r2, #12]
 8004e4a:	0a12      	lsrs	r2, r2, #8
 8004e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
      break;
 8004e56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	0e5b      	lsrs	r3, r3, #25
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	3301      	adds	r3, #1
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	e001      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e78:	693b      	ldr	r3, [r7, #16]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	00f42400 	.word	0x00f42400
 8004e90:	016e3600 	.word	0x016e3600

08004e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e98:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000000 	.word	0x20000000

08004eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004eb0:	f7ff fff0 	bl	8004e94 <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	080075d4 	.word	0x080075d4

08004ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004edc:	f7ff ffda 	bl	8004e94 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0adb      	lsrs	r3, r3, #11
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4904      	ldr	r1, [pc, #16]	; (8004f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000
 8004f00:	080075d4 	.word	0x080075d4

08004f04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d10c      	bne.n	8004f42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f28:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	4a14      	ldr	r2, [pc, #80]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f32:	68d2      	ldr	r2, [r2, #12]
 8004f34:	0a12      	lsrs	r2, r2, #8
 8004f36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	617b      	str	r3, [r7, #20]
    break;
 8004f40:	e00c      	b.n	8004f5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f42:	4a12      	ldr	r2, [pc, #72]	; (8004f8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	4a0e      	ldr	r2, [pc, #56]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	0a12      	lsrs	r2, r2, #8
 8004f50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    break;
 8004f5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	0e5b      	lsrs	r3, r3, #25
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	3301      	adds	r3, #1
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f76:	687b      	ldr	r3, [r7, #4]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40021000 	.word	0x40021000
 8004f88:	016e3600 	.word	0x016e3600
 8004f8c:	00f42400 	.word	0x00f42400

08004f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f98:	2300      	movs	r3, #0
 8004f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8098 	beq.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb2:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	4b40      	ldr	r3, [pc, #256]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4a3f      	ldr	r2, [pc, #252]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fca:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fda:	4b3a      	ldr	r3, [pc, #232]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a39      	ldr	r2, [pc, #228]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe6:	f7fc fefb 	bl	8001de0 <HAL_GetTick>
 8004fea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fec:	e009      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fc fef7 	bl	8001de0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d902      	bls.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	74fb      	strb	r3, [r7, #19]
        break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d159      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005014:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	d019      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005030:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800503c:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800504c:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800505c:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fc feb7 	bl	8001de0 <HAL_GetTick>
 8005072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005074:	e00b      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005076:	f7fc feb3 	bl	8001de0 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d902      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	74fb      	strb	r3, [r7, #19]
            break;
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ec      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a2:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b0:	4903      	ldr	r1, [pc, #12]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050b8:	e008      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	74bb      	strb	r3, [r7, #18]
 80050be:	e005      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050cc:	7c7b      	ldrb	r3, [r7, #17]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d105      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d2:	4ba7      	ldr	r3, [pc, #668]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	4aa6      	ldr	r2, [pc, #664]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ea:	4ba1      	ldr	r3, [pc, #644]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	f023 0203 	bic.w	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	499d      	ldr	r1, [pc, #628]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800510c:	4b98      	ldr	r3, [pc, #608]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f023 020c 	bic.w	r2, r3, #12
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	4995      	ldr	r1, [pc, #596]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800512e:	4b90      	ldr	r3, [pc, #576]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	498c      	ldr	r1, [pc, #560]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005150:	4b87      	ldr	r3, [pc, #540]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	4984      	ldr	r1, [pc, #528]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005172:	4b7f      	ldr	r3, [pc, #508]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	497b      	ldr	r1, [pc, #492]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005194:	4b76      	ldr	r3, [pc, #472]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	4973      	ldr	r1, [pc, #460]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051b6:	4b6e      	ldr	r3, [pc, #440]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	496a      	ldr	r1, [pc, #424]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051d8:	4b65      	ldr	r3, [pc, #404]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4962      	ldr	r1, [pc, #392]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051fa:	4b5d      	ldr	r3, [pc, #372]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	4959      	ldr	r1, [pc, #356]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800521c:	4b54      	ldr	r3, [pc, #336]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005222:	f023 0203 	bic.w	r2, r3, #3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	4951      	ldr	r1, [pc, #324]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800523e:	4b4c      	ldr	r3, [pc, #304]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4948      	ldr	r1, [pc, #288]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d015      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005260:	4b43      	ldr	r3, [pc, #268]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	4940      	ldr	r1, [pc, #256]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527e:	d105      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005280:	4b3b      	ldr	r3, [pc, #236]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005294:	2b00      	cmp	r3, #0
 8005296:	d015      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005298:	4b35      	ldr	r3, [pc, #212]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	4932      	ldr	r1, [pc, #200]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b6:	d105      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b8:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a2c      	ldr	r2, [pc, #176]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d015      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	4924      	ldr	r1, [pc, #144]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ee:	d105      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f0:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d015      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	4916      	ldr	r1, [pc, #88]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005326:	d105      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4a10      	ldr	r2, [pc, #64]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005332:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d019      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	4908      	ldr	r1, [pc, #32]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800535e:	d109      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005360:	4b03      	ldr	r3, [pc, #12]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4a02      	ldr	r2, [pc, #8]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800536a:	60d3      	str	r3, [r2, #12]
 800536c:	e002      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005380:	4b29      	ldr	r3, [pc, #164]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	4926      	ldr	r1, [pc, #152]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800539e:	d105      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053a0:	4b21      	ldr	r3, [pc, #132]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4a20      	ldr	r2, [pc, #128]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d015      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80053b8:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	4918      	ldr	r1, [pc, #96]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d6:	d105      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053d8:	4b13      	ldr	r3, [pc, #76]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4a12      	ldr	r2, [pc, #72]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d015      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	490a      	ldr	r1, [pc, #40]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800540e:	d105      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800541c:	7cbb      	ldrb	r3, [r7, #18]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000

0800542c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e049      	b.n	80054d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc fa4c 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 fc3a 	bl	8005ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d001      	beq.n	80054f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e04c      	b.n	800558e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a26      	ldr	r2, [pc, #152]	; (800559c <HAL_TIM_Base_Start+0xc0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <HAL_TIM_Base_Start+0x70>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d01d      	beq.n	800554c <HAL_TIM_Base_Start+0x70>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <HAL_TIM_Base_Start+0xc4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <HAL_TIM_Base_Start+0x70>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <HAL_TIM_Base_Start+0xc8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_TIM_Base_Start+0x70>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <HAL_TIM_Base_Start+0xcc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_TIM_Base_Start+0x70>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_TIM_Base_Start+0xd0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIM_Base_Start+0x70>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_TIM_Base_Start+0xd4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIM_Base_Start+0x70>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_TIM_Base_Start+0xd8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d115      	bne.n	8005578 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_TIM_Base_Start+0xdc>)
 8005554:	4013      	ands	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b06      	cmp	r3, #6
 800555c:	d015      	beq.n	800558a <HAL_TIM_Base_Start+0xae>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005564:	d011      	beq.n	800558a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	e008      	b.n	800558a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e000      	b.n	800558c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40013400 	.word	0x40013400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40015000 	.word	0x40015000
 80055b8:	00010007 	.word	0x00010007

080055bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e049      	b.n	8005662 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc f9cc 	bl	8001980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f000 fb72 	bl	8005ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <HAL_TIM_PWM_Start+0x24>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e03c      	b.n	800570a <HAL_TIM_PWM_Start+0x9e>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d109      	bne.n	80056aa <HAL_TIM_PWM_Start+0x3e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e02f      	b.n	800570a <HAL_TIM_PWM_Start+0x9e>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d109      	bne.n	80056c4 <HAL_TIM_PWM_Start+0x58>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e022      	b.n	800570a <HAL_TIM_PWM_Start+0x9e>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d109      	bne.n	80056de <HAL_TIM_PWM_Start+0x72>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	e015      	b.n	800570a <HAL_TIM_PWM_Start+0x9e>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d109      	bne.n	80056f8 <HAL_TIM_PWM_Start+0x8c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e008      	b.n	800570a <HAL_TIM_PWM_Start+0x9e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0a6      	b.n	8005860 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <HAL_TIM_PWM_Start+0xb6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005720:	e023      	b.n	800576a <HAL_TIM_PWM_Start+0xfe>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d104      	bne.n	8005732 <HAL_TIM_PWM_Start+0xc6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005730:	e01b      	b.n	800576a <HAL_TIM_PWM_Start+0xfe>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d104      	bne.n	8005742 <HAL_TIM_PWM_Start+0xd6>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005740:	e013      	b.n	800576a <HAL_TIM_PWM_Start+0xfe>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Start+0xe6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005750:	e00b      	b.n	800576a <HAL_TIM_PWM_Start+0xfe>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Start+0xf6>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005760:	e003      	b.n	800576a <HAL_TIM_PWM_Start+0xfe>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 ff30 	bl	80065d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a3a      	ldr	r2, [pc, #232]	; (8005868 <HAL_TIM_PWM_Start+0x1fc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d018      	beq.n	80057b4 <HAL_TIM_PWM_Start+0x148>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a39      	ldr	r2, [pc, #228]	; (800586c <HAL_TIM_PWM_Start+0x200>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d013      	beq.n	80057b4 <HAL_TIM_PWM_Start+0x148>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a37      	ldr	r2, [pc, #220]	; (8005870 <HAL_TIM_PWM_Start+0x204>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00e      	beq.n	80057b4 <HAL_TIM_PWM_Start+0x148>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a36      	ldr	r2, [pc, #216]	; (8005874 <HAL_TIM_PWM_Start+0x208>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d009      	beq.n	80057b4 <HAL_TIM_PWM_Start+0x148>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a34      	ldr	r2, [pc, #208]	; (8005878 <HAL_TIM_PWM_Start+0x20c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <HAL_TIM_PWM_Start+0x148>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a33      	ldr	r2, [pc, #204]	; (800587c <HAL_TIM_PWM_Start+0x210>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d101      	bne.n	80057b8 <HAL_TIM_PWM_Start+0x14c>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <HAL_TIM_PWM_Start+0x14e>
 80057b8:	2300      	movs	r3, #0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a25      	ldr	r2, [pc, #148]	; (8005868 <HAL_TIM_PWM_Start+0x1fc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <HAL_TIM_PWM_Start+0x1b2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d01d      	beq.n	800581e <HAL_TIM_PWM_Start+0x1b2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a26      	ldr	r2, [pc, #152]	; (8005880 <HAL_TIM_PWM_Start+0x214>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <HAL_TIM_PWM_Start+0x1b2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a24      	ldr	r2, [pc, #144]	; (8005884 <HAL_TIM_PWM_Start+0x218>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_TIM_PWM_Start+0x1b2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a23      	ldr	r2, [pc, #140]	; (8005888 <HAL_TIM_PWM_Start+0x21c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_TIM_PWM_Start+0x1b2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_TIM_PWM_Start+0x200>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIM_PWM_Start+0x1b2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <HAL_TIM_PWM_Start+0x204>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIM_PWM_Start+0x1b2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a18      	ldr	r2, [pc, #96]	; (800587c <HAL_TIM_PWM_Start+0x210>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d115      	bne.n	800584a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	4b19      	ldr	r3, [pc, #100]	; (800588c <HAL_TIM_PWM_Start+0x220>)
 8005826:	4013      	ands	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d015      	beq.n	800585c <HAL_TIM_PWM_Start+0x1f0>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005836:	d011      	beq.n	800585c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	e008      	b.n	800585c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e000      	b.n	800585e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800
 800587c:	40015000 	.word	0x40015000
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	00010007 	.word	0x00010007

08005890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e0ff      	b.n	8005aae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b14      	cmp	r3, #20
 80058ba:	f200 80f0 	bhi.w	8005a9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	08005919 	.word	0x08005919
 80058c8:	08005a9f 	.word	0x08005a9f
 80058cc:	08005a9f 	.word	0x08005a9f
 80058d0:	08005a9f 	.word	0x08005a9f
 80058d4:	08005959 	.word	0x08005959
 80058d8:	08005a9f 	.word	0x08005a9f
 80058dc:	08005a9f 	.word	0x08005a9f
 80058e0:	08005a9f 	.word	0x08005a9f
 80058e4:	0800599b 	.word	0x0800599b
 80058e8:	08005a9f 	.word	0x08005a9f
 80058ec:	08005a9f 	.word	0x08005a9f
 80058f0:	08005a9f 	.word	0x08005a9f
 80058f4:	080059db 	.word	0x080059db
 80058f8:	08005a9f 	.word	0x08005a9f
 80058fc:	08005a9f 	.word	0x08005a9f
 8005900:	08005a9f 	.word	0x08005a9f
 8005904:	08005a1d 	.word	0x08005a1d
 8005908:	08005a9f 	.word	0x08005a9f
 800590c:	08005a9f 	.word	0x08005a9f
 8005910:	08005a9f 	.word	0x08005a9f
 8005914:	08005a5d 	.word	0x08005a5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fa94 	bl	8005e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0208 	orr.w	r2, r2, #8
 8005932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699a      	ldr	r2, [r3, #24]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0204 	bic.w	r2, r2, #4
 8005942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6999      	ldr	r1, [r3, #24]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	619a      	str	r2, [r3, #24]
      break;
 8005956:	e0a5      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fb0e 	bl	8005f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6999      	ldr	r1, [r3, #24]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	021a      	lsls	r2, r3, #8
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	619a      	str	r2, [r3, #24]
      break;
 8005998:	e084      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fb81 	bl	80060a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0208 	orr.w	r2, r2, #8
 80059b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0204 	bic.w	r2, r2, #4
 80059c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69d9      	ldr	r1, [r3, #28]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	61da      	str	r2, [r3, #28]
      break;
 80059d8:	e064      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fbf3 	bl	80061cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69d9      	ldr	r1, [r3, #28]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	021a      	lsls	r2, r3, #8
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	61da      	str	r2, [r3, #28]
      break;
 8005a1a:	e043      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fc66 	bl	80062f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0208 	orr.w	r2, r2, #8
 8005a36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0204 	bic.w	r2, r2, #4
 8005a46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005a5a:	e023      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fcb0 	bl	80063c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	021a      	lsls	r2, r3, #8
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005a9c:	e002      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop

08005ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0f6      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x20a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6f      	ldr	r2, [pc, #444]	; (8005ccc <HAL_TIM_ConfigClockSource+0x214>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	f000 80c1 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005b14:	4a6d      	ldr	r2, [pc, #436]	; (8005ccc <HAL_TIM_ConfigClockSource+0x214>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	f200 80c6 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b1c:	4a6c      	ldr	r2, [pc, #432]	; (8005cd0 <HAL_TIM_ConfigClockSource+0x218>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	f000 80b9 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005b24:	4a6a      	ldr	r2, [pc, #424]	; (8005cd0 <HAL_TIM_ConfigClockSource+0x218>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	f200 80be 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b2c:	4a69      	ldr	r2, [pc, #420]	; (8005cd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	f000 80b1 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005b34:	4a67      	ldr	r2, [pc, #412]	; (8005cd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	f200 80b6 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b3c:	4a66      	ldr	r2, [pc, #408]	; (8005cd8 <HAL_TIM_ConfigClockSource+0x220>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	f000 80a9 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005b44:	4a64      	ldr	r2, [pc, #400]	; (8005cd8 <HAL_TIM_ConfigClockSource+0x220>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	f200 80ae 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b4c:	4a63      	ldr	r2, [pc, #396]	; (8005cdc <HAL_TIM_ConfigClockSource+0x224>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	f000 80a1 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005b54:	4a61      	ldr	r2, [pc, #388]	; (8005cdc <HAL_TIM_ConfigClockSource+0x224>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	f200 80a6 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b5c:	4a60      	ldr	r2, [pc, #384]	; (8005ce0 <HAL_TIM_ConfigClockSource+0x228>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	f000 8099 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005b64:	4a5e      	ldr	r2, [pc, #376]	; (8005ce0 <HAL_TIM_ConfigClockSource+0x228>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	f200 809e 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b70:	f000 8091 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005b74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b78:	f200 8096 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b80:	f000 8089 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b88:	f200 808e 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d03e      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0x158>
 8005b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b96:	f200 8087 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	f000 8086 	beq.w	8005cae <HAL_TIM_ConfigClockSource+0x1f6>
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba6:	d87f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ba8:	2b70      	cmp	r3, #112	; 0x70
 8005baa:	d01a      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0x12a>
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d87b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bb0:	2b60      	cmp	r3, #96	; 0x60
 8005bb2:	d050      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x19e>
 8005bb4:	2b60      	cmp	r3, #96	; 0x60
 8005bb6:	d877      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bb8:	2b50      	cmp	r3, #80	; 0x50
 8005bba:	d03c      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0x17e>
 8005bbc:	2b50      	cmp	r3, #80	; 0x50
 8005bbe:	d873      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d058      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0x1be>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d86f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bc8:	2b30      	cmp	r3, #48	; 0x30
 8005bca:	d064      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d86b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d060      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d867      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05c      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d05a      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x1de>
 8005be0:	e062      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bf2:	f000 fcd1 	bl	8006598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	609a      	str	r2, [r3, #8]
      break;
 8005c0e:	e04f      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c20:	f000 fcba 	bl	8006598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c32:	609a      	str	r2, [r3, #8]
      break;
 8005c34:	e03c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	461a      	mov	r2, r3
 8005c44:	f000 fc2c 	bl	80064a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2150      	movs	r1, #80	; 0x50
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fc85 	bl	800655e <TIM_ITRx_SetConfig>
      break;
 8005c54:	e02c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c62:	461a      	mov	r2, r3
 8005c64:	f000 fc4b 	bl	80064fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2160      	movs	r1, #96	; 0x60
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fc75 	bl	800655e <TIM_ITRx_SetConfig>
      break;
 8005c74:	e01c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c82:	461a      	mov	r2, r3
 8005c84:	f000 fc0c 	bl	80064a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2140      	movs	r1, #64	; 0x40
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fc65 	bl	800655e <TIM_ITRx_SetConfig>
      break;
 8005c94:	e00c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f000 fc5c 	bl	800655e <TIM_ITRx_SetConfig>
      break;
 8005ca6:	e003      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	e000      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	00100070 	.word	0x00100070
 8005cd0:	00100060 	.word	0x00100060
 8005cd4:	00100050 	.word	0x00100050
 8005cd8:	00100040 	.word	0x00100040
 8005cdc:	00100030 	.word	0x00100030
 8005ce0:	00100020 	.word	0x00100020

08005ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a4c      	ldr	r2, [pc, #304]	; (8005e28 <TIM_Base_SetConfig+0x144>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d017      	beq.n	8005d2c <TIM_Base_SetConfig+0x48>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d02:	d013      	beq.n	8005d2c <TIM_Base_SetConfig+0x48>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a49      	ldr	r2, [pc, #292]	; (8005e2c <TIM_Base_SetConfig+0x148>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00f      	beq.n	8005d2c <TIM_Base_SetConfig+0x48>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a48      	ldr	r2, [pc, #288]	; (8005e30 <TIM_Base_SetConfig+0x14c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00b      	beq.n	8005d2c <TIM_Base_SetConfig+0x48>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a47      	ldr	r2, [pc, #284]	; (8005e34 <TIM_Base_SetConfig+0x150>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_Base_SetConfig+0x48>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a46      	ldr	r2, [pc, #280]	; (8005e38 <TIM_Base_SetConfig+0x154>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_Base_SetConfig+0x48>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a45      	ldr	r2, [pc, #276]	; (8005e3c <TIM_Base_SetConfig+0x158>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d108      	bne.n	8005d3e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a39      	ldr	r2, [pc, #228]	; (8005e28 <TIM_Base_SetConfig+0x144>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d023      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4c:	d01f      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a36      	ldr	r2, [pc, #216]	; (8005e2c <TIM_Base_SetConfig+0x148>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01b      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a35      	ldr	r2, [pc, #212]	; (8005e30 <TIM_Base_SetConfig+0x14c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d017      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a34      	ldr	r2, [pc, #208]	; (8005e34 <TIM_Base_SetConfig+0x150>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a33      	ldr	r2, [pc, #204]	; (8005e38 <TIM_Base_SetConfig+0x154>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00f      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a33      	ldr	r2, [pc, #204]	; (8005e40 <TIM_Base_SetConfig+0x15c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a32      	ldr	r2, [pc, #200]	; (8005e44 <TIM_Base_SetConfig+0x160>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d007      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a31      	ldr	r2, [pc, #196]	; (8005e48 <TIM_Base_SetConfig+0x164>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_Base_SetConfig+0xaa>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <TIM_Base_SetConfig+0x158>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d108      	bne.n	8005da0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a18      	ldr	r2, [pc, #96]	; (8005e28 <TIM_Base_SetConfig+0x144>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <TIM_Base_SetConfig+0x110>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <TIM_Base_SetConfig+0x154>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00f      	beq.n	8005df4 <TIM_Base_SetConfig+0x110>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a1a      	ldr	r2, [pc, #104]	; (8005e40 <TIM_Base_SetConfig+0x15c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <TIM_Base_SetConfig+0x110>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a19      	ldr	r2, [pc, #100]	; (8005e44 <TIM_Base_SetConfig+0x160>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <TIM_Base_SetConfig+0x110>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <TIM_Base_SetConfig+0x164>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_Base_SetConfig+0x110>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <TIM_Base_SetConfig+0x158>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d103      	bne.n	8005dfc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d105      	bne.n	8005e1a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	611a      	str	r2, [r3, #16]
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40015000 	.word	0x40015000
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800

08005e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f023 0201 	bic.w	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 0302 	bic.w	r3, r3, #2
 8005e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a30      	ldr	r2, [pc, #192]	; (8005f68 <TIM_OC1_SetConfig+0x11c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d013      	beq.n	8005ed4 <TIM_OC1_SetConfig+0x88>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a2f      	ldr	r2, [pc, #188]	; (8005f6c <TIM_OC1_SetConfig+0x120>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00f      	beq.n	8005ed4 <TIM_OC1_SetConfig+0x88>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a2e      	ldr	r2, [pc, #184]	; (8005f70 <TIM_OC1_SetConfig+0x124>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00b      	beq.n	8005ed4 <TIM_OC1_SetConfig+0x88>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <TIM_OC1_SetConfig+0x128>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d007      	beq.n	8005ed4 <TIM_OC1_SetConfig+0x88>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a2c      	ldr	r2, [pc, #176]	; (8005f78 <TIM_OC1_SetConfig+0x12c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC1_SetConfig+0x88>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a2b      	ldr	r2, [pc, #172]	; (8005f7c <TIM_OC1_SetConfig+0x130>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10c      	bne.n	8005eee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0308 	bic.w	r3, r3, #8
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 0304 	bic.w	r3, r3, #4
 8005eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <TIM_OC1_SetConfig+0x11c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <TIM_OC1_SetConfig+0xd2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <TIM_OC1_SetConfig+0x120>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00f      	beq.n	8005f1e <TIM_OC1_SetConfig+0xd2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <TIM_OC1_SetConfig+0x124>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <TIM_OC1_SetConfig+0xd2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <TIM_OC1_SetConfig+0x128>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <TIM_OC1_SetConfig+0xd2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <TIM_OC1_SetConfig+0x12c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_OC1_SetConfig+0xd2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <TIM_OC1_SetConfig+0x130>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d111      	bne.n	8005f42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	621a      	str	r2, [r3, #32]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40013400 	.word	0x40013400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800
 8005f7c:	40015000 	.word	0x40015000

08005f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f023 0210 	bic.w	r2, r3, #16
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0320 	bic.w	r3, r3, #32
 8005fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a2c      	ldr	r2, [pc, #176]	; (8006090 <TIM_OC2_SetConfig+0x110>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_OC2_SetConfig+0x74>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a2b      	ldr	r2, [pc, #172]	; (8006094 <TIM_OC2_SetConfig+0x114>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC2_SetConfig+0x74>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a2a      	ldr	r2, [pc, #168]	; (8006098 <TIM_OC2_SetConfig+0x118>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d10d      	bne.n	8006010 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <TIM_OC2_SetConfig+0x110>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d013      	beq.n	8006040 <TIM_OC2_SetConfig+0xc0>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <TIM_OC2_SetConfig+0x114>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00f      	beq.n	8006040 <TIM_OC2_SetConfig+0xc0>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1e      	ldr	r2, [pc, #120]	; (800609c <TIM_OC2_SetConfig+0x11c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00b      	beq.n	8006040 <TIM_OC2_SetConfig+0xc0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <TIM_OC2_SetConfig+0x120>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <TIM_OC2_SetConfig+0xc0>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <TIM_OC2_SetConfig+0x124>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_OC2_SetConfig+0xc0>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <TIM_OC2_SetConfig+0x118>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d113      	bne.n	8006068 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40013400 	.word	0x40013400
 8006098:	40015000 	.word	0x40015000
 800609c:	40014000 	.word	0x40014000
 80060a0:	40014400 	.word	0x40014400
 80060a4:	40014800 	.word	0x40014800

080060a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a2b      	ldr	r2, [pc, #172]	; (80061b4 <TIM_OC3_SetConfig+0x10c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <TIM_OC3_SetConfig+0x72>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a2a      	ldr	r2, [pc, #168]	; (80061b8 <TIM_OC3_SetConfig+0x110>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_OC3_SetConfig+0x72>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a29      	ldr	r2, [pc, #164]	; (80061bc <TIM_OC3_SetConfig+0x114>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d10d      	bne.n	8006136 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <TIM_OC3_SetConfig+0x10c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d013      	beq.n	8006166 <TIM_OC3_SetConfig+0xbe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a1d      	ldr	r2, [pc, #116]	; (80061b8 <TIM_OC3_SetConfig+0x110>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00f      	beq.n	8006166 <TIM_OC3_SetConfig+0xbe>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1d      	ldr	r2, [pc, #116]	; (80061c0 <TIM_OC3_SetConfig+0x118>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_OC3_SetConfig+0xbe>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <TIM_OC3_SetConfig+0x11c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d007      	beq.n	8006166 <TIM_OC3_SetConfig+0xbe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <TIM_OC3_SetConfig+0x120>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_OC3_SetConfig+0xbe>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a16      	ldr	r2, [pc, #88]	; (80061bc <TIM_OC3_SetConfig+0x114>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d113      	bne.n	800618e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800616c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40015000 	.word	0x40015000
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40014400 	.word	0x40014400
 80061c8:	40014800 	.word	0x40014800

080061cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800621a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a2c      	ldr	r2, [pc, #176]	; (80062dc <TIM_OC4_SetConfig+0x110>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_OC4_SetConfig+0x74>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a2b      	ldr	r2, [pc, #172]	; (80062e0 <TIM_OC4_SetConfig+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC4_SetConfig+0x74>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a2a      	ldr	r2, [pc, #168]	; (80062e4 <TIM_OC4_SetConfig+0x118>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10d      	bne.n	800625c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	031b      	lsls	r3, r3, #12
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a1f      	ldr	r2, [pc, #124]	; (80062dc <TIM_OC4_SetConfig+0x110>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d013      	beq.n	800628c <TIM_OC4_SetConfig+0xc0>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <TIM_OC4_SetConfig+0x114>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00f      	beq.n	800628c <TIM_OC4_SetConfig+0xc0>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <TIM_OC4_SetConfig+0x11c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00b      	beq.n	800628c <TIM_OC4_SetConfig+0xc0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <TIM_OC4_SetConfig+0x120>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d007      	beq.n	800628c <TIM_OC4_SetConfig+0xc0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a1c      	ldr	r2, [pc, #112]	; (80062f0 <TIM_OC4_SetConfig+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_OC4_SetConfig+0xc0>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <TIM_OC4_SetConfig+0x118>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d113      	bne.n	80062b4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006292:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800629a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	019b      	lsls	r3, r3, #6
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40013400 	.word	0x40013400
 80062e4:	40015000 	.word	0x40015000
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40014400 	.word	0x40014400
 80062f0:	40014800 	.word	0x40014800

080062f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006338:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a19      	ldr	r2, [pc, #100]	; (80063b0 <TIM_OC5_SetConfig+0xbc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <TIM_OC5_SetConfig+0x82>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <TIM_OC5_SetConfig+0xc0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00f      	beq.n	8006376 <TIM_OC5_SetConfig+0x82>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <TIM_OC5_SetConfig+0xc4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00b      	beq.n	8006376 <TIM_OC5_SetConfig+0x82>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a16      	ldr	r2, [pc, #88]	; (80063bc <TIM_OC5_SetConfig+0xc8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d007      	beq.n	8006376 <TIM_OC5_SetConfig+0x82>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <TIM_OC5_SetConfig+0xcc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d003      	beq.n	8006376 <TIM_OC5_SetConfig+0x82>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <TIM_OC5_SetConfig+0xd0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d109      	bne.n	800638a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800637c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	40013400 	.word	0x40013400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800
 80063c4:	40015000 	.word	0x40015000

080063c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	051b      	lsls	r3, r3, #20
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a1a      	ldr	r2, [pc, #104]	; (8006488 <TIM_OC6_SetConfig+0xc0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <TIM_OC6_SetConfig+0x84>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a19      	ldr	r2, [pc, #100]	; (800648c <TIM_OC6_SetConfig+0xc4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00f      	beq.n	800644c <TIM_OC6_SetConfig+0x84>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a18      	ldr	r2, [pc, #96]	; (8006490 <TIM_OC6_SetConfig+0xc8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00b      	beq.n	800644c <TIM_OC6_SetConfig+0x84>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a17      	ldr	r2, [pc, #92]	; (8006494 <TIM_OC6_SetConfig+0xcc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d007      	beq.n	800644c <TIM_OC6_SetConfig+0x84>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a16      	ldr	r2, [pc, #88]	; (8006498 <TIM_OC6_SetConfig+0xd0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_OC6_SetConfig+0x84>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a15      	ldr	r2, [pc, #84]	; (800649c <TIM_OC6_SetConfig+0xd4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d109      	bne.n	8006460 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006452:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	029b      	lsls	r3, r3, #10
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40013400 	.word	0x40013400
 8006490:	40014000 	.word	0x40014000
 8006494:	40014400 	.word	0x40014400
 8006498:	40014800 	.word	0x40014800
 800649c:	40015000 	.word	0x40015000

080064a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0201 	bic.w	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f023 030a 	bic.w	r3, r3, #10
 80064dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fe:	b480      	push	{r7}
 8006500:	b087      	sub	sp, #28
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f023 0210 	bic.w	r2, r3, #16
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800653a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	f043 0307 	orr.w	r3, r3, #7
 8006584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	609a      	str	r2, [r3, #8]
}
 800658c:	bf00      	nop
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	021a      	lsls	r2, r3, #8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4313      	orrs	r3, r2
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	609a      	str	r2, [r3, #8]
}
 80065cc:	bf00      	nop
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2201      	movs	r2, #1
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1a      	ldr	r2, [r3, #32]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	43db      	mvns	r3, r3
 80065fa:	401a      	ands	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	fa01 f303 	lsl.w	r3, r1, r3
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006638:	2302      	movs	r3, #2
 800663a:	e074      	b.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a34      	ldr	r2, [pc, #208]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a33      	ldr	r2, [pc, #204]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a31      	ldr	r2, [pc, #196]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d108      	bne.n	800668c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006680:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a21      	ldr	r2, [pc, #132]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d022      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066bc:	d01d      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d018      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00e      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d009      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a18      	ldr	r2, [pc, #96]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a11      	ldr	r2, [pc, #68]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d10c      	bne.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4313      	orrs	r3, r2
 800670a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40013400 	.word	0x40013400
 800673c:	40015000 	.word	0x40015000
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40000c00 	.word	0x40000c00
 800674c:	40014000 	.word	0x40014000

08006750 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006768:	2302      	movs	r3, #2
 800676a:	e078      	b.n	800685e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	041b      	lsls	r3, r3, #16
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1c      	ldr	r2, [pc, #112]	; (800686c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d004      	beq.n	8006812 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a19      	ldr	r2, [pc, #100]	; (8006874 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d11c      	bne.n	800684c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	051b      	lsls	r3, r3, #20
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40012c00 	.word	0x40012c00
 8006870:	40013400 	.word	0x40013400
 8006874:	40015000 	.word	0x40015000

08006878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e042      	b.n	8006910 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fb f95d 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2224      	movs	r2, #36	; 0x24
 80068a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fb24 	bl	8006f10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f825 	bl	8006918 <UART_SetConfig>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e01b      	b.n	8006910 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fba3 	bl	8007054 <UART_CheckIdleState>
 800690e:	4603      	mov	r3, r0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800691c:	b08c      	sub	sp, #48	; 0x30
 800691e:	af00      	add	r7, sp, #0
 8006920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	431a      	orrs	r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4313      	orrs	r3, r2
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4baa      	ldr	r3, [pc, #680]	; (8006bf0 <UART_SetConfig+0x2d8>)
 8006948:	4013      	ands	r3, r2
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006950:	430b      	orrs	r3, r1
 8006952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a9f      	ldr	r2, [pc, #636]	; (8006bf4 <UART_SetConfig+0x2dc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006980:	4313      	orrs	r3, r2
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800698e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006998:	430b      	orrs	r3, r1
 800699a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	f023 010f 	bic.w	r1, r3, #15
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a90      	ldr	r2, [pc, #576]	; (8006bf8 <UART_SetConfig+0x2e0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d125      	bne.n	8006a08 <UART_SetConfig+0xf0>
 80069bc:	4b8f      	ldr	r3, [pc, #572]	; (8006bfc <UART_SetConfig+0x2e4>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d81a      	bhi.n	8006a00 <UART_SetConfig+0xe8>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <UART_SetConfig+0xb8>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069e1 	.word	0x080069e1
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069e6:	e116      	b.n	8006c16 <UART_SetConfig+0x2fe>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ee:	e112      	b.n	8006c16 <UART_SetConfig+0x2fe>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069f6:	e10e      	b.n	8006c16 <UART_SetConfig+0x2fe>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fe:	e10a      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a06:	e106      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7c      	ldr	r2, [pc, #496]	; (8006c00 <UART_SetConfig+0x2e8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d138      	bne.n	8006a84 <UART_SetConfig+0x16c>
 8006a12:	4b7a      	ldr	r3, [pc, #488]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a18:	f003 030c 	and.w	r3, r3, #12
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d82d      	bhi.n	8006a7c <UART_SetConfig+0x164>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x110>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a7d 	.word	0x08006a7d
 8006a30:	08006a7d 	.word	0x08006a7d
 8006a34:	08006a7d 	.word	0x08006a7d
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006a7d 	.word	0x08006a7d
 8006a40:	08006a7d 	.word	0x08006a7d
 8006a44:	08006a7d 	.word	0x08006a7d
 8006a48:	08006a65 	.word	0x08006a65
 8006a4c:	08006a7d 	.word	0x08006a7d
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a75 	.word	0x08006a75
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a62:	e0d8      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a64:	2302      	movs	r3, #2
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a6a:	e0d4      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a72:	e0d0      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a74:	2308      	movs	r3, #8
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a7a:	e0cc      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a82:	e0c8      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a5e      	ldr	r2, [pc, #376]	; (8006c04 <UART_SetConfig+0x2ec>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d125      	bne.n	8006ada <UART_SetConfig+0x1c2>
 8006a8e:	4b5b      	ldr	r3, [pc, #364]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a98:	2b30      	cmp	r3, #48	; 0x30
 8006a9a:	d016      	beq.n	8006aca <UART_SetConfig+0x1b2>
 8006a9c:	2b30      	cmp	r3, #48	; 0x30
 8006a9e:	d818      	bhi.n	8006ad2 <UART_SetConfig+0x1ba>
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d00a      	beq.n	8006aba <UART_SetConfig+0x1a2>
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d814      	bhi.n	8006ad2 <UART_SetConfig+0x1ba>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <UART_SetConfig+0x19a>
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	d008      	beq.n	8006ac2 <UART_SetConfig+0x1aa>
 8006ab0:	e00f      	b.n	8006ad2 <UART_SetConfig+0x1ba>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab8:	e0ad      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006aba:	2302      	movs	r3, #2
 8006abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac0:	e0a9      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006ac2:	2304      	movs	r3, #4
 8006ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac8:	e0a5      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006aca:	2308      	movs	r3, #8
 8006acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad0:	e0a1      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad8:	e09d      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a4a      	ldr	r2, [pc, #296]	; (8006c08 <UART_SetConfig+0x2f0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d125      	bne.n	8006b30 <UART_SetConfig+0x218>
 8006ae4:	4b45      	ldr	r3, [pc, #276]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aee:	2bc0      	cmp	r3, #192	; 0xc0
 8006af0:	d016      	beq.n	8006b20 <UART_SetConfig+0x208>
 8006af2:	2bc0      	cmp	r3, #192	; 0xc0
 8006af4:	d818      	bhi.n	8006b28 <UART_SetConfig+0x210>
 8006af6:	2b80      	cmp	r3, #128	; 0x80
 8006af8:	d00a      	beq.n	8006b10 <UART_SetConfig+0x1f8>
 8006afa:	2b80      	cmp	r3, #128	; 0x80
 8006afc:	d814      	bhi.n	8006b28 <UART_SetConfig+0x210>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <UART_SetConfig+0x1f0>
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d008      	beq.n	8006b18 <UART_SetConfig+0x200>
 8006b06:	e00f      	b.n	8006b28 <UART_SetConfig+0x210>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0e:	e082      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b16:	e07e      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b1e:	e07a      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b26:	e076      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b2e:	e072      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a35      	ldr	r2, [pc, #212]	; (8006c0c <UART_SetConfig+0x2f4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d12a      	bne.n	8006b90 <UART_SetConfig+0x278>
 8006b3a:	4b30      	ldr	r3, [pc, #192]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b48:	d01a      	beq.n	8006b80 <UART_SetConfig+0x268>
 8006b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4e:	d81b      	bhi.n	8006b88 <UART_SetConfig+0x270>
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d00c      	beq.n	8006b70 <UART_SetConfig+0x258>
 8006b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5a:	d815      	bhi.n	8006b88 <UART_SetConfig+0x270>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <UART_SetConfig+0x250>
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b64:	d008      	beq.n	8006b78 <UART_SetConfig+0x260>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x270>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6e:	e052      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b76:	e04e      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7e:	e04a      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b86:	e046      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8e:	e042      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <UART_SetConfig+0x2dc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d13a      	bne.n	8006c10 <UART_SetConfig+0x2f8>
 8006b9a:	4b18      	ldr	r3, [pc, #96]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba8:	d01a      	beq.n	8006be0 <UART_SetConfig+0x2c8>
 8006baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bae:	d81b      	bhi.n	8006be8 <UART_SetConfig+0x2d0>
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	d00c      	beq.n	8006bd0 <UART_SetConfig+0x2b8>
 8006bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bba:	d815      	bhi.n	8006be8 <UART_SetConfig+0x2d0>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <UART_SetConfig+0x2b0>
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d008      	beq.n	8006bd8 <UART_SetConfig+0x2c0>
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x2d0>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e022      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd6:	e01e      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	e01a      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be6:	e016      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bee:	e012      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006bf0:	cfff69f3 	.word	0xcfff69f3
 8006bf4:	40008000 	.word	0x40008000
 8006bf8:	40013800 	.word	0x40013800
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	40004400 	.word	0x40004400
 8006c04:	40004800 	.word	0x40004800
 8006c08:	40004c00 	.word	0x40004c00
 8006c0c:	40005000 	.word	0x40005000
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4aae      	ldr	r2, [pc, #696]	; (8006ed4 <UART_SetConfig+0x5bc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	f040 8097 	bne.w	8006d50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d823      	bhi.n	8006c72 <UART_SetConfig+0x35a>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <UART_SetConfig+0x318>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c73 	.word	0x08006c73
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c73 	.word	0x08006c73
 8006c40:	08006c63 	.word	0x08006c63
 8006c44:	08006c73 	.word	0x08006c73
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c73 	.word	0x08006c73
 8006c50:	08006c6b 	.word	0x08006c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c54:	f7fe f92a 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8006c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c5a:	e010      	b.n	8006c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c5c:	4b9e      	ldr	r3, [pc, #632]	; (8006ed8 <UART_SetConfig+0x5c0>)
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c60:	e00d      	b.n	8006c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c62:	f7fe f8b5 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c68:	e009      	b.n	8006c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c70:	e005      	b.n	8006c7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8130 	beq.w	8006ee6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	4a94      	ldr	r2, [pc, #592]	; (8006edc <UART_SetConfig+0x5c4>)
 8006c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c90:	461a      	mov	r2, r3
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d305      	bcc.n	8006cb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d903      	bls.n	8006cbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006cbc:	e113      	b.n	8006ee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	60fa      	str	r2, [r7, #12]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	4a84      	ldr	r2, [pc, #528]	; (8006edc <UART_SetConfig+0x5c4>)
 8006ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	603b      	str	r3, [r7, #0]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ce0:	f7f9 fa9a 	bl	8000218 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4619      	mov	r1, r3
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	020b      	lsls	r3, r1, #8
 8006cf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cfa:	0202      	lsls	r2, r0, #8
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	6849      	ldr	r1, [r1, #4]
 8006d00:	0849      	lsrs	r1, r1, #1
 8006d02:	2000      	movs	r0, #0
 8006d04:	460c      	mov	r4, r1
 8006d06:	4605      	mov	r5, r0
 8006d08:	eb12 0804 	adds.w	r8, r2, r4
 8006d0c:	eb43 0905 	adc.w	r9, r3, r5
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	469a      	mov	sl, r3
 8006d18:	4693      	mov	fp, r2
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4649      	mov	r1, r9
 8006d22:	f7f9 fa79 	bl	8000218 <__aeabi_uldivmod>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d34:	d308      	bcc.n	8006d48 <UART_SetConfig+0x430>
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3c:	d204      	bcs.n	8006d48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	e0ce      	b.n	8006ee6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d4e:	e0ca      	b.n	8006ee6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d58:	d166      	bne.n	8006e28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d827      	bhi.n	8006db2 <UART_SetConfig+0x49a>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x450>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006db3 	.word	0x08006db3
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006db3 	.word	0x08006db3
 8006d80:	08006db3 	.word	0x08006db3
 8006d84:	08006db3 	.word	0x08006db3
 8006d88:	08006dab 	.word	0x08006dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fe f88e 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8006d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d92:	e014      	b.n	8006dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fe f8a0 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
 8006d98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d9a:	e010      	b.n	8006dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b4e      	ldr	r3, [pc, #312]	; (8006ed8 <UART_SetConfig+0x5c0>)
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006da0:	e00d      	b.n	8006dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da2:	f7fe f815 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8006da6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006da8:	e009      	b.n	8006dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006db0:	e005      	b.n	8006dbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8090 	beq.w	8006ee6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	4a44      	ldr	r2, [pc, #272]	; (8006edc <UART_SetConfig+0x5c4>)
 8006dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd8:	005a      	lsls	r2, r3, #1
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	441a      	add	r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d916      	bls.n	8006e20 <UART_SetConfig+0x508>
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df8:	d212      	bcs.n	8006e20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f023 030f 	bic.w	r3, r3, #15
 8006e02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	8bfb      	ldrh	r3, [r7, #30]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	8bfa      	ldrh	r2, [r7, #30]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	e062      	b.n	8006ee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e26:	e05e      	b.n	8006ee6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d828      	bhi.n	8006e82 <UART_SetConfig+0x56a>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <UART_SetConfig+0x520>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e5d 	.word	0x08006e5d
 8006e3c:	08006e65 	.word	0x08006e65
 8006e40:	08006e6d 	.word	0x08006e6d
 8006e44:	08006e83 	.word	0x08006e83
 8006e48:	08006e73 	.word	0x08006e73
 8006e4c:	08006e83 	.word	0x08006e83
 8006e50:	08006e83 	.word	0x08006e83
 8006e54:	08006e83 	.word	0x08006e83
 8006e58:	08006e7b 	.word	0x08006e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e5c:	f7fe f826 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8006e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e62:	e014      	b.n	8006e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e64:	f7fe f838 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
 8006e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e6a:	e010      	b.n	8006e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <UART_SetConfig+0x5c0>)
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e70:	e00d      	b.n	8006e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e72:	f7fd ffad 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e78:	e009      	b.n	8006e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e80:	e005      	b.n	8006e8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d028      	beq.n	8006ee6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	4a10      	ldr	r2, [pc, #64]	; (8006edc <UART_SetConfig+0x5c4>)
 8006e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	441a      	add	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d910      	bls.n	8006ee0 <UART_SetConfig+0x5c8>
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec4:	d20c      	bcs.n	8006ee0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60da      	str	r2, [r3, #12]
 8006ed0:	e009      	b.n	8006ee6 <UART_SetConfig+0x5ce>
 8006ed2:	bf00      	nop
 8006ed4:	40008000 	.word	0x40008000
 8006ed8:	00f42400 	.word	0x00f42400
 8006edc:	080075dc 	.word	0x080075dc
      }
      else
      {
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2200      	movs	r2, #0
 8006f00:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006f02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3730      	adds	r7, #48	; 0x30
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00a      	beq.n	8006f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01a      	beq.n	8007026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800700e:	d10a      	bne.n	8007026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  }
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b098      	sub	sp, #96	; 0x60
 8007058:	af02      	add	r7, sp, #8
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007064:	f7fa febc 	bl	8001de0 <HAL_GetTick>
 8007068:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b08      	cmp	r3, #8
 8007076:	d12f      	bne.n	80070d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007080:	2200      	movs	r2, #0
 8007082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f88e 	bl	80071a8 <UART_WaitOnFlagUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d022      	beq.n	80070d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a6:	653b      	str	r3, [r7, #80]	; 0x50
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b0:	647b      	str	r3, [r7, #68]	; 0x44
 80070b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e6      	bne.n	8007092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e063      	b.n	80071a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d149      	bne.n	800717a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ee:	2200      	movs	r2, #0
 80070f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f857 	bl	80071a8 <UART_WaitOnFlagUntilTimeout>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d03c      	beq.n	800717a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	623b      	str	r3, [r7, #32]
   return(result);
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711e:	633b      	str	r3, [r7, #48]	; 0x30
 8007120:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	60fb      	str	r3, [r7, #12]
   return(result);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	64bb      	str	r3, [r7, #72]	; 0x48
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007152:	61fa      	str	r2, [r7, #28]
 8007154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	69b9      	ldr	r1, [r7, #24]
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	617b      	str	r3, [r7, #20]
   return(result);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e5      	bne.n	8007132 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e012      	b.n	80071a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2220      	movs	r2, #32
 800717e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3758      	adds	r7, #88	; 0x58
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b8:	e04f      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d04b      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fa fe0d 	bl	8001de0 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e04e      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0304 	and.w	r3, r3, #4
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d037      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d034      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d031      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b08      	cmp	r3, #8
 8007202:	d110      	bne.n	8007226 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2208      	movs	r2, #8
 800720a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 f838 	bl	8007282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2208      	movs	r2, #8
 8007216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e029      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007234:	d111      	bne.n	800725a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800723e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f81e 	bl	8007282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e00f      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4013      	ands	r3, r2
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	429a      	cmp	r2, r3
 8007268:	bf0c      	ite	eq
 800726a:	2301      	moveq	r3, #1
 800726c:	2300      	movne	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	429a      	cmp	r2, r3
 8007276:	d0a0      	beq.n	80071ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007282:	b480      	push	{r7}
 8007284:	b095      	sub	sp, #84	; 0x54
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800729e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a8:	643b      	str	r3, [r7, #64]	; 0x40
 80072aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e6      	bne.n	800728a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3308      	adds	r3, #8
 80072de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e3      	bne.n	80072bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d118      	bne.n	800732e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	60bb      	str	r3, [r7, #8]
   return(result);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f023 0310 	bic.w	r3, r3, #16
 8007310:	647b      	str	r3, [r7, #68]	; 0x44
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6979      	ldr	r1, [r7, #20]
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	613b      	str	r3, [r7, #16]
   return(result);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e6      	bne.n	80072fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007342:	bf00      	nop
 8007344:	3754      	adds	r7, #84	; 0x54
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_UARTEx_DisableFifoMode+0x16>
 8007360:	2302      	movs	r3, #2
 8007362:	e027      	b.n	80073b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0201 	bic.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007392:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e02d      	b.n	8007434 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2224      	movs	r2, #36	; 0x24
 80073e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f84f 	bl	80074b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007450:	2302      	movs	r3, #2
 8007452:	e02d      	b.n	80074b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2224      	movs	r2, #36	; 0x24
 8007460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f811 	bl	80074b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d108      	bne.n	80074da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074d8:	e031      	b.n	800753e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074da:	2308      	movs	r3, #8
 80074dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074de:	2308      	movs	r3, #8
 80074e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	0e5b      	lsrs	r3, r3, #25
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	0f5b      	lsrs	r3, r3, #29
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	7b3a      	ldrb	r2, [r7, #12]
 8007506:	4911      	ldr	r1, [pc, #68]	; (800754c <UARTEx_SetNbDataToProcess+0x94>)
 8007508:	5c8a      	ldrb	r2, [r1, r2]
 800750a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800750e:	7b3a      	ldrb	r2, [r7, #12]
 8007510:	490f      	ldr	r1, [pc, #60]	; (8007550 <UARTEx_SetNbDataToProcess+0x98>)
 8007512:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007514:	fb93 f3f2 	sdiv	r3, r3, r2
 8007518:	b29a      	uxth	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	7b7a      	ldrb	r2, [r7, #13]
 8007524:	4909      	ldr	r1, [pc, #36]	; (800754c <UARTEx_SetNbDataToProcess+0x94>)
 8007526:	5c8a      	ldrb	r2, [r1, r2]
 8007528:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800752c:	7b7a      	ldrb	r2, [r7, #13]
 800752e:	4908      	ldr	r1, [pc, #32]	; (8007550 <UARTEx_SetNbDataToProcess+0x98>)
 8007530:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007532:	fb93 f3f2 	sdiv	r3, r3, r2
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800753e:	bf00      	nop
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	080075f4 	.word	0x080075f4
 8007550:	080075fc 	.word	0x080075fc

08007554 <memset>:
 8007554:	4402      	add	r2, r0
 8007556:	4603      	mov	r3, r0
 8007558:	4293      	cmp	r3, r2
 800755a:	d100      	bne.n	800755e <memset+0xa>
 800755c:	4770      	bx	lr
 800755e:	f803 1b01 	strb.w	r1, [r3], #1
 8007562:	e7f9      	b.n	8007558 <memset+0x4>

08007564 <__libc_init_array>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	4d0d      	ldr	r5, [pc, #52]	; (800759c <__libc_init_array+0x38>)
 8007568:	4c0d      	ldr	r4, [pc, #52]	; (80075a0 <__libc_init_array+0x3c>)
 800756a:	1b64      	subs	r4, r4, r5
 800756c:	10a4      	asrs	r4, r4, #2
 800756e:	2600      	movs	r6, #0
 8007570:	42a6      	cmp	r6, r4
 8007572:	d109      	bne.n	8007588 <__libc_init_array+0x24>
 8007574:	4d0b      	ldr	r5, [pc, #44]	; (80075a4 <__libc_init_array+0x40>)
 8007576:	4c0c      	ldr	r4, [pc, #48]	; (80075a8 <__libc_init_array+0x44>)
 8007578:	f000 f818 	bl	80075ac <_init>
 800757c:	1b64      	subs	r4, r4, r5
 800757e:	10a4      	asrs	r4, r4, #2
 8007580:	2600      	movs	r6, #0
 8007582:	42a6      	cmp	r6, r4
 8007584:	d105      	bne.n	8007592 <__libc_init_array+0x2e>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	f855 3b04 	ldr.w	r3, [r5], #4
 800758c:	4798      	blx	r3
 800758e:	3601      	adds	r6, #1
 8007590:	e7ee      	b.n	8007570 <__libc_init_array+0xc>
 8007592:	f855 3b04 	ldr.w	r3, [r5], #4
 8007596:	4798      	blx	r3
 8007598:	3601      	adds	r6, #1
 800759a:	e7f2      	b.n	8007582 <__libc_init_array+0x1e>
 800759c:	0800760c 	.word	0x0800760c
 80075a0:	0800760c 	.word	0x0800760c
 80075a4:	0800760c 	.word	0x0800760c
 80075a8:	08007610 	.word	0x08007610

080075ac <_init>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	bf00      	nop
 80075b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b2:	bc08      	pop	{r3}
 80075b4:	469e      	mov	lr, r3
 80075b6:	4770      	bx	lr

080075b8 <_fini>:
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	bf00      	nop
 80075bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075be:	bc08      	pop	{r3}
 80075c0:	469e      	mov	lr, r3
 80075c2:	4770      	bx	lr
